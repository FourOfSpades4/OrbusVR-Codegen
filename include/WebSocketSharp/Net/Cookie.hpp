// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Forward declaring type: Cookie
  class Cookie;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Net::Cookie);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Net::Cookie*, "WebSocketSharp.Net", "Cookie");
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Net.Cookie
  // [TokenAttribute] Offset: FFFFFFFF
  class Cookie : public ::Il2CppObject {
    public:
    public:
    // private System.String _comment
    // Size: 0x8
    // Offset: 0x10
    ::StringW comment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Uri _commentUri
    // Size: 0x8
    // Offset: 0x18
    ::System::Uri* commentUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean _discard
    // Size: 0x1
    // Offset: 0x20
    bool discard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: discard and: domain
    char __padding2[0x7] = {};
    // private System.String _domain
    // Size: 0x8
    // Offset: 0x28
    ::StringW domain;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.DateTime _expires
    // Size: 0x8
    // Offset: 0x30
    ::System::DateTime expires;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean _httpOnly
    // Size: 0x1
    // Offset: 0x38
    bool httpOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: httpOnly and: name
    char __padding5[0x7] = {};
    // private System.String _name
    // Size: 0x8
    // Offset: 0x40
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _path
    // Size: 0x8
    // Offset: 0x48
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _port
    // Size: 0x8
    // Offset: 0x50
    ::StringW port;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32[] _ports
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<int> ports;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Boolean _secure
    // Size: 0x1
    // Offset: 0x60
    bool secure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: secure and: timestamp
    char __padding10[0x7] = {};
    // private System.DateTime _timestamp
    // Size: 0x8
    // Offset: 0x68
    ::System::DateTime timestamp;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.String _value
    // Size: 0x8
    // Offset: 0x70
    ::StringW value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x78
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC0A00
    // [DebuggerBrowsableAttribute] Offset: 0xAC0A00
    // private System.Boolean <ExactDomain>k__BackingField
    // Size: 0x1
    // Offset: 0x7C
    bool ExactDomain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Char[] _reservedCharsForName
    static ::ArrayW<::Il2CppChar> _get__reservedCharsForName();
    // Set static field: static private readonly System.Char[] _reservedCharsForName
    static void _set__reservedCharsForName(::ArrayW<::Il2CppChar> value);
    // Get static field: static private readonly System.Char[] _reservedCharsForValue
    static ::ArrayW<::Il2CppChar> _get__reservedCharsForValue();
    // Set static field: static private readonly System.Char[] _reservedCharsForValue
    static void _set__reservedCharsForValue(::ArrayW<::Il2CppChar> value);
    // Get instance field reference: private System.String _comment
    [[deprecated("Use field access instead!")]] ::StringW& dyn__comment();
    // Get instance field reference: private System.Uri _commentUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__commentUri();
    // Get instance field reference: private System.Boolean _discard
    [[deprecated("Use field access instead!")]] bool& dyn__discard();
    // Get instance field reference: private System.String _domain
    [[deprecated("Use field access instead!")]] ::StringW& dyn__domain();
    // Get instance field reference: private System.DateTime _expires
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__expires();
    // Get instance field reference: private System.Boolean _httpOnly
    [[deprecated("Use field access instead!")]] bool& dyn__httpOnly();
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.String _path
    [[deprecated("Use field access instead!")]] ::StringW& dyn__path();
    // Get instance field reference: private System.String _port
    [[deprecated("Use field access instead!")]] ::StringW& dyn__port();
    // Get instance field reference: private System.Int32[] _ports
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__ports();
    // Get instance field reference: private System.Boolean _secure
    [[deprecated("Use field access instead!")]] bool& dyn__secure();
    // Get instance field reference: private System.DateTime _timestamp
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__timestamp();
    // Get instance field reference: private System.String _value
    [[deprecated("Use field access instead!")]] ::StringW& dyn__value();
    // Get instance field reference: private System.Int32 _version
    [[deprecated("Use field access instead!")]] int& dyn__version();
    // Get instance field reference: private System.Boolean <ExactDomain>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ExactDomain$k__BackingField();
    // static private System.Void .cctor()
    // Offset: 0x1F1B8B4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1F1B9A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cookie* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::Cookie::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cookie*, creationType>()));
    }
    // public System.Void .ctor(System.String name, System.String value)
    // Offset: 0x1F1BAA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cookie* New_ctor(::StringW name, ::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::Cookie::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cookie*, creationType>(name, value)));
    }
    // System.Void set_ExactDomain(System.Boolean value)
    // Offset: 0x1F1BCAC
    void set_ExactDomain(bool value);
    // public System.Void set_Comment(System.String value)
    // Offset: 0x1F1BCB8
    void set_Comment(::StringW value);
    // public System.Void set_CommentUri(System.Uri value)
    // Offset: 0x1F1BD38
    void set_CommentUri(::System::Uri* value);
    // public System.Void set_Discard(System.Boolean value)
    // Offset: 0x1F1BD40
    void set_Discard(bool value);
    // public System.String get_Domain()
    // Offset: 0x1F1BD4C
    ::StringW get_Domain();
    // public System.Void set_Domain(System.String value)
    // Offset: 0x1F1BD54
    void set_Domain(::StringW value);
    // public System.Boolean get_Expired()
    // Offset: 0x1F1756C
    bool get_Expired();
    // public System.DateTime get_Expires()
    // Offset: 0x1F1BE1C
    ::System::DateTime get_Expires();
    // public System.Void set_Expires(System.DateTime value)
    // Offset: 0x1F1BE24
    void set_Expires(::System::DateTime value);
    // public System.Void set_HttpOnly(System.Boolean value)
    // Offset: 0x1F1BE2C
    void set_HttpOnly(bool value);
    // public System.String get_Name()
    // Offset: 0x1F1BE38
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x1F1BAEC
    void set_Name(::StringW value);
    // public System.String get_Path()
    // Offset: 0x1F1BF78
    ::StringW get_Path();
    // public System.Void set_Path(System.String value)
    // Offset: 0x1F1BF80
    void set_Path(::StringW value);
    // public System.Void set_Port(System.String value)
    // Offset: 0x1F1C000
    void set_Port(::StringW value);
    // public System.Void set_Secure(System.Boolean value)
    // Offset: 0x1F1C424
    void set_Secure(bool value);
    // public System.String get_Value()
    // Offset: 0x1F1C430
    ::StringW get_Value();
    // public System.Void set_Value(System.String value)
    // Offset: 0x1F1BBB0
    void set_Value(::StringW value);
    // public System.Int32 get_Version()
    // Offset: 0x1F1C548
    int get_Version();
    // public System.Void set_Version(System.Int32 value)
    // Offset: 0x1F1C550
    void set_Version(int value);
    // static private System.Boolean canSetName(System.String name, out System.String message)
    // Offset: 0x1F1BE40
    static bool canSetName(::StringW name, ByRef<::StringW> message);
    // static private System.Boolean canSetValue(System.String value, out System.String message)
    // Offset: 0x1F1C438
    static bool canSetValue(::StringW value, ByRef<::StringW> message);
    // static private System.Int32 hash(System.Int32 i, System.Int32 j, System.Int32 k, System.Int32 l, System.Int32 m)
    // Offset: 0x1F1C5F8
    static int hash(int i, int j, int k, int l, int m);
    // static private System.Boolean tryCreatePorts(System.String value, out System.Int32[] result, out System.String parseError)
    // Offset: 0x1F1C1B4
    static bool tryCreatePorts(::StringW value, ByRef<::ArrayW<int>> result, ByRef<::StringW> parseError);
    // System.String ToRequestString(System.Uri uri)
    // Offset: 0x1F1C62C
    ::StringW ToRequestString(::System::Uri* uri);
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0x1F1C9E4
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1F1CB14
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1F1CC84
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // WebSocketSharp.Net.Cookie
  #pragma pack(pop)
  static check_size<sizeof(Cookie), 124 + sizeof(bool)> __WebSocketSharp_Net_CookieSizeCheck;
  static_assert(sizeof(Cookie) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WebSocketSharp::Net::Cookie::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_ExactDomain
// Il2CppName: set_ExactDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(bool)>(&WebSocketSharp::Net::Cookie::set_ExactDomain)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_ExactDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Comment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_CommentUri
// Il2CppName: set_CommentUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::System::Uri*)>(&WebSocketSharp::Net::Cookie::set_CommentUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_CommentUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Discard
// Il2CppName: set_Discard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(bool)>(&WebSocketSharp::Net::Cookie::set_Discard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Discard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Domain
// Il2CppName: get_Domain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Domain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Domain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Domain
// Il2CppName: set_Domain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Domain)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Domain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Expired
// Il2CppName: get_Expired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Expired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Expired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Expires
// Il2CppName: get_Expires
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Expires)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Expires", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Expires
// Il2CppName: set_Expires
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::System::DateTime)>(&WebSocketSharp::Net::Cookie::set_Expires)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Expires", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_HttpOnly
// Il2CppName: set_HttpOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(bool)>(&WebSocketSharp::Net::Cookie::set_HttpOnly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_HttpOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Path
// Il2CppName: set_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Path)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Port
// Il2CppName: set_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Port)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Secure
// Il2CppName: set_Secure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(bool)>(&WebSocketSharp::Net::Cookie::set_Secure)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Secure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(::StringW)>(&WebSocketSharp::Net::Cookie::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::set_Version
// Il2CppName: set_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::Cookie::*)(int)>(&WebSocketSharp::Net::Cookie::set_Version)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "set_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::canSetName
// Il2CppName: canSetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>)>(&WebSocketSharp::Net::Cookie::canSetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "canSetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::canSetValue
// Il2CppName: canSetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>)>(&WebSocketSharp::Net::Cookie::canSetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "canSetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::hash
// Il2CppName: hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int)>(&WebSocketSharp::Net::Cookie::hash)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* l = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, j, k, l, m});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::tryCreatePorts
// Il2CppName: tryCreatePorts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::ArrayW<int>>, ByRef<::StringW>)>(&WebSocketSharp::Net::Cookie::tryCreatePorts)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* parseError = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "tryCreatePorts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, result, parseError});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::ToRequestString
// Il2CppName: ToRequestString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)(::System::Uri*)>(&WebSocketSharp::Net::Cookie::ToRequestString)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "ToRequestString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::Net::Cookie::*)(::Il2CppObject*)>(&WebSocketSharp::Net::Cookie::Equals)> {
  static const MethodInfo* get() {
    static auto* comparand = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparand});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::Cookie::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::Cookie::*)()>(&WebSocketSharp::Net::Cookie::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::Cookie*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
