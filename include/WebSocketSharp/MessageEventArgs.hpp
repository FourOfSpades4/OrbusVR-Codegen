// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: WebSocketSharp.Opcode
#include "WebSocketSharp/Opcode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: WebSocketFrame
  class WebSocketFrame;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: MessageEventArgs
  class MessageEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::MessageEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::MessageEventArgs*, "WebSocketSharp", "MessageEventArgs");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.MessageEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class MessageEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.String _data
    // Size: 0x8
    // Offset: 0x10
    ::StringW data;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _dataSet
    // Size: 0x1
    // Offset: 0x18
    bool dataSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private WebSocketSharp.Opcode _opcode
    // Size: 0x1
    // Offset: 0x19
    ::WebSocketSharp::Opcode opcode;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Opcode) == 0x1);
    // Padding between fields: opcode and: rawData
    char __padding2[0x6] = {};
    // private System.Byte[] _rawData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> rawData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private System.String _data
    [[deprecated("Use field access instead!")]] ::StringW& dyn__data();
    // Get instance field reference: private System.Boolean _dataSet
    [[deprecated("Use field access instead!")]] bool& dyn__dataSet();
    // Get instance field reference: private WebSocketSharp.Opcode _opcode
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Opcode& dyn__opcode();
    // Get instance field reference: private System.Byte[] _rawData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__rawData();
    // System.Void .ctor(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F191AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MessageEventArgs* New_ctor(::WebSocketSharp::WebSocketFrame* frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::MessageEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MessageEventArgs*, creationType>(frame)));
    }
    // System.Void .ctor(WebSocketSharp.Opcode opcode, System.Byte[] rawData)
    // Offset: 0x1F1927C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MessageEventArgs* New_ctor(::WebSocketSharp::Opcode opcode, ::ArrayW<uint8_t> rawData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::MessageEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MessageEventArgs*, creationType>(opcode, rawData)));
    }
    // public System.String get_Data()
    // Offset: 0x1F193A0
    ::StringW get_Data();
    // public System.Boolean get_IsText()
    // Offset: 0x1F19464
    bool get_IsText();
    // public System.Byte[] get_RawData()
    // Offset: 0x1F19474
    ::ArrayW<uint8_t> get_RawData();
  }; // WebSocketSharp.MessageEventArgs
  #pragma pack(pop)
  static check_size<sizeof(MessageEventArgs), 32 + sizeof(::ArrayW<uint8_t>)> __WebSocketSharp_MessageEventArgsSizeCheck;
  static_assert(sizeof(MessageEventArgs) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::MessageEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::MessageEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::MessageEventArgs::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::MessageEventArgs::*)()>(&WebSocketSharp::MessageEventArgs::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::MessageEventArgs*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::MessageEventArgs::get_IsText
// Il2CppName: get_IsText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::MessageEventArgs::*)()>(&WebSocketSharp::MessageEventArgs::get_IsText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::MessageEventArgs*), "get_IsText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::MessageEventArgs::get_RawData
// Il2CppName: get_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (WebSocketSharp::MessageEventArgs::*)()>(&WebSocketSharp::MessageEventArgs::get_RawData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::MessageEventArgs*), "get_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
