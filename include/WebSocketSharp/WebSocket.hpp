// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: WebSocketSharp.CompressionMethod
#include "WebSocketSharp/CompressionMethod.hpp"
// Including type: WebSocketSharp.Opcode
#include "WebSocketSharp/Opcode.hpp"
// Including type: WebSocketSharp.WebSocketState
#include "WebSocketSharp/WebSocketState.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: Logger
  class Logger;
  // Forward declaring type: MessageEventArgs
  class MessageEventArgs;
  // Forward declaring type: CloseEventArgs
  class CloseEventArgs;
  // Forward declaring type: ErrorEventArgs
  class ErrorEventArgs;
  // Forward declaring type: HttpResponse
  class HttpResponse;
  // Forward declaring type: WebSocketFrame
  class WebSocketFrame;
  // Forward declaring type: HttpRequest
  class HttpRequest;
  // Forward declaring type: CloseStatusCode
  struct CloseStatusCode;
  // Forward declaring type: Fin
  struct Fin;
}
// Forward declaring namespace: WebSocketSharp::Net
namespace WebSocketSharp::Net {
  // Forward declaring type: AuthenticationChallenge
  class AuthenticationChallenge;
  // Forward declaring type: CookieCollection
  class CookieCollection;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: ClientSslConfiguration
  class ClientSslConfiguration;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Forward declaring namespace: WebSocketSharp::Net::WebSockets
namespace WebSocketSharp::Net::WebSockets {
  // Forward declaring type: WebSocketContext
  class WebSocketContext;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MemoryStream
  class MemoryStream;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: TcpClient
  class TcpClient;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RandomNumberGenerator
  class RandomNumberGenerator;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: WebSocket
  class WebSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::WebSocket);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::WebSocket*, "WebSocketSharp", "WebSocket");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x160
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.WebSocket
  // [TokenAttribute] Offset: FFFFFFFF
  class WebSocket : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::WebSocketSharp::WebSocket::$sendAsync$c__AnonStorey3
    class $sendAsync$c__AnonStorey3;
    // Nested type: ::WebSocketSharp::WebSocket::$startReceiving$c__AnonStorey4
    class $startReceiving$c__AnonStorey4;
    // Nested type: ::WebSocketSharp::WebSocket::$validateSecWebSocketExtensionsServerHeader$c__AnonStorey5
    class $validateSecWebSocketExtensionsServerHeader$c__AnonStorey5;
    // Nested type: ::WebSocketSharp::WebSocket::$validateSecWebSocketProtocolServerHeader$c__AnonStorey6
    class $validateSecWebSocketProtocolServerHeader$c__AnonStorey6;
    public:
    // private WebSocketSharp.Net.AuthenticationChallenge _authChallenge
    // Size: 0x8
    // Offset: 0x10
    ::WebSocketSharp::Net::AuthenticationChallenge* authChallenge;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::AuthenticationChallenge*) == 0x8);
    // private System.String _base64Key
    // Size: 0x8
    // Offset: 0x18
    ::StringW base64Key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _client
    // Size: 0x1
    // Offset: 0x20
    bool client;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: client and: closeContext
    char __padding2[0x7] = {};
    // private System.Action _closeContext
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* closeContext;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private WebSocketSharp.CompressionMethod _compression
    // Size: 0x1
    // Offset: 0x30
    ::WebSocketSharp::CompressionMethod compression;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::CompressionMethod) == 0x1);
    // Padding between fields: compression and: context
    char __padding4[0x7] = {};
    // private WebSocketSharp.Net.WebSockets.WebSocketContext _context
    // Size: 0x8
    // Offset: 0x38
    ::WebSocketSharp::Net::WebSockets::WebSocketContext* context;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::WebSockets::WebSocketContext*) == 0x8);
    // private WebSocketSharp.Net.CookieCollection _cookies
    // Size: 0x8
    // Offset: 0x40
    ::WebSocketSharp::Net::CookieCollection* cookies;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::CookieCollection*) == 0x8);
    // private WebSocketSharp.Net.NetworkCredential _credentials
    // Size: 0x8
    // Offset: 0x48
    ::WebSocketSharp::Net::NetworkCredential* credentials;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::NetworkCredential*) == 0x8);
    // private System.Boolean _emitOnPing
    // Size: 0x1
    // Offset: 0x50
    bool emitOnPing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _enableRedirection
    // Size: 0x1
    // Offset: 0x51
    bool enableRedirection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableRedirection and: exitReceiving
    char __padding9[0x6] = {};
    // private System.Threading.AutoResetEvent _exitReceiving
    // Size: 0x8
    // Offset: 0x58
    ::System::Threading::AutoResetEvent* exitReceiving;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private System.String _extensions
    // Size: 0x8
    // Offset: 0x60
    ::StringW extensions;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _extensionsRequested
    // Size: 0x1
    // Offset: 0x68
    bool extensionsRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: extensionsRequested and: forConn
    char __padding12[0x7] = {};
    // private System.Object _forConn
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppObject* forConn;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _forMessageEventQueue
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppObject* forMessageEventQueue;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _forSend
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppObject* forSend;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.IO.MemoryStream _fragmentsBuffer
    // Size: 0x8
    // Offset: 0x88
    ::System::IO::MemoryStream* fragmentsBuffer;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    // private System.Boolean _fragmentsCompressed
    // Size: 0x1
    // Offset: 0x90
    bool fragmentsCompressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private WebSocketSharp.Opcode _fragmentsOpcode
    // Size: 0x1
    // Offset: 0x91
    ::WebSocketSharp::Opcode fragmentsOpcode;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Opcode) == 0x1);
    // Padding between fields: fragmentsOpcode and: handshakeRequestChecker
    char __padding18[0x6] = {};
    // private System.Func`2<WebSocketSharp.Net.WebSockets.WebSocketContext,System.String> _handshakeRequestChecker
    // Size: 0x8
    // Offset: 0x98
    ::System::Func_2<::WebSocketSharp::Net::WebSockets::WebSocketContext*, ::StringW>* handshakeRequestChecker;
    // Field size check
    static_assert(sizeof(::System::Func_2<::WebSocketSharp::Net::WebSockets::WebSocketContext*, ::StringW>*) == 0x8);
    // private System.Boolean _ignoreExtensions
    // Size: 0x1
    // Offset: 0xA0
    bool ignoreExtensions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _inContinuation
    // Size: 0x1
    // Offset: 0xA1
    bool inContinuation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _inMessage
    // Size: 0x1
    // Offset: 0xA2
    bool inMessage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inMessage and: logger
    char __padding22[0x5] = {};
    // private WebSocketSharp.Logger _logger
    // Size: 0x8
    // Offset: 0xA8
    ::WebSocketSharp::Logger* logger;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Logger*) == 0x8);
    // private System.Action`1<WebSocketSharp.MessageEventArgs> _message
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action_1<::WebSocketSharp::MessageEventArgs*>* message_;
    // Field size check
    static_assert(sizeof(::System::Action_1<::WebSocketSharp::MessageEventArgs*>*) == 0x8);
    // private System.Collections.Generic.Queue`1<WebSocketSharp.MessageEventArgs> _messageEventQueue
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Queue_1<::WebSocketSharp::MessageEventArgs*>* messageEventQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::WebSocketSharp::MessageEventArgs*>*) == 0x8);
    // private System.UInt32 _nonceCount
    // Size: 0x4
    // Offset: 0xC0
    uint nonceCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: nonceCount and: origin
    char __padding26[0x4] = {};
    // private System.String _origin
    // Size: 0x8
    // Offset: 0xC8
    ::StringW origin;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _preAuth
    // Size: 0x1
    // Offset: 0xD0
    bool preAuth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preAuth and: protocol
    char __padding28[0x7] = {};
    // private System.String _protocol
    // Size: 0x8
    // Offset: 0xD8
    ::StringW protocol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String[] _protocols
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<::StringW> protocols;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Boolean _protocolsRequested
    // Size: 0x1
    // Offset: 0xE8
    bool protocolsRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: protocolsRequested and: proxyCredentials
    char __padding31[0x7] = {};
    // private WebSocketSharp.Net.NetworkCredential _proxyCredentials
    // Size: 0x8
    // Offset: 0xF0
    ::WebSocketSharp::Net::NetworkCredential* proxyCredentials;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::NetworkCredential*) == 0x8);
    // private System.Uri _proxyUri
    // Size: 0x8
    // Offset: 0xF8
    ::System::Uri* proxyUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private WebSocketSharp.WebSocketState _readyState
    // Size: 0x2
    // Offset: 0x100
    ::WebSocketSharp::WebSocketState readyState;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::WebSocketState) == 0x2);
    // Padding between fields: readyState and: receivePong
    char __padding34[0x6] = {};
    // private System.Threading.AutoResetEvent _receivePong
    // Size: 0x8
    // Offset: 0x108
    ::System::Threading::AutoResetEvent* receivePong;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private System.Boolean _secure
    // Size: 0x1
    // Offset: 0x110
    bool secure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: secure and: sslConfig
    char __padding36[0x7] = {};
    // private WebSocketSharp.Net.ClientSslConfiguration _sslConfig
    // Size: 0x8
    // Offset: 0x118
    ::WebSocketSharp::Net::ClientSslConfiguration* sslConfig;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::ClientSslConfiguration*) == 0x8);
    // private System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0x120
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Net.Sockets.TcpClient _tcpClient
    // Size: 0x8
    // Offset: 0x128
    ::System::Net::Sockets::TcpClient* tcpClient;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::TcpClient*) == 0x8);
    // private System.Uri _uri
    // Size: 0x8
    // Offset: 0x130
    ::System::Uri* uri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.TimeSpan _waitTime
    // Size: 0x8
    // Offset: 0x138
    ::System::TimeSpan waitTime;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private System.EventHandler`1<WebSocketSharp.CloseEventArgs> OnClose
    // Size: 0x8
    // Offset: 0x140
    ::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>* OnClose;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>*) == 0x8);
    // private System.EventHandler`1<WebSocketSharp.ErrorEventArgs> OnError
    // Size: 0x8
    // Offset: 0x148
    ::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>* OnError;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>*) == 0x8);
    // private System.EventHandler`1<WebSocketSharp.MessageEventArgs> OnMessage
    // Size: 0x8
    // Offset: 0x150
    ::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>* OnMessage;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>*) == 0x8);
    // private System.EventHandler OnOpen
    // Size: 0x8
    // Offset: 0x158
    ::System::EventHandler* OnOpen;
    // Field size check
    static_assert(sizeof(::System::EventHandler*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // static field const value: static private System.String _guid
    static constexpr const char* _guid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    // Get static field: static private System.String _guid
    static ::StringW _get__guid();
    // Set static field: static private System.String _guid
    static void _set__guid(::StringW value);
    // static field const value: static private System.String _version
    static constexpr const char* _version = "13";
    // Get static field: static private System.String _version
    static ::StringW _get__version();
    // Set static field: static private System.String _version
    static void _set__version(::StringW value);
    // Get static field: static readonly System.Byte[] EmptyBytes
    static ::ArrayW<uint8_t> _get_EmptyBytes();
    // Set static field: static readonly System.Byte[] EmptyBytes
    static void _set_EmptyBytes(::ArrayW<uint8_t> value);
    // Get static field: static readonly System.Int32 FragmentLength
    static int _get_FragmentLength();
    // Set static field: static readonly System.Int32 FragmentLength
    static void _set_FragmentLength(int value);
    // Get static field: static readonly System.Security.Cryptography.RandomNumberGenerator RandomNumber
    static ::System::Security::Cryptography::RandomNumberGenerator* _get_RandomNumber();
    // Set static field: static readonly System.Security.Cryptography.RandomNumberGenerator RandomNumber
    static void _set_RandomNumber(::System::Security::Cryptography::RandomNumberGenerator* value);
    // Get instance field reference: private WebSocketSharp.Net.AuthenticationChallenge _authChallenge
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::AuthenticationChallenge*& dyn__authChallenge();
    // Get instance field reference: private System.String _base64Key
    [[deprecated("Use field access instead!")]] ::StringW& dyn__base64Key();
    // Get instance field reference: private System.Boolean _client
    [[deprecated("Use field access instead!")]] bool& dyn__client();
    // Get instance field reference: private System.Action _closeContext
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__closeContext();
    // Get instance field reference: private WebSocketSharp.CompressionMethod _compression
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::CompressionMethod& dyn__compression();
    // Get instance field reference: private WebSocketSharp.Net.WebSockets.WebSocketContext _context
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::WebSockets::WebSocketContext*& dyn__context();
    // Get instance field reference: private WebSocketSharp.Net.CookieCollection _cookies
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::CookieCollection*& dyn__cookies();
    // Get instance field reference: private WebSocketSharp.Net.NetworkCredential _credentials
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::NetworkCredential*& dyn__credentials();
    // Get instance field reference: private System.Boolean _emitOnPing
    [[deprecated("Use field access instead!")]] bool& dyn__emitOnPing();
    // Get instance field reference: private System.Boolean _enableRedirection
    [[deprecated("Use field access instead!")]] bool& dyn__enableRedirection();
    // Get instance field reference: private System.Threading.AutoResetEvent _exitReceiving
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn__exitReceiving();
    // Get instance field reference: private System.String _extensions
    [[deprecated("Use field access instead!")]] ::StringW& dyn__extensions();
    // Get instance field reference: private System.Boolean _extensionsRequested
    [[deprecated("Use field access instead!")]] bool& dyn__extensionsRequested();
    // Get instance field reference: private System.Object _forConn
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__forConn();
    // Get instance field reference: private System.Object _forMessageEventQueue
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__forMessageEventQueue();
    // Get instance field reference: private System.Object _forSend
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__forSend();
    // Get instance field reference: private System.IO.MemoryStream _fragmentsBuffer
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn__fragmentsBuffer();
    // Get instance field reference: private System.Boolean _fragmentsCompressed
    [[deprecated("Use field access instead!")]] bool& dyn__fragmentsCompressed();
    // Get instance field reference: private WebSocketSharp.Opcode _fragmentsOpcode
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Opcode& dyn__fragmentsOpcode();
    // Get instance field reference: private System.Func`2<WebSocketSharp.Net.WebSockets.WebSocketContext,System.String> _handshakeRequestChecker
    [[deprecated("Use field access instead!")]] ::System::Func_2<::WebSocketSharp::Net::WebSockets::WebSocketContext*, ::StringW>*& dyn__handshakeRequestChecker();
    // Get instance field reference: private System.Boolean _ignoreExtensions
    [[deprecated("Use field access instead!")]] bool& dyn__ignoreExtensions();
    // Get instance field reference: private System.Boolean _inContinuation
    [[deprecated("Use field access instead!")]] bool& dyn__inContinuation();
    // Get instance field reference: private System.Boolean _inMessage
    [[deprecated("Use field access instead!")]] bool& dyn__inMessage();
    // Get instance field reference: private WebSocketSharp.Logger _logger
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Logger*& dyn__logger();
    // Get instance field reference: private System.Action`1<WebSocketSharp.MessageEventArgs> _message
    [[deprecated("Use field access instead!")]] ::System::Action_1<::WebSocketSharp::MessageEventArgs*>*& dyn__message();
    // Get instance field reference: private System.Collections.Generic.Queue`1<WebSocketSharp.MessageEventArgs> _messageEventQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::WebSocketSharp::MessageEventArgs*>*& dyn__messageEventQueue();
    // Get instance field reference: private System.UInt32 _nonceCount
    [[deprecated("Use field access instead!")]] uint& dyn__nonceCount();
    // Get instance field reference: private System.String _origin
    [[deprecated("Use field access instead!")]] ::StringW& dyn__origin();
    // Get instance field reference: private System.Boolean _preAuth
    [[deprecated("Use field access instead!")]] bool& dyn__preAuth();
    // Get instance field reference: private System.String _protocol
    [[deprecated("Use field access instead!")]] ::StringW& dyn__protocol();
    // Get instance field reference: private System.String[] _protocols
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__protocols();
    // Get instance field reference: private System.Boolean _protocolsRequested
    [[deprecated("Use field access instead!")]] bool& dyn__protocolsRequested();
    // Get instance field reference: private WebSocketSharp.Net.NetworkCredential _proxyCredentials
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::NetworkCredential*& dyn__proxyCredentials();
    // Get instance field reference: private System.Uri _proxyUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__proxyUri();
    // Get instance field reference: private WebSocketSharp.WebSocketState _readyState
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::WebSocketState& dyn__readyState();
    // Get instance field reference: private System.Threading.AutoResetEvent _receivePong
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn__receivePong();
    // Get instance field reference: private System.Boolean _secure
    [[deprecated("Use field access instead!")]] bool& dyn__secure();
    // Get instance field reference: private WebSocketSharp.Net.ClientSslConfiguration _sslConfig
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::ClientSslConfiguration*& dyn__sslConfig();
    // Get instance field reference: private System.IO.Stream _stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private System.Net.Sockets.TcpClient _tcpClient
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::TcpClient*& dyn__tcpClient();
    // Get instance field reference: private System.Uri _uri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn__uri();
    // Get instance field reference: private System.TimeSpan _waitTime
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn__waitTime();
    // Get instance field reference: private System.EventHandler`1<WebSocketSharp.CloseEventArgs> OnClose
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>*& dyn_OnClose();
    // Get instance field reference: private System.EventHandler`1<WebSocketSharp.ErrorEventArgs> OnError
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>*& dyn_OnError();
    // Get instance field reference: private System.EventHandler`1<WebSocketSharp.MessageEventArgs> OnMessage
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>*& dyn_OnMessage();
    // Get instance field reference: private System.EventHandler OnOpen
    [[deprecated("Use field access instead!")]] ::System::EventHandler*& dyn_OnOpen();
    // static private System.Void .cctor()
    // Offset: 0x1F22488
    static void _cctor();
    // public System.Void .ctor(System.String url, params System.String[] protocols)
    // Offset: 0x1F22524
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebSocket* New_ctor(::StringW url, ::ArrayW<::StringW> protocols) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::WebSocket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebSocket*, creationType>(url, protocols)));
    }
    // System.Boolean get_HasMessage()
    // Offset: 0x1F22A18
    bool get_HasMessage();
    // public WebSocketSharp.Net.ClientSslConfiguration get_SslConfiguration()
    // Offset: 0x1F22AE4
    ::WebSocketSharp::Net::ClientSslConfiguration* get_SslConfiguration();
    // public System.Void add_OnClose(System.EventHandler`1<WebSocketSharp.CloseEventArgs> value)
    // Offset: 0x1F22B9C
    void add_OnClose(::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>* value);
    // public System.Void remove_OnClose(System.EventHandler`1<WebSocketSharp.CloseEventArgs> value)
    // Offset: 0x1F22C8C
    void remove_OnClose(::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>* value);
    // public System.Void add_OnError(System.EventHandler`1<WebSocketSharp.ErrorEventArgs> value)
    // Offset: 0x1F22D7C
    void add_OnError(::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>* value);
    // public System.Void remove_OnError(System.EventHandler`1<WebSocketSharp.ErrorEventArgs> value)
    // Offset: 0x1F22E6C
    void remove_OnError(::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>* value);
    // public System.Void add_OnMessage(System.EventHandler`1<WebSocketSharp.MessageEventArgs> value)
    // Offset: 0x1F22F5C
    void add_OnMessage(::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>* value);
    // public System.Void remove_OnMessage(System.EventHandler`1<WebSocketSharp.MessageEventArgs> value)
    // Offset: 0x1F2304C
    void remove_OnMessage(::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>* value);
    // public System.Void add_OnOpen(System.EventHandler value)
    // Offset: 0x1F2313C
    void add_OnOpen(::System::EventHandler* value);
    // public System.Void remove_OnOpen(System.EventHandler value)
    // Offset: 0x1F2322C
    void remove_OnOpen(::System::EventHandler* value);
    // private System.Boolean checkHandshakeResponse(WebSocketSharp.HttpResponse response, out System.String message)
    // Offset: 0x1F2331C
    bool checkHandshakeResponse(::WebSocketSharp::HttpResponse* response, ByRef<::StringW> message);
    // private System.Boolean checkIfAvailable(System.Boolean connecting, System.Boolean open, System.Boolean closing, System.Boolean closed, out System.String message)
    // Offset: 0x1F23D70
    bool checkIfAvailable(bool connecting, bool open, bool closing, bool closed, ByRef<::StringW> message);
    // private System.Boolean checkIfAvailable(System.Boolean client, System.Boolean server, System.Boolean connecting, System.Boolean open, System.Boolean closing, System.Boolean closed, out System.String message)
    // Offset: 0x1F23E6C
    bool checkIfAvailable(bool client, bool server, bool connecting, bool open, bool closing, bool closed, ByRef<::StringW> message);
    // private System.Boolean checkReceivedFrame(WebSocketSharp.WebSocketFrame frame, out System.String message)
    // Offset: 0x1F23F58
    bool checkReceivedFrame(::WebSocketSharp::WebSocketFrame* frame, ByRef<::StringW> message);
    // private System.Void close(WebSocketSharp.CloseEventArgs e, System.Boolean send, System.Boolean receive, System.Boolean received)
    // Offset: 0x1F240B8
    void close(::WebSocketSharp::CloseEventArgs* e, bool send, bool receive, bool received);
    // private System.Boolean closeHandshake(System.Byte[] frameAsBytes, System.Boolean receive, System.Boolean received)
    // Offset: 0x1F247D4
    bool closeHandshake(::ArrayW<uint8_t> frameAsBytes, bool receive, bool received);
    // private System.Boolean connect()
    // Offset: 0x1F24C34
    bool connect();
    // private System.String createExtensions()
    // Offset: 0x1F25070
    ::StringW createExtensions();
    // private WebSocketSharp.HttpRequest createHandshakeRequest()
    // Offset: 0x1F25278
    ::WebSocketSharp::HttpRequest* createHandshakeRequest();
    // private System.Boolean doHandshake()
    // Offset: 0x1F24E60
    bool doHandshake();
    // private System.Void enqueueToMessageEventQueue(WebSocketSharp.MessageEventArgs e)
    // Offset: 0x1F25E3C
    void enqueueToMessageEventQueue(::WebSocketSharp::MessageEventArgs* e);
    // private System.Void error(System.String message, System.Exception exception)
    // Offset: 0x1F24978
    void error(::StringW message, ::System::Exception* exception);
    // private System.Void fatal(System.String message, System.Exception exception)
    // Offset: 0x1F24FD0
    void fatal(::StringW message, ::System::Exception* exception);
    // private System.Void fatal(System.String message, WebSocketSharp.CloseStatusCode code)
    // Offset: 0x1F25D0C
    void fatal(::StringW message, ::WebSocketSharp::CloseStatusCode code);
    // private System.Void init()
    // Offset: 0x1F228CC
    void init();
    // private System.Void message()
    // Offset: 0x1F25F24
    void message();
    // private System.Void messagec(WebSocketSharp.MessageEventArgs e)
    // Offset: 0x1F2608C
    void messagec(::WebSocketSharp::MessageEventArgs* e);
    // private System.Void open()
    // Offset: 0x1F26338
    void open();
    // private System.Boolean processCloseFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F26760
    bool processCloseFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Void processCookies(WebSocketSharp.Net.CookieCollection cookies)
    // Offset: 0x1F25DE0
    void processCookies(::WebSocketSharp::Net::CookieCollection* cookies);
    // private System.Boolean processDataFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F2680C
    bool processDataFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Boolean processFragmentFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F26928
    bool processFragmentFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Boolean processPingFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F26BBC
    bool processPingFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Boolean processPongFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F26DF4
    bool processPongFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Boolean processReceivedFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F26E7C
    bool processReceivedFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Void processSecWebSocketExtensionsServerHeader(System.String value)
    // Offset: 0x1F25DCC
    void processSecWebSocketExtensionsServerHeader(::StringW value);
    // private System.Boolean processUnsupportedFrame(WebSocketSharp.WebSocketFrame frame)
    // Offset: 0x1F270C4
    bool processUnsupportedFrame(::WebSocketSharp::WebSocketFrame* frame);
    // private System.Void releaseClientResources()
    // Offset: 0x1F27220
    void releaseClientResources();
    // private System.Void releaseCommonResources()
    // Offset: 0x1F27264
    void releaseCommonResources();
    // private System.Void releaseResources()
    // Offset: 0x1F24928
    void releaseResources();
    // private System.Void releaseServerResources()
    // Offset: 0x1F272C8
    void releaseServerResources();
    // private System.Boolean send(System.Byte[] frameAsBytes)
    // Offset: 0x1F26CF0
    bool send(::ArrayW<uint8_t> frameAsBytes);
    // private System.Boolean send(WebSocketSharp.Opcode opcode, System.IO.Stream stream)
    // Offset: 0x1F27300
    bool send(::WebSocketSharp::Opcode opcode, ::System::IO::Stream* stream);
    // private System.Boolean send(WebSocketSharp.Opcode opcode, System.IO.Stream stream, System.Boolean compressed)
    // Offset: 0x1F27624
    bool send(::WebSocketSharp::Opcode opcode, ::System::IO::Stream* stream, bool compressed);
    // private System.Boolean send(WebSocketSharp.Fin fin, WebSocketSharp.Opcode opcode, System.Byte[] data, System.Boolean compressed)
    // Offset: 0x1F279B8
    bool send(::WebSocketSharp::Fin fin, ::WebSocketSharp::Opcode opcode, ::ArrayW<uint8_t> data, bool compressed);
    // private System.Void sendAsync(WebSocketSharp.Opcode opcode, System.IO.Stream stream, System.Action`1<System.Boolean> completed)
    // Offset: 0x1F27BCC
    void sendAsync(::WebSocketSharp::Opcode opcode, ::System::IO::Stream* stream, ::System::Action_1<bool>* completed);
    // private System.Boolean sendBytes(System.Byte[] bytes)
    // Offset: 0x1F24AF4
    bool sendBytes(::ArrayW<uint8_t> bytes);
    // private WebSocketSharp.HttpResponse sendHandshakeRequest()
    // Offset: 0x1F258D4
    ::WebSocketSharp::HttpResponse* sendHandshakeRequest();
    // private WebSocketSharp.HttpResponse sendHttpRequest(WebSocketSharp.HttpRequest request, System.Int32 millisecondsTimeout)
    // Offset: 0x1F27D2C
    ::WebSocketSharp::HttpResponse* sendHttpRequest(::WebSocketSharp::HttpRequest* request, int millisecondsTimeout);
    // private System.Void sendProxyConnectRequest()
    // Offset: 0x1F27E54
    void sendProxyConnectRequest();
    // private System.Void setClientStream()
    // Offset: 0x1F25558
    void setClientStream();
    // private System.Void startReceiving()
    // Offset: 0x1F26614
    void startReceiving();
    // private System.Boolean validateSecWebSocketAcceptHeader(System.String value)
    // Offset: 0x1F234F8
    bool validateSecWebSocketAcceptHeader(::StringW value);
    // private System.Boolean validateSecWebSocketExtensionsServerHeader(System.String value)
    // Offset: 0x1F236F0
    bool validateSecWebSocketExtensionsServerHeader(::StringW value);
    // private System.Boolean validateSecWebSocketProtocolServerHeader(System.String value)
    // Offset: 0x1F23594
    bool validateSecWebSocketProtocolServerHeader(::StringW value);
    // private System.Boolean validateSecWebSocketVersionServerHeader(System.String value)
    // Offset: 0x1F23D08
    bool validateSecWebSocketVersionServerHeader(::StringW value);
    // static System.String CheckSendParameter(System.Byte[] data)
    // Offset: 0x1F28314
    static ::StringW CheckSendParameter(::ArrayW<uint8_t> data);
    // static System.String CheckSendParameter(System.String data)
    // Offset: 0x1F28368
    static ::StringW CheckSendParameter(::StringW data);
    // static System.String CreateBase64Key()
    // Offset: 0x1F22800
    static ::StringW CreateBase64Key();
    // static System.String CreateResponseKey(System.String base64Key)
    // Offset: 0x1F281C4
    static ::StringW CreateResponseKey(::StringW base64Key);
    // public System.Void Close()
    // Offset: 0x1F283BC
    void Close();
    // public System.Void Connect()
    // Offset: 0x1F28498
    void Connect();
    // public System.Void Send(System.String data)
    // Offset: 0x1F28568
    void Send(::StringW data);
    // public System.Void SendAsync(System.Byte[] data, System.Action`1<System.Boolean> completed)
    // Offset: 0x1F286EC
    void SendAsync(::ArrayW<uint8_t> data, ::System::Action_1<bool>* completed);
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x1F28850
    void System_IDisposable_Dispose();
    // private System.Void <open>m__0(System.IAsyncResult ar)
    // Offset: 0x1F288C0
    void $open$m__0(::System::IAsyncResult* ar);
  }; // WebSocketSharp.WebSocket
  #pragma pack(pop)
  static check_size<sizeof(WebSocket), 344 + sizeof(::System::EventHandler*)> __WebSocketSharp_WebSocketSizeCheck;
  static_assert(sizeof(WebSocket) == 0x160);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WebSocketSharp::WebSocket::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::get_HasMessage
// Il2CppName: get_HasMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::get_HasMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "get_HasMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::get_SslConfiguration
// Il2CppName: get_SslConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::Net::ClientSslConfiguration* (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::get_SslConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "get_SslConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::add_OnClose
// Il2CppName: add_OnClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>*)>(&WebSocketSharp::WebSocket::add_OnClose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "add_OnClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::remove_OnClose
// Il2CppName: remove_OnClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::CloseEventArgs*>*)>(&WebSocketSharp::WebSocket::remove_OnClose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "remove_OnClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::add_OnError
// Il2CppName: add_OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>*)>(&WebSocketSharp::WebSocket::add_OnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "ErrorEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "add_OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::remove_OnError
// Il2CppName: remove_OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::ErrorEventArgs*>*)>(&WebSocketSharp::WebSocket::remove_OnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "ErrorEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "remove_OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::add_OnMessage
// Il2CppName: add_OnMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>*)>(&WebSocketSharp::WebSocket::add_OnMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "MessageEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "add_OnMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::remove_OnMessage
// Il2CppName: remove_OnMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler_1<::WebSocketSharp::MessageEventArgs*>*)>(&WebSocketSharp::WebSocket::remove_OnMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("WebSocketSharp", "MessageEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "remove_OnMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::add_OnOpen
// Il2CppName: add_OnOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler*)>(&WebSocketSharp::WebSocket::add_OnOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "add_OnOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::remove_OnOpen
// Il2CppName: remove_OnOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::EventHandler*)>(&WebSocketSharp::WebSocket::remove_OnOpen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "remove_OnOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::checkHandshakeResponse
// Il2CppName: checkHandshakeResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::HttpResponse*, ByRef<::StringW>)>(&WebSocketSharp::WebSocket::checkHandshakeResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "HttpResponse")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "checkHandshakeResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::checkIfAvailable
// Il2CppName: checkIfAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(bool, bool, bool, bool, ByRef<::StringW>)>(&WebSocketSharp::WebSocket::checkIfAvailable)> {
  static const MethodInfo* get() {
    static auto* connecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* open = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "checkIfAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connecting, open, closing, closed, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::checkIfAvailable
// Il2CppName: checkIfAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(bool, bool, bool, bool, bool, bool, ByRef<::StringW>)>(&WebSocketSharp::WebSocket::checkIfAvailable)> {
  static const MethodInfo* get() {
    static auto* client = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* connecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* open = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "checkIfAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{client, server, connecting, open, closing, closed, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::checkReceivedFrame
// Il2CppName: checkReceivedFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*, ByRef<::StringW>)>(&WebSocketSharp::WebSocket::checkReceivedFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "checkReceivedFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::close
// Il2CppName: close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::WebSocketSharp::CloseEventArgs*, bool, bool, bool)>(&WebSocketSharp::WebSocket::close)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseEventArgs")->byval_arg;
    static auto* send = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* receive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* received = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, send, receive, received});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::closeHandshake
// Il2CppName: closeHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::ArrayW<uint8_t>, bool, bool)>(&WebSocketSharp::WebSocket::closeHandshake)> {
  static const MethodInfo* get() {
    static auto* frameAsBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* receive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* received = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "closeHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameAsBytes, receive, received});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::connect
// Il2CppName: connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::createExtensions
// Il2CppName: createExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::createExtensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "createExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::createHandshakeRequest
// Il2CppName: createHandshakeRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpRequest* (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::createHandshakeRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "createHandshakeRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::doHandshake
// Il2CppName: doHandshake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::doHandshake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "doHandshake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::enqueueToMessageEventQueue
// Il2CppName: enqueueToMessageEventQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::WebSocketSharp::MessageEventArgs*)>(&WebSocketSharp::WebSocket::enqueueToMessageEventQueue)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "enqueueToMessageEventQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::error
// Il2CppName: error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::StringW, ::System::Exception*)>(&WebSocketSharp::WebSocket::error)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, exception});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::fatal
// Il2CppName: fatal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::StringW, ::System::Exception*)>(&WebSocketSharp::WebSocket::fatal)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "fatal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, exception});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::fatal
// Il2CppName: fatal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::StringW, ::WebSocketSharp::CloseStatusCode)>(&WebSocketSharp::WebSocket::fatal)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "fatal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, code});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::message
// Il2CppName: message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::messagec
// Il2CppName: messagec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::WebSocketSharp::MessageEventArgs*)>(&WebSocketSharp::WebSocket::messagec)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "messagec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::open
// Il2CppName: open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processCloseFrame
// Il2CppName: processCloseFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processCloseFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processCloseFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processCookies
// Il2CppName: processCookies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::WebSocketSharp::Net::CookieCollection*)>(&WebSocketSharp::WebSocket::processCookies)> {
  static const MethodInfo* get() {
    static auto* cookies = &::il2cpp_utils::GetClassFromName("WebSocketSharp.Net", "CookieCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processCookies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookies});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processDataFrame
// Il2CppName: processDataFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processDataFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processDataFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processFragmentFrame
// Il2CppName: processFragmentFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processFragmentFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processFragmentFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processPingFrame
// Il2CppName: processPingFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processPingFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processPingFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processPongFrame
// Il2CppName: processPongFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processPongFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processPongFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processReceivedFrame
// Il2CppName: processReceivedFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processReceivedFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processReceivedFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processSecWebSocketExtensionsServerHeader
// Il2CppName: processSecWebSocketExtensionsServerHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::processSecWebSocketExtensionsServerHeader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processSecWebSocketExtensionsServerHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::processUnsupportedFrame
// Il2CppName: processUnsupportedFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::WebSocketFrame*)>(&WebSocketSharp::WebSocket::processUnsupportedFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "processUnsupportedFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::releaseClientResources
// Il2CppName: releaseClientResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::releaseClientResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "releaseClientResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::releaseCommonResources
// Il2CppName: releaseCommonResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::releaseCommonResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "releaseCommonResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::releaseResources
// Il2CppName: releaseResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::releaseResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "releaseResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::releaseServerResources
// Il2CppName: releaseServerResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::releaseServerResources)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "releaseServerResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::send
// Il2CppName: send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::ArrayW<uint8_t>)>(&WebSocketSharp::WebSocket::send)> {
  static const MethodInfo* get() {
    static auto* frameAsBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameAsBytes});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::send
// Il2CppName: send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::Opcode, ::System::IO::Stream*)>(&WebSocketSharp::WebSocket::send)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Opcode")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, stream});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::send
// Il2CppName: send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::Opcode, ::System::IO::Stream*, bool)>(&WebSocketSharp::WebSocket::send)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Opcode")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* compressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, stream, compressed});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::send
// Il2CppName: send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::WebSocketSharp::Fin, ::WebSocketSharp::Opcode, ::ArrayW<uint8_t>, bool)>(&WebSocketSharp::WebSocket::send)> {
  static const MethodInfo* get() {
    static auto* fin = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Fin")->byval_arg;
    static auto* opcode = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Opcode")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* compressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fin, opcode, data, compressed});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::sendAsync
// Il2CppName: sendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::WebSocketSharp::Opcode, ::System::IO::Stream*, ::System::Action_1<bool>*)>(&WebSocketSharp::WebSocket::sendAsync)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Opcode")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* completed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "sendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, stream, completed});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::sendBytes
// Il2CppName: sendBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::ArrayW<uint8_t>)>(&WebSocketSharp::WebSocket::sendBytes)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "sendBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::sendHandshakeRequest
// Il2CppName: sendHandshakeRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpResponse* (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::sendHandshakeRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "sendHandshakeRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::sendHttpRequest
// Il2CppName: sendHttpRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpResponse* (WebSocketSharp::WebSocket::*)(::WebSocketSharp::HttpRequest*, int)>(&WebSocketSharp::WebSocket::sendHttpRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "HttpRequest")->byval_arg;
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "sendHttpRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::sendProxyConnectRequest
// Il2CppName: sendProxyConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::sendProxyConnectRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "sendProxyConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::setClientStream
// Il2CppName: setClientStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::setClientStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "setClientStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::startReceiving
// Il2CppName: startReceiving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::startReceiving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "startReceiving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::validateSecWebSocketAcceptHeader
// Il2CppName: validateSecWebSocketAcceptHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::validateSecWebSocketAcceptHeader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "validateSecWebSocketAcceptHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::validateSecWebSocketExtensionsServerHeader
// Il2CppName: validateSecWebSocketExtensionsServerHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::validateSecWebSocketExtensionsServerHeader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "validateSecWebSocketExtensionsServerHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::validateSecWebSocketProtocolServerHeader
// Il2CppName: validateSecWebSocketProtocolServerHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::validateSecWebSocketProtocolServerHeader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "validateSecWebSocketProtocolServerHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::validateSecWebSocketVersionServerHeader
// Il2CppName: validateSecWebSocketVersionServerHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::validateSecWebSocketVersionServerHeader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "validateSecWebSocketVersionServerHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::CheckSendParameter
// Il2CppName: CheckSendParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&WebSocketSharp::WebSocket::CheckSendParameter)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "CheckSendParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::CheckSendParameter
// Il2CppName: CheckSendParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::WebSocket::CheckSendParameter)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "CheckSendParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::CreateBase64Key
// Il2CppName: CreateBase64Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&WebSocketSharp::WebSocket::CreateBase64Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "CreateBase64Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::CreateResponseKey
// Il2CppName: CreateResponseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::WebSocket::CreateResponseKey)> {
  static const MethodInfo* get() {
    static auto* base64Key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "CreateResponseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{base64Key});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::StringW)>(&WebSocketSharp::WebSocket::Send)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::SendAsync
// Il2CppName: SendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::ArrayW<uint8_t>, ::System::Action_1<bool>*)>(&WebSocketSharp::WebSocket::SendAsync)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* completed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "SendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, completed});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)()>(&WebSocketSharp::WebSocket::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::WebSocket::$open$m__0
// Il2CppName: <open>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::WebSocket::*)(::System::IAsyncResult*)>(&WebSocketSharp::WebSocket::$open$m__0)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::WebSocket*), "<open>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
