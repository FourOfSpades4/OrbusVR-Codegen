// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: WebSocketSharp.CompressionMethod
#include "WebSocketSharp/CompressionMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: WebSocketState
  struct WebSocketState;
  // Forward declaring type: CloseStatusCode
  struct CloseStatusCode;
  // Forward declaring type: ByteOrder
  struct ByteOrder;
  // Forward declaring type: Opcode
  struct Opcode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: EventArgs
  class EventArgs;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MemoryStream
  class MemoryStream;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: NameValueCollection
  class NameValueCollection;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: WebSocketSharp::Net
namespace WebSocketSharp::Net {
  // Forward declaring type: CookieCollection
  class CookieCollection;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: Ext
  class Ext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Ext);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Ext*, "WebSocketSharp", "Ext");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Ext
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Ext : public ::Il2CppObject {
    public:
    // Nested type: ::WebSocketSharp::Ext::$ContainsTwice$c__AnonStorey1
    class $ContainsTwice$c__AnonStorey1;
    // Nested type: ::WebSocketSharp::Ext::$ReadBytesAsync$c__AnonStorey3
    class $ReadBytesAsync$c__AnonStorey3;
    // Nested type: ::WebSocketSharp::Ext::$ReadBytesAsync$c__AnonStorey4
    class $ReadBytesAsync$c__AnonStorey4;
    // Nested type: ::WebSocketSharp::Ext::$SplitHeaderValue$c__Iterator0
    class $SplitHeaderValue$c__Iterator0;
    // Nested type: ::WebSocketSharp::Ext::$ToString$c__AnonStorey7_1<T>
    template<typename T>
    class $ToString$c__AnonStorey7_1;
    // Get static field: static private readonly System.Byte[] _last
    static ::ArrayW<uint8_t> _get__last();
    // Set static field: static private readonly System.Byte[] _last
    static void _set__last(::ArrayW<uint8_t> value);
    // [CompilerGeneratedAttribute] Offset: 0xAC09F0
    // Get static field: static private System.Func`2<System.String,System.Boolean> <>f__am$cache0
    static ::System::Func_2<::StringW, bool>* _get_$$f__am$cache0();
    // Set static field: static private System.Func`2<System.String,System.Boolean> <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Func_2<::StringW, bool>* value);
    // static private System.IO.MemoryStream compress(System.IO.Stream stream)
    // Offset: 0x1F11D00
    static ::System::IO::MemoryStream* compress(::System::IO::Stream* stream);
    // static private System.Byte[] decompress(System.Byte[] data)
    // Offset: 0x1F11FE8
    static ::ArrayW<uint8_t> decompress(::ArrayW<uint8_t> data);
    // static private System.IO.MemoryStream decompress(System.IO.Stream stream)
    // Offset: 0x1F12298
    static ::System::IO::MemoryStream* decompress(::System::IO::Stream* stream);
    // static private System.Byte[] decompressToArray(System.IO.Stream stream)
    // Offset: 0x1F12144
    static ::ArrayW<uint8_t> decompressToArray(::System::IO::Stream* stream);
    // static System.Byte[] Append(System.UInt16 code, System.String reason)
    // Offset: 0x1F11A58
    static ::ArrayW<uint8_t> Append(uint16_t code, ::StringW reason);
    // static System.String CheckIfAvailable(WebSocketSharp.WebSocketState state, System.Boolean connecting, System.Boolean open, System.Boolean closing, System.Boolean closed)
    // Offset: 0x1F12514
    static ::StringW CheckIfAvailable(::WebSocketSharp::WebSocketState state, bool connecting, bool open, bool closing, bool closed);
    // static System.String CheckIfValidProtocols(System.String[] protocols)
    // Offset: 0x1F1263C
    static ::StringW CheckIfValidProtocols(::ArrayW<::StringW> protocols);
    // static System.IO.Stream Compress(System.IO.Stream stream, WebSocketSharp.CompressionMethod method)
    // Offset: 0x1F128D0
    static ::System::IO::Stream* Compress(::System::IO::Stream* stream, ::WebSocketSharp::CompressionMethod method);
    // static System.Boolean Contains(System.Collections.Generic.IEnumerable`1<T> source, System.Func`2<T,System.Boolean> condition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool Contains(::System::Collections::Generic::IEnumerable_1<T>* source, ::System::Func_2<T, bool>* condition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(condition)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, condition);
    }
    // static System.Boolean ContainsTwice(System.String[] values)
    // Offset: 0x1F12788
    static bool ContainsTwice(::ArrayW<::StringW> values);
    // static System.Void CopyTo(System.IO.Stream source, System.IO.Stream destination, System.Int32 bufferLength)
    // Offset: 0x1F11F10
    static void CopyTo(::System::IO::Stream* source, ::System::IO::Stream* destination, int bufferLength);
    // static System.Byte[] Decompress(System.Byte[] data, WebSocketSharp.CompressionMethod method)
    // Offset: 0x1F12968
    static ::ArrayW<uint8_t> Decompress(::ArrayW<uint8_t> data, ::WebSocketSharp::CompressionMethod method);
    // static System.Byte[] DecompressToArray(System.IO.Stream stream, WebSocketSharp.CompressionMethod method)
    // Offset: 0x1F129F8
    static ::ArrayW<uint8_t> DecompressToArray(::System::IO::Stream* stream, ::WebSocketSharp::CompressionMethod method);
    // static System.Boolean EqualsWith(System.Int32 value, System.Char c, System.Action`1<System.Int32> action)
    // Offset: 0x1F12C38
    static bool EqualsWith(int value, ::Il2CppChar c, ::System::Action_1<int>* action);
    // static System.String GetAbsolutePath(System.Uri uri)
    // Offset: 0x1F12CB8
    static ::StringW GetAbsolutePath(::System::Uri* uri);
    // static System.String GetMessage(WebSocketSharp.CloseStatusCode code)
    // Offset: 0x1F12E34
    static ::StringW GetMessage(::WebSocketSharp::CloseStatusCode code);
    // static System.String GetValue(System.String nameAndValue, System.Char separator)
    // Offset: 0x1F12EB8
    static ::StringW GetValue(::StringW nameAndValue, ::Il2CppChar separator);
    // static System.String GetValue(System.String nameAndValue, System.Char separator, System.Boolean unquote)
    // Offset: 0x1F12F5C
    static ::StringW GetValue(::StringW nameAndValue, ::Il2CppChar separator, bool unquote);
    // static System.Byte[] InternalToByteArray(System.UInt16 value, WebSocketSharp.ByteOrder order)
    // Offset: 0x1F12458
    static ::ArrayW<uint8_t> InternalToByteArray(uint16_t value, ::WebSocketSharp::ByteOrder order);
    // static System.Byte[] InternalToByteArray(System.UInt64 value, WebSocketSharp.ByteOrder order)
    // Offset: 0x1F13200
    static ::ArrayW<uint8_t> InternalToByteArray(uint64_t value, ::WebSocketSharp::ByteOrder order);
    // static System.Boolean IsCompressionExtension(System.String value, WebSocketSharp.CompressionMethod method)
    // Offset: 0x1F132BC
    static bool IsCompressionExtension(::StringW value, ::WebSocketSharp::CompressionMethod method);
    // static System.Boolean IsControl(System.Byte opcode)
    // Offset: 0x1F134D8
    static bool IsControl(uint8_t opcode);
    // static System.Boolean IsData(System.Byte opcode)
    // Offset: 0x1F134E8
    static bool IsData(uint8_t opcode);
    // static System.Boolean IsData(WebSocketSharp.Opcode opcode)
    // Offset: 0x1F134FC
    static bool IsData(::WebSocketSharp::Opcode opcode);
    // static System.Boolean IsReserved(System.UInt16 code)
    // Offset: 0x1F13510
    static bool IsReserved(uint16_t code);
    // static System.Boolean IsReserved(WebSocketSharp.CloseStatusCode code)
    // Offset: 0x1F13534
    static bool IsReserved(::WebSocketSharp::CloseStatusCode code);
    // static System.Boolean IsSupported(System.Byte opcode)
    // Offset: 0x1F13558
    static bool IsSupported(uint8_t opcode);
    // static System.Boolean IsText(System.String value)
    // Offset: 0x1F13630
    static bool IsText(::StringW value);
    // static System.Boolean IsToken(System.String value)
    // Offset: 0x1F13884
    static bool IsToken(::StringW value);
    // static System.Byte[] ReadBytes(System.IO.Stream stream, System.Int32 length)
    // Offset: 0x1F139B4
    static ::ArrayW<uint8_t> ReadBytes(::System::IO::Stream* stream, int length);
    // static System.Byte[] ReadBytes(System.IO.Stream stream, System.Int64 length, System.Int32 bufferLength)
    // Offset: 0x1F13B0C
    static ::ArrayW<uint8_t> ReadBytes(::System::IO::Stream* stream, int64_t length, int bufferLength);
    // static System.Void ReadBytesAsync(System.IO.Stream stream, System.Int32 length, System.Action`1<System.Byte[]> completed, System.Action`1<System.Exception> error)
    // Offset: 0x1F13D94
    static void ReadBytesAsync(::System::IO::Stream* stream, int length, ::System::Action_1<::ArrayW<uint8_t>>* completed, ::System::Action_1<::System::Exception*>* error);
    // static System.Void ReadBytesAsync(System.IO.Stream stream, System.Int64 length, System.Int32 bufferLength, System.Action`1<System.Byte[]> completed, System.Action`1<System.Exception> error)
    // Offset: 0x1F14090
    static void ReadBytesAsync(::System::IO::Stream* stream, int64_t length, int bufferLength, ::System::Action_1<::ArrayW<uint8_t>>* completed, ::System::Action_1<::System::Exception*>* error);
    // static T[] Reverse(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> Reverse(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::Reverse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "Reverse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static System.Collections.Generic.IEnumerable`1<System.String> SplitHeaderValue(System.String value, params System.Char[] separators)
    // Offset: 0x1F14348
    static ::System::Collections::Generic::IEnumerable_1<::StringW>* SplitHeaderValue(::StringW value, ::ArrayW<::Il2CppChar> separators);
    // static System.Byte[] ToByteArray(System.IO.Stream stream)
    // Offset: 0x1F12A98
    static ::ArrayW<uint8_t> ToByteArray(::System::IO::Stream* stream);
    // static System.String ToExtensionString(WebSocketSharp.CompressionMethod method, params System.String[] parameters)
    // Offset: 0x1F1336C
    static ::StringW ToExtensionString(::WebSocketSharp::CompressionMethod method, ::ArrayW<::StringW> parameters);
    // static System.UInt16 ToUInt16(System.Byte[] source, WebSocketSharp.ByteOrder sourceOrder)
    // Offset: 0x1F1178C
    static uint16_t ToUInt16(::ArrayW<uint8_t> source, ::WebSocketSharp::ByteOrder sourceOrder);
    // static System.UInt64 ToUInt64(System.Byte[] source, WebSocketSharp.ByteOrder sourceOrder)
    // Offset: 0x1F14504
    static uint64_t ToUInt64(::ArrayW<uint8_t> source, ::WebSocketSharp::ByteOrder sourceOrder);
    // static System.Boolean TryCreateWebSocketUri(System.String uriString, out System.Uri result, out System.String message)
    // Offset: 0x1F145B0
    static bool TryCreateWebSocketUri(::StringW uriString, ByRef<::System::Uri*> result, ByRef<::StringW> message);
    // static System.String Unquote(System.String value)
    // Offset: 0x1F13070
    static ::StringW Unquote(::StringW value);
    // static System.String UTF8Decode(System.Byte[] bytes)
    // Offset: 0x1F11838
    static ::StringW UTF8Decode(::ArrayW<uint8_t> bytes);
    // static System.Byte[] UTF8Encode(System.String s)
    // Offset: 0x1F14A64
    static ::ArrayW<uint8_t> UTF8Encode(::StringW s);
    // static System.Void WriteBytes(System.IO.Stream stream, System.Byte[] bytes, System.Int32 bufferLength)
    // Offset: 0x1F14AA8
    static void WriteBytes(::System::IO::Stream* stream, ::ArrayW<uint8_t> bytes, int bufferLength);
    // static public System.Boolean Contains(System.String value, params System.Char[] chars)
    // Offset: 0x1F1381C
    static bool Contains(::StringW value, ::ArrayW<::Il2CppChar> chars);
    // static public System.Boolean Contains(System.Collections.Specialized.NameValueCollection collection, System.String name)
    // Offset: 0x1F14BF8
    static bool Contains(::System::Collections::Specialized::NameValueCollection* collection, ::StringW name);
    // static public System.Boolean Contains(System.Collections.Specialized.NameValueCollection collection, System.String name, System.String value)
    // Offset: 0x1F14C58
    static bool Contains(::System::Collections::Specialized::NameValueCollection* collection, ::StringW name, ::StringW value);
    // static public System.Void Emit(System.EventHandler eventHandler, System.Object sender, System.EventArgs e)
    // Offset: 0x1F14DBC
    static void Emit(::System::EventHandler* eventHandler, ::Il2CppObject* sender, ::System::EventArgs* e);
    // static public System.Void Emit(System.EventHandler`1<TEventArgs> eventHandler, System.Object sender, TEventArgs e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TEventArgs>
    static void Emit(::System::EventHandler_1<TEventArgs>* eventHandler, ::Il2CppObject* sender, TEventArgs e) {
      static_assert(std::is_convertible_v<TEventArgs, ::System::EventArgs*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::Emit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "Emit", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventArgs>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventHandler), ::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(e)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TEventArgs>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, eventHandler, sender, e);
    }
    // static public WebSocketSharp.Net.CookieCollection GetCookies(System.Collections.Specialized.NameValueCollection headers, System.Boolean response)
    // Offset: 0x1F14DCC
    static ::WebSocketSharp::Net::CookieCollection* GetCookies(::System::Collections::Specialized::NameValueCollection* headers, bool response);
    // static public System.Boolean IsEnclosedIn(System.String value, System.Char c)
    // Offset: 0x1F14F38
    static bool IsEnclosedIn(::StringW value, ::Il2CppChar c);
    // static public System.Boolean IsHostOrder(WebSocketSharp.ByteOrder order)
    // Offset: 0x1F1317C
    static bool IsHostOrder(::WebSocketSharp::ByteOrder order);
    // static public System.Boolean IsNullOrEmpty(System.String value)
    // Offset: 0x1F14FC0
    static bool IsNullOrEmpty(::StringW value);
    // static public System.Boolean IsPredefinedScheme(System.String value)
    // Offset: 0x1F14FEC
    static bool IsPredefinedScheme(::StringW value);
    // static public System.Boolean MaybeUri(System.String value)
    // Offset: 0x1F1519C
    static bool MaybeUri(::StringW value);
    // static public T[] SubArray(T[] array, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> SubArray(::ArrayW<T> array, int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::SubArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "SubArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, length);
    }
    // static public T[] SubArray(T[] array, System.Int64 startIndex, System.Int64 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> SubArray(::ArrayW<T> array, int64_t startIndex, int64_t length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::SubArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "SubArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, length);
    }
    // static public System.Void Times(System.Int32 n, System.Action`1<System.Int32> action)
    // Offset: 0x1F15264
    static void Times(int n, ::System::Action_1<int>* action);
    // static public System.Byte[] ToHostOrder(System.Byte[] source, WebSocketSharp.ByteOrder sourceOrder)
    // Offset: 0x1F143FC
    static ::ArrayW<uint8_t> ToHostOrder(::ArrayW<uint8_t> source, ::WebSocketSharp::ByteOrder sourceOrder);
    // static public System.String ToString(T[] array, System.String separator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::StringW ToString(::ArrayW<T> array, ::StringW separator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Ext::ToString");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "Ext", "ToString", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(separator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, separator);
    }
    // static public System.Uri ToUri(System.String uriString)
    // Offset: 0x1F149A8
    static ::System::Uri* ToUri(::StringW uriString);
    // static public System.String UrlDecode(System.String value)
    // Offset: 0x1F152E4
    static ::StringW UrlDecode(::StringW value);
    // static private System.Void .cctor()
    // Offset: 0x1F153E8
    static void _cctor();
    // static private System.Boolean <CheckIfValidProtocols>m__0(System.String protocol)
    // Offset: 0x1F1544C
    static bool $CheckIfValidProtocols$m__0(::StringW protocol);
  }; // WebSocketSharp.Ext
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Ext::compress
// Il2CppName: compress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MemoryStream* (*)(::System::IO::Stream*)>(&WebSocketSharp::Ext::compress)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "compress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::decompress
// Il2CppName: decompress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&WebSocketSharp::Ext::decompress)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "decompress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::decompress
// Il2CppName: decompress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MemoryStream* (*)(::System::IO::Stream*)>(&WebSocketSharp::Ext::decompress)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "decompress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::decompressToArray
// Il2CppName: decompressToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*)>(&WebSocketSharp::Ext::decompressToArray)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "decompressToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint16_t, ::StringW)>(&WebSocketSharp::Ext::Append)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, reason});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::CheckIfAvailable
// Il2CppName: CheckIfAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::WebSocketSharp::WebSocketState, bool, bool, bool, bool)>(&WebSocketSharp::Ext::CheckIfAvailable)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "WebSocketState")->byval_arg;
    static auto* connecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* open = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "CheckIfAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, connecting, open, closing, closed});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::CheckIfValidProtocols
// Il2CppName: CheckIfValidProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<::StringW>)>(&WebSocketSharp::Ext::CheckIfValidProtocols)> {
  static const MethodInfo* get() {
    static auto* protocols = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "CheckIfValidProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocols});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Compress
// Il2CppName: Compress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (*)(::System::IO::Stream*, ::WebSocketSharp::CompressionMethod)>(&WebSocketSharp::Ext::Compress)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CompressionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Compress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, method});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Contains
// Il2CppName: Contains
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::ContainsTwice
// Il2CppName: ContainsTwice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::StringW>)>(&WebSocketSharp::Ext::ContainsTwice)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ContainsTwice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, ::System::IO::Stream*, int)>(&WebSocketSharp::Ext::CopyTo)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination, bufferLength});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Decompress
// Il2CppName: Decompress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::WebSocketSharp::CompressionMethod)>(&WebSocketSharp::Ext::Decompress)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CompressionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Decompress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, method});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::DecompressToArray
// Il2CppName: DecompressToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*, ::WebSocketSharp::CompressionMethod)>(&WebSocketSharp::Ext::DecompressToArray)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CompressionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "DecompressToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, method});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::EqualsWith
// Il2CppName: EqualsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppChar, ::System::Action_1<int>*)>(&WebSocketSharp::Ext::EqualsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "EqualsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, c, action});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::GetAbsolutePath
// Il2CppName: GetAbsolutePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Uri*)>(&WebSocketSharp::Ext::GetAbsolutePath)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "GetAbsolutePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::GetMessage
// Il2CppName: GetMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::WebSocketSharp::CloseStatusCode)>(&WebSocketSharp::Ext::GetMessage)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "GetMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar)>(&WebSocketSharp::Ext::GetValue)> {
  static const MethodInfo* get() {
    static auto* nameAndValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameAndValue, separator});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar, bool)>(&WebSocketSharp::Ext::GetValue)> {
  static const MethodInfo* get() {
    static auto* nameAndValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* unquote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameAndValue, separator, unquote});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::InternalToByteArray
// Il2CppName: InternalToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint16_t, ::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::InternalToByteArray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* order = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "InternalToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, order});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::InternalToByteArray
// Il2CppName: InternalToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint64_t, ::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::InternalToByteArray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* order = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "InternalToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, order});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsCompressionExtension
// Il2CppName: IsCompressionExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::WebSocketSharp::CompressionMethod)>(&WebSocketSharp::Ext::IsCompressionExtension)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CompressionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsCompressionExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, method});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsControl
// Il2CppName: IsControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&WebSocketSharp::Ext::IsControl)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsData
// Il2CppName: IsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&WebSocketSharp::Ext::IsData)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsData
// Il2CppName: IsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::WebSocketSharp::Opcode)>(&WebSocketSharp::Ext::IsData)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "Opcode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsReserved
// Il2CppName: IsReserved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint16_t)>(&WebSocketSharp::Ext::IsReserved)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsReserved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsReserved
// Il2CppName: IsReserved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::WebSocketSharp::CloseStatusCode)>(&WebSocketSharp::Ext::IsReserved)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CloseStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsReserved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsSupported
// Il2CppName: IsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&WebSocketSharp::Ext::IsSupported)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsText
// Il2CppName: IsText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::IsText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsToken
// Il2CppName: IsToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::IsToken)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ReadBytes
// Il2CppName: ReadBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*, int)>(&WebSocketSharp::Ext::ReadBytes)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ReadBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, length});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ReadBytes
// Il2CppName: ReadBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*, int64_t, int)>(&WebSocketSharp::Ext::ReadBytes)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ReadBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, length, bufferLength});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ReadBytesAsync
// Il2CppName: ReadBytesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, int, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::System::Exception*>*)>(&WebSocketSharp::Ext::ReadBytesAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* completed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* error = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ReadBytesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, length, completed, error});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ReadBytesAsync
// Il2CppName: ReadBytesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, int64_t, int, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::System::Exception*>*)>(&WebSocketSharp::Ext::ReadBytesAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* completed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* error = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ReadBytesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, length, bufferLength, completed, error});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Reverse
// Il2CppName: Reverse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::SplitHeaderValue
// Il2CppName: SplitHeaderValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (*)(::StringW, ::ArrayW<::Il2CppChar>)>(&WebSocketSharp::Ext::SplitHeaderValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* separators = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "SplitHeaderValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, separators});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*)>(&WebSocketSharp::Ext::ToByteArray)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToExtensionString
// Il2CppName: ToExtensionString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::WebSocketSharp::CompressionMethod, ::ArrayW<::StringW>)>(&WebSocketSharp::Ext::ToExtensionString)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "CompressionMethod")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToExtensionString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parameters});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToUInt16
// Il2CppName: ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(::ArrayW<uint8_t>, ::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::ToUInt16)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourceOrder = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourceOrder});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToUInt64
// Il2CppName: ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::ArrayW<uint8_t>, ::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::ToUInt64)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourceOrder = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourceOrder});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::TryCreateWebSocketUri
// Il2CppName: TryCreateWebSocketUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::Uri*>, ByRef<::StringW>)>(&WebSocketSharp::Ext::TryCreateWebSocketUri)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Uri")->this_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "TryCreateWebSocketUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString, result, message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Unquote
// Il2CppName: Unquote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::Ext::Unquote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Unquote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::UTF8Decode
// Il2CppName: UTF8Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&WebSocketSharp::Ext::UTF8Decode)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "UTF8Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::UTF8Encode
// Il2CppName: UTF8Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&WebSocketSharp::Ext::UTF8Encode)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "UTF8Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::WriteBytes
// Il2CppName: WriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, ::ArrayW<uint8_t>, int)>(&WebSocketSharp::Ext::WriteBytes)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "WriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, bytes, bufferLength});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<::Il2CppChar>)>(&WebSocketSharp::Ext::Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, chars});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Specialized::NameValueCollection*, ::StringW)>(&WebSocketSharp::Ext::Contains)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NameValueCollection")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Specialized::NameValueCollection*, ::StringW, ::StringW)>(&WebSocketSharp::Ext::Contains)> {
  static const MethodInfo* get() {
    static auto* collection = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NameValueCollection")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collection, name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::EventHandler*, ::Il2CppObject*, ::System::EventArgs*)>(&WebSocketSharp::Ext::Emit)> {
  static const MethodInfo* get() {
    static auto* eventHandler = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventHandler, sender, e});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::Emit
// Il2CppName: Emit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::GetCookies
// Il2CppName: GetCookies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::Net::CookieCollection* (*)(::System::Collections::Specialized::NameValueCollection*, bool)>(&WebSocketSharp::Ext::GetCookies)> {
  static const MethodInfo* get() {
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "NameValueCollection")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "GetCookies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headers, response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsEnclosedIn
// Il2CppName: IsEnclosedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::Il2CppChar)>(&WebSocketSharp::Ext::IsEnclosedIn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsEnclosedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, c});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsHostOrder
// Il2CppName: IsHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::IsHostOrder)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsNullOrEmpty
// Il2CppName: IsNullOrEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::IsNullOrEmpty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::IsPredefinedScheme
// Il2CppName: IsPredefinedScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::IsPredefinedScheme)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "IsPredefinedScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::MaybeUri
// Il2CppName: MaybeUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::MaybeUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "MaybeUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::SubArray
// Il2CppName: SubArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::SubArray
// Il2CppName: SubArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::Times
// Il2CppName: Times
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::System::Action_1<int>*)>(&WebSocketSharp::Ext::Times)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "Times", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, action});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToHostOrder
// Il2CppName: ToHostOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, ::WebSocketSharp::ByteOrder)>(&WebSocketSharp::Ext::ToHostOrder)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourceOrder = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "ByteOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToHostOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourceOrder});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToString
// Il2CppName: ToString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::Ext::ToUri
// Il2CppName: ToUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (*)(::StringW)>(&WebSocketSharp::Ext::ToUri)> {
  static const MethodInfo* get() {
    static auto* uriString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "ToUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriString});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::UrlDecode
// Il2CppName: UrlDecode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::Ext::UrlDecode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "UrlDecode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WebSocketSharp::Ext::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Ext::$CheckIfValidProtocols$m__0
// Il2CppName: <CheckIfValidProtocols>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Ext::$CheckIfValidProtocols$m__0)> {
  static const MethodInfo* get() {
    static auto* protocol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Ext*), "<CheckIfValidProtocols>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocol});
  }
};
