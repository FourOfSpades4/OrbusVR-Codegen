// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: LogLevel
  struct LogLevel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::LogLevel, "WebSocketSharp", "LogLevel");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.LogLevel
  // [TokenAttribute] Offset: FFFFFFFF
  struct LogLevel/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: LogLevel
    constexpr LogLevel(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public WebSocketSharp.LogLevel Trace
    static constexpr const int Trace = 0;
    // Get static field: static public WebSocketSharp.LogLevel Trace
    static ::WebSocketSharp::LogLevel _get_Trace();
    // Set static field: static public WebSocketSharp.LogLevel Trace
    static void _set_Trace(::WebSocketSharp::LogLevel value);
    // static field const value: static public WebSocketSharp.LogLevel Debug
    static constexpr const int Debug = 1;
    // Get static field: static public WebSocketSharp.LogLevel Debug
    static ::WebSocketSharp::LogLevel _get_Debug();
    // Set static field: static public WebSocketSharp.LogLevel Debug
    static void _set_Debug(::WebSocketSharp::LogLevel value);
    // static field const value: static public WebSocketSharp.LogLevel Info
    static constexpr const int Info = 2;
    // Get static field: static public WebSocketSharp.LogLevel Info
    static ::WebSocketSharp::LogLevel _get_Info();
    // Set static field: static public WebSocketSharp.LogLevel Info
    static void _set_Info(::WebSocketSharp::LogLevel value);
    // static field const value: static public WebSocketSharp.LogLevel Warn
    static constexpr const int Warn = 3;
    // Get static field: static public WebSocketSharp.LogLevel Warn
    static ::WebSocketSharp::LogLevel _get_Warn();
    // Set static field: static public WebSocketSharp.LogLevel Warn
    static void _set_Warn(::WebSocketSharp::LogLevel value);
    // static field const value: static public WebSocketSharp.LogLevel Error
    static constexpr const int Error = 4;
    // Get static field: static public WebSocketSharp.LogLevel Error
    static ::WebSocketSharp::LogLevel _get_Error();
    // Set static field: static public WebSocketSharp.LogLevel Error
    static void _set_Error(::WebSocketSharp::LogLevel value);
    // static field const value: static public WebSocketSharp.LogLevel Fatal
    static constexpr const int Fatal = 5;
    // Get static field: static public WebSocketSharp.LogLevel Fatal
    static ::WebSocketSharp::LogLevel _get_Fatal();
    // Set static field: static public WebSocketSharp.LogLevel Fatal
    static void _set_Fatal(::WebSocketSharp::LogLevel value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // WebSocketSharp.LogLevel
  #pragma pack(pop)
  static check_size<sizeof(LogLevel), 0 + sizeof(int)> __WebSocketSharp_LogLevelSizeCheck;
  static_assert(sizeof(LogLevel) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
