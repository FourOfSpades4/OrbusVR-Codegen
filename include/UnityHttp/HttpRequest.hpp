// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityHttp
namespace UnityHttp {
  // Forward declaring type: OnHttpEvent
  class OnHttpEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WWW
  class WWW;
  // Forward declaring type: WWWForm
  class WWWForm;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityHttp
namespace UnityHttp {
  // Forward declaring type: HttpRequest
  class HttpRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityHttp::HttpRequest);
DEFINE_IL2CPP_ARG_TYPE(::UnityHttp::HttpRequest*, "UnityHttp", "HttpRequest");
// Type namespace: UnityHttp
namespace UnityHttp {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: UnityHttp.HttpRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpRequest : public ::Il2CppObject {
    public:
    // Nested type: ::UnityHttp::HttpRequest::$Loader$d__33
    class $Loader$d__33;
    public:
    // public System.Boolean Ready
    // Size: 0x1
    // Offset: 0x10
    bool Ready;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Ready and: Url
    char __padding0[0x7] = {};
    // public System.String Url
    // Size: 0x8
    // Offset: 0x18
    ::StringW Url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean Started
    // Size: 0x1
    // Offset: 0x20
    bool Started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Started and: WWWRequest
    char __padding2[0x7] = {};
    // public UnityEngine.WWW WWWRequest
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::WWW* WWWRequest;
    // Field size check
    static_assert(sizeof(::UnityEngine::WWW*) == 0x8);
    // public System.Byte[] PostData
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> PostData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Object ExtraData
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* ExtraData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Collections.Hashtable Headers
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Hashtable* Headers;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // public UnityHttp.HttpRequest RequestAfter
    // Size: 0x8
    // Offset: 0x48
    ::UnityHttp::HttpRequest* RequestAfter;
    // Field size check
    static_assert(sizeof(::UnityHttp::HttpRequest*) == 0x8);
    // public UnityHttp.HttpRequest RequestBefore
    // Size: 0x8
    // Offset: 0x50
    ::UnityHttp::HttpRequest* RequestBefore;
    // Field size check
    static_assert(sizeof(::UnityHttp::HttpRequest*) == 0x8);
    // private System.Collections.IEnumerator LoadingEnumerator
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::IEnumerator* LoadingEnumerator;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADECE4
    // private UnityHttp.OnHttpEvent OnRequestDone
    // Size: 0x8
    // Offset: 0x60
    ::UnityHttp::OnHttpEvent* OnRequestDone;
    // Field size check
    static_assert(sizeof(::UnityHttp::OnHttpEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADECF4
    // private UnityHttp.OnHttpEvent OnRequestReady
    // Size: 0x8
    // Offset: 0x68
    ::UnityHttp::OnHttpEvent* OnRequestReady;
    // Field size check
    static_assert(sizeof(::UnityHttp::OnHttpEvent*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean Ready
    [[deprecated("Use field access instead!")]] bool& dyn_Ready();
    // Get instance field reference: public System.String Url
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Url();
    // Get instance field reference: public System.Boolean Started
    [[deprecated("Use field access instead!")]] bool& dyn_Started();
    // Get instance field reference: public UnityEngine.WWW WWWRequest
    [[deprecated("Use field access instead!")]] ::UnityEngine::WWW*& dyn_WWWRequest();
    // Get instance field reference: public System.Byte[] PostData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_PostData();
    // Get instance field reference: public System.Object ExtraData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_ExtraData();
    // Get instance field reference: public System.Collections.Hashtable Headers
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_Headers();
    // Get instance field reference: public UnityHttp.HttpRequest RequestAfter
    [[deprecated("Use field access instead!")]] ::UnityHttp::HttpRequest*& dyn_RequestAfter();
    // Get instance field reference: public UnityHttp.HttpRequest RequestBefore
    [[deprecated("Use field access instead!")]] ::UnityHttp::HttpRequest*& dyn_RequestBefore();
    // Get instance field reference: private System.Collections.IEnumerator LoadingEnumerator
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_LoadingEnumerator();
    // Get instance field reference: private UnityHttp.OnHttpEvent OnRequestDone
    [[deprecated("Use field access instead!")]] ::UnityHttp::OnHttpEvent*& dyn_OnRequestDone();
    // Get instance field reference: private UnityHttp.OnHttpEvent OnRequestReady
    [[deprecated("Use field access instead!")]] ::UnityHttp::OnHttpEvent*& dyn_OnRequestReady();
    // public System.Void CacheImage()
    // Offset: 0xFE445C
    void CacheImage();
    // public System.Void add_OnRequestDone(UnityHttp.OnHttpEvent value)
    // Offset: 0xFE456C
    void add_OnRequestDone(::UnityHttp::OnHttpEvent* value);
    // public System.Void remove_OnRequestDone(UnityHttp.OnHttpEvent value)
    // Offset: 0xFE4658
    void remove_OnRequestDone(::UnityHttp::OnHttpEvent* value);
    // public System.Void add_OnRequestReady(UnityHttp.OnHttpEvent value)
    // Offset: 0xFE4744
    void add_OnRequestReady(::UnityHttp::OnHttpEvent* value);
    // public System.Void remove_OnRequestReady(UnityHttp.OnHttpEvent value)
    // Offset: 0xFE4830
    void remove_OnRequestReady(::UnityHttp::OnHttpEvent* value);
    // public System.Void .ctor(System.String url, UnityHttp.OnHttpEvent onDone)
    // Offset: 0xFE3898
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpRequest* New_ctor(::StringW url, ::UnityHttp::OnHttpEvent* onDone) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpRequest*, creationType>(url, onDone)));
    }
    // public System.Void .ctor(System.String url)
    // Offset: 0xFE491C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpRequest* New_ctor(::StringW url) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpRequest*, creationType>(url)));
    }
    // public System.Void AttachForm(UnityEngine.WWWForm form)
    // Offset: 0xFE39B0
    void AttachForm(::UnityEngine::WWWForm* form);
    // public System.Void SetHeaders(System.Collections.Hashtable headers)
    // Offset: 0xFE4948
    void SetHeaders(::System::Collections::Hashtable* headers);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> ToDictionary(System.Collections.Hashtable headers)
    // Offset: 0xFE4950
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ToDictionary(::System::Collections::Hashtable* headers);
    // public System.Void SetHeaders(System.Collections.Generic.Dictionary`2<System.String,System.String> headers)
    // Offset: 0xFE4D3C
    void SetHeaders(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* headers);
    // public System.Void SetPost(System.String toPost)
    // Offset: 0xFE4DAC
    void SetPost(::StringW toPost);
    // public System.Void Send()
    // Offset: 0xFE38D8
    void Send();
    // public System.Void Remove()
    // Offset: 0xFE4E78
    void Remove();
    // public System.Void Remove(System.Boolean waitingList)
    // Offset: 0xFE4090
    void Remove(bool waitingList);
    // public System.Boolean get_Errored()
    // Offset: 0xFE4E80
    bool get_Errored();
    // public System.Boolean get_Ok()
    // Offset: 0xFE4ECC
    bool get_Ok();
    // public System.String get_Error()
    // Offset: 0xFE4E9C
    ::StringW get_Error();
    // public System.Collections.IEnumerator Loader()
    // Offset: 0xFE4E04
    ::System::Collections::IEnumerator* Loader();
    // public System.String get_Text()
    // Offset: 0xFE4F14
    ::StringW get_Text();
    // public System.Byte[] get_Bytes()
    // Offset: 0xFE4F90
    ::ArrayW<uint8_t> get_Bytes();
    // public UnityEngine.Texture2D get_Image()
    // Offset: 0xFE4520
    ::UnityEngine::Texture2D* get_Image();
    // public System.Single get_Progress()
    // Offset: 0xFE4FDC
    float get_Progress();
    // public System.Void Update()
    // Offset: 0xFE3C28
    void Update();
  }; // UnityHttp.HttpRequest
  #pragma pack(pop)
  static check_size<sizeof(HttpRequest), 104 + sizeof(::UnityHttp::OnHttpEvent*)> __UnityHttp_HttpRequestSizeCheck;
  static_assert(sizeof(HttpRequest) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityHttp::HttpRequest::CacheImage
// Il2CppName: CacheImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::CacheImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "CacheImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::add_OnRequestDone
// Il2CppName: add_OnRequestDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::UnityHttp::OnHttpEvent*)>(&UnityHttp::HttpRequest::add_OnRequestDone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityHttp", "OnHttpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "add_OnRequestDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::remove_OnRequestDone
// Il2CppName: remove_OnRequestDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::UnityHttp::OnHttpEvent*)>(&UnityHttp::HttpRequest::remove_OnRequestDone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityHttp", "OnHttpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "remove_OnRequestDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::add_OnRequestReady
// Il2CppName: add_OnRequestReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::UnityHttp::OnHttpEvent*)>(&UnityHttp::HttpRequest::add_OnRequestReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityHttp", "OnHttpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "add_OnRequestReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::remove_OnRequestReady
// Il2CppName: remove_OnRequestReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::UnityHttp::OnHttpEvent*)>(&UnityHttp::HttpRequest::remove_OnRequestReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityHttp", "OnHttpEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "remove_OnRequestReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityHttp::HttpRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityHttp::HttpRequest::AttachForm
// Il2CppName: AttachForm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::UnityEngine::WWWForm*)>(&UnityHttp::HttpRequest::AttachForm)> {
  static const MethodInfo* get() {
    static auto* form = &::il2cpp_utils::GetClassFromName("UnityEngine", "WWWForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "AttachForm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{form});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::SetHeaders
// Il2CppName: SetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::System::Collections::Hashtable*)>(&UnityHttp::HttpRequest::SetHeaders)> {
  static const MethodInfo* get() {
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "SetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headers});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::ToDictionary
// Il2CppName: ToDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (UnityHttp::HttpRequest::*)(::System::Collections::Hashtable*)>(&UnityHttp::HttpRequest::ToDictionary)> {
  static const MethodInfo* get() {
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "ToDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headers});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::SetHeaders
// Il2CppName: SetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&UnityHttp::HttpRequest::SetHeaders)> {
  static const MethodInfo* get() {
    static auto* headers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "SetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headers});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::SetPost
// Il2CppName: SetPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(::StringW)>(&UnityHttp::HttpRequest::SetPost)> {
  static const MethodInfo* get() {
    static auto* toPost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "SetPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toPost});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)(bool)>(&UnityHttp::HttpRequest::Remove)> {
  static const MethodInfo* get() {
    static auto* waitingList = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waitingList});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Errored
// Il2CppName: get_Errored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Errored)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Errored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Ok
// Il2CppName: get_Ok
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Ok)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Ok", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::Loader
// Il2CppName: Loader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::Loader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "Loader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Bytes
// Il2CppName: get_Bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Bytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Image
// Il2CppName: get_Image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Image)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::get_Progress
// Il2CppName: get_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::get_Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "get_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityHttp::HttpRequest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityHttp::HttpRequest::*)()>(&UnityHttp::HttpRequest::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityHttp::HttpRequest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
