// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetAddress
  struct ENetAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetAddress, "ENet.Native", "ENetAddress");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x6
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetAddress
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetAddress/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 host
    // Size: 0x4
    // Offset: 0x0
    uint host;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt16 port
    // Size: 0x2
    // Offset: 0x4
    uint16_t port;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: ENetAddress
    constexpr ENetAddress(uint host_ = {}, uint16_t port_ = {}) noexcept : host{host_}, port{port_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 host
    [[deprecated("Use field access instead!")]] uint& dyn_host();
    // Get instance field reference: public System.UInt16 port
    [[deprecated("Use field access instead!")]] uint16_t& dyn_port();
    // static public ENet.Native.ENetAddress op_Explicit(System.Net.IPEndPoint endPoint)
    // Offset: 0x2857818
    explicit ENetAddress(::System::Net::IPEndPoint* endPoint);
  }; // ENet.Native.ENetAddress
  #pragma pack(pop)
  static check_size<sizeof(ENetAddress), 4 + sizeof(uint16_t)> __ENet_Native_ENetAddressSizeCheck;
  static_assert(sizeof(ENetAddress) == 0x6);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Native::ENetAddress::ENetAddress
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
