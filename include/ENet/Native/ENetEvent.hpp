// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ENet.EventType
#include "ENet/EventType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
  // Forward declaring type: ENetPeer
  struct ENetPeer;
  // Forward declaring type: ENetPacket
  struct ENetPacket;
}
// Completed forward declares
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetEvent
  struct ENetEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetEvent, "ENet.Native", "ENetEvent");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // public ENet.EventType type
    // Size: 0x4
    // Offset: 0x0
    ::ENet::EventType type;
    // Field size check
    static_assert(sizeof(::ENet::EventType) == 0x4);
    // Padding between fields: type and: peer
    char __padding0[0x4] = {};
    // public ENet.Native.ENetPeer* peer
    // Size: 0x8
    // Offset: 0x8
    ::ENet::Native::ENetPeer* peer;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetPeer*) == 0x8);
    // public System.Byte channelID
    // Size: 0x1
    // Offset: 0x10
    uint8_t channelID;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: channelID and: data
    char __padding2[0x3] = {};
    // public System.UInt32 data
    // Size: 0x4
    // Offset: 0x14
    uint data;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public ENet.Native.ENetPacket* packet
    // Size: 0x8
    // Offset: 0x18
    ::ENet::Native::ENetPacket* packet;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetPacket*) == 0x8);
    public:
    // Creating value type constructor for type: ENetEvent
    constexpr ENetEvent(::ENet::EventType type_ = {}, ::ENet::Native::ENetPeer* peer_ = {}, uint8_t channelID_ = {}, uint data_ = {}, ::ENet::Native::ENetPacket* packet_ = {}) noexcept : type{type_}, peer{peer_}, channelID{channelID_}, data{data_}, packet{packet_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ENet.EventType type
    [[deprecated("Use field access instead!")]] ::ENet::EventType& dyn_type();
    // Get instance field reference: public ENet.Native.ENetPeer* peer
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetPeer*& dyn_peer();
    // Get instance field reference: public System.Byte channelID
    [[deprecated("Use field access instead!")]] uint8_t& dyn_channelID();
    // Get instance field reference: public System.UInt32 data
    [[deprecated("Use field access instead!")]] uint& dyn_data();
    // Get instance field reference: public ENet.Native.ENetPacket* packet
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetPacket*& dyn_packet();
  }; // ENet.Native.ENetEvent
  #pragma pack(pop)
  static check_size<sizeof(ENetEvent), 24 + sizeof(::ENet::Native::ENetPacket*)> __ENet_Native_ENetEventSizeCheck;
  static_assert(sizeof(ENetEvent) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
