// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ENet.Native.ENetListNode
#include "ENet/Native/ENetListNode.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: ENet.PeerState
#include "ENet/PeerState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
  // Forward declaring type: ENetHost
  struct ENetHost;
}
// Completed forward declares
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetPeer
  struct ENetPeer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetPeer, "ENet.Native", "ENetPeer");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetPeer
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetPeer/*, public ::System::ValueType*/ {
    public:
    public:
    // public ENet.Native.ENetListNode dispatchList
    // Size: 0x10
    // Offset: 0x0
    ::ENet::Native::ENetListNode dispatchList;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetListNode) == 0x10);
    // public ENet.Native.ENetHost* host
    // Size: 0x8
    // Offset: 0x10
    ::ENet::Native::ENetHost* host;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetHost*) == 0x8);
    // public System.UInt16 outgoingPeerID
    // Size: 0x2
    // Offset: 0x18
    uint16_t outgoingPeerID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 incomingPeerID
    // Size: 0x2
    // Offset: 0x1A
    uint16_t incomingPeerID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt32 connectID
    // Size: 0x4
    // Offset: 0x1C
    uint connectID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Byte outgoingSessionID
    // Size: 0x1
    // Offset: 0x20
    uint8_t outgoingSessionID;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte incomingSessionID
    // Size: 0x1
    // Offset: 0x21
    uint8_t incomingSessionID;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: incomingSessionID and: addressHost
    char __padding6[0x2] = {};
    // private System.UInt32 addressHost
    // Size: 0x4
    // Offset: 0x24
    uint addressHost;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt16 addressPort
    // Size: 0x2
    // Offset: 0x28
    uint16_t addressPort;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: addressPort and: data
    char __padding8[0x6] = {};
    // public System.IntPtr data
    // Size: 0x8
    // Offset: 0x30
    ::System::IntPtr data;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public ENet.PeerState state
    // Size: 0x4
    // Offset: 0x38
    ::ENet::PeerState state;
    // Field size check
    static_assert(sizeof(::ENet::PeerState) == 0x4);
    public:
    // Creating value type constructor for type: ENetPeer
    constexpr ENetPeer(::ENet::Native::ENetListNode dispatchList_ = {}, ::ENet::Native::ENetHost* host_ = {}, uint16_t outgoingPeerID_ = {}, uint16_t incomingPeerID_ = {}, uint connectID_ = {}, uint8_t outgoingSessionID_ = {}, uint8_t incomingSessionID_ = {}, uint addressHost_ = {}, uint16_t addressPort_ = {}, ::System::IntPtr data_ = {}, ::ENet::PeerState state_ = {}) noexcept : dispatchList{dispatchList_}, host{host_}, outgoingPeerID{outgoingPeerID_}, incomingPeerID{incomingPeerID_}, connectID{connectID_}, outgoingSessionID{outgoingSessionID_}, incomingSessionID{incomingSessionID_}, addressHost{addressHost_}, addressPort{addressPort_}, data{data_}, state{state_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ENet.Native.ENetListNode dispatchList
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetListNode& dyn_dispatchList();
    // Get instance field reference: public ENet.Native.ENetHost* host
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetHost*& dyn_host();
    // Get instance field reference: public System.UInt16 outgoingPeerID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_outgoingPeerID();
    // Get instance field reference: public System.UInt16 incomingPeerID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_incomingPeerID();
    // Get instance field reference: public System.UInt32 connectID
    [[deprecated("Use field access instead!")]] uint& dyn_connectID();
    // Get instance field reference: public System.Byte outgoingSessionID
    [[deprecated("Use field access instead!")]] uint8_t& dyn_outgoingSessionID();
    // Get instance field reference: public System.Byte incomingSessionID
    [[deprecated("Use field access instead!")]] uint8_t& dyn_incomingSessionID();
    // Get instance field reference: private System.UInt32 addressHost
    [[deprecated("Use field access instead!")]] uint& dyn_addressHost();
    // Get instance field reference: private System.UInt16 addressPort
    [[deprecated("Use field access instead!")]] uint16_t& dyn_addressPort();
    // Get instance field reference: public System.IntPtr data
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_data();
    // Get instance field reference: public ENet.PeerState state
    [[deprecated("Use field access instead!")]] ::ENet::PeerState& dyn_state();
  }; // ENet.Native.ENetPeer
  #pragma pack(pop)
  static check_size<sizeof(ENetPeer), 56 + sizeof(::ENet::PeerState)> __ENet_Native_ENetPeerSizeCheck;
  static_assert(sizeof(ENetPeer) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
