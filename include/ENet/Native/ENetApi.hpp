// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
  // Forward declaring type: ENetCallbacks
  struct ENetCallbacks;
  // Forward declaring type: ENetHost
  struct ENetHost;
  // Forward declaring type: ENetEvent
  struct ENetEvent;
  // Forward declaring type: ENetPeer
  struct ENetPeer;
  // Forward declaring type: ENetAddress
  struct ENetAddress;
  // Forward declaring type: ENetPacket
  struct ENetPacket;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: ENet
namespace ENet {
  // Forward declaring type: PacketFlags
  struct PacketFlags;
}
// Completed forward declares
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetApi
  class ENetApi;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ENet::Native::ENetApi);
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetApi*, "ENet.Native", "ENetApi");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ENet.Native.ENetApi
  // [TokenAttribute] Offset: FFFFFFFF
  class ENetApi : public ::Il2CppObject {
    public:
    // Get static field: static ENet.Native.ENetApi _platform
    static ::ENet::Native::ENetApi* _get__platform();
    // Set static field: static ENet.Native.ENetApi _platform
    static void _set__platform(::ENet::Native::ENetApi* value);
    // Get static field: static System.Object _platformLock
    static ::Il2CppObject* _get__platformLock();
    // Set static field: static System.Object _platformLock
    static void _set__platformLock(::Il2CppObject* value);
    // System.Void .ctor()
    // Offset: 0x28583D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ENetApi* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ENet::Native::ENetApi::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ENetApi*, creationType>()));
    }
    // static ENet.Native.ENetApi get_Platform()
    // Offset: 0x28583D8
    static ::ENet::Native::ENetApi* get_Platform();
    // public System.Int32 initialize_with_callbacks(System.UInt32 version, ref ENet.Native.ENetCallbacks inits)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int initialize_with_callbacks(uint version, ByRef<::ENet::Native::ENetCallbacks> inits);
    // static public System.Int32 enet_host_check_events(ENet.Native.ENetHost* host, out ENet.Native.ENetEvent event)
    // Offset: 0x2857D38
    static int enet_host_check_events(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetEvent> event);
    // static public ENet.Native.ENetPeer* enet_host_connect(ENet.Native.ENetHost* host, ref ENet.Native.ENetAddress address, System.IntPtr channelCount, System.UInt32 data)
    // Offset: 0x285805C
    static ::ENet::Native::ENetPeer* enet_host_connect(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetAddress> address, ::System::IntPtr channelCount, uint data);
    // static public ENet.Native.ENetHost* enet_host_create(ENet.Native.ENetAddress* address, System.IntPtr peerLimit, System.IntPtr channelLimit, System.UInt32 incomingBandwidth, System.UInt32 outgoingBandwidth)
    // Offset: 0x2857A98
    static ::ENet::Native::ENetHost* enet_host_create(::ENet::Native::ENetAddress* address, ::System::IntPtr peerLimit, ::System::IntPtr channelLimit, uint incomingBandwidth, uint outgoingBandwidth);
    // static public ENet.Native.ENetHost* enet_host_create(ref ENet.Native.ENetAddress address, System.IntPtr peerLimit, System.IntPtr channelLimit, System.UInt32 incomingBandwidth, System.UInt32 outgoingBandwidth)
    // Offset: 0x28579E0
    static ::ENet::Native::ENetHost* enet_host_create(ByRef<::ENet::Native::ENetAddress> address, ::System::IntPtr peerLimit, ::System::IntPtr channelLimit, uint incomingBandwidth, uint outgoingBandwidth);
    // static public System.Void enet_host_destroy(ENet.Native.ENetHost* host)
    // Offset: 0x2857BBC
    static void enet_host_destroy(::ENet::Native::ENetHost* host);
    // static public System.Int32 enet_host_service(ENet.Native.ENetHost* host, out ENet.Native.ENetEvent event, System.UInt32 timeout)
    // Offset: 0x2858338
    static int enet_host_service(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetEvent> event, uint timeout);
    // public System.Int32 host_check_events(ENet.Native.ENetHost* host, out ENet.Native.ENetEvent event)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int host_check_events(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetEvent> event);
    // public ENet.Native.ENetPeer* host_connect(ENet.Native.ENetHost* host, ref ENet.Native.ENetAddress address, System.IntPtr channelCount, System.UInt32 data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ENet::Native::ENetPeer* host_connect(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetAddress> address, ::System::IntPtr channelCount, uint data);
    // public ENet.Native.ENetHost* host_create(ENet.Native.ENetAddress* address, System.IntPtr peerLimit, System.IntPtr channelLimit, System.UInt32 incomingBandwidth, System.UInt32 outgoingBandwidth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ENet::Native::ENetHost* host_create(::ENet::Native::ENetAddress* address, ::System::IntPtr peerLimit, ::System::IntPtr channelLimit, uint incomingBandwidth, uint outgoingBandwidth);
    // public ENet.Native.ENetHost* host_create(ref ENet.Native.ENetAddress address, System.IntPtr peerLimit, System.IntPtr channelLimit, System.UInt32 incomingBandwidth, System.UInt32 outgoingBandwidth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ENet::Native::ENetHost* host_create(ByRef<::ENet::Native::ENetAddress> address, ::System::IntPtr peerLimit, ::System::IntPtr channelLimit, uint incomingBandwidth, uint outgoingBandwidth);
    // public System.Void host_destroy(ENet.Native.ENetHost* host)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void host_destroy(::ENet::Native::ENetHost* host);
    // public System.Int32 host_service(ENet.Native.ENetHost* host, out ENet.Native.ENetEvent event, System.UInt32 timeout)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int host_service(::ENet::Native::ENetHost* host, ByRef<::ENet::Native::ENetEvent> event, uint timeout);
    // static public ENet.Native.ENetPacket* enet_packet_create(System.IntPtr data, System.IntPtr dataLength, ENet.PacketFlags flags)
    // Offset: 0x2858A7C
    static ::ENet::Native::ENetPacket* enet_packet_create(::System::IntPtr data, ::System::IntPtr dataLength, ::ENet::PacketFlags flags);
    // static public System.Void enet_packet_destroy(ENet.Native.ENetPacket* packet)
    // Offset: 0x2858B14
    static void enet_packet_destroy(::ENet::Native::ENetPacket* packet);
    // static public System.Int32 enet_packet_resize(ENet.Native.ENetPacket* packet, System.IntPtr dataLength)
    // Offset: 0x2858B94
    static int enet_packet_resize(::ENet::Native::ENetPacket* packet, ::System::IntPtr dataLength);
    // public ENet.Native.ENetPacket* packet_create(System.IntPtr data, System.IntPtr dataLength, ENet.PacketFlags flags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ENet::Native::ENetPacket* packet_create(::System::IntPtr data, ::System::IntPtr dataLength, ::ENet::PacketFlags flags);
    // public System.Void packet_destroy(ENet.Native.ENetPacket* packet)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void packet_destroy(::ENet::Native::ENetPacket* packet);
    // public System.Int32 packet_resize(ENet.Native.ENetPacket* packet, System.IntPtr dataLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int packet_resize(::ENet::Native::ENetPacket* packet, ::System::IntPtr dataLength);
    // static public System.Void enet_peer_disconnect(ENet.Native.ENetPeer* peer, System.UInt32 data)
    // Offset: 0x2858C24
    static void enet_peer_disconnect(::ENet::Native::ENetPeer* peer, uint data);
    // static public System.Int32 enet_peer_send(ENet.Native.ENetPeer* peer, System.Byte channelID, ENet.Native.ENetPacket* packet)
    // Offset: 0x2858CB8
    static int enet_peer_send(::ENet::Native::ENetPeer* peer, uint8_t channelID, ::ENet::Native::ENetPacket* packet);
    // public System.Void peer_disconnect(ENet.Native.ENetPeer* peer, System.UInt32 data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void peer_disconnect(::ENet::Native::ENetPeer* peer, uint data);
    // public System.Int32 peer_send(ENet.Native.ENetPeer* peer, System.Byte channelID, ENet.Native.ENetPacket* packet)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int peer_send(::ENet::Native::ENetPeer* peer, uint8_t channelID, ::ENet::Native::ENetPacket* packet);
    // static private System.Void .cctor()
    // Offset: 0x2858D54
    static void _cctor();
  }; // ENet.Native.ENetApi
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Native::ENetApi::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ENet::Native::ENetApi::get_Platform
// Il2CppName: get_Platform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetApi* (*)()>(&ENet::Native::ENetApi::get_Platform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "get_Platform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::initialize_with_callbacks
// Il2CppName: initialize_with_callbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Native::ENetApi::*)(uint, ByRef<::ENet::Native::ENetCallbacks>)>(&ENet::Native::ENetApi::initialize_with_callbacks)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* inits = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetCallbacks")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "initialize_with_callbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, inits});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_check_events
// Il2CppName: enet_host_check_events
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetEvent>)>(&ENet::Native::ENetApi::enet_host_check_events)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_check_events", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, event});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_connect
// Il2CppName: enet_host_connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPeer* (*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetAddress>, ::System::IntPtr, uint)>(&ENet::Native::ENetApi::enet_host_connect)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress")->this_arg;
    static auto* channelCount = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, address, channelCount, data});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_create
// Il2CppName: enet_host_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetHost* (*)(::ENet::Native::ENetAddress*, ::System::IntPtr, ::System::IntPtr, uint, uint)>(&ENet::Native::ENetApi::enet_host_create)> {
  static const MethodInfo* get() {
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress"))->byval_arg;
    static auto* peerLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, peerLimit, channelLimit, incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_create
// Il2CppName: enet_host_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetHost* (*)(ByRef<::ENet::Native::ENetAddress>, ::System::IntPtr, ::System::IntPtr, uint, uint)>(&ENet::Native::ENetApi::enet_host_create)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress")->this_arg;
    static auto* peerLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, peerLimit, channelLimit, incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_destroy
// Il2CppName: enet_host_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ENet::Native::ENetHost*)>(&ENet::Native::ENetApi::enet_host_destroy)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_host_service
// Il2CppName: enet_host_service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetEvent>, uint)>(&ENet::Native::ENetApi::enet_host_service)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetEvent")->this_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_host_service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, event, timeout});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_check_events
// Il2CppName: host_check_events
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Native::ENetApi::*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetEvent>)>(&ENet::Native::ENetApi::host_check_events)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_check_events", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, event});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_connect
// Il2CppName: host_connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPeer* (ENet::Native::ENetApi::*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetAddress>, ::System::IntPtr, uint)>(&ENet::Native::ENetApi::host_connect)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress")->this_arg;
    static auto* channelCount = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, address, channelCount, data});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_create
// Il2CppName: host_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetHost* (ENet::Native::ENetApi::*)(::ENet::Native::ENetAddress*, ::System::IntPtr, ::System::IntPtr, uint, uint)>(&ENet::Native::ENetApi::host_create)> {
  static const MethodInfo* get() {
    static auto* address = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress"))->byval_arg;
    static auto* peerLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, peerLimit, channelLimit, incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_create
// Il2CppName: host_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetHost* (ENet::Native::ENetApi::*)(ByRef<::ENet::Native::ENetAddress>, ::System::IntPtr, ::System::IntPtr, uint, uint)>(&ENet::Native::ENetApi::host_create)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetAddress")->this_arg;
    static auto* peerLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, peerLimit, channelLimit, incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_destroy
// Il2CppName: host_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Native::ENetApi::*)(::ENet::Native::ENetHost*)>(&ENet::Native::ENetApi::host_destroy)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::host_service
// Il2CppName: host_service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Native::ENetApi::*)(::ENet::Native::ENetHost*, ByRef<::ENet::Native::ENetEvent>, uint)>(&ENet::Native::ENetApi::host_service)> {
  static const MethodInfo* get() {
    static auto* host = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetEvent")->this_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "host_service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, event, timeout});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_packet_create
// Il2CppName: enet_packet_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPacket* (*)(::System::IntPtr, ::System::IntPtr, ::ENet::PacketFlags)>(&ENet::Native::ENetApi::enet_packet_create)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("ENet", "PacketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_packet_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataLength, flags});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_packet_destroy
// Il2CppName: enet_packet_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ENet::Native::ENetPacket*)>(&ENet::Native::ENetApi::enet_packet_destroy)> {
  static const MethodInfo* get() {
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_packet_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_packet_resize
// Il2CppName: enet_packet_resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ENet::Native::ENetPacket*, ::System::IntPtr)>(&ENet::Native::ENetApi::enet_packet_resize)> {
  static const MethodInfo* get() {
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_packet_resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, dataLength});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::packet_create
// Il2CppName: packet_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPacket* (ENet::Native::ENetApi::*)(::System::IntPtr, ::System::IntPtr, ::ENet::PacketFlags)>(&ENet::Native::ENetApi::packet_create)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("ENet", "PacketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "packet_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataLength, flags});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::packet_destroy
// Il2CppName: packet_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Native::ENetApi::*)(::ENet::Native::ENetPacket*)>(&ENet::Native::ENetApi::packet_destroy)> {
  static const MethodInfo* get() {
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "packet_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::packet_resize
// Il2CppName: packet_resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Native::ENetApi::*)(::ENet::Native::ENetPacket*, ::System::IntPtr)>(&ENet::Native::ENetApi::packet_resize)> {
  static const MethodInfo* get() {
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "packet_resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, dataLength});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_peer_disconnect
// Il2CppName: enet_peer_disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ENet::Native::ENetPeer*, uint)>(&ENet::Native::ENetApi::enet_peer_disconnect)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPeer"))->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_peer_disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, data});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::enet_peer_send
// Il2CppName: enet_peer_send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ENet::Native::ENetPeer*, uint8_t, ::ENet::Native::ENetPacket*)>(&ENet::Native::ENetApi::enet_peer_send)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPeer"))->byval_arg;
    static auto* channelID = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "enet_peer_send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, channelID, packet});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::peer_disconnect
// Il2CppName: peer_disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Native::ENetApi::*)(::ENet::Native::ENetPeer*, uint)>(&ENet::Native::ENetApi::peer_disconnect)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPeer"))->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "peer_disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, data});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::peer_send
// Il2CppName: peer_send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Native::ENetApi::*)(::ENet::Native::ENetPeer*, uint8_t, ::ENet::Native::ENetPacket*)>(&ENet::Native::ENetApi::peer_send)> {
  static const MethodInfo* get() {
    static auto* peer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPeer"))->byval_arg;
    static auto* channelID = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* packet = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), "peer_send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, channelID, packet});
  }
};
// Writing MetadataGetter for method: ENet::Native::ENetApi::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ENet::Native::ENetApi::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Native::ENetApi*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
