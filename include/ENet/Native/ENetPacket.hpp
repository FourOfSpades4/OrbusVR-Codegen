// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: ENet.PacketFlags
#include "ENet/PacketFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
}
// Completed forward declares
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetPacket
  struct ENetPacket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetPacket, "ENet.Native", "ENetPacket");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetPacket
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetPacket/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::ENet::Native::ENetPacket::freeCallback_cb
    class freeCallback_cb;
    public:
    // public System.IntPtr referenceCount
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr referenceCount;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public ENet.PacketFlags flags
    // Size: 0x4
    // Offset: 0x8
    ::ENet::PacketFlags flags;
    // Field size check
    static_assert(sizeof(::ENet::PacketFlags) == 0x4);
    // Padding between fields: flags and: data
    char __padding1[0x4] = {};
    // public System.IntPtr data
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr data;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr dataLength
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr dataLength;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr freeCallback
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr freeCallback;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: ENetPacket
    constexpr ENetPacket(::System::IntPtr referenceCount_ = {}, ::ENet::PacketFlags flags_ = {}, ::System::IntPtr data_ = {}, ::System::IntPtr dataLength_ = {}, ::System::IntPtr freeCallback_ = {}) noexcept : referenceCount{referenceCount_}, flags{flags_}, data{data_}, dataLength{dataLength_}, freeCallback{freeCallback_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr referenceCount
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_referenceCount();
    // Get instance field reference: public ENet.PacketFlags flags
    [[deprecated("Use field access instead!")]] ::ENet::PacketFlags& dyn_flags();
    // Get instance field reference: public System.IntPtr data
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_data();
    // Get instance field reference: public System.IntPtr dataLength
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_dataLength();
    // Get instance field reference: public System.IntPtr freeCallback
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_freeCallback();
  }; // ENet.Native.ENetPacket
  #pragma pack(pop)
  static check_size<sizeof(ENetPacket), 32 + sizeof(::System::IntPtr)> __ENet_Native_ENetPacketSizeCheck;
  static_assert(sizeof(ENetPacket) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
