// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetCallbacks
  struct ENetCallbacks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetCallbacks, "ENet.Native", "ENetCallbacks");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetCallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetCallbacks/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr malloc
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr malloc;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr free
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr free;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr no_memory
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr no_memory;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: ENetCallbacks
    constexpr ENetCallbacks(::System::IntPtr malloc_ = {}, ::System::IntPtr free_ = {}, ::System::IntPtr no_memory_ = {}) noexcept : malloc{malloc_}, free{free_}, no_memory{no_memory_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr malloc
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_malloc();
    // Get instance field reference: public System.IntPtr free
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_free();
    // Get instance field reference: public System.IntPtr no_memory
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_no_memory();
  }; // ENet.Native.ENetCallbacks
  #pragma pack(pop)
  static check_size<sizeof(ENetCallbacks), 16 + sizeof(::System::IntPtr)> __ENet_Native_ENetCallbacksSizeCheck;
  static_assert(sizeof(ENetCallbacks) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
