// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: ENet.Native
namespace ENet::Native {
  // Forward declaring type: ENetListNode
  struct ENetListNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Native::ENetListNode, "ENet.Native", "ENetListNode");
// Type namespace: ENet.Native
namespace ENet::Native {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Native.ENetListNode
  // [TokenAttribute] Offset: FFFFFFFF
  struct ENetListNode/*, public ::System::ValueType*/ {
    public:
    public:
    // public ENet.Native.ENetListNode* next
    // Size: 0x8
    // Offset: 0x0
    ::ENet::Native::ENetListNode* next;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetListNode*) == 0x8);
    // public ENet.Native.ENetListNode* previous
    // Size: 0x8
    // Offset: 0x8
    ::ENet::Native::ENetListNode* previous;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetListNode*) == 0x8);
    public:
    // Creating value type constructor for type: ENetListNode
    constexpr ENetListNode(::ENet::Native::ENetListNode* next_ = {}, ::ENet::Native::ENetListNode* previous_ = {}) noexcept : next{next_}, previous{previous_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public ENet.Native.ENetListNode* next
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetListNode*& dyn_next();
    // Get instance field reference: public ENet.Native.ENetListNode* previous
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetListNode*& dyn_previous();
  }; // ENet.Native.ENetListNode
  #pragma pack(pop)
  static check_size<sizeof(ENetListNode), 8 + sizeof(::ENet::Native::ENetListNode*)> __ENet_Native_ENetListNodeSizeCheck;
  static_assert(sizeof(ENetListNode) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
