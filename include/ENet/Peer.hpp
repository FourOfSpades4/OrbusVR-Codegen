// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
  // Forward declaring type: ENetPeer
  struct ENetPeer;
}
// Forward declaring namespace: ENet
namespace ENet {
  // Forward declaring type: PacketFlags
  struct PacketFlags;
  // Forward declaring type: Packet
  struct Packet;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: ENet
namespace ENet {
  // Forward declaring type: Peer
  struct Peer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Peer, "ENet", "Peer");
// Type namespace: ENet
namespace ENet {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Peer
  // [TokenAttribute] Offset: FFFFFFFF
  struct Peer/*, public ::System::ValueType, public ::System::IEquatable_1<::ENet::Peer>*/ {
    public:
    public:
    // private ENet.Native.ENetPeer* _peer
    // Size: 0x8
    // Offset: 0x0
    ::ENet::Native::ENetPeer* peer;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetPeer*) == 0x8);
    public:
    // Creating value type constructor for type: Peer
    constexpr Peer(::ENet::Native::ENetPeer* peer_ = {}) noexcept : peer{peer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::ENet::Peer>
    operator ::System::IEquatable_1<::ENet::Peer>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::ENet::Peer>*>(this);
    }
    // Creating conversion operator: operator ::ENet::Native::ENetPeer*
    constexpr operator ::ENet::Native::ENetPeer*() const noexcept {
      return peer;
    }
    // Get instance field reference: private ENet.Native.ENetPeer* _peer
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetPeer*& dyn__peer();
    // public System.Void .ctor(ENet.Native.ENetPeer* peer)
    // Offset: 0xBD1B3C
    // ABORTED: conflicts with another method.  Peer(::ENet::Native::ENetPeer* peer);
    // private System.Void CheckInitialized()
    // Offset: 0xBD1B44
    void CheckInitialized();
    // public System.Boolean Equals(ENet.Peer other)
    // Offset: 0xBD1B54
    bool Equals(::ENet::Peer other);
    // public System.Void Disconnect(System.Int32 data)
    // Offset: 0xBD1B6C
    void Disconnect(int data);
    // public System.Void Send(System.Byte channelID, System.Byte[] data, System.Int32 offset, System.Int32 length, ENet.PacketFlags flags)
    // Offset: 0xBD1B74
    void Send(uint8_t channelID, ::ArrayW<uint8_t> data, int offset, int length, ::ENet::PacketFlags flags);
    // public System.Void Send(System.Byte channelID, ENet.Packet packet)
    // Offset: 0xBD1B7C
    void Send(uint8_t channelID, ::ENet::Packet packet);
    // public ENet.Native.ENetPeer* get_NativeData()
    // Offset: 0xBD1B84
    ::ENet::Native::ENetPeer* get_NativeData();
    // public System.Void set_NativeData(ENet.Native.ENetPeer* value)
    // Offset: 0xBD1B8C
    void set_NativeData(::ENet::Native::ENetPeer* value);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xBD1B4C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBD1B64
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // ENet.Peer
  #pragma pack(pop)
  static check_size<sizeof(Peer), 0 + sizeof(::ENet::Native::ENetPeer*)> __ENet_PeerSizeCheck;
  static_assert(sizeof(Peer) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Peer::Peer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ENet::Peer::CheckInitialized
// Il2CppName: CheckInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Peer::*)()>(&ENet::Peer::CheckInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "CheckInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Peer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Peer::*)(::ENet::Peer)>(&ENet::Peer::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("ENet", "Peer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: ENet::Peer::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Peer::*)(int)>(&ENet::Peer::Disconnect)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: ENet::Peer::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Peer::*)(uint8_t, ::ArrayW<uint8_t>, int, int, ::ENet::PacketFlags)>(&ENet::Peer::Send)> {
  static const MethodInfo* get() {
    static auto* channelID = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("ENet", "PacketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelID, data, offset, length, flags});
  }
};
// Writing MetadataGetter for method: ENet::Peer::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Peer::*)(uint8_t, ::ENet::Packet)>(&ENet::Peer::Send)> {
  static const MethodInfo* get() {
    static auto* channelID = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* packet = &::il2cpp_utils::GetClassFromName("ENet", "Packet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelID, packet});
  }
};
// Writing MetadataGetter for method: ENet::Peer::get_NativeData
// Il2CppName: get_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPeer* (ENet::Peer::*)()>(&ENet::Peer::get_NativeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "get_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Peer::set_NativeData
// Il2CppName: set_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Peer::*)(::ENet::Native::ENetPeer*)>(&ENet::Peer::set_NativeData)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPeer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "set_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Peer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Peer::*)(::Il2CppObject*)>(&ENet::Peer::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: ENet::Peer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Peer::*)()>(&ENet::Peer::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Peer), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
