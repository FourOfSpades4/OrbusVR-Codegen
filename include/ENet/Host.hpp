// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet::Native
namespace ENet::Native {
  // Forward declaring type: ENetHost
  struct ENetHost;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: ENet
namespace ENet {
  // Forward declaring type: Event
  struct Event;
  // Forward declaring type: Peer
  struct Peer;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: ENet
namespace ENet {
  // Forward declaring type: Host
  struct Host;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Host, "ENet", "Host");
// Type namespace: ENet
namespace ENet {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Host
  // [TokenAttribute] Offset: FFFFFFFF
  struct Host/*, public ::System::ValueType, public ::System::IDisposable, public ::System::IEquatable_1<::ENet::Host>*/ {
    public:
    public:
    // private ENet.Native.ENetHost* _host
    // Size: 0x8
    // Offset: 0x0
    ::ENet::Native::ENetHost* host;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetHost*) == 0x8);
    public:
    // Creating value type constructor for type: Host
    constexpr Host(::ENet::Native::ENetHost* host_ = {}) noexcept : host{host_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::ENet::Host>
    operator ::System::IEquatable_1<::ENet::Host>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::ENet::Host>*>(this);
    }
    // Creating conversion operator: operator ::ENet::Native::ENetHost*
    constexpr operator ::ENet::Native::ENetHost*() const noexcept {
      return host;
    }
    // Get instance field reference: private ENet.Native.ENetHost* _host
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetHost*& dyn__host();
    // public System.Boolean Equals(ENet.Host other)
    // Offset: 0xBD17E4
    bool Equals(::ENet::Host other);
    // static private System.Void CheckBandwidthLimit(System.Int32 incomingBandwidth, System.Int32 outgoingBandwidth)
    // Offset: 0x285744C
    static void CheckBandwidthLimit(int incomingBandwidth, int outgoingBandwidth);
    // static private System.Void CheckChannelLimit(System.Int32 channelLimit)
    // Offset: 0x2857500
    static void CheckChannelLimit(int channelLimit);
    // private System.Void CheckInitialized()
    // Offset: 0xBD17FC
    void CheckInitialized();
    // public System.Void Initialize(System.Net.IPEndPoint address, System.Int32 peerLimit, System.Int32 channelLimit, System.Int32 incomingBandwidth, System.Int32 outgoingBandwidth)
    // Offset: 0xBD1804
    void Initialize(::System::Net::IPEndPoint* address, int peerLimit, int channelLimit, int incomingBandwidth, int outgoingBandwidth);
    // public System.Void Dispose()
    // Offset: 0xBD180C
    void Dispose();
    // public System.Boolean CheckEvents(out ENet.Event event)
    // Offset: 0xBD1814
    bool CheckEvents(ByRef<::ENet::Event> event);
    // public ENet.Peer Connect(System.String hostName, System.Int32 port, System.Int32 data, System.Int32 channelLimit)
    // Offset: 0xBD181C
    ::ENet::Peer Connect(::StringW hostName, int port, int data, int channelLimit);
    // public ENet.Peer Connect(System.Net.IPEndPoint address, System.Int32 data, System.Int32 channelLimit)
    // Offset: 0xBD1824
    ::ENet::Peer Connect(::System::Net::IPEndPoint* address, int data, int channelLimit);
    // public System.Boolean Service(System.Int32 timeout, out ENet.Event event)
    // Offset: 0xBD182C
    bool Service(int timeout, ByRef<::ENet::Event> event);
    // public ENet.Native.ENetHost* get_NativeData()
    // Offset: 0xBD1834
    ::ENet::Native::ENetHost* get_NativeData();
    // public System.Void set_NativeData(ENet.Native.ENetHost* value)
    // Offset: 0xBD183C
    void set_NativeData(::ENet::Native::ENetHost* value);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xBD17DC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBD17F4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // ENet.Host
  #pragma pack(pop)
  static check_size<sizeof(Host), 0 + sizeof(::ENet::Native::ENetHost*)> __ENet_HostSizeCheck;
  static_assert(sizeof(Host) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Host::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Host::*)(::ENet::Host)>(&ENet::Host::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("ENet", "Host")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: ENet::Host::CheckBandwidthLimit
// Il2CppName: CheckBandwidthLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&ENet::Host::CheckBandwidthLimit)> {
  static const MethodInfo* get() {
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "CheckBandwidthLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Host::CheckChannelLimit
// Il2CppName: CheckChannelLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&ENet::Host::CheckChannelLimit)> {
  static const MethodInfo* get() {
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "CheckChannelLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelLimit});
  }
};
// Writing MetadataGetter for method: ENet::Host::CheckInitialized
// Il2CppName: CheckInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Host::*)()>(&ENet::Host::CheckInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "CheckInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Host::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Host::*)(::System::Net::IPEndPoint*, int, int, int, int)>(&ENet::Host::Initialize)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* peerLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* incomingBandwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outgoingBandwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, peerLimit, channelLimit, incomingBandwidth, outgoingBandwidth});
  }
};
// Writing MetadataGetter for method: ENet::Host::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Host::*)()>(&ENet::Host::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Host::CheckEvents
// Il2CppName: CheckEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Host::*)(ByRef<::ENet::Event>)>(&ENet::Host::CheckEvents)> {
  static const MethodInfo* get() {
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet", "Event")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "CheckEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{event});
  }
};
// Writing MetadataGetter for method: ENet::Host::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Peer (ENet::Host::*)(::StringW, int, int, int)>(&ENet::Host::Connect)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName, port, data, channelLimit});
  }
};
// Writing MetadataGetter for method: ENet::Host::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Peer (ENet::Host::*)(::System::Net::IPEndPoint*, int, int)>(&ENet::Host::Connect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channelLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, data, channelLimit});
  }
};
// Writing MetadataGetter for method: ENet::Host::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Host::*)(int, ByRef<::ENet::Event>)>(&ENet::Host::Service)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* event = &::il2cpp_utils::GetClassFromName("ENet", "Event")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout, event});
  }
};
// Writing MetadataGetter for method: ENet::Host::get_NativeData
// Il2CppName: get_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetHost* (ENet::Host::*)()>(&ENet::Host::get_NativeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "get_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Host::set_NativeData
// Il2CppName: set_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Host::*)(::ENet::Native::ENetHost*)>(&ENet::Host::set_NativeData)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetHost"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "set_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Host::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Host::*)(::Il2CppObject*)>(&ENet::Host::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: ENet::Host::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Host::*)()>(&ENet::Host::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Host), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
