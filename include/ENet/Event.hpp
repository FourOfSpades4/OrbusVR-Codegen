// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ENet.Native.ENetEvent
#include "ENet/Native/ENetEvent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet
namespace ENet {
  // Forward declaring type: Packet
  struct Packet;
  // Skipping declaration: EventType because it is already included!
}
// Completed forward declares
// Type namespace: ENet
namespace ENet {
  // Forward declaring type: Event
  struct Event;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Event, "ENet", "Event");
// Type namespace: ENet
namespace ENet {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Event
  // [TokenAttribute] Offset: FFFFFFFF
  struct Event/*, public ::System::ValueType*/ {
    public:
    public:
    // private ENet.Native.ENetEvent _event
    // Size: 0x20
    // Offset: 0x0
    ::ENet::Native::ENetEvent event;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetEvent) == 0x20);
    public:
    // Creating value type constructor for type: Event
    constexpr Event(::ENet::Native::ENetEvent event_ = {}) noexcept : event{event_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::ENet::Native::ENetEvent
    constexpr operator ::ENet::Native::ENetEvent() const noexcept {
      return event;
    }
    // Get instance field reference: private ENet.Native.ENetEvent _event
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetEvent& dyn__event();
    // public System.Void .ctor(ENet.Native.ENetEvent event)
    // Offset: 0xBD1758
    // ABORTED: conflicts with another method.  Event(::ENet::Native::ENetEvent event);
    // public System.Byte get_ChannelID()
    // Offset: 0xBD1764
    uint8_t get_ChannelID();
    // public ENet.Native.ENetEvent get_NativeData()
    // Offset: 0xBD176C
    ::ENet::Native::ENetEvent get_NativeData();
    // public System.Void set_NativeData(ENet.Native.ENetEvent value)
    // Offset: 0xBD1780
    void set_NativeData(::ENet::Native::ENetEvent value);
    // public ENet.Packet get_Packet()
    // Offset: 0xBD178C
    ::ENet::Packet get_Packet();
    // public ENet.EventType get_Type()
    // Offset: 0xBD17D4
    ::ENet::EventType get_Type();
  }; // ENet.Event
  #pragma pack(pop)
  static check_size<sizeof(Event), 0 + sizeof(::ENet::Native::ENetEvent)> __ENet_EventSizeCheck;
  static_assert(sizeof(Event) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Event::Event
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ENet::Event::get_ChannelID
// Il2CppName: get_ChannelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ENet::Event::*)()>(&ENet::Event::get_ChannelID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Event), "get_ChannelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Event::get_NativeData
// Il2CppName: get_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetEvent (ENet::Event::*)()>(&ENet::Event::get_NativeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Event), "get_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Event::set_NativeData
// Il2CppName: set_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Event::*)(::ENet::Native::ENetEvent)>(&ENet::Event::set_NativeData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ENet.Native", "ENetEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Event), "set_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Event::get_Packet
// Il2CppName: get_Packet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Packet (ENet::Event::*)()>(&ENet::Event::get_Packet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Event), "get_Packet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Event::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::EventType (ENet::Event::*)()>(&ENet::Event::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Event), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
