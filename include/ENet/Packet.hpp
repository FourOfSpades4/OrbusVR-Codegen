// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: ENet.Native.ENetPacket
#include "ENet/Native/ENetPacket.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ENet
namespace ENet {
  // Skipping declaration: PacketFlags because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: ENet
namespace ENet {
  // Forward declaring type: Packet
  struct Packet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ENet::Packet, "ENet", "Packet");
// Type namespace: ENet
namespace ENet {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ENet.Packet
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AB2A10
  struct Packet/*, public ::System::ValueType, public ::System::IDisposable, public ::System::IEquatable_1<::ENet::Packet>, public ::System::Collections::Generic::IList_1<uint8_t>*/ {
    public:
    // Nested type: ::ENet::Packet::$GetEnumerator$d__40
    class $GetEnumerator$d__40;
    public:
    // private ENet.Native.ENetPacket* _packet
    // Size: 0x8
    // Offset: 0x0
    ::ENet::Native::ENetPacket* packet;
    // Field size check
    static_assert(sizeof(::ENet::Native::ENetPacket*) == 0x8);
    // private System.IntPtr ptr
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: Packet
    constexpr Packet(::ENet::Native::ENetPacket* packet_ = {}, ::System::IntPtr ptr_ = {}) noexcept : packet{packet_}, ptr{ptr_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::ENet::Packet>
    operator ::System::IEquatable_1<::ENet::Packet>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::ENet::Packet>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IList_1<uint8_t>
    operator ::System::Collections::Generic::IList_1<uint8_t>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IList_1<uint8_t>*>(this);
    }
    // Get static field: static private ENet.Native.ENetPacket/freeCallback_cb _freeCallbackDelegate
    static ::ENet::Native::ENetPacket::freeCallback_cb* _get__freeCallbackDelegate();
    // Set static field: static private ENet.Native.ENetPacket/freeCallback_cb _freeCallbackDelegate
    static void _set__freeCallbackDelegate(::ENet::Native::ENetPacket::freeCallback_cb* value);
    // Get static field: static private System.IntPtr _freeCallbackFunctionPointer
    static ::System::IntPtr _get__freeCallbackFunctionPointer();
    // Set static field: static private System.IntPtr _freeCallbackFunctionPointer
    static void _set__freeCallbackFunctionPointer(::System::IntPtr value);
    // Get static field: static private System.Object _freeCallbackKey
    static ::Il2CppObject* _get__freeCallbackKey();
    // Set static field: static private System.Object _freeCallbackKey
    static void _set__freeCallbackKey(::Il2CppObject* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<ENet.Packet,System.Collections.Generic.Dictionary`2<System.Object,System.Object>> _userData
    static ::System::Collections::Generic::Dictionary_2<::ENet::Packet, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*>* _get__userData();
    // Set static field: static private System.Collections.Generic.Dictionary`2<ENet.Packet,System.Collections.Generic.Dictionary`2<System.Object,System.Object>> _userData
    static void _set__userData(::System::Collections::Generic::Dictionary_2<::ENet::Packet, ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*>* value);
    // Get static field: static private System.Object _userDataDefaultKey
    static ::Il2CppObject* _get__userDataDefaultKey();
    // Set static field: static private System.Object _userDataDefaultKey
    static void _set__userDataDefaultKey(::Il2CppObject* value);
    // Get instance field reference: private ENet.Native.ENetPacket* _packet
    [[deprecated("Use field access instead!")]] ::ENet::Native::ENetPacket*& dyn__packet();
    // Get instance field reference: private System.IntPtr ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_ptr();
    // static private System.Void .cctor()
    // Offset: 0x285B910
    static void _cctor();
    // public System.Void .ctor(ENet.Native.ENetPacket* packet)
    // Offset: 0xBD193C
    Packet(::ENet::Native::ENetPacket* packet);
    // System.Void CheckInitialized()
    // Offset: 0xBD198C
    void CheckInitialized();
    // public System.Boolean Equals(ENet.Packet other)
    // Offset: 0xBD199C
    bool Equals(::ENet::Packet other);
    // public System.Void Initialize(System.Byte[] data, System.Int32 offset, System.Int32 length, ENet.PacketFlags flags)
    // Offset: 0xBD19B4
    void Initialize(::ArrayW<uint8_t> data, int offset, int length, ::ENet::PacketFlags flags);
    // public System.Void Initialize(System.IntPtr data, System.Int32 length, ENet.PacketFlags flags)
    // Offset: 0xBD19BC
    void Initialize(::System::IntPtr data, int length, ::ENet::PacketFlags flags);
    // public System.Void CopyTo(System.Byte[] array)
    // Offset: 0xBD19C4
    void CopyTo(::ArrayW<uint8_t> array);
    // public System.Void CopyTo(System.Byte[] array, System.Int32 arrayIndex, System.Int32 count, System.Int32 sourceIndex)
    // Offset: 0xBD19CC
    void CopyTo(::ArrayW<uint8_t> array, int arrayIndex, int count, int sourceIndex);
    // public System.Byte[] GetBytes()
    // Offset: 0xBD19D4
    ::ArrayW<uint8_t> GetBytes();
    // public System.Void Dispose()
    // Offset: 0xBD19DC
    void Dispose();
    // public System.Void Resize(System.Int32 length)
    // Offset: 0xBD19E4
    void Resize(int length);
    // public System.IntPtr get_Data()
    // Offset: 0xBD19EC
    ::System::IntPtr get_Data();
    // public System.Int32 get_Length()
    // Offset: 0xBD19F4
    int get_Length();
    // public ENet.Native.ENetPacket* get_NativeData()
    // Offset: 0xBD19FC
    ::ENet::Native::ENetPacket* get_NativeData();
    // public System.Void set_NativeData(ENet.Native.ENetPacket* value)
    // Offset: 0xBD1A04
    void set_NativeData(::ENet::Native::ENetPacket* value);
    // public System.Void Add(System.Byte value)
    // Offset: 0xBD1A0C
    void Add(uint8_t value);
    // public System.Void Clear()
    // Offset: 0xBD1A40
    void Clear();
    // public System.Boolean Contains(System.Byte value)
    // Offset: 0xBD1A4C
    bool Contains(uint8_t value);
    // public System.Void CopyTo(System.Byte[] array, System.Int32 arrayIndex)
    // Offset: 0xBD1A6C
    void CopyTo(::ArrayW<uint8_t> array, int arrayIndex);
    // public System.Collections.Generic.IEnumerator`1<System.Byte> GetEnumerator()
    // Offset: 0xBD1AB4
    ::System::Collections::Generic::IEnumerator_1<uint8_t>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xBD1ABC
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Int32 IndexOf(System.Byte value)
    // Offset: 0xBD1AC4
    int IndexOf(uint8_t value);
    // public System.Void Insert(System.Int32 index, System.Byte value)
    // Offset: 0xBD1ACC
    void Insert(int index, uint8_t value);
    // public System.Boolean Remove(System.Byte value)
    // Offset: 0xBD1AD4
    bool Remove(uint8_t value);
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0xBD1ADC
    void RemoveAt(int index);
    // public System.Byte get_Item(System.Int32 index)
    // Offset: 0xBD1AE4
    uint8_t get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Byte value)
    // Offset: 0xBD1AEC
    void set_Item(int index, uint8_t value);
    // private System.Int32 System.Collections.Generic.ICollection<System.Byte>.get_Count()
    // Offset: 0xBD1AF4
    int System_Collections_Generic_ICollection$System_Byte$_get_Count();
    // private System.Boolean System.Collections.Generic.ICollection<System.Byte>.get_IsReadOnly()
    // Offset: 0xBD1AFC
    bool System_Collections_Generic_ICollection$System_Byte$_get_IsReadOnly();
    // static private System.Void InitializeUserData()
    // Offset: 0x285B914
    static void InitializeUserData();
    // static private System.Void FreeCallbackHandler(ENet.Native.ENetPacket* native)
    // Offset: 0x285C9CC
    static void FreeCallbackHandler(::ENet::Native::ENetPacket* native);
    // public System.Object GetUserData(System.Object key)
    // Offset: 0xBD1B04
    ::Il2CppObject* GetUserData(::Il2CppObject* key);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xBD1994
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBD19AC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // ENet.Packet
  #pragma pack(pop)
  static check_size<sizeof(Packet), 8 + sizeof(::System::IntPtr)> __ENet_PacketSizeCheck;
  static_assert(sizeof(Packet) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ENet::Packet::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ENet::Packet::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Packet
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ENet::Packet::CheckInitialized
// Il2CppName: CheckInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)()>(&ENet::Packet::CheckInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "CheckInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Packet::*)(::ENet::Packet)>(&ENet::Packet::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("ENet", "Packet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::ArrayW<uint8_t>, int, int, ::ENet::PacketFlags)>(&ENet::Packet::Initialize)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("ENet", "PacketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, length, flags});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::System::IntPtr, int, ::ENet::PacketFlags)>(&ENet::Packet::Initialize)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("ENet", "PacketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length, flags});
  }
};
// Writing MetadataGetter for method: ENet::Packet::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::ArrayW<uint8_t>)>(&ENet::Packet::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: ENet::Packet::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::ArrayW<uint8_t>, int, int, int)>(&ENet::Packet::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex, count, sourceIndex});
  }
};
// Writing MetadataGetter for method: ENet::Packet::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (ENet::Packet::*)()>(&ENet::Packet::GetBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)()>(&ENet::Packet::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(int)>(&ENet::Packet::Resize)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: ENet::Packet::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (ENet::Packet::*)()>(&ENet::Packet::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Packet::*)()>(&ENet::Packet::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::get_NativeData
// Il2CppName: get_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ENet::Native::ENetPacket* (ENet::Packet::*)()>(&ENet::Packet::get_NativeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "get_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::set_NativeData
// Il2CppName: set_NativeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::ENet::Native::ENetPacket*)>(&ENet::Packet::set_NativeData)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "set_NativeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(uint8_t)>(&ENet::Packet::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)()>(&ENet::Packet::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Packet::*)(uint8_t)>(&ENet::Packet::Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(::ArrayW<uint8_t>, int)>(&ENet::Packet::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: ENet::Packet::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<uint8_t>* (ENet::Packet::*)()>(&ENet::Packet::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (ENet::Packet::*)()>(&ENet::Packet::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Packet::*)(uint8_t)>(&ENet::Packet::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(int, uint8_t)>(&ENet::Packet::Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Packet::*)(uint8_t)>(&ENet::Packet::Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::RemoveAt
// Il2CppName: RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(int)>(&ENet::Packet::RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: ENet::Packet::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ENet::Packet::*)(int)>(&ENet::Packet::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: ENet::Packet::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ENet::Packet::*)(int, uint8_t)>(&ENet::Packet::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: ENet::Packet::System_Collections_Generic_ICollection$System_Byte$_get_Count
// Il2CppName: System.Collections.Generic.ICollection<System.Byte>.get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Packet::*)()>(&ENet::Packet::System_Collections_Generic_ICollection$System_Byte$_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "System.Collections.Generic.ICollection<System.Byte>.get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::System_Collections_Generic_ICollection$System_Byte$_get_IsReadOnly
// Il2CppName: System.Collections.Generic.ICollection<System.Byte>.get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Packet::*)()>(&ENet::Packet::System_Collections_Generic_ICollection$System_Byte$_get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "System.Collections.Generic.ICollection<System.Byte>.get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::InitializeUserData
// Il2CppName: InitializeUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ENet::Packet::InitializeUserData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "InitializeUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ENet::Packet::FreeCallbackHandler
// Il2CppName: FreeCallbackHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ENet::Native::ENetPacket*)>(&ENet::Packet::FreeCallbackHandler)> {
  static const MethodInfo* get() {
    static auto* native = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("ENet.Native", "ENetPacket"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "FreeCallbackHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{native});
  }
};
// Writing MetadataGetter for method: ENet::Packet::GetUserData
// Il2CppName: GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ENet::Packet::*)(::Il2CppObject*)>(&ENet::Packet::GetUserData)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: ENet::Packet::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ENet::Packet::*)(::Il2CppObject*)>(&ENet::Packet::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: ENet::Packet::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ENet::Packet::*)()>(&ENet::Packet::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ENet::Packet), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
