// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HighlightingSystem.HighlighterMode
#include "HighlightingSystem/HighlighterMode.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlighterRenderer
  class HighlighterRenderer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlighterCore
  class HighlighterCore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::HighlighterCore);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlighterCore*, "HighlightingSystem", "HighlighterCore");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.HighlighterCore
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class HighlighterCore : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HighlightingSystem::HighlighterCore::RendererData
    class RendererData;
    // Nested type: ::HighlightingSystem::HighlighterCore::RendererFilter
    class RendererFilter;
    public:
    // private readonly UnityEngine.Color occluderColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color occluderColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public HighlightingSystem.HighlighterMode mode
    // Size: 0x4
    // Offset: 0x28
    ::HighlightingSystem::HighlighterMode mode;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::HighlighterMode) == 0x4);
    // public System.Boolean forceRender
    // Size: 0x1
    // Offset: 0x2C
    bool forceRender;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceRender and: color
    char __padding2[0x3] = {};
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer> highlightableRenderers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer*>* highlightableRenderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer*>*) == 0x8);
    // private System.Boolean isDirty
    // Size: 0x1
    // Offset: 0x50
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean cachedOverlay
    // Size: 0x1
    // Offset: 0x51
    bool cachedOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cachedOverlay and: cachedColor
    char __padding7[0x2] = {};
    // private UnityEngine.Color cachedColor
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Color cachedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: cachedColor and: opaqueMaterial
    char __padding8[0x4] = {};
    // private UnityEngine.Material _opaqueMaterial
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* opaqueMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private HighlightingSystem.HighlighterCore/RendererFilter _rendererFilter
    // Size: 0x8
    // Offset: 0x70
    ::HighlightingSystem::HighlighterCore::RendererFilter* rendererFilter;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::HighlighterCore::RendererFilter*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String keywordOverlay
    static constexpr const char* keywordOverlay = "HIGHLIGHTING_OVERLAY";
    // Get static field: static public System.String keywordOverlay
    static ::StringW _get_keywordOverlay();
    // Set static field: static public System.String keywordOverlay
    static void _set_keywordOverlay(::StringW value);
    // Get static field: static private readonly HighlightingSystem.HighlighterMode[] renderingOrder
    static ::ArrayW<::HighlightingSystem::HighlighterMode> _get_renderingOrder();
    // Set static field: static private readonly HighlightingSystem.HighlighterMode[] renderingOrder
    static void _set_renderingOrder(::ArrayW<::HighlightingSystem::HighlighterMode> value);
    // static field const value: static private System.Int32 poolChunkSize
    static constexpr const int poolChunkSize = 4;
    // Get static field: static private System.Int32 poolChunkSize
    static int _get_poolChunkSize();
    // Set static field: static private System.Int32 poolChunkSize
    static void _set_poolChunkSize(int value);
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Renderer> sRenderers
    static ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* _get_sRenderers();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Renderer> sRenderers
    static void _set_sRenderers(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* value);
    // Get static field: static private readonly System.Collections.Generic.Stack`1<HighlightingSystem.HighlighterCore/RendererData> sRendererDataPool
    static ::System::Collections::Generic::Stack_1<::HighlightingSystem::HighlighterCore::RendererData*>* _get_sRendererDataPool();
    // Set static field: static private readonly System.Collections.Generic.Stack`1<HighlightingSystem.HighlighterCore/RendererData> sRendererDataPool
    static void _set_sRendererDataPool(::System::Collections::Generic::Stack_1<::HighlightingSystem::HighlighterCore::RendererData*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore/RendererData> sRendererData
    static ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore::RendererData*>* _get_sRendererData();
    // Set static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore/RendererData> sRendererData
    static void _set_sRendererData(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore::RendererData*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<System.Int32> sSubmeshIndices
    static ::System::Collections::Generic::List_1<int>* _get_sSubmeshIndices();
    // Set static field: static private readonly System.Collections.Generic.List`1<System.Int32> sSubmeshIndices
    static void _set_sSubmeshIndices(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore> sHighlighters
    static ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore*>* _get_sHighlighters();
    // Set static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore> sHighlighters
    static void _set_sHighlighters(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore*>* value);
    // Get static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlighterCore> sHighlightersReadonly
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* _get_sHighlightersReadonly();
    // Set static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlighterCore> sHighlightersReadonly
    static void _set_sHighlightersReadonly(::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* value);
    // Get static field: static private UnityEngine.Shader _opaqueShader
    static ::UnityEngine::Shader* _get__opaqueShader();
    // Set static field: static private UnityEngine.Shader _opaqueShader
    static void _set__opaqueShader(::UnityEngine::Shader* value);
    // Get static field: static private UnityEngine.Shader _transparentShader
    static ::UnityEngine::Shader* _get__transparentShader();
    // Set static field: static private UnityEngine.Shader _transparentShader
    static void _set__transparentShader(::UnityEngine::Shader* value);
    // Get static field: static private HighlightingSystem.HighlighterCore/RendererFilter _globalRendererFilter
    static ::HighlightingSystem::HighlighterCore::RendererFilter* _get__globalRendererFilter();
    // Set static field: static private HighlightingSystem.HighlighterCore/RendererFilter _globalRendererFilter
    static void _set__globalRendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value);
    // Get instance field reference: private readonly UnityEngine.Color occluderColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_occluderColor();
    // Get instance field reference: public HighlightingSystem.HighlighterMode mode
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlighterMode& dyn_mode();
    // Get instance field reference: public System.Boolean forceRender
    [[deprecated("Use field access instead!")]] bool& dyn_forceRender();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: private UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer> highlightableRenderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer*>*& dyn_highlightableRenderers();
    // Get instance field reference: private System.Boolean isDirty
    [[deprecated("Use field access instead!")]] bool& dyn_isDirty();
    // Get instance field reference: private System.Boolean cachedOverlay
    [[deprecated("Use field access instead!")]] bool& dyn_cachedOverlay();
    // Get instance field reference: private UnityEngine.Color cachedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_cachedColor();
    // Get instance field reference: private UnityEngine.Material _opaqueMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__opaqueMaterial();
    // Get instance field reference: private HighlightingSystem.HighlighterCore/RendererFilter _rendererFilter
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlighterCore::RendererFilter*& dyn__rendererFilter();
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlighterCore> get_highlighters()
    // Offset: 0x15DEFB4
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* get_highlighters();
    // static public UnityEngine.Shader get_opaqueShader()
    // Offset: 0x15DF098
    static ::UnityEngine::Shader* get_opaqueShader();
    // static public UnityEngine.Shader get_transparentShader()
    // Offset: 0x15DF1A4
    static ::UnityEngine::Shader* get_transparentShader();
    // private UnityEngine.Material get_opaqueMaterial()
    // Offset: 0x15DF2B0
    ::UnityEngine::Material* get_opaqueMaterial();
    // static public HighlightingSystem.HighlighterCore/RendererFilter get_globalRendererFilter()
    // Offset: 0x15DD8F8
    static ::HighlightingSystem::HighlighterCore::RendererFilter* get_globalRendererFilter();
    // static public System.Void set_globalRendererFilter(HighlightingSystem.HighlighterCore/RendererFilter value)
    // Offset: 0x15DF414
    static void set_globalRendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value);
    // public HighlightingSystem.HighlighterCore/RendererFilter get_rendererFilter()
    // Offset: 0x15DD8F0
    ::HighlightingSystem::HighlighterCore::RendererFilter* get_rendererFilter();
    // public System.Void set_rendererFilter(HighlightingSystem.HighlighterCore/RendererFilter value)
    // Offset: 0x15DF5F0
    void set_rendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value);
    // protected HighlightingSystem.HighlighterCore/RendererFilter get_rendererFilterToUse()
    // Offset: 0x15DF62C
    ::HighlightingSystem::HighlighterCore::RendererFilter* get_rendererFilterToUse();
    // static public System.Boolean DefaultRendererFilter(UnityEngine.Renderer renderer, System.Collections.Generic.List`1<System.Int32> submeshIndices)
    // Offset: 0x15DF6FC
    static bool DefaultRendererFilter(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices);
    // private System.Void Awake()
    // Offset: 0x15DF860
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x15DF8C4
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x15DF9B4
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x15DFB24
    void OnDestroy();
    // protected System.Void AwakeSafe()
    // Offset: 0x15DFBD8
    void AwakeSafe();
    // protected System.Void OnEnableSafe()
    // Offset: 0x15DFBDC
    void OnEnableSafe();
    // protected System.Void OnDisableSafe()
    // Offset: 0x15DFBE0
    void OnDisableSafe();
    // protected System.Void OnDestroySafe()
    // Offset: 0x15DFBE4
    void OnDestroySafe();
    // public System.Void SetDirty()
    // Offset: 0x15DD7C0
    void SetDirty();
    // protected System.Void UpdateHighlighting()
    // Offset: 0x15DFBE8
    void UpdateHighlighting();
    // private System.Void ClearRenderers()
    // Offset: 0x15DFA60
    void ClearRenderers();
    // private System.Void UpdateRenderers()
    // Offset: 0x15DFBEC
    void UpdateRenderers();
    // private System.Void GrabRenderers(UnityEngine.Transform t)
    // Offset: 0x15DFF54
    void GrabRenderers(::UnityEngine::Transform* t);
    // private System.Void FillBufferInternal(UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x15E15C0
    void FillBufferInternal(::UnityEngine::Rendering::CommandBuffer* buffer);
    // static private System.Void ExpandRendererDataPool(System.Int32 count)
    // Offset: 0x15E1BBC
    static void ExpandRendererDataPool(int count);
    // static private HighlightingSystem.HighlighterCore/RendererData GetRendererDataInstance()
    // Offset: 0x15E14D4
    static ::HighlightingSystem::HighlighterCore::RendererData* GetRendererDataInstance();
    // static private System.Void ReleaseRendererDataInstance(HighlightingSystem.HighlighterCore/RendererData instance)
    // Offset: 0x15E0C20
    static void ReleaseRendererDataInstance(::HighlightingSystem::HighlighterCore::RendererData* instance);
    // static public System.Void FillBuffer(UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x15E1CF4
    static void FillBuffer(::UnityEngine::Rendering::CommandBuffer* buffer);
    // public System.Void .ctor()
    // Offset: 0x15DEED0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlighterCore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlighterCore*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x15E2008
    static void _cctor();
  }; // HighlightingSystem.HighlighterCore
  #pragma pack(pop)
  static check_size<sizeof(HighlighterCore), 112 + sizeof(::HighlightingSystem::HighlighterCore::RendererFilter*)> __HighlightingSystem_HighlighterCoreSizeCheck;
  static_assert(sizeof(HighlighterCore) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_highlighters
// Il2CppName: get_highlighters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* (*)()>(&HighlightingSystem::HighlighterCore::get_highlighters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_highlighters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_opaqueShader
// Il2CppName: get_opaqueShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)()>(&HighlightingSystem::HighlighterCore::get_opaqueShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_opaqueShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_transparentShader
// Il2CppName: get_transparentShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)()>(&HighlightingSystem::HighlighterCore::get_transparentShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_transparentShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_opaqueMaterial
// Il2CppName: get_opaqueMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::get_opaqueMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_opaqueMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_globalRendererFilter
// Il2CppName: get_globalRendererFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlighterCore::RendererFilter* (*)()>(&HighlightingSystem::HighlighterCore::get_globalRendererFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_globalRendererFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::set_globalRendererFilter
// Il2CppName: set_globalRendererFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HighlightingSystem::HighlighterCore::RendererFilter*)>(&HighlightingSystem::HighlighterCore::set_globalRendererFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlighterCore/RendererFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "set_globalRendererFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_rendererFilter
// Il2CppName: get_rendererFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlighterCore::RendererFilter* (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::get_rendererFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_rendererFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::set_rendererFilter
// Il2CppName: set_rendererFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)(::HighlightingSystem::HighlighterCore::RendererFilter*)>(&HighlightingSystem::HighlighterCore::set_rendererFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlighterCore/RendererFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "set_rendererFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::get_rendererFilterToUse
// Il2CppName: get_rendererFilterToUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlighterCore::RendererFilter* (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::get_rendererFilterToUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "get_rendererFilterToUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::DefaultRendererFilter
// Il2CppName: DefaultRendererFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Renderer*, ::System::Collections::Generic::List_1<int>*)>(&HighlightingSystem::HighlighterCore::DefaultRendererFilter)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* submeshIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "DefaultRendererFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, submeshIndices});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::AwakeSafe
// Il2CppName: AwakeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::AwakeSafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "AwakeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnEnableSafe
// Il2CppName: OnEnableSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnEnableSafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnEnableSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnDisableSafe
// Il2CppName: OnDisableSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnDisableSafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnDisableSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::OnDestroySafe
// Il2CppName: OnDestroySafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::OnDestroySafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "OnDestroySafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::SetDirty
// Il2CppName: SetDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::SetDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "SetDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::UpdateHighlighting
// Il2CppName: UpdateHighlighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::UpdateHighlighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "UpdateHighlighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::ClearRenderers
// Il2CppName: ClearRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::ClearRenderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "ClearRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::UpdateRenderers
// Il2CppName: UpdateRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)()>(&HighlightingSystem::HighlighterCore::UpdateRenderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "UpdateRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::GrabRenderers
// Il2CppName: GrabRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)(::UnityEngine::Transform*)>(&HighlightingSystem::HighlighterCore::GrabRenderers)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "GrabRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::FillBufferInternal
// Il2CppName: FillBufferInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterCore::*)(::UnityEngine::Rendering::CommandBuffer*)>(&HighlightingSystem::HighlighterCore::FillBufferInternal)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "FillBufferInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::ExpandRendererDataPool
// Il2CppName: ExpandRendererDataPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&HighlightingSystem::HighlighterCore::ExpandRendererDataPool)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "ExpandRendererDataPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::GetRendererDataInstance
// Il2CppName: GetRendererDataInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlighterCore::RendererData* (*)()>(&HighlightingSystem::HighlighterCore::GetRendererDataInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "GetRendererDataInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::ReleaseRendererDataInstance
// Il2CppName: ReleaseRendererDataInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HighlightingSystem::HighlighterCore::RendererData*)>(&HighlightingSystem::HighlighterCore::ReleaseRendererDataInstance)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlighterCore/RendererData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "ReleaseRendererDataInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::FillBuffer
// Il2CppName: FillBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Rendering::CommandBuffer*)>(&HighlightingSystem::HighlighterCore::FillBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), "FillBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HighlightingSystem::HighlighterCore::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HighlightingSystem::HighlighterCore::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterCore*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
