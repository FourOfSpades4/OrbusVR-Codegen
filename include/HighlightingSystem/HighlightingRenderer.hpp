// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HighlightingSystem.HighlightingBase
#include "HighlightingSystem/HighlightingBase.hpp"
// Including type: HighlightingSystem.HighlightingPreset
#include "HighlightingSystem/HighlightingPreset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingRenderer
  class HighlightingRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::HighlightingRenderer);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlightingRenderer*, "HighlightingSystem", "HighlightingRenderer");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x128
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.HighlightingRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC1E30
  class HighlightingRenderer : public ::HighlightingSystem::HighlightingBase {
    public:
    public:
    // private System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> _presets
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>* presets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>*) == 0x8);
    // private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlightingPreset> _presetsReadonly
    // Size: 0x8
    // Offset: 0x120
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>* presetsReadonly;
    // Field size check
    static_assert(sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>*) == 0x8);
    public:
    // Get static field: static public readonly System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> defaultPresets
    static ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>* _get_defaultPresets();
    // Set static field: static public readonly System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> defaultPresets
    static void _set_defaultPresets(::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>* value);
    // Get instance field reference: private System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> _presets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>*& dyn__presets();
    // Get instance field reference: private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlightingPreset> _presetsReadonly
    [[deprecated("Use field access instead!")]] ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>*& dyn__presetsReadonly();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlightingPreset> get_presets()
    // Offset: 0x1AB6578
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>* get_presets();
    // public System.Boolean GetPreset(System.String name, out HighlightingSystem.HighlightingPreset preset)
    // Offset: 0x1AB65E8
    bool GetPreset(::StringW name, ByRef<::HighlightingSystem::HighlightingPreset> preset);
    // public System.Boolean AddPreset(HighlightingSystem.HighlightingPreset preset, System.Boolean overwrite)
    // Offset: 0x1AB670C
    bool AddPreset(::HighlightingSystem::HighlightingPreset preset, bool overwrite);
    // public System.Boolean RemovePreset(System.String name)
    // Offset: 0x1AB68A0
    bool RemovePreset(::StringW name);
    // public System.Boolean LoadPreset(System.String name)
    // Offset: 0x1AB69A8
    bool LoadPreset(::StringW name);
    // public System.Void ApplyPreset(HighlightingSystem.HighlightingPreset preset)
    // Offset: 0x1AB6A08
    void ApplyPreset(::HighlightingSystem::HighlightingPreset preset);
    // public System.Void ClearPresets()
    // Offset: 0x1AB6A80
    void ClearPresets();
    // public System.Void .ctor()
    // Offset: 0x1AB6AE0
    // Implemented from: HighlightingSystem.HighlightingBase
    // Base method: System.Void HighlightingBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightingRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightingRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1AB6BA8
    // Implemented from: HighlightingSystem.HighlightingBase
    // Base method: System.Void HighlightingBase::.cctor()
    static void _cctor();
  }; // HighlightingSystem.HighlightingRenderer
  #pragma pack(pop)
  static check_size<sizeof(HighlightingRenderer), 288 + sizeof(::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>*)> __HighlightingSystem_HighlightingRendererSizeCheck;
  static_assert(sizeof(HighlightingRenderer) == 0x128);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::get_presets
// Il2CppName: get_presets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>* (HighlightingSystem::HighlightingRenderer::*)()>(&HighlightingSystem::HighlightingRenderer::get_presets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "get_presets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::GetPreset
// Il2CppName: GetPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingRenderer::*)(::StringW, ByRef<::HighlightingSystem::HighlightingPreset>)>(&HighlightingSystem::HighlightingRenderer::GetPreset)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* preset = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingPreset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "GetPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, preset});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::AddPreset
// Il2CppName: AddPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingRenderer::*)(::HighlightingSystem::HighlightingPreset, bool)>(&HighlightingSystem::HighlightingRenderer::AddPreset)> {
  static const MethodInfo* get() {
    static auto* preset = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingPreset")->byval_arg;
    static auto* overwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "AddPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{preset, overwrite});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::RemovePreset
// Il2CppName: RemovePreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingRenderer::*)(::StringW)>(&HighlightingSystem::HighlightingRenderer::RemovePreset)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "RemovePreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::LoadPreset
// Il2CppName: LoadPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingRenderer::*)(::StringW)>(&HighlightingSystem::HighlightingRenderer::LoadPreset)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "LoadPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::ApplyPreset
// Il2CppName: ApplyPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingRenderer::*)(::HighlightingSystem::HighlightingPreset)>(&HighlightingSystem::HighlightingRenderer::ApplyPreset)> {
  static const MethodInfo* get() {
    static auto* preset = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingPreset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "ApplyPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{preset});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::ClearPresets
// Il2CppName: ClearPresets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingRenderer::*)()>(&HighlightingSystem::HighlightingRenderer::ClearPresets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), "ClearPresets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HighlightingSystem::HighlightingRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HighlightingSystem::HighlightingRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
