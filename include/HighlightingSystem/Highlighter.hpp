// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HighlightingSystem.HighlighterCore
#include "HighlightingSystem/HighlighterCore.hpp"
// Including type: HighlightingSystem.LoopMode
#include "HighlightingSystem/LoopMode.hpp"
// Including type: HighlightingSystem.Easing
#include "HighlightingSystem/Easing.hpp"
// Including type: HighlightingSystem.RendererFilterMode
#include "HighlightingSystem/RendererFilterMode.hpp"
// Including type: UnityEngine.GradientColorKey
#include "UnityEngine/GradientColorKey.hpp"
// Including type: UnityEngine.GradientAlphaKey
#include "UnityEngine/GradientAlphaKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: Highlighter
  class Highlighter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::Highlighter);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::Highlighter*, "HighlightingSystem", "Highlighter");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.Highlighter
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC1D2C
  class Highlighter : public ::HighlightingSystem::HighlighterCore {
    public:
    public:
    // protected System.Boolean _overlay
    // Size: 0x1
    // Offset: 0x78
    bool overlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _occluder
    // Size: 0x1
    // Offset: 0x79
    bool occluder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: occluder and: hoverColor
    char __padding1[0x2] = {};
    // protected UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x7C
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected System.Int32 _hoverFrame
    // Size: 0x4
    // Offset: 0x8C
    int hoverFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _tween
    // Size: 0x1
    // Offset: 0x90
    bool tween;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tween and: tweenGradient
    char __padding4[0x7] = {};
    // protected UnityEngine.Gradient _tweenGradient
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Gradient* tweenGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // protected System.Single _tweenDuration
    // Size: 0x4
    // Offset: 0xA0
    float tweenDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _tweenReverse
    // Size: 0x1
    // Offset: 0xA4
    bool tweenReverse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tweenReverse and: tweenLoop
    char __padding7[0x3] = {};
    // protected HighlightingSystem.LoopMode _tweenLoop
    // Size: 0x4
    // Offset: 0xA8
    ::HighlightingSystem::LoopMode tweenLoop;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::LoopMode) == 0x4);
    // protected HighlightingSystem.Easing _tweenEasing
    // Size: 0x4
    // Offset: 0xAC
    ::HighlightingSystem::Easing tweenEasing;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::Easing) == 0x4);
    // protected System.Single _tweenDelay
    // Size: 0x4
    // Offset: 0xB0
    float tweenDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 _tweenRepeatCount
    // Size: 0x4
    // Offset: 0xB4
    int tweenRepeatCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _tweenUseUnscaledTime
    // Size: 0x1
    // Offset: 0xB8
    bool tweenUseUnscaledTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _constant
    // Size: 0x1
    // Offset: 0xB9
    bool constant;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: constant and: constantColor
    char __padding13[0x2] = {};
    // protected UnityEngine.Color _constantColor
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Color constantColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected System.Single _constantFadeInTime
    // Size: 0x4
    // Offset: 0xCC
    float constantFadeInTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _constantFadeOutTime
    // Size: 0x4
    // Offset: 0xD0
    float constantFadeOutTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected HighlightingSystem.Easing _constantEasing
    // Size: 0x4
    // Offset: 0xD4
    ::HighlightingSystem::Easing constantEasing;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::Easing) == 0x4);
    // protected System.Boolean _constantUseUnscaledTime
    // Size: 0x1
    // Offset: 0xD8
    bool constantUseUnscaledTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: constantUseUnscaledTime and: filterMode
    char __padding18[0x3] = {};
    // protected HighlightingSystem.RendererFilterMode _filterMode
    // Size: 0x4
    // Offset: 0xDC
    ::HighlightingSystem::RendererFilterMode filterMode;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::RendererFilterMode) == 0x4);
    // protected System.Collections.Generic.List`1<UnityEngine.Transform> _filterList
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* filterList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // protected System.Boolean _tweenEnabled
    // Size: 0x1
    // Offset: 0xE8
    bool tweenEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tweenEnabled and: tweenStart
    char __padding21[0x3] = {};
    // protected System.Single _tweenStart
    // Size: 0x4
    // Offset: 0xEC
    float tweenStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _constantEnabled
    // Size: 0x1
    // Offset: 0xF0
    bool constantEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: constantEnabled and: constantStart
    char __padding23[0x3] = {};
    // protected System.Single _constantStart
    // Size: 0x4
    // Offset: 0xF4
    float constantStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _constantDuration
    // Size: 0x4
    // Offset: 0xF8
    float constantDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: constantDuration and: flashingColorKeys
    char __padding25[0x4] = {};
    // private UnityEngine.GradientColorKey[] flashingColorKeys
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::GradientColorKey> flashingColorKeys;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GradientColorKey>) == 0x8);
    // private UnityEngine.GradientAlphaKey[] flashingAlphaKeys
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::GradientAlphaKey> flashingAlphaKeys;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GradientAlphaKey>) == 0x8);
    public:
    // static field const value: static protected System.Single HALFPI
    static constexpr const float HALFPI = 1.5707964;
    // Get static field: static protected System.Single HALFPI
    static float _get_HALFPI();
    // Set static field: static protected System.Single HALFPI
    static void _set_HALFPI(float value);
    // Get instance field reference: protected System.Boolean _overlay
    [[deprecated("Use field access instead!")]] bool& dyn__overlay();
    // Get instance field reference: protected System.Boolean _occluder
    [[deprecated("Use field access instead!")]] bool& dyn__occluder();
    // Get instance field reference: protected UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: protected System.Int32 _hoverFrame
    [[deprecated("Use field access instead!")]] int& dyn__hoverFrame();
    // Get instance field reference: protected System.Boolean _tween
    [[deprecated("Use field access instead!")]] bool& dyn__tween();
    // Get instance field reference: protected UnityEngine.Gradient _tweenGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn__tweenGradient();
    // Get instance field reference: protected System.Single _tweenDuration
    [[deprecated("Use field access instead!")]] float& dyn__tweenDuration();
    // Get instance field reference: protected System.Boolean _tweenReverse
    [[deprecated("Use field access instead!")]] bool& dyn__tweenReverse();
    // Get instance field reference: protected HighlightingSystem.LoopMode _tweenLoop
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::LoopMode& dyn__tweenLoop();
    // Get instance field reference: protected HighlightingSystem.Easing _tweenEasing
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::Easing& dyn__tweenEasing();
    // Get instance field reference: protected System.Single _tweenDelay
    [[deprecated("Use field access instead!")]] float& dyn__tweenDelay();
    // Get instance field reference: protected System.Int32 _tweenRepeatCount
    [[deprecated("Use field access instead!")]] int& dyn__tweenRepeatCount();
    // Get instance field reference: protected System.Boolean _tweenUseUnscaledTime
    [[deprecated("Use field access instead!")]] bool& dyn__tweenUseUnscaledTime();
    // Get instance field reference: protected System.Boolean _constant
    [[deprecated("Use field access instead!")]] bool& dyn__constant();
    // Get instance field reference: protected UnityEngine.Color _constantColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__constantColor();
    // Get instance field reference: protected System.Single _constantFadeInTime
    [[deprecated("Use field access instead!")]] float& dyn__constantFadeInTime();
    // Get instance field reference: protected System.Single _constantFadeOutTime
    [[deprecated("Use field access instead!")]] float& dyn__constantFadeOutTime();
    // Get instance field reference: protected HighlightingSystem.Easing _constantEasing
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::Easing& dyn__constantEasing();
    // Get instance field reference: protected System.Boolean _constantUseUnscaledTime
    [[deprecated("Use field access instead!")]] bool& dyn__constantUseUnscaledTime();
    // Get instance field reference: protected HighlightingSystem.RendererFilterMode _filterMode
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::RendererFilterMode& dyn__filterMode();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Transform> _filterList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn__filterList();
    // Get instance field reference: protected System.Boolean _tweenEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__tweenEnabled();
    // Get instance field reference: protected System.Single _tweenStart
    [[deprecated("Use field access instead!")]] float& dyn__tweenStart();
    // Get instance field reference: protected System.Boolean _constantEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__constantEnabled();
    // Get instance field reference: protected System.Single _constantStart
    [[deprecated("Use field access instead!")]] float& dyn__constantStart();
    // Get instance field reference: protected System.Single _constantDuration
    [[deprecated("Use field access instead!")]] float& dyn__constantDuration();
    // Get instance field reference: private UnityEngine.GradientColorKey[] flashingColorKeys
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GradientColorKey>& dyn_flashingColorKeys();
    // Get instance field reference: private UnityEngine.GradientAlphaKey[] flashingAlphaKeys
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GradientAlphaKey>& dyn_flashingAlphaKeys();
    // public System.Boolean get_overlay()
    // Offset: 0x15DD3AC
    bool get_overlay();
    // public System.Void set_overlay(System.Boolean value)
    // Offset: 0x15DD3B4
    void set_overlay(bool value);
    // public System.Boolean get_occluder()
    // Offset: 0x15DD3C0
    bool get_occluder();
    // public System.Void set_occluder(System.Boolean value)
    // Offset: 0x15DD3C8
    void set_occluder(bool value);
    // public System.Boolean get_tween()
    // Offset: 0x15DD3D4
    bool get_tween();
    // public System.Void set_tween(System.Boolean value)
    // Offset: 0x15DD3DC
    void set_tween(bool value);
    // public UnityEngine.Gradient get_tweenGradient()
    // Offset: 0x15DD43C
    ::UnityEngine::Gradient* get_tweenGradient();
    // public System.Void set_tweenGradient(UnityEngine.Gradient value)
    // Offset: 0x15DD444
    void set_tweenGradient(::UnityEngine::Gradient* value);
    // public System.Single get_tweenDuration()
    // Offset: 0x15DD44C
    float get_tweenDuration();
    // public System.Void set_tweenDuration(System.Single value)
    // Offset: 0x15DD454
    void set_tweenDuration(float value);
    // public System.Single get_tweenDelay()
    // Offset: 0x15DD4B8
    float get_tweenDelay();
    // public System.Void set_tweenDelay(System.Single value)
    // Offset: 0x15DD4C0
    void set_tweenDelay(float value);
    // public System.Boolean get_tweenUseUnscaledTime()
    // Offset: 0x15DD4C8
    bool get_tweenUseUnscaledTime();
    // public System.Void set_tweenUseUnscaledTime(System.Boolean value)
    // Offset: 0x15DD4D0
    void set_tweenUseUnscaledTime(bool value);
    // public HighlightingSystem.LoopMode get_tweenLoop()
    // Offset: 0x15DD568
    ::HighlightingSystem::LoopMode get_tweenLoop();
    // public System.Void set_tweenLoop(HighlightingSystem.LoopMode value)
    // Offset: 0x15DD570
    void set_tweenLoop(::HighlightingSystem::LoopMode value);
    // public HighlightingSystem.Easing get_tweenEasing()
    // Offset: 0x15DD578
    ::HighlightingSystem::Easing get_tweenEasing();
    // public System.Void set_tweenEasing(HighlightingSystem.Easing value)
    // Offset: 0x15DD580
    void set_tweenEasing(::HighlightingSystem::Easing value);
    // public System.Boolean get_tweenReverse()
    // Offset: 0x15DD588
    bool get_tweenReverse();
    // public System.Void set_tweenReverse(System.Boolean value)
    // Offset: 0x15DD590
    void set_tweenReverse(bool value);
    // public System.Int32 get_tweenRepeatCount()
    // Offset: 0x15DD59C
    int get_tweenRepeatCount();
    // public System.Void set_tweenRepeatCount(System.Int32 value)
    // Offset: 0x15DD5A4
    void set_tweenRepeatCount(int value);
    // public System.Boolean get_constant()
    // Offset: 0x15DD5AC
    bool get_constant();
    // public System.Void set_constant(System.Boolean value)
    // Offset: 0x15DD5B4
    void set_constant(bool value);
    // public UnityEngine.Color get_constantColor()
    // Offset: 0x15DD60C
    ::UnityEngine::Color get_constantColor();
    // public System.Void set_constantColor(UnityEngine.Color value)
    // Offset: 0x15DD618
    void set_constantColor(::UnityEngine::Color value);
    // public System.Void set_constantFadeTime(System.Single value)
    // Offset: 0x15DD624
    void set_constantFadeTime(float value);
    // public System.Single get_constantFadeInTime()
    // Offset: 0x15DD654
    float get_constantFadeInTime();
    // public System.Void set_constantFadeInTime(System.Single value)
    // Offset: 0x15DD65C
    void set_constantFadeInTime(float value);
    // public System.Single get_constantFadeOutTime()
    // Offset: 0x15DD6A0
    float get_constantFadeOutTime();
    // public System.Void set_constantFadeOutTime(System.Single value)
    // Offset: 0x15DD6A8
    void set_constantFadeOutTime(float value);
    // public System.Boolean get_constantUseUnscaledTime()
    // Offset: 0x15DD6EC
    bool get_constantUseUnscaledTime();
    // public System.Void set_constantUseUnscaledTime(System.Boolean value)
    // Offset: 0x15DD6F4
    void set_constantUseUnscaledTime(bool value);
    // public HighlightingSystem.Easing get_constantEasing()
    // Offset: 0x15DD78C
    ::HighlightingSystem::Easing get_constantEasing();
    // public System.Void set_constantEasing(HighlightingSystem.Easing value)
    // Offset: 0x15DD794
    void set_constantEasing(::HighlightingSystem::Easing value);
    // public HighlightingSystem.RendererFilterMode get_filterMode()
    // Offset: 0x15DD79C
    ::HighlightingSystem::RendererFilterMode get_filterMode();
    // public System.Void set_filterMode(HighlightingSystem.RendererFilterMode value)
    // Offset: 0x15DD7A4
    void set_filterMode(::HighlightingSystem::RendererFilterMode value);
    // public System.Collections.Generic.List`1<UnityEngine.Transform> get_filterList()
    // Offset: 0x15DD7CC
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* get_filterList();
    // protected System.Boolean get_hover()
    // Offset: 0x15DD970
    bool get_hover();
    // protected System.Void set_hover(System.Boolean value)
    // Offset: 0x15DD99C
    void set_hover(bool value);
    // protected System.Single get_constantValue()
    // Offset: 0x15DD9E4
    float get_constantValue();
    // protected System.Void OnDidApplyAnimationProperties()
    // Offset: 0x15DDAA8
    void OnDidApplyAnimationProperties();
    // protected System.Void ValidateAll()
    // Offset: 0x15DDAAC
    void ValidateAll();
    // protected System.Void ValidateRanges()
    // Offset: 0x15DD484
    void ValidateRanges();
    // public System.Void Hover(UnityEngine.Color color)
    // Offset: 0x15DDB6C
    void Hover(::UnityEngine::Color color);
    // public System.Void ConstantOn(System.Single fadeTime)
    // Offset: 0x15DDBAC
    void ConstantOn(float fadeTime);
    // public System.Void ConstantOn(UnityEngine.Color color, System.Single fadeTime)
    // Offset: 0x15DDC90
    void ConstantOn(::UnityEngine::Color color, float fadeTime);
    // public System.Void ConstantOff(System.Single fadeTime)
    // Offset: 0x15DDCA4
    void ConstantOff(float fadeTime);
    // public System.Void ConstantSwitch(System.Single fadeTime)
    // Offset: 0x15DDCAC
    void ConstantSwitch(float fadeTime);
    // public System.Void ConstantOnImmediate()
    // Offset: 0x15DDCBC
    void ConstantOnImmediate();
    // public System.Void ConstantOnImmediate(UnityEngine.Color color)
    // Offset: 0x15DDCC8
    void ConstantOnImmediate(::UnityEngine::Color color);
    // public System.Void ConstantOffImmediate()
    // Offset: 0x15DDCDC
    void ConstantOffImmediate();
    // public System.Void ConstantSwitchImmediate()
    // Offset: 0x15DDCE8
    void ConstantSwitchImmediate();
    // public System.Void Off()
    // Offset: 0x15DDCFC
    void Off();
    // public System.Void TweenStart()
    // Offset: 0x15DDD40
    void TweenStart();
    // public System.Void TweenStop()
    // Offset: 0x15DDD48
    void TweenStop();
    // public System.Void TweenSet(System.Boolean value)
    // Offset: 0x15DD3E4
    void TweenSet(bool value);
    // public System.Void ConstantSet(System.Single fadeTime, System.Boolean value)
    // Offset: 0x15DDBB4
    void ConstantSet(float fadeTime, bool value);
    // protected System.Void TweenSet()
    // Offset: 0x15DDB64
    void TweenSet();
    // protected System.Void ConstantSet()
    // Offset: 0x15DD64C
    void ConstantSet();
    // protected System.Void ConstantSet(System.Boolean value)
    // Offset: 0x15DD5BC
    void ConstantSet(bool value);
    // protected System.Boolean TransformFilterInclude(UnityEngine.Renderer renderer, System.Collections.Generic.List`1<System.Int32> submeshIndices)
    // Offset: 0x15DE238
    bool TransformFilterInclude(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices);
    // protected System.Boolean TransformFilterExclude(UnityEngine.Renderer renderer, System.Collections.Generic.List`1<System.Int32> submeshIndices)
    // Offset: 0x15DE3A0
    bool TransformFilterExclude(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices);
    // protected System.Single Loop(System.Single x, HighlightingSystem.LoopMode loop, System.Boolean reverse, System.Int32 repeatCount)
    // Offset: 0x15DDEB0
    float Loop(float x, ::HighlightingSystem::LoopMode loop, bool reverse, int repeatCount);
    // protected System.Single Ease(System.Single x, HighlightingSystem.Easing easing)
    // Offset: 0x15DE050
    float Ease(float x, ::HighlightingSystem::Easing easing);
    // protected System.Single GetTweenTime()
    // Offset: 0x15DD550
    float GetTweenTime();
    // protected System.Single GetConstantTime()
    // Offset: 0x15DD774
    float GetConstantTime();
    // static public UnityEngine.Color HSVToRGB(System.Single hue, System.Single saturation, System.Single value)
    // Offset: 0x15DE508
    static ::UnityEngine::Color HSVToRGB(float hue, float saturation, float value);
    // public System.Void On()
    // Offset: 0x15DE674
    void On();
    // public System.Void On(UnityEngine.Color color)
    // Offset: 0x15DE6AC
    void On(::UnityEngine::Color color);
    // public System.Void OnParams(UnityEngine.Color color)
    // Offset: 0x15DE6B0
    void OnParams(::UnityEngine::Color color);
    // public System.Void ConstantParams(UnityEngine.Color color)
    // Offset: 0x15DE6BC
    void ConstantParams(::UnityEngine::Color color);
    // public System.Void FlashingParams(UnityEngine.Color color1, UnityEngine.Color color2, System.Single freq)
    // Offset: 0x15DE6C8
    void FlashingParams(::UnityEngine::Color color1, ::UnityEngine::Color color2, float freq);
    // public System.Void FlashingOn()
    // Offset: 0x15DE7C8
    void FlashingOn();
    // public System.Void FlashingOn(UnityEngine.Color color1, UnityEngine.Color color2)
    // Offset: 0x15DE7D0
    void FlashingOn(::UnityEngine::Color color1, ::UnityEngine::Color color2);
    // public System.Void FlashingOn(UnityEngine.Color color1, UnityEngine.Color color2, System.Single freq)
    // Offset: 0x15DE8C8
    void FlashingOn(::UnityEngine::Color color1, ::UnityEngine::Color color2, float freq);
    // public System.Void FlashingOn(System.Single freq)
    // Offset: 0x15DE9E0
    void FlashingOn(float freq);
    // public System.Void FlashingOff()
    // Offset: 0x15DE9F4
    void FlashingOff();
    // public System.Void FlashingSwitch()
    // Offset: 0x15DE9FC
    void FlashingSwitch();
    // protected override HighlightingSystem.HighlighterCore/RendererFilter get_rendererFilterToUse()
    // Offset: 0x15DD7D4
    // Implemented from: HighlightingSystem.HighlighterCore
    // Base method: HighlightingSystem.HighlighterCore/RendererFilter HighlighterCore::get_rendererFilterToUse()
    ::HighlightingSystem::HighlighterCore::RendererFilter* get_rendererFilterToUse();
    // protected override System.Void OnEnableSafe()
    // Offset: 0x15DDB18
    // Implemented from: HighlightingSystem.HighlighterCore
    // Base method: System.Void HighlighterCore::OnEnableSafe()
    void OnEnableSafe();
    // protected override System.Void OnDisableSafe()
    // Offset: 0x15DDB1C
    // Implemented from: HighlightingSystem.HighlighterCore
    // Base method: System.Void HighlighterCore::OnDisableSafe()
    void OnDisableSafe();
    // protected override System.Void UpdateHighlighting()
    // Offset: 0x15DDD50
    // Implemented from: HighlightingSystem.HighlighterCore
    // Base method: System.Void HighlighterCore::UpdateHighlighting()
    void UpdateHighlighting();
    // public System.Void .ctor()
    // Offset: 0x15DEA0C
    // Implemented from: HighlightingSystem.HighlighterCore
    // Base method: System.Void HighlighterCore::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Highlighter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Highlighter*, creationType>()));
    }
  }; // HighlightingSystem.Highlighter
  #pragma pack(pop)
  static check_size<sizeof(Highlighter), 264 + sizeof(::ArrayW<::UnityEngine::GradientAlphaKey>)> __HighlightingSystem_HighlighterSizeCheck;
  static_assert(sizeof(Highlighter) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_overlay
// Il2CppName: get_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_overlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_overlay
// Il2CppName: set_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_overlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_occluder
// Il2CppName: get_occluder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_occluder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_occluder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_occluder
// Il2CppName: set_occluder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_occluder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_occluder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tween
// Il2CppName: get_tween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tween)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tween
// Il2CppName: set_tween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_tween)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenGradient
// Il2CppName: get_tweenGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenGradient
// Il2CppName: set_tweenGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Gradient*)>(&HighlightingSystem::Highlighter::set_tweenGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenDuration
// Il2CppName: get_tweenDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenDuration
// Il2CppName: set_tweenDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::set_tweenDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenDelay
// Il2CppName: get_tweenDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenDelay
// Il2CppName: set_tweenDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::set_tweenDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenUseUnscaledTime
// Il2CppName: get_tweenUseUnscaledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenUseUnscaledTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenUseUnscaledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenUseUnscaledTime
// Il2CppName: set_tweenUseUnscaledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_tweenUseUnscaledTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenUseUnscaledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenLoop
// Il2CppName: get_tweenLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::LoopMode (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenLoop
// Il2CppName: set_tweenLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::HighlightingSystem::LoopMode)>(&HighlightingSystem::Highlighter::set_tweenLoop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "LoopMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenEasing
// Il2CppName: get_tweenEasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::Easing (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenEasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenEasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenEasing
// Il2CppName: set_tweenEasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::HighlightingSystem::Easing)>(&HighlightingSystem::Highlighter::set_tweenEasing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "Easing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenEasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenReverse
// Il2CppName: get_tweenReverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenReverse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenReverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenReverse
// Il2CppName: set_tweenReverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_tweenReverse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenReverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_tweenRepeatCount
// Il2CppName: get_tweenRepeatCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_tweenRepeatCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_tweenRepeatCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_tweenRepeatCount
// Il2CppName: set_tweenRepeatCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(int)>(&HighlightingSystem::Highlighter::set_tweenRepeatCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_tweenRepeatCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constant
// Il2CppName: get_constant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constant
// Il2CppName: set_constant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_constant)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantColor
// Il2CppName: get_constantColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantColor
// Il2CppName: set_constantColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::set_constantColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantFadeTime
// Il2CppName: set_constantFadeTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::set_constantFadeTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantFadeTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantFadeInTime
// Il2CppName: get_constantFadeInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantFadeInTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantFadeInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantFadeInTime
// Il2CppName: set_constantFadeInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::set_constantFadeInTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantFadeInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantFadeOutTime
// Il2CppName: get_constantFadeOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantFadeOutTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantFadeOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantFadeOutTime
// Il2CppName: set_constantFadeOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::set_constantFadeOutTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantFadeOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantUseUnscaledTime
// Il2CppName: get_constantUseUnscaledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantUseUnscaledTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantUseUnscaledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantUseUnscaledTime
// Il2CppName: set_constantUseUnscaledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_constantUseUnscaledTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantUseUnscaledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantEasing
// Il2CppName: get_constantEasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::Easing (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantEasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantEasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_constantEasing
// Il2CppName: set_constantEasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::HighlightingSystem::Easing)>(&HighlightingSystem::Highlighter::set_constantEasing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "Easing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_constantEasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_filterMode
// Il2CppName: get_filterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::RendererFilterMode (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_filterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_filterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_filterMode
// Il2CppName: set_filterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::HighlightingSystem::RendererFilterMode)>(&HighlightingSystem::Highlighter::set_filterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "RendererFilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_filterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_filterList
// Il2CppName: get_filterList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>* (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_filterList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_filterList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_hover
// Il2CppName: get_hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_hover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::set_hover
// Il2CppName: set_hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::set_hover)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "set_hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_constantValue
// Il2CppName: get_constantValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_constantValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_constantValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ValidateAll
// Il2CppName: ValidateAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ValidateAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ValidateAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ValidateRanges
// Il2CppName: ValidateRanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ValidateRanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ValidateRanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::Hover
// Il2CppName: Hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::Hover)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "Hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOn
// Il2CppName: ConstantOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::ConstantOn)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOn
// Il2CppName: ConstantOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color, float)>(&HighlightingSystem::Highlighter::ConstantOn)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, fadeTime});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOff
// Il2CppName: ConstantOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::ConstantOff)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantSwitch
// Il2CppName: ConstantSwitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::ConstantSwitch)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantSwitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOnImmediate
// Il2CppName: ConstantOnImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ConstantOnImmediate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOnImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOnImmediate
// Il2CppName: ConstantOnImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::ConstantOnImmediate)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOnImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantOffImmediate
// Il2CppName: ConstantOffImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ConstantOffImmediate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantOffImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantSwitchImmediate
// Il2CppName: ConstantSwitchImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ConstantSwitchImmediate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantSwitchImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::Off
// Il2CppName: Off
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::Off)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "Off", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TweenStart
// Il2CppName: TweenStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::TweenStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TweenStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TweenStop
// Il2CppName: TweenStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::TweenStop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TweenStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TweenSet
// Il2CppName: TweenSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::TweenSet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TweenSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantSet
// Il2CppName: ConstantSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float, bool)>(&HighlightingSystem::Highlighter::ConstantSet)> {
  static const MethodInfo* get() {
    static auto* fadeTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeTime, value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TweenSet
// Il2CppName: TweenSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::TweenSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TweenSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantSet
// Il2CppName: ConstantSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::ConstantSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantSet
// Il2CppName: ConstantSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(bool)>(&HighlightingSystem::Highlighter::ConstantSet)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TransformFilterInclude
// Il2CppName: TransformFilterInclude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)(::UnityEngine::Renderer*, ::System::Collections::Generic::List_1<int>*)>(&HighlightingSystem::Highlighter::TransformFilterInclude)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* submeshIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TransformFilterInclude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, submeshIndices});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::TransformFilterExclude
// Il2CppName: TransformFilterExclude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::Highlighter::*)(::UnityEngine::Renderer*, ::System::Collections::Generic::List_1<int>*)>(&HighlightingSystem::Highlighter::TransformFilterExclude)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* submeshIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "TransformFilterExclude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer, submeshIndices});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::Loop
// Il2CppName: Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)(float, ::HighlightingSystem::LoopMode, bool, int)>(&HighlightingSystem::Highlighter::Loop)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "LoopMode")->byval_arg;
    static auto* reverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* repeatCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, loop, reverse, repeatCount});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::Ease
// Il2CppName: Ease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)(float, ::HighlightingSystem::Easing)>(&HighlightingSystem::Highlighter::Ease)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easing = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "Easing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "Ease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, easing});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::GetTweenTime
// Il2CppName: GetTweenTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::GetTweenTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "GetTweenTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::GetConstantTime
// Il2CppName: GetConstantTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::GetConstantTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "GetConstantTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::HSVToRGB
// Il2CppName: HSVToRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(float, float, float)>(&HighlightingSystem::Highlighter::HSVToRGB)> {
  static const MethodInfo* get() {
    static auto* hue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* saturation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "HSVToRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hue, saturation, value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::On
// Il2CppName: On
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::On)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "On", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::On
// Il2CppName: On
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::On)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "On", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::OnParams
// Il2CppName: OnParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::OnParams)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "OnParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::ConstantParams
// Il2CppName: ConstantParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color)>(&HighlightingSystem::Highlighter::ConstantParams)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "ConstantParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingParams
// Il2CppName: FlashingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color, ::UnityEngine::Color, float)>(&HighlightingSystem::Highlighter::FlashingParams)> {
  static const MethodInfo* get() {
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* color2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* freq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color1, color2, freq});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingOn
// Il2CppName: FlashingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::FlashingOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingOn
// Il2CppName: FlashingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color, ::UnityEngine::Color)>(&HighlightingSystem::Highlighter::FlashingOn)> {
  static const MethodInfo* get() {
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* color2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color1, color2});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingOn
// Il2CppName: FlashingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(::UnityEngine::Color, ::UnityEngine::Color, float)>(&HighlightingSystem::Highlighter::FlashingOn)> {
  static const MethodInfo* get() {
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* color2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* freq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color1, color2, freq});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingOn
// Il2CppName: FlashingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)(float)>(&HighlightingSystem::Highlighter::FlashingOn)> {
  static const MethodInfo* get() {
    static auto* freq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{freq});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingOff
// Il2CppName: FlashingOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::FlashingOff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::FlashingSwitch
// Il2CppName: FlashingSwitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::FlashingSwitch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "FlashingSwitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::get_rendererFilterToUse
// Il2CppName: get_rendererFilterToUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlighterCore::RendererFilter* (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::get_rendererFilterToUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "get_rendererFilterToUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::OnEnableSafe
// Il2CppName: OnEnableSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::OnEnableSafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "OnEnableSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::OnDisableSafe
// Il2CppName: OnDisableSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::OnDisableSafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "OnDisableSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::UpdateHighlighting
// Il2CppName: UpdateHighlighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::Highlighter::*)()>(&HighlightingSystem::Highlighter::UpdateHighlighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::Highlighter*), "UpdateHighlighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::Highlighter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
