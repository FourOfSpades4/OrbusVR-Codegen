// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingBase
  class HighlightingBase;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingBlitter
  class HighlightingBlitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::HighlightingBlitter);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlightingBlitter*, "HighlightingSystem", "HighlightingBlitter");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.HighlightingBlitter
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AC1DA4
  // [AddComponentMenu] Offset: AC1DA4
  class HighlightingBlitter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected System.Collections.Generic.List`1<HighlightingSystem.HighlightingBase> renderers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected System.Collections.Generic.List`1<HighlightingSystem.HighlightingBase> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>*& dyn_renderers();
    // protected System.Void OnRenderImage(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dst)
    // Offset: 0x1AB60E4
    void OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst);
    // public System.Void Register(HighlightingSystem.HighlightingBase renderer)
    // Offset: 0x1AB622C
    void Register(::HighlightingSystem::HighlightingBase* renderer);
    // public System.Void Unregister(HighlightingSystem.HighlightingBase renderer)
    // Offset: 0x1AB6300
    void Unregister(::HighlightingSystem::HighlightingBase* renderer);
    // public System.Void .ctor()
    // Offset: 0x1AB63DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightingBlitter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBlitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightingBlitter*, creationType>()));
    }
  }; // HighlightingSystem.HighlightingBlitter
  #pragma pack(pop)
  static check_size<sizeof(HighlightingBlitter), 24 + sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>*)> __HighlightingSystem_HighlightingBlitterSizeCheck;
  static_assert(sizeof(HighlightingBlitter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBlitter::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBlitter::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&HighlightingSystem::HighlightingBlitter::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBlitter*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBlitter::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBlitter::*)(::HighlightingSystem::HighlightingBase*)>(&HighlightingSystem::HighlightingBlitter::Register)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBlitter*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBlitter::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBlitter::*)(::HighlightingSystem::HighlightingBase*)>(&HighlightingSystem::HighlightingBlitter::Unregister)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBlitter*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBlitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
