// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: HighlightingSystem.BlurDirections
#include "HighlightingSystem/BlurDirections.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingPreset
  struct HighlightingPreset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlightingPreset, "HighlightingSystem", "HighlightingPreset");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HighlightingSystem.HighlightingPreset
  // [TokenAttribute] Offset: FFFFFFFF
  struct HighlightingPreset/*, public ::System::ValueType, public ::System::IEquatable_1<::HighlightingSystem::HighlightingPreset>*/ {
    public:
    public:
    // private System.String _name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single _fillAlpha
    // Size: 0x4
    // Offset: 0x8
    float fillAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _downsampleFactor
    // Size: 0x4
    // Offset: 0xC
    int downsampleFactor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _iterations
    // Size: 0x4
    // Offset: 0x10
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _blurMinSpread
    // Size: 0x4
    // Offset: 0x14
    float blurMinSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _blurSpread
    // Size: 0x4
    // Offset: 0x18
    float blurSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _blurIntensity
    // Size: 0x4
    // Offset: 0x1C
    float blurIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private HighlightingSystem.BlurDirections _blurDirections
    // Size: 0x4
    // Offset: 0x20
    ::HighlightingSystem::BlurDirections blurDirections;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::BlurDirections) == 0x4);
    public:
    // Creating value type constructor for type: HighlightingPreset
    constexpr HighlightingPreset(::StringW name_ = {}, float fillAlpha_ = {}, int downsampleFactor_ = {}, int iterations_ = {}, float blurMinSpread_ = {}, float blurSpread_ = {}, float blurIntensity_ = {}, ::HighlightingSystem::BlurDirections blurDirections_ = {}) noexcept : name{name_}, fillAlpha{fillAlpha_}, downsampleFactor{downsampleFactor_}, iterations{iterations_}, blurMinSpread{blurMinSpread_}, blurSpread{blurSpread_}, blurIntensity{blurIntensity_}, blurDirections{blurDirections_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::HighlightingSystem::HighlightingPreset>
    operator ::System::IEquatable_1<::HighlightingSystem::HighlightingPreset>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::HighlightingSystem::HighlightingPreset>*>(this);
    }
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.Single _fillAlpha
    [[deprecated("Use field access instead!")]] float& dyn__fillAlpha();
    // Get instance field reference: private System.Int32 _downsampleFactor
    [[deprecated("Use field access instead!")]] int& dyn__downsampleFactor();
    // Get instance field reference: private System.Int32 _iterations
    [[deprecated("Use field access instead!")]] int& dyn__iterations();
    // Get instance field reference: private System.Single _blurMinSpread
    [[deprecated("Use field access instead!")]] float& dyn__blurMinSpread();
    // Get instance field reference: private System.Single _blurSpread
    [[deprecated("Use field access instead!")]] float& dyn__blurSpread();
    // Get instance field reference: private System.Single _blurIntensity
    [[deprecated("Use field access instead!")]] float& dyn__blurIntensity();
    // Get instance field reference: private HighlightingSystem.BlurDirections _blurDirections
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::BlurDirections& dyn__blurDirections();
    // public System.String get_name()
    // Offset: 0xBA9B5C
    ::StringW get_name();
    // public System.Void set_name(System.String value)
    // Offset: 0xBA9B64
    void set_name(::StringW value);
    // public System.Single get_fillAlpha()
    // Offset: 0xBA9B6C
    float get_fillAlpha();
    // public System.Void set_fillAlpha(System.Single value)
    // Offset: 0xBA9B74
    void set_fillAlpha(float value);
    // public System.Int32 get_downsampleFactor()
    // Offset: 0xBA9B7C
    int get_downsampleFactor();
    // public System.Void set_downsampleFactor(System.Int32 value)
    // Offset: 0xBA9B84
    void set_downsampleFactor(int value);
    // public System.Int32 get_iterations()
    // Offset: 0xBA9B8C
    int get_iterations();
    // public System.Void set_iterations(System.Int32 value)
    // Offset: 0xBA9B94
    void set_iterations(int value);
    // public System.Single get_blurMinSpread()
    // Offset: 0xBA9B9C
    float get_blurMinSpread();
    // public System.Void set_blurMinSpread(System.Single value)
    // Offset: 0xBA9BA4
    void set_blurMinSpread(float value);
    // public System.Single get_blurSpread()
    // Offset: 0xBA9BAC
    float get_blurSpread();
    // public System.Void set_blurSpread(System.Single value)
    // Offset: 0xBA9BB4
    void set_blurSpread(float value);
    // public System.Single get_blurIntensity()
    // Offset: 0xBA9BBC
    float get_blurIntensity();
    // public System.Void set_blurIntensity(System.Single value)
    // Offset: 0xBA9BC4
    void set_blurIntensity(float value);
    // public HighlightingSystem.BlurDirections get_blurDirections()
    // Offset: 0xBA9BCC
    ::HighlightingSystem::BlurDirections get_blurDirections();
    // public System.Void set_blurDirections(HighlightingSystem.BlurDirections value)
    // Offset: 0xBA9BD4
    void set_blurDirections(::HighlightingSystem::BlurDirections value);
    // private System.Boolean System.IEquatable<HighlightingSystem.HighlightingPreset>.Equals(HighlightingSystem.HighlightingPreset other)
    // Offset: 0xBA9BDC
    bool System_IEquatable$HighlightingSystem_HighlightingPreset$_Equals(::HighlightingSystem::HighlightingPreset other);
  }; // HighlightingSystem.HighlightingPreset
  #pragma pack(pop)
  static check_size<sizeof(HighlightingPreset), 32 + sizeof(::HighlightingSystem::BlurDirections)> __HighlightingSystem_HighlightingPresetSizeCheck;
  static_assert(sizeof(HighlightingPreset) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(::StringW)>(&HighlightingSystem::HighlightingPreset::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_fillAlpha
// Il2CppName: get_fillAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_fillAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_fillAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_fillAlpha
// Il2CppName: set_fillAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(float)>(&HighlightingSystem::HighlightingPreset::set_fillAlpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_fillAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_downsampleFactor
// Il2CppName: get_downsampleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_downsampleFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_downsampleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_downsampleFactor
// Il2CppName: set_downsampleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(int)>(&HighlightingSystem::HighlightingPreset::set_downsampleFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_downsampleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_iterations
// Il2CppName: get_iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_iterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_iterations
// Il2CppName: set_iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(int)>(&HighlightingSystem::HighlightingPreset::set_iterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_blurMinSpread
// Il2CppName: get_blurMinSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_blurMinSpread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_blurMinSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_blurMinSpread
// Il2CppName: set_blurMinSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(float)>(&HighlightingSystem::HighlightingPreset::set_blurMinSpread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_blurMinSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_blurSpread
// Il2CppName: get_blurSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_blurSpread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_blurSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_blurSpread
// Il2CppName: set_blurSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(float)>(&HighlightingSystem::HighlightingPreset::set_blurSpread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_blurSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_blurIntensity
// Il2CppName: get_blurIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_blurIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_blurIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_blurIntensity
// Il2CppName: set_blurIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(float)>(&HighlightingSystem::HighlightingPreset::set_blurIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_blurIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::get_blurDirections
// Il2CppName: get_blurDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::BlurDirections (HighlightingSystem::HighlightingPreset::*)()>(&HighlightingSystem::HighlightingPreset::get_blurDirections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "get_blurDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::set_blurDirections
// Il2CppName: set_blurDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingPreset::*)(::HighlightingSystem::BlurDirections)>(&HighlightingSystem::HighlightingPreset::set_blurDirections)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "BlurDirections")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "set_blurDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingPreset::System_IEquatable$HighlightingSystem_HighlightingPreset$_Equals
// Il2CppName: System.IEquatable<HighlightingSystem.HighlightingPreset>.Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingPreset::*)(::HighlightingSystem::HighlightingPreset)>(&HighlightingSystem::HighlightingPreset::System_IEquatable$HighlightingSystem_HighlightingPreset$_Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingPreset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingPreset), "System.IEquatable<HighlightingSystem.HighlightingPreset>.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
