// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.HideFlags
#include "UnityEngine/HideFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlighterRenderer
  class HighlighterRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::HighlighterRenderer);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlighterRenderer*, "HighlightingSystem", "HighlighterRenderer");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.HighlighterRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC1E8C
  // [ExcludeFromDocsAttribute] Offset: FFFFFFFF
  class HighlighterRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HighlightingSystem::HighlighterRenderer::Data
    struct Data;
    // Size: 0xD
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: HighlightingSystem.HighlighterRenderer/Data
    // [TokenAttribute] Offset: FFFFFFFF
    // [ExcludeFromDocsAttribute] Offset: FFFFFFFF
    struct Data/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Material material
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Material* material;
      // Field size check
      static_assert(sizeof(::UnityEngine::Material*) == 0x8);
      // public System.Int32 submeshIndex
      // Size: 0x4
      // Offset: 0x8
      int submeshIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean transparent
      // Size: 0x1
      // Offset: 0xC
      bool transparent;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Data
      constexpr Data(::UnityEngine::Material* material_ = {}, int submeshIndex_ = {}, bool transparent_ = {}) noexcept : material{material_}, submeshIndex{submeshIndex_}, transparent{transparent_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Material material
      [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
      // Get instance field reference: public System.Int32 submeshIndex
      [[deprecated("Use field access instead!")]] int& dyn_submeshIndex();
      // Get instance field reference: public System.Boolean transparent
      [[deprecated("Use field access instead!")]] bool& dyn_transparent();
    }; // HighlightingSystem.HighlighterRenderer/Data
    #pragma pack(pop)
    static check_size<sizeof(HighlighterRenderer::Data), 12 + sizeof(bool)> __HighlightingSystem_HighlighterRenderer_DataSizeCheck;
    static_assert(sizeof(HighlighterRenderer::Data) == 0xD);
    public:
    // public System.Boolean isAlive
    // Size: 0x1
    // Offset: 0x18
    bool isAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isAlive and: r
    char __padding0[0x7] = {};
    // private UnityEngine.Renderer r
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Renderer* r;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer/Data> data
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>* data;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Single transparentCutoff
    static float _get_transparentCutoff();
    // Set static field: static private System.Single transparentCutoff
    static void _set_transparentCutoff(float value);
    // static field const value: static private UnityEngine.HideFlags flags
    static constexpr const int flags = 30;
    // Get static field: static private UnityEngine.HideFlags flags
    static ::UnityEngine::HideFlags _get_flags();
    // Set static field: static private UnityEngine.HideFlags flags
    static void _set_flags(::UnityEngine::HideFlags value);
    // static field const value: static private System.Int32 cullOff
    static constexpr const int cullOff = 0;
    // Get static field: static private System.Int32 cullOff
    static int _get_cullOff();
    // Set static field: static private System.Int32 cullOff
    static void _set_cullOff(int value);
    // Get static field: static private readonly System.String sRenderType
    static ::StringW _get_sRenderType();
    // Set static field: static private readonly System.String sRenderType
    static void _set_sRenderType(::StringW value);
    // Get static field: static private readonly System.String sOpaque
    static ::StringW _get_sOpaque();
    // Set static field: static private readonly System.String sOpaque
    static void _set_sOpaque(::StringW value);
    // Get static field: static private readonly System.String sTransparent
    static ::StringW _get_sTransparent();
    // Set static field: static private readonly System.String sTransparent
    static void _set_sTransparent(::StringW value);
    // Get static field: static private readonly System.String sTransparentCutout
    static ::StringW _get_sTransparentCutout();
    // Set static field: static private readonly System.String sTransparentCutout
    static void _set_sTransparentCutout(::StringW value);
    // Get static field: static private readonly System.String sMainTex
    static ::StringW _get_sMainTex();
    // Set static field: static private readonly System.String sMainTex
    static void _set_sMainTex(::StringW value);
    // Get instance field reference: public System.Boolean isAlive
    [[deprecated("Use field access instead!")]] bool& dyn_isAlive();
    // Get instance field reference: private UnityEngine.Renderer r
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_r();
    // Get instance field reference: private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer/Data> data
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>*& dyn_data();
    // private System.Void Awake()
    // Offset: 0x15E2230
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x15E223C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x15E22A4
    void OnDisable();
    // private System.Void OnWillRenderObject()
    // Offset: 0x15E230C
    void OnWillRenderObject();
    // private System.Void OnDestroy()
    // Offset: 0x15E247C
    void OnDestroy();
    // public System.Void Initialize(UnityEngine.Material sharedOpaqueMaterial, UnityEngine.Shader transparentShader, System.Collections.Generic.List`1<System.Int32> submeshIndices)
    // Offset: 0x15E0304
    void Initialize(::UnityEngine::Material* sharedOpaqueMaterial, ::UnityEngine::Shader* transparentShader, ::System::Collections::Generic::List_1<int>* submeshIndices);
    // public System.Void SetOverlay(System.Boolean overlay)
    // Offset: 0x15E098C
    void SetOverlay(bool overlay);
    // public System.Void SetColor(UnityEngine.Color clr)
    // Offset: 0x15E0AAC
    void SetColor(::UnityEngine::Color clr);
    // public System.Void FillBuffer(UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x15E1AC8
    void FillBuffer(::UnityEngine::Rendering::CommandBuffer* buffer);
    // public System.Boolean IsValid()
    // Offset: 0x15E19CC
    bool IsValid();
    // private System.Void OnEndOfFrame()
    // Offset: 0x15E2560
    void OnEndOfFrame();
    // public System.Void .ctor()
    // Offset: 0x15E25DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlighterRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlighterRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x15E264C
    static void _cctor();
  }; // HighlightingSystem.HighlighterRenderer
  #pragma pack(pop)
  static check_size<sizeof(HighlighterRenderer), 40 + sizeof(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>*)> __HighlightingSystem_HighlighterRendererSizeCheck;
  static_assert(sizeof(HighlighterRenderer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlighterRenderer::Data, "HighlightingSystem", "HighlighterRenderer/Data");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::OnWillRenderObject
// Il2CppName: OnWillRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::OnWillRenderObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "OnWillRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)(::UnityEngine::Material*, ::UnityEngine::Shader*, ::System::Collections::Generic::List_1<int>*)>(&HighlightingSystem::HighlighterRenderer::Initialize)> {
  static const MethodInfo* get() {
    static auto* sharedOpaqueMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* transparentShader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    static auto* submeshIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sharedOpaqueMaterial, transparentShader, submeshIndices});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::SetOverlay
// Il2CppName: SetOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)(bool)>(&HighlightingSystem::HighlighterRenderer::SetOverlay)> {
  static const MethodInfo* get() {
    static auto* overlay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "SetOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overlay});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)(::UnityEngine::Color)>(&HighlightingSystem::HighlighterRenderer::SetColor)> {
  static const MethodInfo* get() {
    static auto* clr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clr});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::FillBuffer
// Il2CppName: FillBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)(::UnityEngine::Rendering::CommandBuffer*)>(&HighlightingSystem::HighlighterRenderer::FillBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "CommandBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "FillBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::OnEndOfFrame
// Il2CppName: OnEndOfFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlighterRenderer::*)()>(&HighlightingSystem::HighlighterRenderer::OnEndOfFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), "OnEndOfFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HighlightingSystem::HighlighterRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HighlightingSystem::HighlighterRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlighterRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
