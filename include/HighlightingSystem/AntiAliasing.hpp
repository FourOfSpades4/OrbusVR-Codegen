// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: AntiAliasing
  struct AntiAliasing;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::AntiAliasing, "HighlightingSystem", "AntiAliasing");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.AntiAliasing
  // [TokenAttribute] Offset: FFFFFFFF
  struct AntiAliasing/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AntiAliasing
    constexpr AntiAliasing(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public HighlightingSystem.AntiAliasing QualitySettings
    static constexpr const int QualitySettings = 0;
    // Get static field: static public HighlightingSystem.AntiAliasing QualitySettings
    static ::HighlightingSystem::AntiAliasing _get_QualitySettings();
    // Set static field: static public HighlightingSystem.AntiAliasing QualitySettings
    static void _set_QualitySettings(::HighlightingSystem::AntiAliasing value);
    // static field const value: static public HighlightingSystem.AntiAliasing Disabled
    static constexpr const int Disabled = 1;
    // Get static field: static public HighlightingSystem.AntiAliasing Disabled
    static ::HighlightingSystem::AntiAliasing _get_Disabled();
    // Set static field: static public HighlightingSystem.AntiAliasing Disabled
    static void _set_Disabled(::HighlightingSystem::AntiAliasing value);
    // static field const value: static public HighlightingSystem.AntiAliasing MSAA2x
    static constexpr const int MSAA2x = 2;
    // Get static field: static public HighlightingSystem.AntiAliasing MSAA2x
    static ::HighlightingSystem::AntiAliasing _get_MSAA2x();
    // Set static field: static public HighlightingSystem.AntiAliasing MSAA2x
    static void _set_MSAA2x(::HighlightingSystem::AntiAliasing value);
    // static field const value: static public HighlightingSystem.AntiAliasing MSAA4x
    static constexpr const int MSAA4x = 3;
    // Get static field: static public HighlightingSystem.AntiAliasing MSAA4x
    static ::HighlightingSystem::AntiAliasing _get_MSAA4x();
    // Set static field: static public HighlightingSystem.AntiAliasing MSAA4x
    static void _set_MSAA4x(::HighlightingSystem::AntiAliasing value);
    // static field const value: static public HighlightingSystem.AntiAliasing MSAA8x
    static constexpr const int MSAA8x = 4;
    // Get static field: static public HighlightingSystem.AntiAliasing MSAA8x
    static ::HighlightingSystem::AntiAliasing _get_MSAA8x();
    // Set static field: static public HighlightingSystem.AntiAliasing MSAA8x
    static void _set_MSAA8x(::HighlightingSystem::AntiAliasing value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // HighlightingSystem.AntiAliasing
  #pragma pack(pop)
  static check_size<sizeof(AntiAliasing), 0 + sizeof(int)> __HighlightingSystem_AntiAliasingSizeCheck;
  static_assert(sizeof(AntiAliasing) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
