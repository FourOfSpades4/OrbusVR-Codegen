// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HighlightingSystem.BlurDirections
#include "HighlightingSystem/BlurDirections.hpp"
// Including type: HighlightingSystem.AntiAliasing
#include "HighlightingSystem/AntiAliasing.hpp"
// Including type: UnityEngine.Rendering.RenderTargetIdentifier
#include "UnityEngine/Rendering/RenderTargetIdentifier.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.CameraEvent
#include "UnityEngine/Rendering/CameraEvent.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Forward declaring namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingBlitter
  class HighlightingBlitter;
  // Forward declaring type: HighlighterRenderer
  class HighlighterRenderer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Forward declaring type: HighlightingBase
  class HighlightingBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightingSystem::HighlightingBase);
DEFINE_IL2CPP_ARG_TYPE(::HighlightingSystem::HighlightingBase*, "HighlightingSystem", "HighlightingBase");
// Type namespace: HighlightingSystem
namespace HighlightingSystem {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: HighlightingSystem.HighlightingBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: AC1EE8
  class HighlightingBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected UnityEngine.Rendering.CommandBuffer renderBuffer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::CommandBuffer* renderBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // protected UnityEngine.RenderTextureDescriptor cachedDescriptor
    // Size: 0x2C
    // Offset: 0x20
    ::UnityEngine::RenderTextureDescriptor cachedDescriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTextureDescriptor) == 0x2C);
    // protected System.Single _fillAlpha
    // Size: 0x4
    // Offset: 0x4C
    float fillAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xAC60F4
    // protected System.Int32 _downsampleFactor
    // Size: 0x4
    // Offset: 0x50
    int downsampleFactor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xAC6140
    // protected System.Int32 _iterations
    // Size: 0x4
    // Offset: 0x54
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xAC618C
    // protected System.Single _blurMinSpread
    // Size: 0x4
    // Offset: 0x58
    float blurMinSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xAC61D8
    // protected System.Single _blurSpread
    // Size: 0x4
    // Offset: 0x5C
    float blurSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _blurIntensity
    // Size: 0x4
    // Offset: 0x60
    float blurIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected HighlightingSystem.BlurDirections _blurDirections
    // Size: 0x4
    // Offset: 0x64
    ::HighlightingSystem::BlurDirections blurDirections;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::BlurDirections) == 0x4);
    // protected HighlightingSystem.HighlightingBlitter _blitter
    // Size: 0x8
    // Offset: 0x68
    ::HighlightingSystem::HighlightingBlitter* blitter;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::HighlightingBlitter*) == 0x8);
    // protected HighlightingSystem.AntiAliasing _antiAliasing
    // Size: 0x4
    // Offset: 0x70
    ::HighlightingSystem::AntiAliasing antiAliasing;
    // Field size check
    static_assert(sizeof(::HighlightingSystem::AntiAliasing) == 0x4);
    // Padding between fields: antiAliasing and: highlightingBufferID
    char __padding10[0x4] = {};
    // protected UnityEngine.Rendering.RenderTargetIdentifier highlightingBufferID
    // Size: 0x24
    // Offset: 0x78
    ::UnityEngine::Rendering::RenderTargetIdentifier highlightingBufferID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: highlightingBufferID and: blur1ID
    char __padding11[0x4] = {};
    // protected UnityEngine.Rendering.RenderTargetIdentifier blur1ID
    // Size: 0x24
    // Offset: 0xA0
    ::UnityEngine::Rendering::RenderTargetIdentifier blur1ID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: blur1ID and: blur2ID
    char __padding12[0x4] = {};
    // protected UnityEngine.Rendering.RenderTargetIdentifier blur2ID
    // Size: 0x24
    // Offset: 0xC8
    ::UnityEngine::Rendering::RenderTargetIdentifier blur2ID;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::RenderTargetIdentifier) == 0x24);
    // Padding between fields: blur2ID and: highlightingBuffer
    char __padding13[0x4] = {};
    // protected UnityEngine.RenderTexture highlightingBuffer
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::RenderTexture* highlightingBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // protected UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected UnityEngine.Material blurMaterial
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Material* blurMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material cutMaterial
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Material* cutMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material compMaterial
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Material* compMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static protected readonly UnityEngine.Color colorClear
    static ::UnityEngine::Color _get_colorClear();
    // Set static field: static protected readonly UnityEngine.Color colorClear
    static void _set_colorClear(::UnityEngine::Color value);
    // Get static field: static protected readonly System.String renderBufferName
    static ::StringW _get_renderBufferName();
    // Set static field: static protected readonly System.String renderBufferName
    static void _set_renderBufferName(::StringW value);
    // Get static field: static protected readonly UnityEngine.Matrix4x4 identityMatrix
    static ::UnityEngine::Matrix4x4 _get_identityMatrix();
    // Set static field: static protected readonly UnityEngine.Matrix4x4 identityMatrix
    static void _set_identityMatrix(::UnityEngine::Matrix4x4 value);
    // Get static field: static protected readonly System.String keywordStraightDirections
    static ::StringW _get_keywordStraightDirections();
    // Set static field: static protected readonly System.String keywordStraightDirections
    static void _set_keywordStraightDirections(::StringW value);
    // Get static field: static protected readonly System.String keywordAllDirections
    static ::StringW _get_keywordAllDirections();
    // Set static field: static protected readonly System.String keywordAllDirections
    static void _set_keywordAllDirections(::StringW value);
    // Get static field: static protected readonly System.String profileHighlightingSystem
    static ::StringW _get_profileHighlightingSystem();
    // Set static field: static protected readonly System.String profileHighlightingSystem
    static void _set_profileHighlightingSystem(::StringW value);
    // static field const value: static protected UnityEngine.Rendering.CameraEvent queue
    static constexpr const int queue = 12;
    // Get static field: static protected UnityEngine.Rendering.CameraEvent queue
    static ::UnityEngine::Rendering::CameraEvent _get_queue();
    // Set static field: static protected UnityEngine.Rendering.CameraEvent queue
    static void _set_queue(::UnityEngine::Rendering::CameraEvent value);
    // Get static field: static protected UnityEngine.Camera currentCamera
    static ::UnityEngine::Camera* _get_currentCamera();
    // Set static field: static protected UnityEngine.Camera currentCamera
    static void _set_currentCamera(::UnityEngine::Camera* value);
    // Get static field: static protected System.Collections.Generic.HashSet`1<HighlightingSystem.HighlighterRenderer> visibleRenderers
    static ::System::Collections::Generic::HashSet_1<::HighlightingSystem::HighlighterRenderer*>* _get_visibleRenderers();
    // Set static field: static protected System.Collections.Generic.HashSet`1<HighlightingSystem.HighlighterRenderer> visibleRenderers
    static void _set_visibleRenderers(::System::Collections::Generic::HashSet_1<::HighlightingSystem::HighlighterRenderer*>* value);
    // static field const value: static protected System.Int32 BLUR
    static constexpr const int BLUR = 0;
    // Get static field: static protected System.Int32 BLUR
    static int _get_BLUR();
    // Set static field: static protected System.Int32 BLUR
    static void _set_BLUR(int value);
    // static field const value: static protected System.Int32 CUT
    static constexpr const int CUT = 1;
    // Get static field: static protected System.Int32 CUT
    static int _get_CUT();
    // Set static field: static protected System.Int32 CUT
    static void _set_CUT(int value);
    // static field const value: static protected System.Int32 COMP
    static constexpr const int COMP = 2;
    // Get static field: static protected System.Int32 COMP
    static int _get_COMP();
    // Set static field: static protected System.Int32 COMP
    static void _set_COMP(int value);
    // Get static field: static protected readonly System.String[] shaderPaths
    static ::ArrayW<::StringW> _get_shaderPaths();
    // Set static field: static protected readonly System.String[] shaderPaths
    static void _set_shaderPaths(::ArrayW<::StringW> value);
    // Get static field: static protected UnityEngine.Shader[] shaders
    static ::ArrayW<::UnityEngine::Shader*> _get_shaders();
    // Set static field: static protected UnityEngine.Shader[] shaders
    static void _set_shaders(::ArrayW<::UnityEngine::Shader*> value);
    // Get static field: static protected UnityEngine.Material[] materials
    static ::ArrayW<::UnityEngine::Material*> _get_materials();
    // Set static field: static protected UnityEngine.Material[] materials
    static void _set_materials(::ArrayW<::UnityEngine::Material*> value);
    // Get static field: static protected System.Boolean initialized
    static bool _get_initialized();
    // Set static field: static protected System.Boolean initialized
    static void _set_initialized(bool value);
    // Get instance field reference: protected UnityEngine.Rendering.CommandBuffer renderBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn_renderBuffer();
    // Get instance field reference: protected UnityEngine.RenderTextureDescriptor cachedDescriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& dyn_cachedDescriptor();
    // Get instance field reference: protected System.Single _fillAlpha
    [[deprecated("Use field access instead!")]] float& dyn__fillAlpha();
    // Get instance field reference: protected System.Int32 _downsampleFactor
    [[deprecated("Use field access instead!")]] int& dyn__downsampleFactor();
    // Get instance field reference: protected System.Int32 _iterations
    [[deprecated("Use field access instead!")]] int& dyn__iterations();
    // Get instance field reference: protected System.Single _blurMinSpread
    [[deprecated("Use field access instead!")]] float& dyn__blurMinSpread();
    // Get instance field reference: protected System.Single _blurSpread
    [[deprecated("Use field access instead!")]] float& dyn__blurSpread();
    // Get instance field reference: protected System.Single _blurIntensity
    [[deprecated("Use field access instead!")]] float& dyn__blurIntensity();
    // Get instance field reference: protected HighlightingSystem.BlurDirections _blurDirections
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::BlurDirections& dyn__blurDirections();
    // Get instance field reference: protected HighlightingSystem.HighlightingBlitter _blitter
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlightingBlitter*& dyn__blitter();
    // Get instance field reference: protected HighlightingSystem.AntiAliasing _antiAliasing
    [[deprecated("Use field access instead!")]] ::HighlightingSystem::AntiAliasing& dyn__antiAliasing();
    // Get instance field reference: protected UnityEngine.Rendering.RenderTargetIdentifier highlightingBufferID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_highlightingBufferID();
    // Get instance field reference: protected UnityEngine.Rendering.RenderTargetIdentifier blur1ID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_blur1ID();
    // Get instance field reference: protected UnityEngine.Rendering.RenderTargetIdentifier blur2ID
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& dyn_blur2ID();
    // Get instance field reference: protected UnityEngine.RenderTexture highlightingBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_highlightingBuffer();
    // Get instance field reference: protected UnityEngine.Camera cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cam();
    // Get instance field reference: protected UnityEngine.Material blurMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_blurMaterial();
    // Get instance field reference: protected UnityEngine.Material cutMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cutMaterial();
    // Get instance field reference: protected UnityEngine.Material compMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_compMaterial();
    // public System.Boolean get_isSupported()
    // Offset: 0x15E2708
    bool get_isSupported();
    // public System.Single get_fillAlpha()
    // Offset: 0x15E2718
    float get_fillAlpha();
    // public System.Void set_fillAlpha(System.Single value)
    // Offset: 0x15E2720
    void set_fillAlpha(float value);
    // public System.Int32 get_downsampleFactor()
    // Offset: 0x15E2810
    int get_downsampleFactor();
    // public System.Void set_downsampleFactor(System.Int32 value)
    // Offset: 0x15E2818
    void set_downsampleFactor(int value);
    // public System.Int32 get_iterations()
    // Offset: 0x15E28C8
    int get_iterations();
    // public System.Void set_iterations(System.Int32 value)
    // Offset: 0x15E28D0
    void set_iterations(int value);
    // public System.Single get_blurMinSpread()
    // Offset: 0x15E28E4
    float get_blurMinSpread();
    // public System.Void set_blurMinSpread(System.Single value)
    // Offset: 0x15E28EC
    void set_blurMinSpread(float value);
    // public System.Single get_blurSpread()
    // Offset: 0x15E2900
    float get_blurSpread();
    // public System.Void set_blurSpread(System.Single value)
    // Offset: 0x15E2908
    void set_blurSpread(float value);
    // public System.Single get_blurIntensity()
    // Offset: 0x15E291C
    float get_blurIntensity();
    // public System.Void set_blurIntensity(System.Single value)
    // Offset: 0x15E2924
    void set_blurIntensity(float value);
    // public HighlightingSystem.BlurDirections get_blurDirections()
    // Offset: 0x15E29F8
    ::HighlightingSystem::BlurDirections get_blurDirections();
    // public System.Void set_blurDirections(HighlightingSystem.BlurDirections value)
    // Offset: 0x15E2A00
    void set_blurDirections(::HighlightingSystem::BlurDirections value);
    // public HighlightingSystem.HighlightingBlitter get_blitter()
    // Offset: 0x15E2AE0
    ::HighlightingSystem::HighlightingBlitter* get_blitter();
    // public System.Void set_blitter(HighlightingSystem.HighlightingBlitter value)
    // Offset: 0x15E2AE8
    void set_blitter(::HighlightingSystem::HighlightingBlitter* value);
    // public HighlightingSystem.AntiAliasing get_antiAliasing()
    // Offset: 0x15E2C20
    ::HighlightingSystem::AntiAliasing get_antiAliasing();
    // public System.Void set_antiAliasing(HighlightingSystem.AntiAliasing value)
    // Offset: 0x15E2C28
    void set_antiAliasing(::HighlightingSystem::AntiAliasing value);
    // protected System.Void OnEnable()
    // Offset: 0x15E2C3C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x15E3388
    void OnDisable();
    // protected System.Void OnPreCull()
    // Offset: 0x15E34F0
    void OnPreCull();
    // protected System.Void OnPreRender()
    // Offset: 0x15E3584
    void OnPreRender();
    // protected System.Void OnRenderImage(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dst)
    // Offset: 0x15E38D8
    void OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst);
    // protected System.Void OnEndOfFrame()
    // Offset: 0x15E39B4
    void OnEndOfFrame();
    // static public System.Void SetVisible(HighlightingSystem.HighlighterRenderer renderer)
    // Offset: 0x15E2370
    static void SetVisible(::HighlightingSystem::HighlighterRenderer* renderer);
    // static public System.Boolean GetVisible(HighlightingSystem.HighlighterRenderer renderer)
    // Offset: 0x15E1A3C
    static bool GetVisible(::HighlightingSystem::HighlighterRenderer* renderer);
    // static protected System.Void Initialize()
    // Offset: 0x15E30EC
    static void Initialize();
    // protected UnityEngine.RenderTextureDescriptor GetDescriptor()
    // Offset: 0x15E3A40
    ::UnityEngine::RenderTextureDescriptor GetDescriptor();
    // protected System.Boolean Equals(UnityEngine.RenderTextureDescriptor x, UnityEngine.RenderTextureDescriptor y)
    // Offset: 0x15E3C18
    bool Equals(::UnityEngine::RenderTextureDescriptor x, ::UnityEngine::RenderTextureDescriptor y);
    // protected System.Int32 GetAA(UnityEngine.RenderTexture targetTexture)
    // Offset: 0x15E3CB4
    int GetAA(::UnityEngine::RenderTexture* targetTexture);
    // protected System.Boolean CheckSupported(System.Boolean verbose)
    // Offset: 0x15E3DEC
    bool CheckSupported(bool verbose);
    // protected System.Void RebuildCommandBuffer()
    // Offset: 0x15E413C
    void RebuildCommandBuffer();
    // public System.Void Blit(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dst)
    // Offset: 0x15E478C
    void Blit(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst);
    // public System.Void .ctor()
    // Offset: 0x15E4810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightingBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightingBase*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x15E483C
    static void _cctor();
  }; // HighlightingSystem.HighlightingBase
  #pragma pack(pop)
  static check_size<sizeof(HighlightingBase), 272 + sizeof(::UnityEngine::Material*)> __HighlightingSystem_HighlightingBaseSizeCheck;
  static_assert(sizeof(HighlightingBase) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_isSupported
// Il2CppName: get_isSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_isSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_isSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_fillAlpha
// Il2CppName: get_fillAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_fillAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_fillAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_fillAlpha
// Il2CppName: set_fillAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(float)>(&HighlightingSystem::HighlightingBase::set_fillAlpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_fillAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_downsampleFactor
// Il2CppName: get_downsampleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_downsampleFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_downsampleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_downsampleFactor
// Il2CppName: set_downsampleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(int)>(&HighlightingSystem::HighlightingBase::set_downsampleFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_downsampleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_iterations
// Il2CppName: get_iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_iterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_iterations
// Il2CppName: set_iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(int)>(&HighlightingSystem::HighlightingBase::set_iterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_blurMinSpread
// Il2CppName: get_blurMinSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_blurMinSpread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_blurMinSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_blurMinSpread
// Il2CppName: set_blurMinSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(float)>(&HighlightingSystem::HighlightingBase::set_blurMinSpread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_blurMinSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_blurSpread
// Il2CppName: get_blurSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_blurSpread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_blurSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_blurSpread
// Il2CppName: set_blurSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(float)>(&HighlightingSystem::HighlightingBase::set_blurSpread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_blurSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_blurIntensity
// Il2CppName: get_blurIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_blurIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_blurIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_blurIntensity
// Il2CppName: set_blurIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(float)>(&HighlightingSystem::HighlightingBase::set_blurIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_blurIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_blurDirections
// Il2CppName: get_blurDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::BlurDirections (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_blurDirections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_blurDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_blurDirections
// Il2CppName: set_blurDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(::HighlightingSystem::BlurDirections)>(&HighlightingSystem::HighlightingBase::set_blurDirections)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "BlurDirections")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_blurDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_blitter
// Il2CppName: get_blitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::HighlightingBlitter* (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_blitter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_blitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_blitter
// Il2CppName: set_blitter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(::HighlightingSystem::HighlightingBlitter*)>(&HighlightingSystem::HighlightingBase::set_blitter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlightingBlitter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_blitter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::get_antiAliasing
// Il2CppName: get_antiAliasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HighlightingSystem::AntiAliasing (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::get_antiAliasing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "get_antiAliasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::set_antiAliasing
// Il2CppName: set_antiAliasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(::HighlightingSystem::AntiAliasing)>(&HighlightingSystem::HighlightingBase::set_antiAliasing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "AntiAliasing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "set_antiAliasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnPreCull
// Il2CppName: OnPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::OnPreCull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::OnPreRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&HighlightingSystem::HighlightingBase::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::OnEndOfFrame
// Il2CppName: OnEndOfFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::OnEndOfFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "OnEndOfFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::SetVisible
// Il2CppName: SetVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HighlightingSystem::HighlighterRenderer*)>(&HighlightingSystem::HighlightingBase::SetVisible)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlighterRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "SetVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::GetVisible
// Il2CppName: GetVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HighlightingSystem::HighlighterRenderer*)>(&HighlightingSystem::HighlightingBase::GetVisible)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("HighlightingSystem", "HighlighterRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "GetVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HighlightingSystem::HighlightingBase::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::GetDescriptor
// Il2CppName: GetDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureDescriptor (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::GetDescriptor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "GetDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingBase::*)(::UnityEngine::RenderTextureDescriptor, ::UnityEngine::RenderTextureDescriptor)>(&HighlightingSystem::HighlightingBase::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::GetAA
// Il2CppName: GetAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HighlightingSystem::HighlightingBase::*)(::UnityEngine::RenderTexture*)>(&HighlightingSystem::HighlightingBase::GetAA)> {
  static const MethodInfo* get() {
    static auto* targetTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "GetAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTexture});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::CheckSupported
// Il2CppName: CheckSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HighlightingSystem::HighlightingBase::*)(bool)>(&HighlightingSystem::HighlightingBase::CheckSupported)> {
  static const MethodInfo* get() {
    static auto* verbose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "CheckSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verbose});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::RebuildCommandBuffer
// Il2CppName: RebuildCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)()>(&HighlightingSystem::HighlightingBase::RebuildCommandBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "RebuildCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightingSystem::HighlightingBase::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&HighlightingSystem::HighlightingBase::Blit)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dst = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dst});
  }
};
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HighlightingSystem::HighlightingBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HighlightingSystem::HighlightingBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightingSystem::HighlightingBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
