// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::IKSolverVR::Spine);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::IKSolverVR::Spine*, "RootMotion.FinalIK", "IKSolverVR/Spine");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x204
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Spine
  // [TokenAttribute] Offset: FFFFFFFF
  class IKSolverVR::Spine : public ::RootMotion::FinalIK::IKSolverVR::BodyPart {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // [TooltipAttribute] Offset: 0xAC7B9C
    // public UnityEngine.Transform headTarget
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* headTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xAC7BD4
    // public UnityEngine.Transform pelvisTarget
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* pelvisTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xAC7C0C
    // [RangeAttribute] Offset: 0xAC7C0C
    // public System.Single positionWeight
    // Size: 0x4
    // Offset: 0x58
    float positionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7C60
    // [RangeAttribute] Offset: 0xAC7C60
    // public System.Single rotationWeight
    // Size: 0x4
    // Offset: 0x5C
    float rotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7CB4
    // [RangeAttribute] Offset: 0xAC7CB4
    // public System.Single pelvisPositionWeight
    // Size: 0x4
    // Offset: 0x60
    float pelvisPositionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7D08
    // [RangeAttribute] Offset: 0xAC7D08
    // public System.Single pelvisRotationWeight
    // Size: 0x4
    // Offset: 0x64
    float pelvisRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7D5C
    // public UnityEngine.Transform chestGoal
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* chestGoal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xAC7D94
    // [RangeAttribute] Offset: 0xAC7D94
    // public System.Single chestGoalWeight
    // Size: 0x4
    // Offset: 0x70
    float chestGoalWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7DE8
    // public System.Single minHeadHeight
    // Size: 0x4
    // Offset: 0x74
    float minHeadHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7E20
    // [RangeAttribute] Offset: 0xAC7E20
    // public System.Single bodyPosStiffness
    // Size: 0x4
    // Offset: 0x78
    float bodyPosStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7E74
    // [RangeAttribute] Offset: 0xAC7E74
    // public System.Single bodyRotStiffness
    // Size: 0x4
    // Offset: 0x7C
    float bodyRotStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7EC8
    // [FormerlySerializedAsAttribute] Offset: 0xAC7EC8
    // [RangeAttribute] Offset: 0xAC7EC8
    // public System.Single neckStiffness
    // Size: 0x4
    // Offset: 0x80
    float neckStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7F40
    // [RangeAttribute] Offset: 0xAC7F40
    // public System.Single rotateChestByHands
    // Size: 0x4
    // Offset: 0x84
    float rotateChestByHands;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7F94
    // [RangeAttribute] Offset: 0xAC7F94
    // public System.Single chestClampWeight
    // Size: 0x4
    // Offset: 0x88
    float chestClampWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC7FE8
    // [RangeAttribute] Offset: 0xAC7FE8
    // public System.Single headClampWeight
    // Size: 0x4
    // Offset: 0x8C
    float headClampWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC803C
    // public System.Single moveBodyBackWhenCrouching
    // Size: 0x4
    // Offset: 0x90
    float moveBodyBackWhenCrouching;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC8074
    // [RangeAttribute] Offset: 0xAC8074
    // public System.Single maintainPelvisPosition
    // Size: 0x4
    // Offset: 0x94
    float maintainPelvisPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC80C8
    // [RangeAttribute] Offset: 0xAC80C8
    // public System.Single maxRootAngle
    // Size: 0x4
    // Offset: 0x98
    float maxRootAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 IKPositionHead
    // Size: 0xC
    // Offset: 0x9C
    ::UnityEngine::Vector3 IKPositionHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion IKRotationHead
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Quaternion IKRotationHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 IKPositionPelvis
    // Size: 0xC
    // Offset: 0xB8
    ::UnityEngine::Vector3 IKPositionPelvis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion IKRotationPelvis
    // Size: 0x10
    // Offset: 0xC4
    ::UnityEngine::Quaternion IKRotationPelvis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 goalPositionChest
    // Size: 0xC
    // Offset: 0xD4
    ::UnityEngine::Vector3 goalPositionChest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 pelvisPositionOffset
    // Size: 0xC
    // Offset: 0xE0
    ::UnityEngine::Vector3 pelvisPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 chestPositionOffset
    // Size: 0xC
    // Offset: 0xEC
    ::UnityEngine::Vector3 chestPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 headPositionOffset
    // Size: 0xC
    // Offset: 0xF8
    ::UnityEngine::Vector3 headPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion pelvisRotationOffset
    // Size: 0x10
    // Offset: 0x104
    ::UnityEngine::Quaternion pelvisRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion chestRotationOffset
    // Size: 0x10
    // Offset: 0x114
    ::UnityEngine::Quaternion chestRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion headRotationOffset
    // Size: 0x10
    // Offset: 0x124
    ::UnityEngine::Quaternion headRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 faceDirection
    // Size: 0xC
    // Offset: 0x134
    ::UnityEngine::Vector3 faceDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 locomotionHeadPositionOffset
    // Size: 0xC
    // Offset: 0x140
    ::UnityEngine::Vector3 locomotionHeadPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 headPosition
    // Size: 0xC
    // Offset: 0x14C
    ::UnityEngine::Vector3 headPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xAC8200
    // private UnityEngine.Quaternion <anchorRotation>k__BackingField
    // Size: 0x10
    // Offset: 0x158
    ::UnityEngine::Quaternion anchorRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion headRotation
    // Size: 0x10
    // Offset: 0x168
    ::UnityEngine::Quaternion headRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion anchorRelativeToHead
    // Size: 0x10
    // Offset: 0x178
    ::UnityEngine::Quaternion anchorRelativeToHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion pelvisRelativeRotation
    // Size: 0x10
    // Offset: 0x188
    ::UnityEngine::Quaternion pelvisRelativeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion chestRelativeRotation
    // Size: 0x10
    // Offset: 0x198
    ::UnityEngine::Quaternion chestRelativeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 headDeltaPosition
    // Size: 0xC
    // Offset: 0x1A8
    ::UnityEngine::Vector3 headDeltaPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion pelvisDeltaRotation
    // Size: 0x10
    // Offset: 0x1B4
    ::UnityEngine::Quaternion pelvisDeltaRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion chestTargetRotation
    // Size: 0x10
    // Offset: 0x1C4
    ::UnityEngine::Quaternion chestTargetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Int32 pelvisIndex
    // Size: 0x4
    // Offset: 0x1D4
    int pelvisIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 spineIndex
    // Size: 0x4
    // Offset: 0x1D8
    int spineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chestIndex
    // Size: 0x4
    // Offset: 0x1DC
    int chestIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 neckIndex
    // Size: 0x4
    // Offset: 0x1E0
    int neckIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 headIndex
    // Size: 0x4
    // Offset: 0x1E4
    int headIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single length
    // Size: 0x4
    // Offset: 0x1E8
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasChest
    // Size: 0x1
    // Offset: 0x1EC
    bool hasChest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasNeck
    // Size: 0x1
    // Offset: 0x1ED
    bool hasNeck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasNeck and: headHeight
    char __padding47[0x2] = {};
    // private System.Single headHeight
    // Size: 0x4
    // Offset: 0x1F0
    float headHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sizeMlp
    // Size: 0x4
    // Offset: 0x1F4
    float sizeMlp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 chestForward
    // Size: 0xC
    // Offset: 0x1F8
    ::UnityEngine::Vector3 chestForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Transform headTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headTarget();
    // Get instance field reference: public UnityEngine.Transform pelvisTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_pelvisTarget();
    // Get instance field reference: public System.Single positionWeight
    [[deprecated("Use field access instead!")]] float& dyn_positionWeight();
    // Get instance field reference: public System.Single rotationWeight
    [[deprecated("Use field access instead!")]] float& dyn_rotationWeight();
    // Get instance field reference: public System.Single pelvisPositionWeight
    [[deprecated("Use field access instead!")]] float& dyn_pelvisPositionWeight();
    // Get instance field reference: public System.Single pelvisRotationWeight
    [[deprecated("Use field access instead!")]] float& dyn_pelvisRotationWeight();
    // Get instance field reference: public UnityEngine.Transform chestGoal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestGoal();
    // Get instance field reference: public System.Single chestGoalWeight
    [[deprecated("Use field access instead!")]] float& dyn_chestGoalWeight();
    // Get instance field reference: public System.Single minHeadHeight
    [[deprecated("Use field access instead!")]] float& dyn_minHeadHeight();
    // Get instance field reference: public System.Single bodyPosStiffness
    [[deprecated("Use field access instead!")]] float& dyn_bodyPosStiffness();
    // Get instance field reference: public System.Single bodyRotStiffness
    [[deprecated("Use field access instead!")]] float& dyn_bodyRotStiffness();
    // Get instance field reference: public System.Single neckStiffness
    [[deprecated("Use field access instead!")]] float& dyn_neckStiffness();
    // Get instance field reference: public System.Single rotateChestByHands
    [[deprecated("Use field access instead!")]] float& dyn_rotateChestByHands();
    // Get instance field reference: public System.Single chestClampWeight
    [[deprecated("Use field access instead!")]] float& dyn_chestClampWeight();
    // Get instance field reference: public System.Single headClampWeight
    [[deprecated("Use field access instead!")]] float& dyn_headClampWeight();
    // Get instance field reference: public System.Single moveBodyBackWhenCrouching
    [[deprecated("Use field access instead!")]] float& dyn_moveBodyBackWhenCrouching();
    // Get instance field reference: public System.Single maintainPelvisPosition
    [[deprecated("Use field access instead!")]] float& dyn_maintainPelvisPosition();
    // Get instance field reference: public System.Single maxRootAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxRootAngle();
    // Get instance field reference: public UnityEngine.Vector3 IKPositionHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_IKPositionHead();
    // Get instance field reference: public UnityEngine.Quaternion IKRotationHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_IKRotationHead();
    // Get instance field reference: public UnityEngine.Vector3 IKPositionPelvis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_IKPositionPelvis();
    // Get instance field reference: public UnityEngine.Quaternion IKRotationPelvis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_IKRotationPelvis();
    // Get instance field reference: public UnityEngine.Vector3 goalPositionChest
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_goalPositionChest();
    // Get instance field reference: public UnityEngine.Vector3 pelvisPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pelvisPositionOffset();
    // Get instance field reference: public UnityEngine.Vector3 chestPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_chestPositionOffset();
    // Get instance field reference: public UnityEngine.Vector3 headPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headPositionOffset();
    // Get instance field reference: public UnityEngine.Quaternion pelvisRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_pelvisRotationOffset();
    // Get instance field reference: public UnityEngine.Quaternion chestRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_chestRotationOffset();
    // Get instance field reference: public UnityEngine.Quaternion headRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headRotationOffset();
    // Get instance field reference: public UnityEngine.Vector3 faceDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_faceDirection();
    // Get instance field reference: public UnityEngine.Vector3 locomotionHeadPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_locomotionHeadPositionOffset();
    // Get instance field reference: public UnityEngine.Vector3 headPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headPosition();
    // Get instance field reference: private UnityEngine.Quaternion <anchorRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$anchorRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion headRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_headRotation();
    // Get instance field reference: private UnityEngine.Quaternion anchorRelativeToHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_anchorRelativeToHead();
    // Get instance field reference: private UnityEngine.Quaternion pelvisRelativeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_pelvisRelativeRotation();
    // Get instance field reference: private UnityEngine.Quaternion chestRelativeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_chestRelativeRotation();
    // Get instance field reference: private UnityEngine.Vector3 headDeltaPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headDeltaPosition();
    // Get instance field reference: private UnityEngine.Quaternion pelvisDeltaRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_pelvisDeltaRotation();
    // Get instance field reference: private UnityEngine.Quaternion chestTargetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_chestTargetRotation();
    // Get instance field reference: private System.Int32 pelvisIndex
    [[deprecated("Use field access instead!")]] int& dyn_pelvisIndex();
    // Get instance field reference: private System.Int32 spineIndex
    [[deprecated("Use field access instead!")]] int& dyn_spineIndex();
    // Get instance field reference: private System.Int32 chestIndex
    [[deprecated("Use field access instead!")]] int& dyn_chestIndex();
    // Get instance field reference: private System.Int32 neckIndex
    [[deprecated("Use field access instead!")]] int& dyn_neckIndex();
    // Get instance field reference: private System.Int32 headIndex
    [[deprecated("Use field access instead!")]] int& dyn_headIndex();
    // Get instance field reference: private System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: private System.Boolean hasChest
    [[deprecated("Use field access instead!")]] bool& dyn_hasChest();
    // Get instance field reference: private System.Boolean hasNeck
    [[deprecated("Use field access instead!")]] bool& dyn_hasNeck();
    // Get instance field reference: private System.Single headHeight
    [[deprecated("Use field access instead!")]] float& dyn_headHeight();
    // Get instance field reference: private System.Single sizeMlp
    [[deprecated("Use field access instead!")]] float& dyn_sizeMlp();
    // Get instance field reference: private UnityEngine.Vector3 chestForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_chestForward();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_pelvis()
    // Offset: 0x209AFE0
    ::RootMotion::FinalIK::IKSolverVR::VirtualBone* get_pelvis();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_firstSpineBone()
    // Offset: 0x20A83EC
    ::RootMotion::FinalIK::IKSolverVR::VirtualBone* get_firstSpineBone();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_chest()
    // Offset: 0x20A0184
    ::RootMotion::FinalIK::IKSolverVR::VirtualBone* get_chest();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_neck()
    // Offset: 0x20A843C
    ::RootMotion::FinalIK::IKSolverVR::VirtualBone* get_neck();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_head()
    // Offset: 0x20A7D84
    ::RootMotion::FinalIK::IKSolverVR::VirtualBone* get_head();
    // public UnityEngine.Quaternion get_anchorRotation()
    // Offset: 0x20A848C
    ::UnityEngine::Quaternion get_anchorRotation();
    // private System.Void set_anchorRotation(UnityEngine.Quaternion value)
    // Offset: 0x20A84A0
    void set_anchorRotation(::UnityEngine::Quaternion value);
    // private System.Void CalculateChestTargetRotation(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x20A99D4
    void CalculateChestTargetRotation(::RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*> arms);
    // public System.Void Solve(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Leg[] legs, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x209DC0C
    void Solve(::RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*> legs, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*> arms);
    // private System.Void FABRIKPass(UnityEngine.Vector3 animatedPelvisPos, UnityEngine.Vector3 rootUp)
    // Offset: 0x20AA3D4
    void FABRIKPass(::UnityEngine::Vector3 animatedPelvisPos, ::UnityEngine::Vector3 rootUp);
    // private System.Void SolvePelvis()
    // Offset: 0x20AAB88
    void SolvePelvis();
    // private System.Void AdjustChestByHands(ref UnityEngine.Quaternion chestTargetRotation, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x20A9C08
    void AdjustChestByHands(ByRef<::UnityEngine::Quaternion> chestTargetRotation, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*> arms);
    // public System.Void InverseTranslateToHead(RootMotion.FinalIK.IKSolverVR/Leg[] legs, System.Boolean limited, System.Boolean useCurrentLegMag, UnityEngine.Vector3 offset, System.Single w)
    // Offset: 0x209FE00
    void InverseTranslateToHead(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*> legs, bool limited, bool useCurrentLegMag, ::UnityEngine::Vector3 offset, float w);
    // private System.Void TranslatePelvis(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 deltaPosition, UnityEngine.Quaternion deltaRotation)
    // Offset: 0x20A9FC0
    void TranslatePelvis(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*> legs, ::UnityEngine::Vector3 deltaPosition, ::UnityEngine::Quaternion deltaRotation);
    // private UnityEngine.Vector3 LimitPelvisPosition(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 pelvisPosition, System.Boolean useCurrentLegMag, System.Int32 it)
    // Offset: 0x20AB9DC
    ::UnityEngine::Vector3 LimitPelvisPosition(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*> legs, ::UnityEngine::Vector3 pelvisPosition, bool useCurrentLegMag, int it);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x20AA8E8
    void Bend(::ArrayW<::RootMotion::FinalIK::IKSolverVR::VirtualBone*> bones, int firstIndex, int lastIndex, ::UnityEngine::Quaternion targetRotation, float clampWeight, bool uniformWeight, float w);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, UnityEngine.Quaternion rotationOffset, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x20AA62C
    void Bend(::ArrayW<::RootMotion::FinalIK::IKSolverVR::VirtualBone*> bones, int firstIndex, int lastIndex, ::UnityEngine::Quaternion targetRotation, ::UnityEngine::Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w);
    // protected override System.Void OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Int32 rootIndex, System.Int32 index)
    // Offset: 0x20A84B4
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Int32 rootIndex, System.Int32 index)
    void OnRead(::ArrayW<::UnityEngine::Vector3> positions, ::ArrayW<::UnityEngine::Quaternion> rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index);
    // public override System.Void PreSolve()
    // Offset: 0x20A928C
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::PreSolve()
    void PreSolve();
    // public override System.Void ApplyOffsets()
    // Offset: 0x20A94A8
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ApplyOffsets()
    void ApplyOffsets();
    // public override System.Void Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    // Offset: 0x20AB568
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    void Write(ByRef<::ArrayW<::UnityEngine::Vector3>> solvedPositions, ByRef<::ArrayW<::UnityEngine::Quaternion>> solvedRotations);
    // public override System.Void ResetOffsets()
    // Offset: 0x20AB8E4
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ResetOffsets()
    void ResetOffsets();
    // public System.Void .ctor()
    // Offset: 0x20A1ED0
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverVR::Spine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::IKSolverVR::Spine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverVR::Spine*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverVR/Spine
  #pragma pack(pop)
  static check_size<sizeof(IKSolverVR::Spine), 504 + sizeof(::UnityEngine::Vector3)> __RootMotion_FinalIK_IKSolverVR_SpineSizeCheck;
  static_assert(sizeof(IKSolverVR::Spine) == 0x204);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis
// Il2CppName: get_pelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKSolverVR::VirtualBone* (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_pelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone
// Il2CppName: get_firstSpineBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKSolverVR::VirtualBone* (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_firstSpineBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_chest
// Il2CppName: get_chest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKSolverVR::VirtualBone* (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_chest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_chest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_neck
// Il2CppName: get_neck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKSolverVR::VirtualBone* (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_neck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_neck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKSolverVR::VirtualBone* (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_head)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation
// Il2CppName: get_anchorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "get_anchorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation
// Il2CppName: set_anchorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::UnityEngine::Quaternion)>(&RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "set_anchorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation
// Il2CppName: CalculateChestTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::RootMotion::FinalIK::IKSolverVR::VirtualBone*, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*>)>(&RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation)> {
  static const MethodInfo* get() {
    static auto* rootBone = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/VirtualBone")->byval_arg;
    static auto* arms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Arm"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "CalculateChestTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootBone, arms});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::RootMotion::FinalIK::IKSolverVR::VirtualBone*, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*>, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*>)>(&RootMotion::FinalIK::IKSolverVR::Spine::Solve)> {
  static const MethodInfo* get() {
    static auto* rootBone = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/VirtualBone")->byval_arg;
    static auto* legs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Leg"), 1)->byval_arg;
    static auto* arms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Arm"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootBone, legs, arms});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass
// Il2CppName: FABRIKPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass)> {
  static const MethodInfo* get() {
    static auto* animatedPelvisPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rootUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "FABRIKPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animatedPelvisPos, rootUp});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis
// Il2CppName: SolvePelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "SolvePelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands
// Il2CppName: AdjustChestByHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(ByRef<::UnityEngine::Quaternion>, ::ArrayW<::RootMotion::FinalIK::IKSolverVR::Arm*>)>(&RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands)> {
  static const MethodInfo* get() {
    static auto* chestTargetRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* arms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Arm"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "AdjustChestByHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chestTargetRotation, arms});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead
// Il2CppName: InverseTranslateToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*>, bool, bool, ::UnityEngine::Vector3, float)>(&RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead)> {
  static const MethodInfo* get() {
    static auto* legs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Leg"), 1)->byval_arg;
    static auto* limited = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useCurrentLegMag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "InverseTranslateToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{legs, limited, useCurrentLegMag, offset, w});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis
// Il2CppName: TranslatePelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*>, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis)> {
  static const MethodInfo* get() {
    static auto* legs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Leg"), 1)->byval_arg;
    static auto* deltaPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "TranslatePelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{legs, deltaPosition, deltaRotation});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition
// Il2CppName: LimitPelvisPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::RootMotion::FinalIK::IKSolverVR::Leg*>, ::UnityEngine::Vector3, bool, int)>(&RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition)> {
  static const MethodInfo* get() {
    static auto* legs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/Leg"), 1)->byval_arg;
    static auto* pelvisPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* useCurrentLegMag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* it = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "LimitPelvisPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{legs, pelvisPosition, useCurrentLegMag, it});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::Bend
// Il2CppName: Bend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::RootMotion::FinalIK::IKSolverVR::VirtualBone*>, int, int, ::UnityEngine::Quaternion, float, bool, float)>(&RootMotion::FinalIK::IKSolverVR::Spine::Bend)> {
  static const MethodInfo* get() {
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/VirtualBone"), 1)->byval_arg;
    static auto* firstIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* clampWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* uniformWeight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "Bend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bones, firstIndex, lastIndex, targetRotation, clampWeight, uniformWeight, w});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::Bend
// Il2CppName: Bend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::RootMotion::FinalIK::IKSolverVR::VirtualBone*>, int, int, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float, bool, float)>(&RootMotion::FinalIK::IKSolverVR::Spine::Bend)> {
  static const MethodInfo* get() {
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverVR/VirtualBone"), 1)->byval_arg;
    static auto* firstIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rotationOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* clampWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* uniformWeight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "Bend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bones, firstIndex, lastIndex, targetRotation, rotationOffset, clampWeight, uniformWeight, w});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Quaternion>, bool, bool, bool, bool, int, int)>(&RootMotion::FinalIK::IKSolverVR::Spine::OnRead)> {
  static const MethodInfo* get() {
    static auto* positions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* rotations = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* hasChest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasNeck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasShoulders = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasToes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rootIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, rootIndex, index});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::PreSolve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets
// Il2CppName: ApplyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "ApplyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<::ArrayW<::UnityEngine::Quaternion>>)>(&RootMotion::FinalIK::IKSolverVR::Spine::Write)> {
  static const MethodInfo* get() {
    static auto* solvedPositions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* solvedRotations = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solvedPositions, solvedRotations});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::IKSolverVR::Spine::*)()>(&RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::IKSolverVR::Spine*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::IKSolverVR::Spine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
