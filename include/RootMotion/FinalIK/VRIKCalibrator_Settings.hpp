// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator
#include "RootMotion/FinalIK/VRIKCalibrator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::VRIKCalibrator::Settings);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::VRIKCalibrator::Settings*, "RootMotion.FinalIK", "VRIKCalibrator/Settings");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.VRIKCalibrator/Settings
  // [TokenAttribute] Offset: FFFFFFFF
  class VRIKCalibrator::Settings : public ::Il2CppObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0xAC950C
    // public UnityEngine.Vector3 headTrackerForward
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 headTrackerForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC9544
    // public UnityEngine.Vector3 headTrackerUp
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 headTrackerUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC957C
    // public UnityEngine.Vector3 bodyTrackerForward
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 bodyTrackerForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC95B4
    // public UnityEngine.Vector3 bodyTrackerUp
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 bodyTrackerUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC95EC
    // public UnityEngine.Vector3 handTrackerForward
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 handTrackerForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC9624
    // public UnityEngine.Vector3 handTrackerUp
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 handTrackerUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC965C
    // public UnityEngine.Vector3 footTrackerForward
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 footTrackerForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC9694
    // public UnityEngine.Vector3 footTrackerUp
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 footTrackerUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0xAC96CC
    // [TooltipAttribute] Offset: 0xAC96CC
    // public UnityEngine.Vector3 headOffset
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 headOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC971C
    // public UnityEngine.Vector3 handOffset
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 handOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAC9754
    // public System.Single footForwardOffset
    // Size: 0x4
    // Offset: 0x88
    float footForwardOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC978C
    // public System.Single footInwardOffset
    // Size: 0x4
    // Offset: 0x8C
    float footInwardOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC97C4
    // [RangeAttribute] Offset: 0xAC97C4
    // public System.Single footHeadingOffset
    // Size: 0x4
    // Offset: 0x90
    float footHeadingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 headTrackerForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headTrackerForward();
    // Get instance field reference: public UnityEngine.Vector3 headTrackerUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headTrackerUp();
    // Get instance field reference: public UnityEngine.Vector3 bodyTrackerForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyTrackerForward();
    // Get instance field reference: public UnityEngine.Vector3 bodyTrackerUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyTrackerUp();
    // Get instance field reference: public UnityEngine.Vector3 handTrackerForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_handTrackerForward();
    // Get instance field reference: public UnityEngine.Vector3 handTrackerUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_handTrackerUp();
    // Get instance field reference: public UnityEngine.Vector3 footTrackerForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_footTrackerForward();
    // Get instance field reference: public UnityEngine.Vector3 footTrackerUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_footTrackerUp();
    // Get instance field reference: public UnityEngine.Vector3 headOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headOffset();
    // Get instance field reference: public UnityEngine.Vector3 handOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_handOffset();
    // Get instance field reference: public System.Single footForwardOffset
    [[deprecated("Use field access instead!")]] float& dyn_footForwardOffset();
    // Get instance field reference: public System.Single footInwardOffset
    [[deprecated("Use field access instead!")]] float& dyn_footInwardOffset();
    // Get instance field reference: public System.Single footHeadingOffset
    [[deprecated("Use field access instead!")]] float& dyn_footHeadingOffset();
    // public System.Void .ctor()
    // Offset: 0x1187B6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIKCalibrator::Settings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIKCalibrator::Settings*, creationType>()));
    }
  }; // RootMotion.FinalIK.VRIKCalibrator/Settings
  #pragma pack(pop)
  static check_size<sizeof(VRIKCalibrator::Settings), 144 + sizeof(float)> __RootMotion_FinalIK_VRIKCalibrator_SettingsSizeCheck;
  static_assert(sizeof(VRIKCalibrator::Settings) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKCalibrator::Settings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
