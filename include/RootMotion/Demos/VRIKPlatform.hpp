// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: VRIK
  class VRIK;
}
// Completed forward declares
// Type namespace: RootMotion.Demos
namespace RootMotion::Demos {
  // Forward declaring type: VRIKPlatform
  class VRIKPlatform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::Demos::VRIKPlatform);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::Demos::VRIKPlatform*, "RootMotion.Demos", "VRIKPlatform");
// Type namespace: RootMotion.Demos
namespace RootMotion::Demos {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.Demos.VRIKPlatform
  // [TokenAttribute] Offset: FFFFFFFF
  class VRIKPlatform : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public RootMotion.FinalIK.VRIK ik
    // Size: 0x8
    // Offset: 0x18
    ::RootMotion::FinalIK::VRIK* ik;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::VRIK*) == 0x8);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion lastRotation
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion lastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public RootMotion.FinalIK.VRIK ik
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& dyn_ik();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: private UnityEngine.Quaternion lastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastRotation();
    // private System.Void Start()
    // Offset: 0x1EA5144
    void Start();
    // private System.Void Update()
    // Offset: 0x1EA51B4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x1EA5424
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIKPlatform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIKPlatform*, creationType>()));
    }
  }; // RootMotion.Demos.VRIKPlatform
  #pragma pack(pop)
  static check_size<sizeof(VRIKPlatform), 44 + sizeof(::UnityEngine::Quaternion)> __RootMotion_Demos_VRIKPlatformSizeCheck;
  static_assert(sizeof(VRIKPlatform) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::Demos::VRIKPlatform::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::Demos::VRIKPlatform::*)()>(&RootMotion::Demos::VRIKPlatform::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::Demos::VRIKPlatform*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::Demos::VRIKPlatform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::Demos::VRIKPlatform::*)()>(&RootMotion::Demos::VRIKPlatform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::Demos::VRIKPlatform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::Demos::VRIKPlatform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
