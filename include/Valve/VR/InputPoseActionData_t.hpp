// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: InputPoseActionData_t
  struct InputPoseActionData_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InputPoseActionData_t, "Valve.VR", "InputPoseActionData_t");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x5E
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.InputPoseActionData_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputPoseActionData_t/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean bActive
    // Size: 0x1
    // Offset: 0x0
    bool bActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bActive and: activeOrigin
    char __padding0[0x7] = {};
    // public System.UInt64 activeOrigin
    // Size: 0x8
    // Offset: 0x8
    uint64_t activeOrigin;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public Valve.VR.TrackedDevicePose_t pose
    // Size: 0x4E
    // Offset: 0x10
    ::Valve::VR::TrackedDevicePose_t pose;
    // Field size check
    static_assert(sizeof(::Valve::VR::TrackedDevicePose_t) == 0x4E);
    public:
    // Creating value type constructor for type: InputPoseActionData_t
    constexpr InputPoseActionData_t(bool bActive_ = {}, uint64_t activeOrigin_ = {}, ::Valve::VR::TrackedDevicePose_t pose_ = {}) noexcept : bActive{bActive_}, activeOrigin{activeOrigin_}, pose{pose_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean bActive
    [[deprecated("Use field access instead!")]] bool& dyn_bActive();
    // Get instance field reference: public System.UInt64 activeOrigin
    [[deprecated("Use field access instead!")]] uint64_t& dyn_activeOrigin();
    // Get instance field reference: public Valve.VR.TrackedDevicePose_t pose
    [[deprecated("Use field access instead!")]] ::Valve::VR::TrackedDevicePose_t& dyn_pose();
  }; // Valve.VR.InputPoseActionData_t
  #pragma pack(pop)
  static check_size<sizeof(InputPoseActionData_t), 16 + sizeof(::Valve::VR::TrackedDevicePose_t)> __Valve_VR_InputPoseActionData_tSizeCheck;
  static_assert(sizeof(InputPoseActionData_t) == 0x5E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
