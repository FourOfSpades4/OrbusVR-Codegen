// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: IVRChaperoneSetup
  struct IVRChaperoneSetup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::IVRChaperoneSetup, "Valve.VR", "IVRChaperoneSetup");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x98
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.IVRChaperoneSetup
  // [TokenAttribute] Offset: FFFFFFFF
  struct IVRChaperoneSetup/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy
    class _CommitWorkingCopy;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy
    class _RevertWorkingCopy;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize
    class _GetWorkingPlayAreaSize;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect
    class _GetWorkingPlayAreaRect;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo
    class _GetWorkingCollisionBoundsInfo;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo
    class _GetLiveCollisionBoundsInfo;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose
    class _GetWorkingSeatedZeroPoseToRawTrackingPose;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose
    class _GetWorkingStandingZeroPoseToRawTrackingPose;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize
    class _SetWorkingPlayAreaSize;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo
    class _SetWorkingCollisionBoundsInfo;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_SetWorkingPerimeter
    class _SetWorkingPerimeter;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose
    class _SetWorkingSeatedZeroPoseToRawTrackingPose;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose
    class _SetWorkingStandingZeroPoseToRawTrackingPose;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_ReloadFromDisk
    class _ReloadFromDisk;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose
    class _GetLiveSeatedZeroPoseToRawTrackingPose;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer
    class _ExportLiveToBuffer;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking
    class _ImportFromBufferToWorking;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_ShowWorkingSetPreview
    class _ShowWorkingSetPreview;
    // Nested type: ::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview
    class _HideWorkingSetPreview;
    public:
    // Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy CommitWorkingCopy
    // Size: 0x8
    // Offset: 0x0
    ::Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy* CommitWorkingCopy;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy RevertWorkingCopy
    // Size: 0x8
    // Offset: 0x8
    ::Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy* RevertWorkingCopy;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize GetWorkingPlayAreaSize
    // Size: 0x8
    // Offset: 0x10
    ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize* GetWorkingPlayAreaSize;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect GetWorkingPlayAreaRect
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect* GetWorkingPlayAreaRect;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo* GetWorkingCollisionBoundsInfo;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo
    // Size: 0x8
    // Offset: 0x28
    ::Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo* GetLiveCollisionBoundsInfo;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose
    // Size: 0x8
    // Offset: 0x30
    ::Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose* GetWorkingSeatedZeroPoseToRawTrackingPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose
    // Size: 0x8
    // Offset: 0x38
    ::Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose* GetWorkingStandingZeroPoseToRawTrackingPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize SetWorkingPlayAreaSize
    // Size: 0x8
    // Offset: 0x40
    ::Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize* SetWorkingPlayAreaSize;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo
    // Size: 0x8
    // Offset: 0x48
    ::Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo* SetWorkingCollisionBoundsInfo;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_SetWorkingPerimeter SetWorkingPerimeter
    // Size: 0x8
    // Offset: 0x50
    ::Valve::VR::IVRChaperoneSetup::_SetWorkingPerimeter* SetWorkingPerimeter;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_SetWorkingPerimeter*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose
    // Size: 0x8
    // Offset: 0x58
    ::Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose* SetWorkingSeatedZeroPoseToRawTrackingPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose
    // Size: 0x8
    // Offset: 0x60
    ::Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose* SetWorkingStandingZeroPoseToRawTrackingPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_ReloadFromDisk ReloadFromDisk
    // Size: 0x8
    // Offset: 0x68
    ::Valve::VR::IVRChaperoneSetup::_ReloadFromDisk* ReloadFromDisk;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_ReloadFromDisk*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose
    // Size: 0x8
    // Offset: 0x70
    ::Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose* GetLiveSeatedZeroPoseToRawTrackingPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer ExportLiveToBuffer
    // Size: 0x8
    // Offset: 0x78
    ::Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer* ExportLiveToBuffer;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking ImportFromBufferToWorking
    // Size: 0x8
    // Offset: 0x80
    ::Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking* ImportFromBufferToWorking;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_ShowWorkingSetPreview ShowWorkingSetPreview
    // Size: 0x8
    // Offset: 0x88
    ::Valve::VR::IVRChaperoneSetup::_ShowWorkingSetPreview* ShowWorkingSetPreview;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_ShowWorkingSetPreview*) == 0x8);
    // Valve.VR.IVRChaperoneSetup/_HideWorkingSetPreview HideWorkingSetPreview
    // Size: 0x8
    // Offset: 0x90
    ::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview* HideWorkingSetPreview;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview*) == 0x8);
    public:
    // Creating value type constructor for type: IVRChaperoneSetup
    constexpr IVRChaperoneSetup(::Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy* CommitWorkingCopy_ = {}, ::Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy* RevertWorkingCopy_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize* GetWorkingPlayAreaSize_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect* GetWorkingPlayAreaRect_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo* GetWorkingCollisionBoundsInfo_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo* GetLiveCollisionBoundsInfo_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose* GetWorkingSeatedZeroPoseToRawTrackingPose_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose* GetWorkingStandingZeroPoseToRawTrackingPose_ = {}, ::Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize* SetWorkingPlayAreaSize_ = {}, ::Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo* SetWorkingCollisionBoundsInfo_ = {}, ::Valve::VR::IVRChaperoneSetup::_SetWorkingPerimeter* SetWorkingPerimeter_ = {}, ::Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose* SetWorkingSeatedZeroPoseToRawTrackingPose_ = {}, ::Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose* SetWorkingStandingZeroPoseToRawTrackingPose_ = {}, ::Valve::VR::IVRChaperoneSetup::_ReloadFromDisk* ReloadFromDisk_ = {}, ::Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose* GetLiveSeatedZeroPoseToRawTrackingPose_ = {}, ::Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer* ExportLiveToBuffer_ = {}, ::Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking* ImportFromBufferToWorking_ = {}, ::Valve::VR::IVRChaperoneSetup::_ShowWorkingSetPreview* ShowWorkingSetPreview_ = {}, ::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview* HideWorkingSetPreview_ = {}) noexcept : CommitWorkingCopy{CommitWorkingCopy_}, RevertWorkingCopy{RevertWorkingCopy_}, GetWorkingPlayAreaSize{GetWorkingPlayAreaSize_}, GetWorkingPlayAreaRect{GetWorkingPlayAreaRect_}, GetWorkingCollisionBoundsInfo{GetWorkingCollisionBoundsInfo_}, GetLiveCollisionBoundsInfo{GetLiveCollisionBoundsInfo_}, GetWorkingSeatedZeroPoseToRawTrackingPose{GetWorkingSeatedZeroPoseToRawTrackingPose_}, GetWorkingStandingZeroPoseToRawTrackingPose{GetWorkingStandingZeroPoseToRawTrackingPose_}, SetWorkingPlayAreaSize{SetWorkingPlayAreaSize_}, SetWorkingCollisionBoundsInfo{SetWorkingCollisionBoundsInfo_}, SetWorkingPerimeter{SetWorkingPerimeter_}, SetWorkingSeatedZeroPoseToRawTrackingPose{SetWorkingSeatedZeroPoseToRawTrackingPose_}, SetWorkingStandingZeroPoseToRawTrackingPose{SetWorkingStandingZeroPoseToRawTrackingPose_}, ReloadFromDisk{ReloadFromDisk_}, GetLiveSeatedZeroPoseToRawTrackingPose{GetLiveSeatedZeroPoseToRawTrackingPose_}, ExportLiveToBuffer{ExportLiveToBuffer_}, ImportFromBufferToWorking{ImportFromBufferToWorking_}, ShowWorkingSetPreview{ShowWorkingSetPreview_}, HideWorkingSetPreview{HideWorkingSetPreview_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy CommitWorkingCopy
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy*& dyn_CommitWorkingCopy();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy RevertWorkingCopy
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy*& dyn_RevertWorkingCopy();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize GetWorkingPlayAreaSize
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize*& dyn_GetWorkingPlayAreaSize();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect GetWorkingPlayAreaRect
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect*& dyn_GetWorkingPlayAreaRect();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo*& dyn_GetWorkingCollisionBoundsInfo();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo*& dyn_GetLiveCollisionBoundsInfo();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose*& dyn_GetWorkingSeatedZeroPoseToRawTrackingPose();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose*& dyn_GetWorkingStandingZeroPoseToRawTrackingPose();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize SetWorkingPlayAreaSize
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize*& dyn_SetWorkingPlayAreaSize();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo*& dyn_SetWorkingCollisionBoundsInfo();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_SetWorkingPerimeter SetWorkingPerimeter
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_SetWorkingPerimeter*& dyn_SetWorkingPerimeter();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose*& dyn_SetWorkingSeatedZeroPoseToRawTrackingPose();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose*& dyn_SetWorkingStandingZeroPoseToRawTrackingPose();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_ReloadFromDisk ReloadFromDisk
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_ReloadFromDisk*& dyn_ReloadFromDisk();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose*& dyn_GetLiveSeatedZeroPoseToRawTrackingPose();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer ExportLiveToBuffer
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer*& dyn_ExportLiveToBuffer();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking ImportFromBufferToWorking
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking*& dyn_ImportFromBufferToWorking();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_ShowWorkingSetPreview ShowWorkingSetPreview
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_ShowWorkingSetPreview*& dyn_ShowWorkingSetPreview();
    // Get instance field reference: Valve.VR.IVRChaperoneSetup/_HideWorkingSetPreview HideWorkingSetPreview
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview*& dyn_HideWorkingSetPreview();
  }; // Valve.VR.IVRChaperoneSetup
  #pragma pack(pop)
  static check_size<sizeof(IVRChaperoneSetup), 144 + sizeof(::Valve::VR::IVRChaperoneSetup::_HideWorkingSetPreview*)> __Valve_VR_IVRChaperoneSetupSizeCheck;
  static_assert(sizeof(IVRChaperoneSetup) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
