// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.InteractionSystem.Balloon/BalloonColor
#include "Valve/VR/InteractionSystem/Balloon_BalloonColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SoundPlayOneshot
  class SoundPlayOneshot;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: BalloonSpawner
  class BalloonSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::BalloonSpawner);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::BalloonSpawner*, "Valve.VR.InteractionSystem", "BalloonSpawner");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.BalloonSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  class BalloonSpawner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single minSpawnTime
    // Size: 0x4
    // Offset: 0x18
    float minSpawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSpawnTime
    // Size: 0x4
    // Offset: 0x1C
    float maxSpawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single nextSpawnTime
    // Size: 0x4
    // Offset: 0x20
    float nextSpawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: nextSpawnTime and: balloonPrefab
    char __padding2[0x4] = {};
    // public UnityEngine.GameObject balloonPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* balloonPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean autoSpawn
    // Size: 0x1
    // Offset: 0x30
    bool autoSpawn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean spawnAtStartup
    // Size: 0x1
    // Offset: 0x31
    bool spawnAtStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean playSounds
    // Size: 0x1
    // Offset: 0x32
    bool playSounds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playSounds and: inflateSound
    char __padding6[0x5] = {};
    // public Valve.VR.InteractionSystem.SoundPlayOneshot inflateSound
    // Size: 0x8
    // Offset: 0x38
    ::Valve::VR::InteractionSystem::SoundPlayOneshot* inflateSound;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::SoundPlayOneshot*) == 0x8);
    // public Valve.VR.InteractionSystem.SoundPlayOneshot stretchSound
    // Size: 0x8
    // Offset: 0x40
    ::Valve::VR::InteractionSystem::SoundPlayOneshot* stretchSound;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::SoundPlayOneshot*) == 0x8);
    // public System.Boolean sendSpawnMessageToParent
    // Size: 0x1
    // Offset: 0x48
    bool sendSpawnMessageToParent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendSpawnMessageToParent and: scale
    char __padding9[0x3] = {};
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x4C
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform spawnDirectionTransform
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* spawnDirectionTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single spawnForce
    // Size: 0x4
    // Offset: 0x58
    float spawnForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean attachBalloon
    // Size: 0x1
    // Offset: 0x5C
    bool attachBalloon;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attachBalloon and: color
    char __padding13[0x3] = {};
    // public Valve.VR.InteractionSystem.Balloon/BalloonColor color
    // Size: 0x4
    // Offset: 0x60
    ::Valve::VR::InteractionSystem::Balloon::BalloonColor color;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Balloon::BalloonColor) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single minSpawnTime
    [[deprecated("Use field access instead!")]] float& dyn_minSpawnTime();
    // Get instance field reference: public System.Single maxSpawnTime
    [[deprecated("Use field access instead!")]] float& dyn_maxSpawnTime();
    // Get instance field reference: private System.Single nextSpawnTime
    [[deprecated("Use field access instead!")]] float& dyn_nextSpawnTime();
    // Get instance field reference: public UnityEngine.GameObject balloonPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_balloonPrefab();
    // Get instance field reference: public System.Boolean autoSpawn
    [[deprecated("Use field access instead!")]] bool& dyn_autoSpawn();
    // Get instance field reference: public System.Boolean spawnAtStartup
    [[deprecated("Use field access instead!")]] bool& dyn_spawnAtStartup();
    // Get instance field reference: public System.Boolean playSounds
    [[deprecated("Use field access instead!")]] bool& dyn_playSounds();
    // Get instance field reference: public Valve.VR.InteractionSystem.SoundPlayOneshot inflateSound
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& dyn_inflateSound();
    // Get instance field reference: public Valve.VR.InteractionSystem.SoundPlayOneshot stretchSound
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& dyn_stretchSound();
    // Get instance field reference: public System.Boolean sendSpawnMessageToParent
    [[deprecated("Use field access instead!")]] bool& dyn_sendSpawnMessageToParent();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public UnityEngine.Transform spawnDirectionTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_spawnDirectionTransform();
    // Get instance field reference: public System.Single spawnForce
    [[deprecated("Use field access instead!")]] float& dyn_spawnForce();
    // Get instance field reference: public System.Boolean attachBalloon
    [[deprecated("Use field access instead!")]] bool& dyn_attachBalloon();
    // Get instance field reference: public Valve.VR.InteractionSystem.Balloon/BalloonColor color
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Balloon::BalloonColor& dyn_color();
    // private System.Void Start()
    // Offset: 0x115AA1C
    void Start();
    // private System.Void Update()
    // Offset: 0x115AF60
    void Update();
    // public UnityEngine.GameObject SpawnBalloon(Valve.VR.InteractionSystem.Balloon/BalloonColor color)
    // Offset: 0x115AAD8
    ::UnityEngine::GameObject* SpawnBalloon(::Valve::VR::InteractionSystem::Balloon::BalloonColor color);
    // public System.Void SpawnBalloonFromEvent(System.Int32 color)
    // Offset: 0x115B028
    void SpawnBalloonFromEvent(int color);
    // public System.Void .ctor()
    // Offset: 0x115B02C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BalloonSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BalloonSpawner*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.BalloonSpawner
  #pragma pack(pop)
  static check_size<sizeof(BalloonSpawner), 96 + sizeof(::Valve::VR::InteractionSystem::Balloon::BalloonColor)> __Valve_VR_InteractionSystem_BalloonSpawnerSizeCheck;
  static_assert(sizeof(BalloonSpawner) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BalloonSpawner::*)()>(&Valve::VR::InteractionSystem::BalloonSpawner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BalloonSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonSpawner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BalloonSpawner::*)()>(&Valve::VR::InteractionSystem::BalloonSpawner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BalloonSpawner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloon
// Il2CppName: SpawnBalloon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Valve::VR::InteractionSystem::BalloonSpawner::*)(::Valve::VR::InteractionSystem::Balloon::BalloonColor)>(&Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloon)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Balloon/BalloonColor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BalloonSpawner*), "SpawnBalloon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloonFromEvent
// Il2CppName: SpawnBalloonFromEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BalloonSpawner::*)(int)>(&Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloonFromEvent)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BalloonSpawner*), "SpawnBalloonFromEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
