// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints
#include "Valve/VR/InteractionSystem/ControllerButtonHints.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: TextMesh
  class TextMesh;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*, "Valve.VR.InteractionSystem", "ControllerButtonHints/ButtonHintInfo");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerButtonHints::ButtonHintInfo : public ::Il2CppObject {
    public:
    public:
    // public System.String componentName
    // Size: 0x8
    // Offset: 0x10
    ::StringW componentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // public UnityEngine.Transform localTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* localTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject textHintObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* textHintObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform textStartAnchor
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* textStartAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform textEndAnchor
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* textEndAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 textEndOffsetDir
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 textEndOffsetDir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: textEndOffsetDir and: canvasOffset
    char __padding6[0x4] = {};
    // public UnityEngine.Transform canvasOffset
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* canvasOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.UI.Text text
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Text* text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.TextMesh textMesh
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::TextMesh* textMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextMesh*) == 0x8);
    // public UnityEngine.Canvas textCanvas
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Canvas* textCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // public UnityEngine.LineRenderer line
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::LineRenderer* line;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // public System.Single distanceFromCenter
    // Size: 0x4
    // Offset: 0x78
    float distanceFromCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean textHintActive
    // Size: 0x1
    // Offset: 0x7C
    bool textHintActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String componentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_componentName();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_renderers();
    // Get instance field reference: public UnityEngine.Transform localTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_localTransform();
    // Get instance field reference: public UnityEngine.GameObject textHintObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_textHintObject();
    // Get instance field reference: public UnityEngine.Transform textStartAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_textStartAnchor();
    // Get instance field reference: public UnityEngine.Transform textEndAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_textEndAnchor();
    // Get instance field reference: public UnityEngine.Vector3 textEndOffsetDir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_textEndOffsetDir();
    // Get instance field reference: public UnityEngine.Transform canvasOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_canvasOffset();
    // Get instance field reference: public UnityEngine.UI.Text text
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_text();
    // Get instance field reference: public UnityEngine.TextMesh textMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& dyn_textMesh();
    // Get instance field reference: public UnityEngine.Canvas textCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn_textCanvas();
    // Get instance field reference: public UnityEngine.LineRenderer line
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_line();
    // Get instance field reference: public System.Single distanceFromCenter
    [[deprecated("Use field access instead!")]] float& dyn_distanceFromCenter();
    // Get instance field reference: public System.Boolean textHintActive
    [[deprecated("Use field access instead!")]] bool& dyn_textHintActive();
    // public System.Void .ctor()
    // Offset: 0x11624BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerButtonHints::ButtonHintInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerButtonHints::ButtonHintInfo*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo
  #pragma pack(pop)
  static check_size<sizeof(ControllerButtonHints::ButtonHintInfo), 124 + sizeof(bool)> __Valve_VR_InteractionSystem_ControllerButtonHints_ButtonHintInfoSizeCheck;
  static_assert(sizeof(ControllerButtonHints::ButtonHintInfo) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
