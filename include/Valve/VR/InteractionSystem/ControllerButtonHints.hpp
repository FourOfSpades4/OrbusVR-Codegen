// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Player
  class Player;
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_RenderModel
  class SteamVR_RenderModel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ControllerButtonHints
  class ControllerButtonHints;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ControllerButtonHints);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ControllerButtonHints*, "Valve.VR.InteractionSystem", "ControllerButtonHints");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ControllerButtonHints
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerButtonHints : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType
    struct OffsetType;
    // Nested type: ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo
    class ButtonHintInfo;
    // Nested type: ::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36
    class $TestButtonHints$d__36;
    // Nested type: ::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37
    class $TestTextHints$d__37;
    public:
    // public UnityEngine.Material controllerMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* controllerMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Color flashColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color flashColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.GameObject textHintPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* textHintPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0xADE6E0
    // public System.Boolean debugHints
    // Size: 0x1
    // Offset: 0x38
    bool debugHints;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugHints and: renderModel
    char __padding3[0x7] = {};
    // private SteamVR_RenderModel renderModel
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SteamVR_RenderModel* renderModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_RenderModel*) == 0x8);
    // private Valve.VR.InteractionSystem.Player player
    // Size: 0x8
    // Offset: 0x48
    ::Valve::VR::InteractionSystem::Player* player;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Player*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> flashingRenderers
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* flashingRenderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // private System.Single startTime
    // Size: 0x4
    // Offset: 0x60
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tickCount
    // Size: 0x4
    // Offset: 0x64
    float tickCount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.Dictionary`2<Valve.VR.EVRButtonId,Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo> buttonHintInfos
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::Valve::VR::EVRButtonId, ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*>* buttonHintInfos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Valve::VR::EVRButtonId, ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*>*) == 0x8);
    // private UnityEngine.Transform textHintParent
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* textHintParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.String,System.UInt64>> componentButtonMasks
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::StringW, uint64_t>>* componentButtonMasks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::StringW, uint64_t>>*) == 0x8);
    // private System.Int32 colorID
    // Size: 0x4
    // Offset: 0x80
    int colorID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xADE718
    // private System.Boolean <initialized>k__BackingField
    // Size: 0x1
    // Offset: 0x84
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: centerPosition
    char __padding14[0x3] = {};
    // private UnityEngine.Vector3 centerPosition
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 centerPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: centerPosition and: renderModelLoadedAction
    char __padding15[0x4] = {};
    // private SteamVR_Events/Action renderModelLoadedAction
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::SteamVR_Events::Action* renderModelLoadedAction;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_Events::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material controllerMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_controllerMaterial();
    // Get instance field reference: public UnityEngine.Color flashColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_flashColor();
    // Get instance field reference: public UnityEngine.GameObject textHintPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_textHintPrefab();
    // Get instance field reference: public System.Boolean debugHints
    [[deprecated("Use field access instead!")]] bool& dyn_debugHints();
    // Get instance field reference: private SteamVR_RenderModel renderModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel*& dyn_renderModel();
    // Get instance field reference: private Valve.VR.InteractionSystem.Player player
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& dyn_player();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_renderers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> flashingRenderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_flashingRenderers();
    // Get instance field reference: private System.Single startTime
    [[deprecated("Use field access instead!")]] float& dyn_startTime();
    // Get instance field reference: private System.Single tickCount
    [[deprecated("Use field access instead!")]] float& dyn_tickCount();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Valve.VR.EVRButtonId,Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo> buttonHintInfos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Valve::VR::EVRButtonId, ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*>*& dyn_buttonHintInfos();
    // Get instance field reference: private UnityEngine.Transform textHintParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_textHintParent();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.String,System.UInt64>> componentButtonMasks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::StringW, uint64_t>>*& dyn_componentButtonMasks();
    // Get instance field reference: private System.Int32 colorID
    [[deprecated("Use field access instead!")]] int& dyn_colorID();
    // Get instance field reference: private System.Boolean <initialized>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$initialized$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 centerPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerPosition();
    // Get instance field reference: private SteamVR_Events/Action renderModelLoadedAction
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& dyn_renderModelLoadedAction();
    // public System.Boolean get_initialized()
    // Offset: 0x115F680
    bool get_initialized();
    // private System.Void set_initialized(System.Boolean value)
    // Offset: 0x115F688
    void set_initialized(bool value);
    // private System.Void Awake()
    // Offset: 0x115F694
    void Awake();
    // private System.Void Start()
    // Offset: 0x115F750
    void Start();
    // private System.Void HintDebugLog(System.String msg)
    // Offset: 0x115F778
    void HintDebugLog(::StringW msg);
    // private System.Void OnEnable()
    // Offset: 0x115F824
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x115F858
    void OnDisable();
    // private System.Void OnParentHandInputFocusLost()
    // Offset: 0x115F91C
    void OnParentHandInputFocusLost();
    // private System.Void OnHandInitialized(System.Int32 deviceIndex)
    // Offset: 0x115FB34
    void OnHandInitialized(int deviceIndex);
    // private System.Void OnRenderModelLoaded(SteamVR_RenderModel renderModel, System.Boolean succeess)
    // Offset: 0x115FDF0
    void OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool succeess);
    // private System.Void CreateAndAddButtonInfo(Valve.VR.EVRButtonId buttonID)
    // Offset: 0x11607E8
    void CreateAndAddButtonInfo(::Valve::VR::EVRButtonId buttonID);
    // private System.Void ComputeTextEndTransforms()
    // Offset: 0x1161D0C
    void ComputeTextEndTransforms();
    // private System.Void ShowButtonHint(params Valve.VR.EVRButtonId[] buttons)
    // Offset: 0x11624C4
    void ShowButtonHint(::ArrayW<::Valve::VR::EVRButtonId> buttons);
    // private System.Void HideAllButtonHints()
    // Offset: 0x115F940
    void HideAllButtonHints();
    // private System.Void HideButtonHint(params Valve.VR.EVRButtonId[] buttons)
    // Offset: 0x116294C
    void HideButtonHint(::ArrayW<::Valve::VR::EVRButtonId> buttons);
    // private System.Boolean IsButtonHintActive(Valve.VR.EVRButtonId button)
    // Offset: 0x1162C68
    bool IsButtonHintActive(::Valve::VR::EVRButtonId button);
    // private System.Collections.IEnumerator TestButtonHints()
    // Offset: 0x1162E20
    ::System::Collections::IEnumerator* TestButtonHints();
    // private System.Collections.IEnumerator TestTextHints()
    // Offset: 0x1162EC0
    ::System::Collections::IEnumerator* TestTextHints();
    // private System.Void Update()
    // Offset: 0x1162F60
    void Update();
    // private System.Void UpdateTextHint(Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo hintInfo)
    // Offset: 0x116335C
    void UpdateTextHint(::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo* hintInfo);
    // private System.Void Clear()
    // Offset: 0x115F898
    void Clear();
    // public System.Void ShowText(Valve.VR.EVRButtonId button, System.String text, System.Boolean highlightButton)
    // Offset: 0x1163798
    void ShowText(::Valve::VR::EVRButtonId button, ::StringW text, bool highlightButton);
    // private System.Void HideText(Valve.VR.EVRButtonId button)
    // Offset: 0x11639D4
    void HideText(::Valve::VR::EVRButtonId button);
    // public System.Void HideAllText()
    // Offset: 0x115F994
    void HideAllText();
    // private System.String GetActiveHintText(Valve.VR.EVRButtonId button)
    // Offset: 0x1163AF8
    ::StringW GetActiveHintText(::Valve::VR::EVRButtonId button);
    // static private Valve.VR.InteractionSystem.ControllerButtonHints GetControllerButtonHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1163BF0
    static ::Valve::VR::InteractionSystem::ControllerButtonHints* GetControllerButtonHints(::Valve::VR::InteractionSystem::Hand* hand);
    // static public System.Void ShowButtonHint(Valve.VR.InteractionSystem.Hand hand, params Valve.VR.EVRButtonId[] buttons)
    // Offset: 0x115C330
    static void ShowButtonHint(::Valve::VR::InteractionSystem::Hand* hand, ::ArrayW<::Valve::VR::EVRButtonId> buttons);
    // static public System.Void HideButtonHint(Valve.VR.InteractionSystem.Hand hand, params Valve.VR.EVRButtonId[] buttons)
    // Offset: 0x115C110
    static void HideButtonHint(::Valve::VR::InteractionSystem::Hand* hand, ::ArrayW<::Valve::VR::EVRButtonId> buttons);
    // static public System.Void HideAllButtonHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1163CD4
    static void HideAllButtonHints(::Valve::VR::InteractionSystem::Hand* hand);
    // static public System.Boolean IsButtonHintActive(Valve.VR.InteractionSystem.Hand hand, Valve.VR.EVRButtonId button)
    // Offset: 0x1163D74
    static bool IsButtonHintActive(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button);
    // static public System.Void ShowTextHint(Valve.VR.InteractionSystem.Hand hand, Valve.VR.EVRButtonId button, System.String text, System.Boolean highlightButton)
    // Offset: 0x1163E2C
    static void ShowTextHint(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button, ::StringW text, bool highlightButton);
    // static public System.Void HideTextHint(Valve.VR.InteractionSystem.Hand hand, Valve.VR.EVRButtonId button)
    // Offset: 0x1163EFC
    static void HideTextHint(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button);
    // static public System.Void HideAllTextHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1163FB0
    static void HideAllTextHints(::Valve::VR::InteractionSystem::Hand* hand);
    // static public System.String GetActiveHintText(Valve.VR.InteractionSystem.Hand hand, Valve.VR.EVRButtonId button)
    // Offset: 0x1164050
    static ::StringW GetActiveHintText(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button);
    // public System.Void .ctor()
    // Offset: 0x1164118
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerButtonHints* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerButtonHints*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ControllerButtonHints
  #pragma pack(pop)
  static check_size<sizeof(ControllerButtonHints), 152 + sizeof(::GlobalNamespace::SteamVR_Events::Action*)> __Valve_VR_InteractionSystem_ControllerButtonHintsSizeCheck;
  static_assert(sizeof(ControllerButtonHints) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::get_initialized
// Il2CppName: get_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::get_initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "get_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::set_initialized
// Il2CppName: set_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(bool)>(&Valve::VR::InteractionSystem::ControllerButtonHints::set_initialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "set_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HintDebugLog
// Il2CppName: HintDebugLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::StringW)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HintDebugLog)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HintDebugLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::OnParentHandInputFocusLost
// Il2CppName: OnParentHandInputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::OnParentHandInputFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "OnParentHandInputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::OnHandInitialized
// Il2CppName: OnHandInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(int)>(&Valve::VR::InteractionSystem::ControllerButtonHints::OnHandInitialized)> {
  static const MethodInfo* get() {
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "OnHandInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::OnRenderModelLoaded
// Il2CppName: OnRenderModelLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::GlobalNamespace::SteamVR_RenderModel*, bool)>(&Valve::VR::InteractionSystem::ControllerButtonHints::OnRenderModelLoaded)> {
  static const MethodInfo* get() {
    static auto* renderModel = &::il2cpp_utils::GetClassFromName("", "SteamVR_RenderModel")->byval_arg;
    static auto* succeess = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "OnRenderModelLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderModel, succeess});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::CreateAndAddButtonInfo
// Il2CppName: CreateAndAddButtonInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::CreateAndAddButtonInfo)> {
  static const MethodInfo* get() {
    static auto* buttonID = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "CreateAndAddButtonInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonID});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ComputeTextEndTransforms
// Il2CppName: ComputeTextEndTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::ComputeTextEndTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "ComputeTextEndTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint
// Il2CppName: ShowButtonHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::ArrayW<::Valve::VR::EVRButtonId>)>(&Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint)> {
  static const MethodInfo* get() {
    static auto* buttons = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "ShowButtonHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttons});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints
// Il2CppName: HideAllButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideAllButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint
// Il2CppName: HideButtonHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::ArrayW<::Valve::VR::EVRButtonId>)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint)> {
  static const MethodInfo* get() {
    static auto* buttons = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideButtonHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttons});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive
// Il2CppName: IsButtonHintActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "IsButtonHintActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::TestButtonHints
// Il2CppName: TestButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::TestButtonHints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "TestButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::TestTextHints
// Il2CppName: TestTextHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::TestTextHints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "TestTextHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::UpdateTextHint
// Il2CppName: UpdateTextHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*)>(&Valve::VR::InteractionSystem::ControllerButtonHints::UpdateTextHint)> {
  static const MethodInfo* get() {
    static auto* hintInfo = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "ControllerButtonHints/ButtonHintInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "UpdateTextHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hintInfo});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ShowText
// Il2CppName: ShowText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::EVRButtonId, ::StringW, bool)>(&Valve::VR::InteractionSystem::ControllerButtonHints::ShowText)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* highlightButton = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "ShowText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, text, highlightButton});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideText
// Il2CppName: HideText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideText)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideAllText
// Il2CppName: HideAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerButtonHints::*)()>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideAllText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText
// Il2CppName: GetActiveHintText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Valve::VR::InteractionSystem::ControllerButtonHints::*)(::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "GetActiveHintText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::GetControllerButtonHints
// Il2CppName: GetControllerButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::ControllerButtonHints* (*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerButtonHints::GetControllerButtonHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "GetControllerButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint
// Il2CppName: ShowButtonHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*, ::ArrayW<::Valve::VR::EVRButtonId>)>(&Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* buttons = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "ShowButtonHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, buttons});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint
// Il2CppName: HideButtonHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*, ::ArrayW<::Valve::VR::EVRButtonId>)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* buttons = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideButtonHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, buttons});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints
// Il2CppName: HideAllButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideAllButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive
// Il2CppName: IsButtonHintActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Valve::VR::InteractionSystem::Hand*, ::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "IsButtonHintActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::ShowTextHint
// Il2CppName: ShowTextHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*, ::Valve::VR::EVRButtonId, ::StringW, bool)>(&Valve::VR::InteractionSystem::ControllerButtonHints::ShowTextHint)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* highlightButton = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "ShowTextHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, button, text, highlightButton});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideTextHint
// Il2CppName: HideTextHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*, ::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideTextHint)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideTextHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::HideAllTextHints
// Il2CppName: HideAllTextHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerButtonHints::HideAllTextHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "HideAllTextHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText
// Il2CppName: GetActiveHintText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Valve::VR::InteractionSystem::Hand*, ::Valve::VR::EVRButtonId)>(&Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRButtonId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerButtonHints*), "GetActiveHintText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, button});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerButtonHints::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
