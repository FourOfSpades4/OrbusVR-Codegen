// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: LinearMapping
  class LinearMapping;
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: HapticRack
  class HapticRack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::HapticRack);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::HapticRack*, "Valve.VR.InteractionSystem", "HapticRack");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.HapticRack
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD08DC
  class HapticRack : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [TooltipAttribute] Offset: 0xADDCC0
    // public Valve.VR.InteractionSystem.LinearMapping linearMapping
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::LinearMapping* linearMapping;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::LinearMapping*) == 0x8);
    // [TooltipAttribute] Offset: 0xADDCF8
    // public System.Int32 teethCount
    // Size: 0x4
    // Offset: 0x20
    int teethCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xADDD30
    // public System.Int32 minimumPulseDuration
    // Size: 0x4
    // Offset: 0x24
    int minimumPulseDuration;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xADDD68
    // public System.Int32 maximumPulseDuration
    // Size: 0x4
    // Offset: 0x28
    int maximumPulseDuration;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maximumPulseDuration and: onPulse
    char __padding3[0x4] = {};
    // [TooltipAttribute] Offset: 0xADDDA0
    // public UnityEngine.Events.UnityEvent onPulse
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onPulse;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x38
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // private System.Int32 previousToothIndex
    // Size: 0x4
    // Offset: 0x40
    int previousToothIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Valve.VR.InteractionSystem.LinearMapping linearMapping
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& dyn_linearMapping();
    // Get instance field reference: public System.Int32 teethCount
    [[deprecated("Use field access instead!")]] int& dyn_teethCount();
    // Get instance field reference: public System.Int32 minimumPulseDuration
    [[deprecated("Use field access instead!")]] int& dyn_minimumPulseDuration();
    // Get instance field reference: public System.Int32 maximumPulseDuration
    [[deprecated("Use field access instead!")]] int& dyn_maximumPulseDuration();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onPulse
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onPulse();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: private System.Int32 previousToothIndex
    [[deprecated("Use field access instead!")]] int& dyn_previousToothIndex();
    // private System.Void Awake()
    // Offset: 0x116A494
    void Awake();
    // private System.Void OnHandHoverBegin(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116A524
    void OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandHoverEnd(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116A52C
    void OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void Update()
    // Offset: 0x116A534
    void Update();
    // private System.Void Pulse()
    // Offset: 0x116A5E8
    void Pulse();
    // public System.Void .ctor()
    // Offset: 0x116A708
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HapticRack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HapticRack*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.HapticRack
  #pragma pack(pop)
  static check_size<sizeof(HapticRack), 64 + sizeof(int)> __Valve_VR_InteractionSystem_HapticRackSizeCheck;
  static_assert(sizeof(HapticRack) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::HapticRack::*)()>(&Valve::VR::InteractionSystem::HapticRack::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::HapticRack*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::OnHandHoverBegin
// Il2CppName: OnHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::HapticRack::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::HapticRack::OnHandHoverBegin)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::HapticRack*), "OnHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::OnHandHoverEnd
// Il2CppName: OnHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::HapticRack::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::HapticRack::OnHandHoverEnd)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::HapticRack*), "OnHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::HapticRack::*)()>(&Valve::VR::InteractionSystem::HapticRack::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::HapticRack*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::Pulse
// Il2CppName: Pulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::HapticRack::*)()>(&Valve::VR::InteractionSystem::HapticRack::Pulse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::HapticRack*), "Pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::HapticRack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
