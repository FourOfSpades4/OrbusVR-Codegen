// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MonoBehaviour
  class MonoBehaviour;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: SendMessageOptions
  struct SendMessageOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine::AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshPath
  class NavMeshPath;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Util
  class Util;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Util);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Util*, "Valve.VR.InteractionSystem", "Util");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Util
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class Util : public ::Il2CppObject {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43
    class $WrapCoroutine$d__43;
    // Nested type: ::Valve::VR::InteractionSystem::Util::$$c__47_1<T>
    template<typename T>
    class $$c__47_1;
    // static field const value: static public System.Single FeetToMeters
    static constexpr const float FeetToMeters = 0.3048;
    // Get static field: static public System.Single FeetToMeters
    static float _get_FeetToMeters();
    // Set static field: static public System.Single FeetToMeters
    static void _set_FeetToMeters(float value);
    // static field const value: static public System.Single FeetToCentimeters
    static constexpr const float FeetToCentimeters = 30.48;
    // Get static field: static public System.Single FeetToCentimeters
    static float _get_FeetToCentimeters();
    // Set static field: static public System.Single FeetToCentimeters
    static void _set_FeetToCentimeters(float value);
    // static field const value: static public System.Single InchesToMeters
    static constexpr const float InchesToMeters = 0.0254;
    // Get static field: static public System.Single InchesToMeters
    static float _get_InchesToMeters();
    // Set static field: static public System.Single InchesToMeters
    static void _set_InchesToMeters(float value);
    // static field const value: static public System.Single InchesToCentimeters
    static constexpr const float InchesToCentimeters = 2.54;
    // Get static field: static public System.Single InchesToCentimeters
    static float _get_InchesToCentimeters();
    // Set static field: static public System.Single InchesToCentimeters
    static void _set_InchesToCentimeters(float value);
    // static field const value: static public System.Single MetersToFeet
    static constexpr const float MetersToFeet = 3.28084;
    // Get static field: static public System.Single MetersToFeet
    static float _get_MetersToFeet();
    // Set static field: static public System.Single MetersToFeet
    static void _set_MetersToFeet(float value);
    // static field const value: static public System.Single MetersToInches
    static constexpr const float MetersToInches = 39.3701;
    // Get static field: static public System.Single MetersToInches
    static float _get_MetersToInches();
    // Set static field: static public System.Single MetersToInches
    static void _set_MetersToInches(float value);
    // static field const value: static public System.Single CentimetersToFeet
    static constexpr const float CentimetersToFeet = 0.0328084;
    // Get static field: static public System.Single CentimetersToFeet
    static float _get_CentimetersToFeet();
    // Set static field: static public System.Single CentimetersToFeet
    static void _set_CentimetersToFeet(float value);
    // static field const value: static public System.Single CentimetersToInches
    static constexpr const float CentimetersToInches = 0.393701;
    // Get static field: static public System.Single CentimetersToInches
    static float _get_CentimetersToInches();
    // Set static field: static public System.Single CentimetersToInches
    static void _set_CentimetersToInches(float value);
    // static field const value: static public System.Single KilometersToMiles
    static constexpr const float KilometersToMiles = 0.621371;
    // Get static field: static public System.Single KilometersToMiles
    static float _get_KilometersToMiles();
    // Set static field: static public System.Single KilometersToMiles
    static void _set_KilometersToMiles(float value);
    // static field const value: static public System.Single MilesToKilometers
    static constexpr const float MilesToKilometers = 1.60934;
    // Get static field: static public System.Single MilesToKilometers
    static float _get_MilesToKilometers();
    // Set static field: static public System.Single MilesToKilometers
    static void _set_MilesToKilometers(float value);
    // static public System.Single RemapNumber(System.Single num, System.Single low1, System.Single high1, System.Single low2, System.Single high2)
    // Offset: 0xDBBF74
    static float RemapNumber(float num, float low1, float high1, float low2, float high2);
    // static public System.Single RemapNumberClamped(System.Single num, System.Single low1, System.Single high1, System.Single low2, System.Single high2)
    // Offset: 0xDBA2B8
    static float RemapNumberClamped(float num, float low1, float high1, float low2, float high2);
    // static public System.Single Approach(System.Single target, System.Single value, System.Single speed)
    // Offset: 0xDCB09C
    static float Approach(float target, float value, float speed);
    // static public UnityEngine.Vector3 BezierInterpolate3(UnityEngine.Vector3 p0, UnityEngine.Vector3 c0, UnityEngine.Vector3 p1, System.Single t)
    // Offset: 0xDCB0C4
    static ::UnityEngine::Vector3 BezierInterpolate3(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 c0, ::UnityEngine::Vector3 p1, float t);
    // static public UnityEngine.Vector3 BezierInterpolate4(UnityEngine.Vector3 p0, UnityEngine.Vector3 c0, UnityEngine.Vector3 c1, UnityEngine.Vector3 p1, System.Single t)
    // Offset: 0xDCB1DC
    static ::UnityEngine::Vector3 BezierInterpolate4(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 c0, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 p1, float t);
    // static public UnityEngine.Vector3 Vector3FromString(System.String szString)
    // Offset: 0xDCB3B4
    static ::UnityEngine::Vector3 Vector3FromString(::StringW szString);
    // static public UnityEngine.Vector2 Vector2FromString(System.String szString)
    // Offset: 0xDCB564
    static ::UnityEngine::Vector2 Vector2FromString(::StringW szString);
    // static public System.Single Normalize(System.Single value, System.Single min, System.Single max)
    // Offset: 0xDCB704
    static float Normalize(float value, float min, float max);
    // static public UnityEngine.Vector3 Vector2AsVector3(UnityEngine.Vector2 v)
    // Offset: 0xDCB714
    static ::UnityEngine::Vector3 Vector2AsVector3(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector2 Vector3AsVector2(UnityEngine.Vector3 v)
    // Offset: 0xDCB750
    static ::UnityEngine::Vector2 Vector3AsVector2(::UnityEngine::Vector3 v);
    // static public System.Single AngleOf(UnityEngine.Vector2 v)
    // Offset: 0xDCB780
    static float AngleOf(::UnityEngine::Vector2 v);
    // static public System.Single YawOf(UnityEngine.Vector3 v)
    // Offset: 0xDCB838
    static float YawOf(::UnityEngine::Vector3 v);
    // static public System.Void Swap(ref T lhs, ref T rhs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Swap(ByRef<T> lhs, ByRef<T> rhs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Swap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Swap", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(lhs), byref(rhs));
    }
    // static public System.Void Shuffle(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Shuffle(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Shuffle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Shuffle", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Shuffle(System.Collections.Generic.List`1<T> list)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Shuffle(::System::Collections::Generic::List_1<T>* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Shuffle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Shuffle", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list);
    }
    // static public System.Int32 RandomWithLookback(System.Int32 min, System.Int32 max, System.Collections.Generic.List`1<System.Int32> history, System.Int32 historyCount)
    // Offset: 0xDCB900
    static int RandomWithLookback(int min, int max, ::System::Collections::Generic::List_1<int>* history, int historyCount);
    // static public UnityEngine.Transform FindChild(UnityEngine.Transform parent, System.String name)
    // Offset: 0xDCBAAC
    static ::UnityEngine::Transform* FindChild(::UnityEngine::Transform* parent, ::StringW name);
    // static public System.Boolean IsNullOrEmpty(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsNullOrEmpty(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::IsNullOrEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "IsNullOrEmpty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Boolean IsValidIndex(T[] array, System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsValidIndex(::ArrayW<T> array, int i) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::IsValidIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "IsValidIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(i)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, i);
    }
    // static public System.Boolean IsValidIndex(System.Collections.Generic.List`1<T> list, System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool IsValidIndex(::System::Collections::Generic::List_1<T>* list, int i) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::IsValidIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "IsValidIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(i)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, i);
    }
    // static public System.Int32 FindOrAdd(System.Collections.Generic.List`1<T> list, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindOrAdd(::System::Collections::Generic::List_1<T>* list, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FindOrAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FindOrAdd", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, item);
    }
    // static public System.Collections.Generic.List`1<T> FindAndRemove(System.Collections.Generic.List`1<T> list, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::Generic::List_1<T>* FindAndRemove(::System::Collections::Generic::List_1<T>* list, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FindAndRemove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FindAndRemove", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, match);
    }
    // static public T FindOrAddComponent(UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T FindOrAddComponent(::UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FindOrAddComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FindOrAddComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, gameObject);
    }
    // static public System.Void FastRemove(System.Collections.Generic.List`1<T> list, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void FastRemove(::System::Collections::Generic::List_1<T>* list, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FastRemove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FastRemove", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, index);
    }
    // static public System.Void ReplaceGameObject(T replace, U replaceWith)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void ReplaceGameObject(T replace, U replaceWith) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::MonoBehaviour*>);
      static_assert(std::is_convertible_v<U, ::UnityEngine::MonoBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::ReplaceGameObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "ReplaceGameObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(replace), ::il2cpp_utils::ExtractType(replaceWith)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, replace, replaceWith);
    }
    // static public System.Void SwitchLayerRecursively(UnityEngine.Transform transform, System.Int32 fromLayer, System.Int32 toLayer)
    // Offset: 0xDCBE10
    static void SwitchLayerRecursively(::UnityEngine::Transform* transform, int fromLayer, int toLayer);
    // static public System.Void DrawCross(UnityEngine.Vector3 origin, UnityEngine.Color crossColor, System.Single size)
    // Offset: 0xDC78A4
    static void DrawCross(::UnityEngine::Vector3 origin, ::UnityEngine::Color crossColor, float size);
    // static public System.Void ResetTransform(UnityEngine.Transform t, System.Boolean resetScale)
    // Offset: 0xDBC410
    static void ResetTransform(::UnityEngine::Transform* t, bool resetScale);
    // static public UnityEngine.Vector3 ClosestPointOnLine(UnityEngine.Vector3 vA, UnityEngine.Vector3 vB, UnityEngine.Vector3 vPoint)
    // Offset: 0xDCBF08
    static ::UnityEngine::Vector3 ClosestPointOnLine(::UnityEngine::Vector3 vA, ::UnityEngine::Vector3 vB, ::UnityEngine::Vector3 vPoint);
    // static public System.Void AfterTimer(UnityEngine.GameObject go, System.Single _time, System.Action callback, System.Boolean trigger_if_destroyed_early)
    // Offset: 0xDCC0F4
    static void AfterTimer(::UnityEngine::GameObject* go, float _time, ::System::Action* callback, bool trigger_if_destroyed_early);
    // static public System.Void SendPhysicsMessage(UnityEngine.Collider collider, System.String message, UnityEngine.SendMessageOptions sendMessageOptions)
    // Offset: 0xDCC190
    static void SendPhysicsMessage(::UnityEngine::Collider* collider, ::StringW message, ::UnityEngine::SendMessageOptions sendMessageOptions);
    // static public System.Void SendPhysicsMessage(UnityEngine.Collider collider, System.String message, System.Object arg, UnityEngine.SendMessageOptions sendMessageOptions)
    // Offset: 0xDCC2DC
    static void SendPhysicsMessage(::UnityEngine::Collider* collider, ::StringW message, ::Il2CppObject* arg, ::UnityEngine::SendMessageOptions sendMessageOptions);
    // static public System.Void IgnoreCollisions(UnityEngine.GameObject goA, UnityEngine.GameObject goB)
    // Offset: 0xDCC43C
    static void IgnoreCollisions(::UnityEngine::GameObject* goA, ::UnityEngine::GameObject* goB);
    // static public System.Collections.IEnumerator WrapCoroutine(System.Collections.IEnumerator coroutine, System.Action onCoroutineFinished)
    // Offset: 0xDCC5D0
    static ::System::Collections::IEnumerator* WrapCoroutine(::System::Collections::IEnumerator* coroutine, ::System::Action* onCoroutineFinished);
    // static public UnityEngine.Color ColorWithAlpha(UnityEngine.Color color, System.Single alpha)
    // Offset: 0xDCC694
    static ::UnityEngine::Color ColorWithAlpha(::UnityEngine::Color color, float alpha);
    // static public System.Void Quit()
    // Offset: 0xDCC69C
    static void Quit();
    // static public System.Decimal FloatToDecimal(System.Single value, System.Int32 decimalPlaces)
    // Offset: 0xDCC714
    static ::System::Decimal FloatToDecimal(float value, int decimalPlaces);
    // static public T Median(System.Collections.Generic.IEnumerable`1<T> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Median(::System::Collections::Generic::IEnumerable_1<T>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Median");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Median", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public System.Void ForEach(System.Collections.Generic.IEnumerable`1<T> source, System.Action`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ForEach(::System::Collections::Generic::IEnumerable_1<T>* source, ::System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::ForEach");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "ForEach", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, action);
    }
    // static public System.String FixupNewlines(System.String text)
    // Offset: 0xDCC7CC
    static ::StringW FixupNewlines(::StringW text);
    // static public System.Single PathLength(UnityEngine.AI.NavMeshPath path)
    // Offset: 0xDCC89C
    static float PathLength(::UnityEngine::AI::NavMeshPath* path);
    // static public System.Boolean HasCommandLineArgument(System.String argumentName)
    // Offset: 0xDCCA70
    static bool HasCommandLineArgument(::StringW argumentName);
    // static public System.Int32 GetCommandLineArgValue(System.String argumentName, System.Int32 nDefaultValue)
    // Offset: 0xDCCB10
    static int GetCommandLineArgValue(::StringW argumentName, int nDefaultValue);
    // static public System.Single GetCommandLineArgValue(System.String argumentName, System.Single flDefaultValue)
    // Offset: 0xDCCC08
    static float GetCommandLineArgValue(::StringW argumentName, float flDefaultValue);
    // static public System.Void SetActive(UnityEngine.GameObject gameObject, System.Boolean active)
    // Offset: 0xDCCD3C
    static void SetActive(::UnityEngine::GameObject* gameObject, bool active);
    // static public System.String CombinePaths(params System.String[] paths)
    // Offset: 0xDCCDE4
    static ::StringW CombinePaths(::ArrayW<::StringW> paths);
  }; // Valve.VR.InteractionSystem.Util
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::RemapNumber
// Il2CppName: RemapNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Valve::VR::InteractionSystem::Util::RemapNumber)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* low1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* high1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* low2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* high2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "RemapNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num, low1, high1, low2, high2});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::RemapNumberClamped
// Il2CppName: RemapNumberClamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Valve::VR::InteractionSystem::Util::RemapNumberClamped)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* low1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* high1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* low2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* high2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "RemapNumberClamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num, low1, high1, low2, high2});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Approach
// Il2CppName: Approach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Valve::VR::InteractionSystem::Util::Approach)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Approach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, value, speed});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::BezierInterpolate3
// Il2CppName: BezierInterpolate3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Valve::VR::InteractionSystem::Util::BezierInterpolate3)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "BezierInterpolate3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, c0, p1, t});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::BezierInterpolate4
// Il2CppName: BezierInterpolate4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Valve::VR::InteractionSystem::Util::BezierInterpolate4)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "BezierInterpolate4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, c0, c1, p1, t});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Vector3FromString
// Il2CppName: Vector3FromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::StringW)>(&Valve::VR::InteractionSystem::Util::Vector3FromString)> {
  static const MethodInfo* get() {
    static auto* szString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Vector3FromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{szString});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Vector2FromString
// Il2CppName: Vector2FromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::StringW)>(&Valve::VR::InteractionSystem::Util::Vector2FromString)> {
  static const MethodInfo* get() {
    static auto* szString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Vector2FromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{szString});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Valve::VR::InteractionSystem::Util::Normalize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, min, max});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Vector2AsVector3
// Il2CppName: Vector2AsVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector2)>(&Valve::VR::InteractionSystem::Util::Vector2AsVector3)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Vector2AsVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Vector3AsVector2
// Il2CppName: Vector3AsVector2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector3)>(&Valve::VR::InteractionSystem::Util::Vector3AsVector2)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Vector3AsVector2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::AngleOf
// Il2CppName: AngleOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2)>(&Valve::VR::InteractionSystem::Util::AngleOf)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "AngleOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::YawOf
// Il2CppName: YawOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&Valve::VR::InteractionSystem::Util::YawOf)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "YawOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Swap
// Il2CppName: Swap
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Shuffle
// Il2CppName: Shuffle
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Shuffle
// Il2CppName: Shuffle
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::RandomWithLookback
// Il2CppName: RandomWithLookback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, ::System::Collections::Generic::List_1<int>*, int)>(&Valve::VR::InteractionSystem::Util::RandomWithLookback)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* history = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* historyCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "RandomWithLookback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max, history, historyCount});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FindChild
// Il2CppName: FindChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::UnityEngine::Transform*, ::StringW)>(&Valve::VR::InteractionSystem::Util::FindChild)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "FindChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, name});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::IsNullOrEmpty
// Il2CppName: IsNullOrEmpty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::IsValidIndex
// Il2CppName: IsValidIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::IsValidIndex
// Il2CppName: IsValidIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FindOrAdd
// Il2CppName: FindOrAdd
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FindAndRemove
// Il2CppName: FindAndRemove
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FindOrAddComponent
// Il2CppName: FindOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FastRemove
// Il2CppName: FastRemove
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::ReplaceGameObject
// Il2CppName: ReplaceGameObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::SwitchLayerRecursively
// Il2CppName: SwitchLayerRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, int, int)>(&Valve::VR::InteractionSystem::Util::SwitchLayerRecursively)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* fromLayer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* toLayer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "SwitchLayerRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, fromLayer, toLayer});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::DrawCross
// Il2CppName: DrawCross
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&Valve::VR::InteractionSystem::Util::DrawCross)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* crossColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "DrawCross", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, crossColor, size});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::ResetTransform
// Il2CppName: ResetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, bool)>(&Valve::VR::InteractionSystem::Util::ResetTransform)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* resetScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "ResetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, resetScale});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::ClosestPointOnLine
// Il2CppName: ClosestPointOnLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Valve::VR::InteractionSystem::Util::ClosestPointOnLine)> {
  static const MethodInfo* get() {
    static auto* vA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "ClosestPointOnLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vA, vB, vPoint});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::AfterTimer
// Il2CppName: AfterTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, float, ::System::Action*, bool)>(&Valve::VR::InteractionSystem::Util::AfterTimer)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* _time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* trigger_if_destroyed_early = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "AfterTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, _time, callback, trigger_if_destroyed_early});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::SendPhysicsMessage
// Il2CppName: SendPhysicsMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Collider*, ::StringW, ::UnityEngine::SendMessageOptions)>(&Valve::VR::InteractionSystem::Util::SendPhysicsMessage)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sendMessageOptions = &::il2cpp_utils::GetClassFromName("UnityEngine", "SendMessageOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "SendPhysicsMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider, message, sendMessageOptions});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::SendPhysicsMessage
// Il2CppName: SendPhysicsMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Collider*, ::StringW, ::Il2CppObject*, ::UnityEngine::SendMessageOptions)>(&Valve::VR::InteractionSystem::Util::SendPhysicsMessage)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sendMessageOptions = &::il2cpp_utils::GetClassFromName("UnityEngine", "SendMessageOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "SendPhysicsMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider, message, arg, sendMessageOptions});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::IgnoreCollisions
// Il2CppName: IgnoreCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*)>(&Valve::VR::InteractionSystem::Util::IgnoreCollisions)> {
  static const MethodInfo* get() {
    static auto* goA = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* goB = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "IgnoreCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{goA, goB});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::WrapCoroutine
// Il2CppName: WrapCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::System::Collections::IEnumerator*, ::System::Action*)>(&Valve::VR::InteractionSystem::Util::WrapCoroutine)> {
  static const MethodInfo* get() {
    static auto* coroutine = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    static auto* onCoroutineFinished = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "WrapCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{coroutine, onCoroutineFinished});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::ColorWithAlpha
// Il2CppName: ColorWithAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(::UnityEngine::Color, float)>(&Valve::VR::InteractionSystem::Util::ColorWithAlpha)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "ColorWithAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, alpha});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Quit
// Il2CppName: Quit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Valve::VR::InteractionSystem::Util::Quit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "Quit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FloatToDecimal
// Il2CppName: FloatToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(float, int)>(&Valve::VR::InteractionSystem::Util::FloatToDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* decimalPlaces = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "FloatToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, decimalPlaces});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::Median
// Il2CppName: Median
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::ForEach
// Il2CppName: ForEach
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::FixupNewlines
// Il2CppName: FixupNewlines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Valve::VR::InteractionSystem::Util::FixupNewlines)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "FixupNewlines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::PathLength
// Il2CppName: PathLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::AI::NavMeshPath*)>(&Valve::VR::InteractionSystem::Util::PathLength)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("UnityEngine.AI", "NavMeshPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "PathLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::HasCommandLineArgument
// Il2CppName: HasCommandLineArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Valve::VR::InteractionSystem::Util::HasCommandLineArgument)> {
  static const MethodInfo* get() {
    static auto* argumentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "HasCommandLineArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argumentName});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::GetCommandLineArgValue
// Il2CppName: GetCommandLineArgValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, int)>(&Valve::VR::InteractionSystem::Util::GetCommandLineArgValue)> {
  static const MethodInfo* get() {
    static auto* argumentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nDefaultValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "GetCommandLineArgValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argumentName, nDefaultValue});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::GetCommandLineArgValue
// Il2CppName: GetCommandLineArgValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::StringW, float)>(&Valve::VR::InteractionSystem::Util::GetCommandLineArgValue)> {
  static const MethodInfo* get() {
    static auto* argumentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flDefaultValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "GetCommandLineArgValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argumentName, flDefaultValue});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, bool)>(&Valve::VR::InteractionSystem::Util::SetActive)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, active});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Util::CombinePaths
// Il2CppName: CombinePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<::StringW>)>(&Valve::VR::InteractionSystem::Util::CombinePaths)> {
  static const MethodInfo* get() {
    static auto* paths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Util*), "CombinePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paths});
  }
};
