// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Hand::$$c);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Hand::$$c*, "Valve.VR.InteractionSystem", "Hand/<>c");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Hand/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD08AC
  class Hand::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Valve.VR.InteractionSystem.Hand/<>c <>9
    static ::Valve::VR::InteractionSystem::Hand::$$c* _get_$$9();
    // Set static field: static public readonly Valve.VR.InteractionSystem.Hand/<>c <>9
    static void _set_$$9(::Valve::VR::InteractionSystem::Hand::$$c* value);
    // Get static field: static public System.Predicate`1<Valve.VR.InteractionSystem.Hand/AttachedObject> <>9__45_0
    static ::System::Predicate_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>* _get_$$9__45_0();
    // Set static field: static public System.Predicate`1<Valve.VR.InteractionSystem.Hand/AttachedObject> <>9__45_0
    static void _set_$$9__45_0(::System::Predicate_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>* value);
    // static private System.Void .cctor()
    // Offset: 0x1169E68
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1169ECC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hand::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hand::$$c*, creationType>()));
    }
    // System.Boolean <CleanUpAttachedObjectStack>b__45_0(Valve.VR.InteractionSystem.Hand/AttachedObject l)
    // Offset: 0x1169ED4
    bool $CleanUpAttachedObjectStack$b__45_0(::Valve::VR::InteractionSystem::Hand::AttachedObject l);
  }; // Valve.VR.InteractionSystem.Hand/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Hand::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Valve::VR::InteractionSystem::Hand::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Hand::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Hand::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Hand::$$c::$CleanUpAttachedObjectStack$b__45_0
// Il2CppName: <CleanUpAttachedObjectStack>b__45_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Hand::$$c::*)(::Valve::VR::InteractionSystem::Hand::AttachedObject)>(&Valve::VR::InteractionSystem::Hand::$$c::$CleanUpAttachedObjectStack$b__45_0)> {
  static const MethodInfo* get() {
    static auto* l = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand/AttachedObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Hand::$$c*), "<CleanUpAttachedObjectStack>b__45_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{l});
  }
};
