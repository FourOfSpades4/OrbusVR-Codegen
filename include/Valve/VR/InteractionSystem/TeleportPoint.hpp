// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.InteractionSystem.TeleportMarkerBase
#include "Valve/VR/InteractionSystem/TeleportMarkerBase.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animation
  class Animation;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: TeleportPoint
  class TeleportPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::TeleportPoint);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::TeleportPoint*, "Valve.VR.InteractionSystem", "TeleportPoint");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0xE4
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.TeleportPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportPoint : public ::Valve::VR::InteractionSystem::TeleportMarkerBase {
    public:
    // Writing base type padding for base size: 0x1A to desired offset: 0x1C
    char ___base_padding[0x2] = {};
    // Nested type: ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType
    struct TeleportPointType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TeleportPointType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TeleportPointType
      constexpr TeleportPointType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType MoveToLocation
      static constexpr const int MoveToLocation = 0;
      // Get static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType MoveToLocation
      static ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType _get_MoveToLocation();
      // Set static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType MoveToLocation
      static void _set_MoveToLocation(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType value);
      // static field const value: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType SwitchToNewScene
      static constexpr const int SwitchToNewScene = 1;
      // Get static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType SwitchToNewScene
      static ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType _get_SwitchToNewScene();
      // Set static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType SwitchToNewScene
      static void _set_SwitchToNewScene(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType
    #pragma pack(pop)
    static check_size<sizeof(TeleportPoint::TeleportPointType), 0 + sizeof(int)> __Valve_VR_InteractionSystem_TeleportPoint_TeleportPointTypeSizeCheck;
    static_assert(sizeof(TeleportPoint::TeleportPointType) == 0x4);
    public:
    // public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType teleportType
    // Size: 0x4
    // Offset: 0x1C
    ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType teleportType;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType) == 0x4);
    // public System.String title
    // Size: 0x8
    // Offset: 0x20
    ::StringW title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String switchToScene
    // Size: 0x8
    // Offset: 0x28
    ::StringW switchToScene;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Color titleVisibleColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color titleVisibleColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color titleHighlightedColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color titleHighlightedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color titleLockedColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color titleLockedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean playerSpawnPoint
    // Size: 0x1
    // Offset: 0x60
    bool playerSpawnPoint;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean gotReleventComponents
    // Size: 0x1
    // Offset: 0x61
    bool gotReleventComponents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gotReleventComponents and: markerMesh
    char __padding7[0x6] = {};
    // private UnityEngine.MeshRenderer markerMesh
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::MeshRenderer* markerMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer switchSceneIcon
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::MeshRenderer* switchSceneIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer moveLocationIcon
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::MeshRenderer* moveLocationIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer lockedIcon
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::MeshRenderer* lockedIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer pointIcon
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::MeshRenderer* pointIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Transform lookAtJointTransform
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* lookAtJointTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Animation animation
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Animation* animation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    // private UnityEngine.UI.Text titleText
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::UI::Text* titleText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Valve.VR.InteractionSystem.Player player
    // Size: 0x8
    // Offset: 0xA8
    ::Valve::VR::InteractionSystem::Player* player;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Player*) == 0x8);
    // private UnityEngine.Vector3 lookAtPosition
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 lookAtPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 tintColorID
    // Size: 0x4
    // Offset: 0xBC
    int tintColorID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color tintColor
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Color tintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color titleColor
    // Size: 0x10
    // Offset: 0xD0
    ::UnityEngine::Color titleColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single fullTitleAlpha
    // Size: 0x4
    // Offset: 0xE0
    float fullTitleAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.String switchSceneAnimation
    static constexpr const char* switchSceneAnimation = "switch_scenes_idle";
    // Get static field: static private System.String switchSceneAnimation
    static ::StringW _get_switchSceneAnimation();
    // Set static field: static private System.String switchSceneAnimation
    static void _set_switchSceneAnimation(::StringW value);
    // static field const value: static private System.String moveLocationAnimation
    static constexpr const char* moveLocationAnimation = "move_location_idle";
    // Get static field: static private System.String moveLocationAnimation
    static ::StringW _get_moveLocationAnimation();
    // Set static field: static private System.String moveLocationAnimation
    static void _set_moveLocationAnimation(::StringW value);
    // static field const value: static private System.String lockedAnimation
    static constexpr const char* lockedAnimation = "locked_idle";
    // Get static field: static private System.String lockedAnimation
    static ::StringW _get_lockedAnimation();
    // Set static field: static private System.String lockedAnimation
    static void _set_lockedAnimation(::StringW value);
    // Get instance field reference: public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType teleportType
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType& dyn_teleportType();
    // Get instance field reference: public System.String title
    [[deprecated("Use field access instead!")]] ::StringW& dyn_title();
    // Get instance field reference: public System.String switchToScene
    [[deprecated("Use field access instead!")]] ::StringW& dyn_switchToScene();
    // Get instance field reference: public UnityEngine.Color titleVisibleColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_titleVisibleColor();
    // Get instance field reference: public UnityEngine.Color titleHighlightedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_titleHighlightedColor();
    // Get instance field reference: public UnityEngine.Color titleLockedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_titleLockedColor();
    // Get instance field reference: public System.Boolean playerSpawnPoint
    [[deprecated("Use field access instead!")]] bool& dyn_playerSpawnPoint();
    // Get instance field reference: private System.Boolean gotReleventComponents
    [[deprecated("Use field access instead!")]] bool& dyn_gotReleventComponents();
    // Get instance field reference: private UnityEngine.MeshRenderer markerMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_markerMesh();
    // Get instance field reference: private UnityEngine.MeshRenderer switchSceneIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_switchSceneIcon();
    // Get instance field reference: private UnityEngine.MeshRenderer moveLocationIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_moveLocationIcon();
    // Get instance field reference: private UnityEngine.MeshRenderer lockedIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_lockedIcon();
    // Get instance field reference: private UnityEngine.MeshRenderer pointIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_pointIcon();
    // Get instance field reference: private UnityEngine.Transform lookAtJointTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lookAtJointTransform();
    // Get instance field reference: private UnityEngine.Animation animation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn_animation();
    // Get instance field reference: private UnityEngine.UI.Text titleText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_titleText();
    // Get instance field reference: private Valve.VR.InteractionSystem.Player player
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& dyn_player();
    // Get instance field reference: private UnityEngine.Vector3 lookAtPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lookAtPosition();
    // Get instance field reference: private System.Int32 tintColorID
    [[deprecated("Use field access instead!")]] int& dyn_tintColorID();
    // Get instance field reference: private UnityEngine.Color tintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_tintColor();
    // Get instance field reference: private UnityEngine.Color titleColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_titleColor();
    // Get instance field reference: private System.Single fullTitleAlpha
    [[deprecated("Use field access instead!")]] float& dyn_fullTitleAlpha();
    // private System.Void Awake()
    // Offset: 0xDC8304
    void Awake();
    // private System.Void Start()
    // Offset: 0xDC8640
    void Start();
    // private System.Void Update()
    // Offset: 0xDC8664
    void Update();
    // public System.Void SetMeshMaterials(UnityEngine.Material material, UnityEngine.Color textColor)
    // Offset: 0xDC89A8
    void SetMeshMaterials(::UnityEngine::Material* material, ::UnityEngine::Color textColor);
    // public System.Void TeleportToScene()
    // Offset: 0xDC65CC
    void TeleportToScene();
    // public System.Void GetRelevantComponents()
    // Offset: 0xDC8430
    void GetRelevantComponents();
    // public System.Void ReleaseRelevantComponents()
    // Offset: 0xDC8EAC
    void ReleaseRelevantComponents();
    // public System.Void UpdateVisualsInEditor()
    // Offset: 0xDC8EC4
    void UpdateVisualsInEditor();
    // public override System.Boolean get_showReticle()
    // Offset: 0xDC82FC
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Boolean TeleportMarkerBase::get_showReticle()
    bool get_showReticle();
    // public override System.Boolean ShouldActivate(UnityEngine.Vector3 playerPosition)
    // Offset: 0xDC8764
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Boolean TeleportMarkerBase::ShouldActivate(UnityEngine.Vector3 playerPosition)
    bool ShouldActivate(::UnityEngine::Vector3 playerPosition);
    // public override System.Boolean ShouldMovePlayer()
    // Offset: 0xDC8844
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Boolean TeleportMarkerBase::ShouldMovePlayer()
    bool ShouldMovePlayer();
    // public override System.Void Highlight(System.Boolean highlight)
    // Offset: 0xDC884C
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Void TeleportMarkerBase::Highlight(System.Boolean highlight)
    void Highlight(bool highlight);
    // public override System.Void UpdateVisuals()
    // Offset: 0xDC8AAC
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Void TeleportMarkerBase::UpdateVisuals()
    void UpdateVisuals();
    // public override System.Void SetAlpha(System.Single tintAlpha, System.Single alphaPercent)
    // Offset: 0xDC8C90
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Void TeleportMarkerBase::SetAlpha(System.Single tintAlpha, System.Single alphaPercent)
    void SetAlpha(float tintAlpha, float alphaPercent);
    // public System.Void .ctor()
    // Offset: 0xDC92E8
    // Implemented from: Valve.VR.InteractionSystem.TeleportMarkerBase
    // Base method: System.Void TeleportMarkerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportPoint*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.TeleportPoint
  #pragma pack(pop)
  static check_size<sizeof(TeleportPoint), 224 + sizeof(float)> __Valve_VR_InteractionSystem_TeleportPointSizeCheck;
  static_assert(sizeof(TeleportPoint) == 0xE4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType, "Valve.VR.InteractionSystem", "TeleportPoint/TeleportPointType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::SetMeshMaterials
// Il2CppName: SetMeshMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)(::UnityEngine::Material*, ::UnityEngine::Color)>(&Valve::VR::InteractionSystem::TeleportPoint::SetMeshMaterials)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* textColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "SetMeshMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, textColor});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::TeleportToScene
// Il2CppName: TeleportToScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::TeleportToScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "TeleportToScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::GetRelevantComponents
// Il2CppName: GetRelevantComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::GetRelevantComponents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "GetRelevantComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::ReleaseRelevantComponents
// Il2CppName: ReleaseRelevantComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::ReleaseRelevantComponents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "ReleaseRelevantComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::UpdateVisualsInEditor
// Il2CppName: UpdateVisualsInEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::UpdateVisualsInEditor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "UpdateVisualsInEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::get_showReticle
// Il2CppName: get_showReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::get_showReticle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "get_showReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::ShouldActivate
// Il2CppName: ShouldActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::TeleportPoint::*)(::UnityEngine::Vector3)>(&Valve::VR::InteractionSystem::TeleportPoint::ShouldActivate)> {
  static const MethodInfo* get() {
    static auto* playerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "ShouldActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerPosition});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::ShouldMovePlayer
// Il2CppName: ShouldMovePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::ShouldMovePlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "ShouldMovePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::Highlight
// Il2CppName: Highlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)(bool)>(&Valve::VR::InteractionSystem::TeleportPoint::Highlight)> {
  static const MethodInfo* get() {
    static auto* highlight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "Highlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highlight});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)()>(&Valve::VR::InteractionSystem::TeleportPoint::UpdateVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::SetAlpha
// Il2CppName: SetAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportPoint::*)(float, float)>(&Valve::VR::InteractionSystem::TeleportPoint::SetAlpha)> {
  static const MethodInfo* get() {
    static auto* tintAlpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* alphaPercent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportPoint*), "SetAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tintAlpha, alphaPercent});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
