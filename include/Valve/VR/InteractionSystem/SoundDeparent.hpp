// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SoundDeparent
  class SoundDeparent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::SoundDeparent);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::SoundDeparent*, "Valve.VR.InteractionSystem", "SoundDeparent");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.SoundDeparent
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundDeparent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean destroyAfterPlayOnce
    // Size: 0x1
    // Offset: 0x18
    bool destroyAfterPlayOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: destroyAfterPlayOnce and: thisAudioSource
    char __padding0[0x7] = {};
    // private UnityEngine.AudioSource thisAudioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* thisAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean destroyAfterPlayOnce
    [[deprecated("Use field access instead!")]] bool& dyn_destroyAfterPlayOnce();
    // Get instance field reference: private UnityEngine.AudioSource thisAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_thisAudioSource();
    // private System.Void Awake()
    // Offset: 0xDBF870
    void Awake();
    // private System.Void Start()
    // Offset: 0xDBF8C8
    void Start();
    // public System.Void .ctor()
    // Offset: 0xDBF9DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundDeparent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundDeparent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundDeparent*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.SoundDeparent
  #pragma pack(pop)
  static check_size<sizeof(SoundDeparent), 32 + sizeof(::UnityEngine::AudioSource*)> __Valve_VR_InteractionSystem_SoundDeparentSizeCheck;
  static_assert(sizeof(SoundDeparent) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundDeparent::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundDeparent::*)()>(&Valve::VR::InteractionSystem::SoundDeparent::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundDeparent*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundDeparent::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundDeparent::*)()>(&Valve::VR::InteractionSystem::SoundDeparent::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundDeparent*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundDeparent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
