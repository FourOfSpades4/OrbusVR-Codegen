// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ItemPackage
  class ItemPackage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ItemPackage);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ItemPackage*, "Valve.VR.InteractionSystem", "ItemPackage");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ItemPackage
  // [TokenAttribute] Offset: FFFFFFFF
  class ItemPackage : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType
    struct ItemPackageType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Valve.VR.InteractionSystem.ItemPackage/ItemPackageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ItemPackageType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ItemPackageType
      constexpr ItemPackageType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType Unrestricted
      static constexpr const int Unrestricted = 0;
      // Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType Unrestricted
      static ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType _get_Unrestricted();
      // Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType Unrestricted
      static void _set_Unrestricted(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value);
      // static field const value: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType OneHanded
      static constexpr const int OneHanded = 1;
      // Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType OneHanded
      static ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType _get_OneHanded();
      // Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType OneHanded
      static void _set_OneHanded(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value);
      // static field const value: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType TwoHanded
      static constexpr const int TwoHanded = 2;
      // Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType TwoHanded
      static ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType _get_TwoHanded();
      // Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType TwoHanded
      static void _set_TwoHanded(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Valve.VR.InteractionSystem.ItemPackage/ItemPackageType
    #pragma pack(pop)
    static check_size<sizeof(ItemPackage::ItemPackageType), 0 + sizeof(int)> __Valve_VR_InteractionSystem_ItemPackage_ItemPackageTypeSizeCheck;
    static_assert(sizeof(ItemPackage::ItemPackageType) == 0x4);
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType packageType
    // Size: 0x4
    // Offset: 0x20
    ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType packageType;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType) == 0x4);
    // Padding between fields: packageType and: itemPrefab
    char __padding1[0x4] = {};
    // public UnityEngine.GameObject itemPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* itemPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject otherHandItemPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* otherHandItemPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject previewPrefab
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* previewPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject fadedPreviewPrefab
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* fadedPreviewPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType packageType
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType& dyn_packageType();
    // Get instance field reference: public UnityEngine.GameObject itemPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_itemPrefab();
    // Get instance field reference: public UnityEngine.GameObject otherHandItemPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_otherHandItemPrefab();
    // Get instance field reference: public UnityEngine.GameObject previewPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_previewPrefab();
    // Get instance field reference: public UnityEngine.GameObject fadedPreviewPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fadedPreviewPrefab();
    // public System.Void .ctor()
    // Offset: 0x116C80C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ItemPackage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ItemPackage*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ItemPackage
  #pragma pack(pop)
  static check_size<sizeof(ItemPackage), 64 + sizeof(::UnityEngine::GameObject*)> __Valve_VR_InteractionSystem_ItemPackageSizeCheck;
  static_assert(sizeof(ItemPackage) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType, "Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
