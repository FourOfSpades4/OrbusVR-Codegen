// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SoundBowClick
  class SoundBowClick;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::SoundBowClick);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::SoundBowClick*, "Valve.VR.InteractionSystem", "SoundBowClick");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.SoundBowClick
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundBowClick : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.AudioClip bowClick
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioClip* bowClick;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AnimationCurve pitchTensionCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* pitchTensionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Single minPitch
    // Size: 0x4
    // Offset: 0x28
    float minPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxPitch
    // Size: 0x4
    // Offset: 0x2C
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AudioSource thisAudioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* thisAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.AudioClip bowClick
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_bowClick();
    // Get instance field reference: public UnityEngine.AnimationCurve pitchTensionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_pitchTensionCurve();
    // Get instance field reference: public System.Single minPitch
    [[deprecated("Use field access instead!")]] float& dyn_minPitch();
    // Get instance field reference: public System.Single maxPitch
    [[deprecated("Use field access instead!")]] float& dyn_maxPitch();
    // Get instance field reference: private UnityEngine.AudioSource thisAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_thisAudioSource();
    // private System.Void Awake()
    // Offset: 0xDBF810
    void Awake();
    // public System.Void PlayBowTensionClicks(System.Single normalizedTension)
    // Offset: 0xDBBF90
    void PlayBowTensionClicks(float normalizedTension);
    // public System.Void .ctor()
    // Offset: 0xDBF868
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundBowClick* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundBowClick*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.SoundBowClick
  #pragma pack(pop)
  static check_size<sizeof(SoundBowClick), 48 + sizeof(::UnityEngine::AudioSource*)> __Valve_VR_InteractionSystem_SoundBowClickSizeCheck;
  static_assert(sizeof(SoundBowClick) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundBowClick::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundBowClick::*)()>(&Valve::VR::InteractionSystem::SoundBowClick::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundBowClick*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundBowClick::PlayBowTensionClicks
// Il2CppName: PlayBowTensionClicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundBowClick::*)(float)>(&Valve::VR::InteractionSystem::SoundBowClick::PlayBowTensionClicks)> {
  static const MethodInfo* get() {
    static auto* normalizedTension = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundBowClick*), "PlayBowTensionClicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normalizedTension});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundBowClick::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
