// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: DestroyOnParticleSystemDeath
  class DestroyOnParticleSystemDeath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath*, "Valve.VR.InteractionSystem", "DestroyOnParticleSystemDeath");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.DestroyOnParticleSystemDeath
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD07B4
  class DestroyOnParticleSystemDeath : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.ParticleSystem particles
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::ParticleSystem* particles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.ParticleSystem particles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particles();
    // private System.Void Awake()
    // Offset: 0x11661A0
    void Awake();
    // private System.Void CheckParticleSystem()
    // Offset: 0x1166218
    void CheckParticleSystem();
    // public System.Void .ctor()
    // Offset: 0x11662C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DestroyOnParticleSystemDeath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DestroyOnParticleSystemDeath*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.DestroyOnParticleSystemDeath
  #pragma pack(pop)
  static check_size<sizeof(DestroyOnParticleSystemDeath), 24 + sizeof(::UnityEngine::ParticleSystem*)> __Valve_VR_InteractionSystem_DestroyOnParticleSystemDeathSizeCheck;
  static_assert(sizeof(DestroyOnParticleSystemDeath) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::*)()>(&Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::CheckParticleSystem
// Il2CppName: CheckParticleSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::*)()>(&Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::CheckParticleSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath*), "CheckParticleSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
