// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
  // Forward declaring type: Interactable
  class Interactable;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_RenderModel
  class SteamVR_RenderModel;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ControllerHoverHighlight
  class ControllerHoverHighlight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ControllerHoverHighlight);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ControllerHoverHighlight*, "Valve.VR.InteractionSystem", "ControllerHoverHighlight");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ControllerHoverHighlight
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerHoverHighlight : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material highLightMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* highLightMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Boolean fireHapticsOnHightlight
    // Size: 0x1
    // Offset: 0x20
    bool fireHapticsOnHightlight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fireHapticsOnHightlight and: hand
    char __padding1[0x7] = {};
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x28
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // private UnityEngine.MeshRenderer bodyMeshRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* bodyMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer trackingHatMeshRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* trackingHatMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private SteamVR_RenderModel renderModel
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SteamVR_RenderModel* renderModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_RenderModel*) == 0x8);
    // private System.Boolean renderModelLoaded
    // Size: 0x1
    // Offset: 0x48
    bool renderModelLoaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: renderModelLoaded and: renderModelLoadedAction
    char __padding6[0x7] = {};
    // private SteamVR_Events/Action renderModelLoadedAction
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SteamVR_Events::Action* renderModelLoadedAction;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_Events::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material highLightMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_highLightMaterial();
    // Get instance field reference: public System.Boolean fireHapticsOnHightlight
    [[deprecated("Use field access instead!")]] bool& dyn_fireHapticsOnHightlight();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: private UnityEngine.MeshRenderer bodyMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_bodyMeshRenderer();
    // Get instance field reference: private UnityEngine.MeshRenderer trackingHatMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_trackingHatMeshRenderer();
    // Get instance field reference: private SteamVR_RenderModel renderModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel*& dyn_renderModel();
    // Get instance field reference: private System.Boolean renderModelLoaded
    [[deprecated("Use field access instead!")]] bool& dyn_renderModelLoaded();
    // Get instance field reference: private SteamVR_Events/Action renderModelLoadedAction
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& dyn_renderModelLoadedAction();
    // private System.Void Start()
    // Offset: 0x11651C0
    void Start();
    // private System.Void Awake()
    // Offset: 0x1165218
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x11652BC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x11652F0
    void OnDisable();
    // private System.Void OnHandInitialized(System.Int32 deviceIndex)
    // Offset: 0x1165324
    void OnHandInitialized(int deviceIndex);
    // private System.Void OnRenderModelLoaded(SteamVR_RenderModel renderModel, System.Boolean success)
    // Offset: 0x11653D0
    void OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool success);
    // private System.Void OnParentHandHoverBegin(Valve.VR.InteractionSystem.Interactable other)
    // Offset: 0x1165A94
    void OnParentHandHoverBegin(::Valve::VR::InteractionSystem::Interactable* other);
    // private System.Void OnParentHandHoverEnd(Valve.VR.InteractionSystem.Interactable other)
    // Offset: 0x1165CD8
    void OnParentHandHoverEnd(::Valve::VR::InteractionSystem::Interactable* other);
    // private System.Void OnParentHandInputFocusAcquired()
    // Offset: 0x1165E1C
    void OnParentHandInputFocusAcquired();
    // private System.Void OnParentHandInputFocusLost()
    // Offset: 0x1165F6C
    void OnParentHandInputFocusLost();
    // public System.Void ShowHighlight()
    // Offset: 0x1165B98
    void ShowHighlight();
    // public System.Void HideHighlight()
    // Offset: 0x1165CDC
    void HideHighlight();
    // public System.Void .ctor()
    // Offset: 0x1165F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerHoverHighlight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerHoverHighlight*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ControllerHoverHighlight
  #pragma pack(pop)
  static check_size<sizeof(ControllerHoverHighlight), 80 + sizeof(::GlobalNamespace::SteamVR_Events::Action*)> __Valve_VR_InteractionSystem_ControllerHoverHighlightSizeCheck;
  static_assert(sizeof(ControllerHoverHighlight) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnHandInitialized
// Il2CppName: OnHandInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)(int)>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnHandInitialized)> {
  static const MethodInfo* get() {
    static auto* deviceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnHandInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceIndex});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnRenderModelLoaded
// Il2CppName: OnRenderModelLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)(::GlobalNamespace::SteamVR_RenderModel*, bool)>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnRenderModelLoaded)> {
  static const MethodInfo* get() {
    static auto* renderModel = &::il2cpp_utils::GetClassFromName("", "SteamVR_RenderModel")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnRenderModelLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderModel, success});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverBegin
// Il2CppName: OnParentHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)(::Valve::VR::InteractionSystem::Interactable*)>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverBegin)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnParentHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverEnd
// Il2CppName: OnParentHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)(::Valve::VR::InteractionSystem::Interactable*)>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverEnd)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnParentHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusAcquired
// Il2CppName: OnParentHandInputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusAcquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnParentHandInputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusLost
// Il2CppName: OnParentHandInputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "OnParentHandInputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::ShowHighlight
// Il2CppName: ShowHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::ShowHighlight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "ShowHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::HideHighlight
// Il2CppName: HideHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHoverHighlight::*)()>(&Valve::VR::InteractionSystem::ControllerHoverHighlight::HideHighlight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHoverHighlight*), "HideHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHoverHighlight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
