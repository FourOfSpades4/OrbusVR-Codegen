// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: AllowTeleportWhileAttachedToHand
  class AllowTeleportWhileAttachedToHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*, "Valve.VR.InteractionSystem", "AllowTeleportWhileAttachedToHand");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x1A
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand
  // [TokenAttribute] Offset: FFFFFFFF
  class AllowTeleportWhileAttachedToHand : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean teleportAllowed
    // Size: 0x1
    // Offset: 0x18
    bool teleportAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean overrideHoverLock
    // Size: 0x1
    // Offset: 0x19
    bool overrideHoverLock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean teleportAllowed
    [[deprecated("Use field access instead!")]] bool& dyn_teleportAllowed();
    // Get instance field reference: public System.Boolean overrideHoverLock
    [[deprecated("Use field access instead!")]] bool& dyn_overrideHoverLock();
    // public System.Void .ctor()
    // Offset: 0x1155D3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AllowTeleportWhileAttachedToHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AllowTeleportWhileAttachedToHand*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand
  #pragma pack(pop)
  static check_size<sizeof(AllowTeleportWhileAttachedToHand), 25 + sizeof(bool)> __Valve_VR_InteractionSystem_AllowTeleportWhileAttachedToHandSizeCheck;
  static_assert(sizeof(AllowTeleportWhileAttachedToHand) == 0x1A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
