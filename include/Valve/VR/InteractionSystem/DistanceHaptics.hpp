// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: DistanceHaptics
  class DistanceHaptics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::DistanceHaptics);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::DistanceHaptics*, "Valve.VR.InteractionSystem", "DistanceHaptics");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.DistanceHaptics
  // [TokenAttribute] Offset: FFFFFFFF
  class DistanceHaptics : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4
    class $Start$d__4;
    public:
    // public UnityEngine.Transform firstTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* firstTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform secondTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* secondTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.AnimationCurve distanceIntensityCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* distanceIntensityCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve pulseIntervalCurve
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationCurve* pulseIntervalCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform firstTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_firstTransform();
    // Get instance field reference: public UnityEngine.Transform secondTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_secondTransform();
    // Get instance field reference: public UnityEngine.AnimationCurve distanceIntensityCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_distanceIntensityCurve();
    // Get instance field reference: public UnityEngine.AnimationCurve pulseIntervalCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_pulseIntervalCurve();
    // private System.Collections.IEnumerator Start()
    // Offset: 0x1166438
    ::System::Collections::IEnumerator* Start();
    // public System.Void .ctor()
    // Offset: 0x11664D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DistanceHaptics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DistanceHaptics*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.DistanceHaptics
  #pragma pack(pop)
  static check_size<sizeof(DistanceHaptics), 48 + sizeof(::UnityEngine::AnimationCurve*)> __Valve_VR_InteractionSystem_DistanceHapticsSizeCheck;
  static_assert(sizeof(DistanceHaptics) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::DistanceHaptics::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::DistanceHaptics::*)()>(&Valve::VR::InteractionSystem::DistanceHaptics::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::DistanceHaptics*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::DistanceHaptics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
