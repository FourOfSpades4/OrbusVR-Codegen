// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: BodyCollider
  class BodyCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::BodyCollider);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::BodyCollider*, "Valve.VR.InteractionSystem", "BodyCollider");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.BodyCollider
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0614
  class BodyCollider : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform head
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* head;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.CapsuleCollider capsuleCollider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::CapsuleCollider* capsuleCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform head
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_head();
    // Get instance field reference: private UnityEngine.CapsuleCollider capsuleCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_capsuleCollider();
    // private System.Void Awake()
    // Offset: 0x115B060
    void Awake();
    // private System.Void FixedUpdate()
    // Offset: 0x115B0B8
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0x115B2A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BodyCollider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BodyCollider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BodyCollider*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.BodyCollider
  #pragma pack(pop)
  static check_size<sizeof(BodyCollider), 32 + sizeof(::UnityEngine::CapsuleCollider*)> __Valve_VR_InteractionSystem_BodyColliderSizeCheck;
  static_assert(sizeof(BodyCollider) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BodyCollider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BodyCollider::*)()>(&Valve::VR::InteractionSystem::BodyCollider::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BodyCollider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BodyCollider::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BodyCollider::*)()>(&Valve::VR::InteractionSystem::BodyCollider::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BodyCollider*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BodyCollider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
