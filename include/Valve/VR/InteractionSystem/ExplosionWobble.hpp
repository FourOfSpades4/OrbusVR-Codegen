// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ExplosionWobble
  class ExplosionWobble;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ExplosionWobble);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ExplosionWobble*, "Valve.VR.InteractionSystem", "ExplosionWobble");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ExplosionWobble
  // [TokenAttribute] Offset: FFFFFFFF
  class ExplosionWobble : public ::UnityEngine::MonoBehaviour {
    public:
    // public System.Void ExplosionEvent(UnityEngine.Vector3 explosionPos)
    // Offset: 0x116685C
    void ExplosionEvent(::UnityEngine::Vector3 explosionPos);
    // public System.Void .ctor()
    // Offset: 0x1166944
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExplosionWobble* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ExplosionWobble::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExplosionWobble*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ExplosionWobble
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ExplosionWobble::ExplosionEvent
// Il2CppName: ExplosionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ExplosionWobble::*)(::UnityEngine::Vector3)>(&Valve::VR::InteractionSystem::ExplosionWobble::ExplosionEvent)> {
  static const MethodInfo* get() {
    static auto* explosionPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ExplosionWobble*), "ExplosionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionPos});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ExplosionWobble::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
