// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
  // Forward declaring type: Longbow
  class Longbow;
  // Forward declaring type: SoundPlayOneshot
  class SoundPlayOneshot;
  // Forward declaring type: AllowTeleportWhileAttachedToHand
  class AllowTeleportWhileAttachedToHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ArrowHand
  class ArrowHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ArrowHand);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ArrowHand*, "Valve.VR.InteractionSystem", "ArrowHand");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ArrowHand
  // [TokenAttribute] Offset: FFFFFFFF
  class ArrowHand : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24
    class $ArrowReleaseHaptics$d__24;
    public:
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // private Valve.VR.InteractionSystem.Longbow bow
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::InteractionSystem::Longbow* bow;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Longbow*) == 0x8);
    // private UnityEngine.GameObject currentArrow
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* currentArrow;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject arrowPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* arrowPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Transform arrowNockTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* arrowNockTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single nockDistance
    // Size: 0x4
    // Offset: 0x40
    float nockDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lerpCompleteDistance
    // Size: 0x4
    // Offset: 0x44
    float lerpCompleteDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationLerpThreshold
    // Size: 0x4
    // Offset: 0x48
    float rotationLerpThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single positionLerpThreshold
    // Size: 0x4
    // Offset: 0x4C
    float positionLerpThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean allowArrowSpawn
    // Size: 0x1
    // Offset: 0x50
    bool allowArrowSpawn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean nocked
    // Size: 0x1
    // Offset: 0x51
    bool nocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean inNockRange
    // Size: 0x1
    // Offset: 0x52
    bool inNockRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean arrowLerpComplete
    // Size: 0x1
    // Offset: 0x53
    bool arrowLerpComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: arrowLerpComplete and: arrowSpawnSound
    char __padding12[0x4] = {};
    // public Valve.VR.InteractionSystem.SoundPlayOneshot arrowSpawnSound
    // Size: 0x8
    // Offset: 0x58
    ::Valve::VR::InteractionSystem::SoundPlayOneshot* arrowSpawnSound;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::SoundPlayOneshot*) == 0x8);
    // private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleport
    // Size: 0x8
    // Offset: 0x60
    ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand* allowTeleport;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*) == 0x8);
    // public System.Int32 maxArrowCount
    // Size: 0x4
    // Offset: 0x68
    int maxArrowCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxArrowCount and: arrowList
    char __padding15[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> arrowList
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* arrowList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: private Valve.VR.InteractionSystem.Longbow bow
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Longbow*& dyn_bow();
    // Get instance field reference: private UnityEngine.GameObject currentArrow
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_currentArrow();
    // Get instance field reference: public UnityEngine.GameObject arrowPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_arrowPrefab();
    // Get instance field reference: public UnityEngine.Transform arrowNockTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_arrowNockTransform();
    // Get instance field reference: public System.Single nockDistance
    [[deprecated("Use field access instead!")]] float& dyn_nockDistance();
    // Get instance field reference: public System.Single lerpCompleteDistance
    [[deprecated("Use field access instead!")]] float& dyn_lerpCompleteDistance();
    // Get instance field reference: public System.Single rotationLerpThreshold
    [[deprecated("Use field access instead!")]] float& dyn_rotationLerpThreshold();
    // Get instance field reference: public System.Single positionLerpThreshold
    [[deprecated("Use field access instead!")]] float& dyn_positionLerpThreshold();
    // Get instance field reference: private System.Boolean allowArrowSpawn
    [[deprecated("Use field access instead!")]] bool& dyn_allowArrowSpawn();
    // Get instance field reference: private System.Boolean nocked
    [[deprecated("Use field access instead!")]] bool& dyn_nocked();
    // Get instance field reference: private System.Boolean inNockRange
    [[deprecated("Use field access instead!")]] bool& dyn_inNockRange();
    // Get instance field reference: private System.Boolean arrowLerpComplete
    [[deprecated("Use field access instead!")]] bool& dyn_arrowLerpComplete();
    // Get instance field reference: public Valve.VR.InteractionSystem.SoundPlayOneshot arrowSpawnSound
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& dyn_arrowSpawnSound();
    // Get instance field reference: private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleport
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*& dyn_allowTeleport();
    // Get instance field reference: public System.Int32 maxArrowCount
    [[deprecated("Use field access instead!")]] int& dyn_maxArrowCount();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> arrowList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_arrowList();
    // private System.Void Awake()
    // Offset: 0x1157A1C
    void Awake();
    // private System.Void OnAttachedToHand(Valve.VR.InteractionSystem.Hand attachedHand)
    // Offset: 0x1157AC4
    void OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* attachedHand);
    // private UnityEngine.GameObject InstantiateArrow()
    // Offset: 0x1157B44
    ::UnityEngine::GameObject* InstantiateArrow();
    // private System.Void HandAttachedUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1157DF8
    void HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnDetachedFromHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1158C34
    void OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void FireArrow()
    // Offset: 0x1158790
    void FireArrow();
    // private System.Void EnableArrowSpawn()
    // Offset: 0x1158D24
    void EnableArrowSpawn();
    // private System.Collections.IEnumerator ArrowReleaseHaptics()
    // Offset: 0x1158CB0
    ::System::Collections::IEnumerator* ArrowReleaseHaptics();
    // private System.Void OnHandFocusLost(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1158D5C
    void OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandFocusAcquired(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1158D94
    void OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void FindBow()
    // Offset: 0x1157ACC
    void FindBow();
    // public System.Void .ctor()
    // Offset: 0x1158DCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrowHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrowHand*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ArrowHand
  #pragma pack(pop)
  static check_size<sizeof(ArrowHand), 112 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)> __Valve_VR_InteractionSystem_ArrowHandSizeCheck;
  static_assert(sizeof(ArrowHand) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::OnAttachedToHand
// Il2CppName: OnAttachedToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ArrowHand::OnAttachedToHand)> {
  static const MethodInfo* get() {
    static auto* attachedHand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "OnAttachedToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attachedHand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::InstantiateArrow
// Il2CppName: InstantiateArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::InstantiateArrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "InstantiateArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::HandAttachedUpdate
// Il2CppName: HandAttachedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ArrowHand::HandAttachedUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "HandAttachedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::OnDetachedFromHand
// Il2CppName: OnDetachedFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ArrowHand::OnDetachedFromHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "OnDetachedFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::FireArrow
// Il2CppName: FireArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::FireArrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "FireArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::EnableArrowSpawn
// Il2CppName: EnableArrowSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::EnableArrowSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "EnableArrowSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::ArrowReleaseHaptics
// Il2CppName: ArrowReleaseHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::ArrowReleaseHaptics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "ArrowReleaseHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::OnHandFocusLost
// Il2CppName: OnHandFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ArrowHand::OnHandFocusLost)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "OnHandFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::OnHandFocusAcquired
// Il2CppName: OnHandFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ArrowHand::OnHandFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "OnHandFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::FindBow
// Il2CppName: FindBow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ArrowHand::*)()>(&Valve::VR::InteractionSystem::ArrowHand::FindBow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ArrowHand*), "FindBow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ArrowHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
