// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: BalloonHapticBump
  class BalloonHapticBump;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::BalloonHapticBump);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::BalloonHapticBump*, "Valve.VR.InteractionSystem", "BalloonHapticBump");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.BalloonHapticBump
  // [TokenAttribute] Offset: FFFFFFFF
  class BalloonHapticBump : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject physParent
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* physParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject physParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_physParent();
    // private System.Void OnCollisionEnter(UnityEngine.Collision other)
    // Offset: 0x115A8C0
    void OnCollisionEnter(::UnityEngine::Collision* other);
    // public System.Void .ctor()
    // Offset: 0x115AA14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BalloonHapticBump* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonHapticBump::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BalloonHapticBump*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.BalloonHapticBump
  #pragma pack(pop)
  static check_size<sizeof(BalloonHapticBump), 24 + sizeof(::UnityEngine::GameObject*)> __Valve_VR_InteractionSystem_BalloonHapticBumpSizeCheck;
  static_assert(sizeof(BalloonHapticBump) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonHapticBump::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::BalloonHapticBump::*)(::UnityEngine::Collision*)>(&Valve::VR::InteractionSystem::BalloonHapticBump::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::BalloonHapticBump*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::BalloonHapticBump::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
