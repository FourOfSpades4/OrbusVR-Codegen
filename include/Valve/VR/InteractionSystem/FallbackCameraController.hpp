// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: FallbackCameraController
  class FallbackCameraController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::FallbackCameraController);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::FallbackCameraController*, "Valve.VR.InteractionSystem", "FallbackCameraController");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.FallbackCameraController
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0828
  class FallbackCameraController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x18
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shiftSpeed
    // Size: 0x4
    // Offset: 0x1C
    float shiftSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean showInstructions
    // Size: 0x1
    // Offset: 0x20
    bool showInstructions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showInstructions and: startEulerAngles
    char __padding2[0x3] = {};
    // private UnityEngine.Vector3 startEulerAngles
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 startEulerAngles;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 startMousePosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 startMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single realTime
    // Size: 0x4
    // Offset: 0x3C
    float realTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: public System.Single shiftSpeed
    [[deprecated("Use field access instead!")]] float& dyn_shiftSpeed();
    // Get instance field reference: public System.Boolean showInstructions
    [[deprecated("Use field access instead!")]] bool& dyn_showInstructions();
    // Get instance field reference: private UnityEngine.Vector3 startEulerAngles
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startEulerAngles();
    // Get instance field reference: private UnityEngine.Vector3 startMousePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startMousePosition();
    // Get instance field reference: private System.Single realTime
    [[deprecated("Use field access instead!")]] float& dyn_realTime();
    // private System.Void OnEnable()
    // Offset: 0x116694C
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x1166974
    void Update();
    // private System.Void OnGUI()
    // Offset: 0x1166D3C
    void OnGUI();
    // public System.Void .ctor()
    // Offset: 0x1166DF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FallbackCameraController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FallbackCameraController*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.FallbackCameraController
  #pragma pack(pop)
  static check_size<sizeof(FallbackCameraController), 60 + sizeof(float)> __Valve_VR_InteractionSystem_FallbackCameraControllerSizeCheck;
  static_assert(sizeof(FallbackCameraController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FallbackCameraController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FallbackCameraController::*)()>(&Valve::VR::InteractionSystem::FallbackCameraController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FallbackCameraController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FallbackCameraController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FallbackCameraController::*)()>(&Valve::VR::InteractionSystem::FallbackCameraController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FallbackCameraController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FallbackCameraController::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FallbackCameraController::*)()>(&Valve::VR::InteractionSystem::FallbackCameraController::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FallbackCameraController*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FallbackCameraController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
