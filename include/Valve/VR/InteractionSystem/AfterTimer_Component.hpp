// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: AfterTimer_Component
  class AfterTimer_Component;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::AfterTimer_Component);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::AfterTimer_Component*, "Valve.VR.InteractionSystem", "AfterTimer_Component");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x26
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.AfterTimer_Component
  // [TokenAttribute] Offset: FFFFFFFF
  class AfterTimer_Component : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5
    class $Wait$d__5;
    public:
    // private System.Action callback
    // Size: 0x8
    // Offset: 0x18
    ::System::Action* callback;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Single triggerTime
    // Size: 0x4
    // Offset: 0x20
    float triggerTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean timerActive
    // Size: 0x1
    // Offset: 0x24
    bool timerActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean triggerOnEarlyDestroy
    // Size: 0x1
    // Offset: 0x25
    bool triggerOnEarlyDestroy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Action callback
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_callback();
    // Get instance field reference: private System.Single triggerTime
    [[deprecated("Use field access instead!")]] float& dyn_triggerTime();
    // Get instance field reference: private System.Boolean timerActive
    [[deprecated("Use field access instead!")]] bool& dyn_timerActive();
    // Get instance field reference: private System.Boolean triggerOnEarlyDestroy
    [[deprecated("Use field access instead!")]] bool& dyn_triggerOnEarlyDestroy();
    // public System.Void Init(System.Single _time, System.Action _callback, System.Boolean earlydestroy)
    // Offset: 0x1155A4C
    void Init(float _time, ::System::Action* _callback, bool earlydestroy);
    // private System.Collections.IEnumerator Wait()
    // Offset: 0x1155A90
    ::System::Collections::IEnumerator* Wait();
    // private System.Void OnDestroy()
    // Offset: 0x1155B30
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x1155B9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AfterTimer_Component* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AfterTimer_Component*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.AfterTimer_Component
  #pragma pack(pop)
  static check_size<sizeof(AfterTimer_Component), 37 + sizeof(bool)> __Valve_VR_InteractionSystem_AfterTimer_ComponentSizeCheck;
  static_assert(sizeof(AfterTimer_Component) == 0x26);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::AfterTimer_Component::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::AfterTimer_Component::*)(float, ::System::Action*, bool)>(&Valve::VR::InteractionSystem::AfterTimer_Component::Init)> {
  static const MethodInfo* get() {
    static auto* _time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* _callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* earlydestroy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::AfterTimer_Component*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_time, _callback, earlydestroy});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::AfterTimer_Component::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::AfterTimer_Component::*)()>(&Valve::VR::InteractionSystem::AfterTimer_Component::Wait)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::AfterTimer_Component*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::AfterTimer_Component::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::AfterTimer_Component::*)()>(&Valve::VR::InteractionSystem::AfterTimer_Component::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::AfterTimer_Component*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::AfterTimer_Component::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
