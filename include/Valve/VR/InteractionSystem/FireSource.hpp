// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: FireSource
  class FireSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::FireSource);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::FireSource*, "Valve.VR.InteractionSystem", "FireSource");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.FireSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FireSource : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject fireParticlePrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* fireParticlePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean startActive
    // Size: 0x1
    // Offset: 0x20
    bool startActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startActive and: fireObject
    char __padding1[0x7] = {};
    // private UnityEngine.GameObject fireObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* fireObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.ParticleSystem customParticles
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ParticleSystem* customParticles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public System.Boolean isBurning
    // Size: 0x1
    // Offset: 0x38
    bool isBurning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBurning and: burnTime
    char __padding4[0x3] = {};
    // public System.Single burnTime
    // Size: 0x4
    // Offset: 0x3C
    float burnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ignitionDelay
    // Size: 0x4
    // Offset: 0x40
    float ignitionDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ignitionTime
    // Size: 0x4
    // Offset: 0x44
    float ignitionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x48
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // public UnityEngine.AudioSource ignitionSound
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* ignitionSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Boolean canSpreadFromThisSource
    // Size: 0x1
    // Offset: 0x58
    bool canSpreadFromThisSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject fireParticlePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fireParticlePrefab();
    // Get instance field reference: public System.Boolean startActive
    [[deprecated("Use field access instead!")]] bool& dyn_startActive();
    // Get instance field reference: private UnityEngine.GameObject fireObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fireObject();
    // Get instance field reference: public UnityEngine.ParticleSystem customParticles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_customParticles();
    // Get instance field reference: public System.Boolean isBurning
    [[deprecated("Use field access instead!")]] bool& dyn_isBurning();
    // Get instance field reference: public System.Single burnTime
    [[deprecated("Use field access instead!")]] float& dyn_burnTime();
    // Get instance field reference: public System.Single ignitionDelay
    [[deprecated("Use field access instead!")]] float& dyn_ignitionDelay();
    // Get instance field reference: private System.Single ignitionTime
    [[deprecated("Use field access instead!")]] float& dyn_ignitionTime();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: public UnityEngine.AudioSource ignitionSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_ignitionSound();
    // Get instance field reference: public System.Boolean canSpreadFromThisSource
    [[deprecated("Use field access instead!")]] bool& dyn_canSpreadFromThisSource();
    // private System.Void Start()
    // Offset: 0x1166E0C
    void Start();
    // private System.Void Update()
    // Offset: 0x116709C
    void Update();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x11671AC
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void FireExposure()
    // Offset: 0x116723C
    void FireExposure();
    // private System.Void StartBurning()
    // Offset: 0x1166E1C
    void StartBurning();
    // public System.Void .ctor()
    // Offset: 0x116735C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireSource*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.FireSource
  #pragma pack(pop)
  static check_size<sizeof(FireSource), 88 + sizeof(bool)> __Valve_VR_InteractionSystem_FireSourceSizeCheck;
  static_assert(sizeof(FireSource) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FireSource::*)()>(&Valve::VR::InteractionSystem::FireSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FireSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FireSource::*)()>(&Valve::VR::InteractionSystem::FireSource::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FireSource*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FireSource::*)(::UnityEngine::Collider*)>(&Valve::VR::InteractionSystem::FireSource::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FireSource*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::FireExposure
// Il2CppName: FireExposure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FireSource::*)()>(&Valve::VR::InteractionSystem::FireSource::FireExposure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FireSource*), "FireExposure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::StartBurning
// Il2CppName: StartBurning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::FireSource::*)()>(&Valve::VR::InteractionSystem::FireSource::StartBurning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::FireSource*), "StartBurning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::FireSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
