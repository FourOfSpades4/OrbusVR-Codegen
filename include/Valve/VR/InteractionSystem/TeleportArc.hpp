// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RaycastHit
  struct RaycastHit;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: TeleportArc
  class TeleportArc;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::TeleportArc);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::TeleportArc*, "Valve.VR.InteractionSystem", "TeleportArc");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.TeleportArc
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportArc : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 segmentCount
    // Size: 0x4
    // Offset: 0x18
    int segmentCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single thickness
    // Size: 0x4
    // Offset: 0x1C
    float thickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADE848
    // public System.Single arcDuration
    // Size: 0x4
    // Offset: 0x20
    float arcDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADE880
    // public System.Single segmentBreak
    // Size: 0x4
    // Offset: 0x24
    float segmentBreak;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADE8B8
    // public System.Single arcSpeed
    // Size: 0x4
    // Offset: 0x28
    float arcSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: arcSpeed and: material
    char __padding4[0x4] = {};
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 traceLayerMask
    // Size: 0x4
    // Offset: 0x38
    int traceLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: traceLayerMask and: lineRenderers
    char __padding6[0x4] = {};
    // private UnityEngine.LineRenderer[] lineRenderers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::LineRenderer*> lineRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::LineRenderer*>) == 0x8);
    // private System.Single arcTimeOffset
    // Size: 0x4
    // Offset: 0x48
    float arcTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single prevThickness
    // Size: 0x4
    // Offset: 0x4C
    float prevThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 prevSegmentCount
    // Size: 0x4
    // Offset: 0x50
    int prevSegmentCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean showArc
    // Size: 0x1
    // Offset: 0x54
    bool showArc;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showArc and: startPos
    char __padding11[0x3] = {};
    // private UnityEngine.Vector3 startPos
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 startPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 projectileVelocity
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 projectileVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean useGravity
    // Size: 0x1
    // Offset: 0x70
    bool useGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useGravity and: arcObjectsTransfrom
    char __padding14[0x7] = {};
    // private UnityEngine.Transform arcObjectsTransfrom
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* arcObjectsTransfrom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean arcInvalid
    // Size: 0x1
    // Offset: 0x80
    bool arcInvalid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 segmentCount
    [[deprecated("Use field access instead!")]] int& dyn_segmentCount();
    // Get instance field reference: public System.Single thickness
    [[deprecated("Use field access instead!")]] float& dyn_thickness();
    // Get instance field reference: public System.Single arcDuration
    [[deprecated("Use field access instead!")]] float& dyn_arcDuration();
    // Get instance field reference: public System.Single segmentBreak
    [[deprecated("Use field access instead!")]] float& dyn_segmentBreak();
    // Get instance field reference: public System.Single arcSpeed
    [[deprecated("Use field access instead!")]] float& dyn_arcSpeed();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public System.Int32 traceLayerMask
    [[deprecated("Use field access instead!")]] int& dyn_traceLayerMask();
    // Get instance field reference: private UnityEngine.LineRenderer[] lineRenderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LineRenderer*>& dyn_lineRenderers();
    // Get instance field reference: private System.Single arcTimeOffset
    [[deprecated("Use field access instead!")]] float& dyn_arcTimeOffset();
    // Get instance field reference: private System.Single prevThickness
    [[deprecated("Use field access instead!")]] float& dyn_prevThickness();
    // Get instance field reference: private System.Int32 prevSegmentCount
    [[deprecated("Use field access instead!")]] int& dyn_prevSegmentCount();
    // Get instance field reference: private System.Boolean showArc
    [[deprecated("Use field access instead!")]] bool& dyn_showArc();
    // Get instance field reference: private UnityEngine.Vector3 startPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPos();
    // Get instance field reference: private UnityEngine.Vector3 projectileVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_projectileVelocity();
    // Get instance field reference: private System.Boolean useGravity
    [[deprecated("Use field access instead!")]] bool& dyn_useGravity();
    // Get instance field reference: private UnityEngine.Transform arcObjectsTransfrom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_arcObjectsTransfrom();
    // Get instance field reference: private System.Boolean arcInvalid
    [[deprecated("Use field access instead!")]] bool& dyn_arcInvalid();
    // private System.Void Start()
    // Offset: 0xDC6E78
    void Start();
    // private System.Void Update()
    // Offset: 0xDC6EA0
    void Update();
    // private System.Void CreateLineRendererObjects()
    // Offset: 0xDC6EEC
    void CreateLineRendererObjects();
    // public System.Void SetArcData(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, System.Boolean gravity, System.Boolean pointerAtBadAngle)
    // Offset: 0xDC5144
    void SetArcData(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, bool gravity, bool pointerAtBadAngle);
    // public System.Void Show()
    // Offset: 0xDC60A4
    void Show();
    // public System.Void Hide()
    // Offset: 0xDC606C
    void Hide();
    // public System.Boolean DrawArc(out UnityEngine.RaycastHit hitInfo)
    // Offset: 0xDC5198
    bool DrawArc(ByRef<::UnityEngine::RaycastHit> hitInfo);
    // private System.Void DrawArcSegment(System.Int32 index, System.Single startTime, System.Single endTime)
    // Offset: 0xDC772C
    void DrawArcSegment(int index, float startTime, float endTime);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0xDC5720
    void SetColor(::UnityEngine::Color color);
    // private System.Single FindProjectileCollision(out UnityEngine.RaycastHit hitInfo)
    // Offset: 0xDC74CC
    float FindProjectileCollision(ByRef<::UnityEngine::RaycastHit> hitInfo);
    // public UnityEngine.Vector3 GetArcPositionAtTime(System.Single time)
    // Offset: 0xDC5840
    ::UnityEngine::Vector3 GetArcPositionAtTime(float time);
    // private System.Void HideLineSegments(System.Int32 startSegment, System.Int32 endSegment)
    // Offset: 0xDC742C
    void HideLineSegments(int startSegment, int endSegment);
    // public System.Void .ctor()
    // Offset: 0xDC7B98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportArc* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportArc*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.TeleportArc
  #pragma pack(pop)
  static check_size<sizeof(TeleportArc), 128 + sizeof(bool)> __Valve_VR_InteractionSystem_TeleportArcSizeCheck;
  static_assert(sizeof(TeleportArc) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)()>(&Valve::VR::InteractionSystem::TeleportArc::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)()>(&Valve::VR::InteractionSystem::TeleportArc::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::CreateLineRendererObjects
// Il2CppName: CreateLineRendererObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)()>(&Valve::VR::InteractionSystem::TeleportArc::CreateLineRendererObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "CreateLineRendererObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::SetArcData
// Il2CppName: SetArcData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, bool, bool)>(&Valve::VR::InteractionSystem::TeleportArc::SetArcData)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* gravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pointerAtBadAngle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "SetArcData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity, gravity, pointerAtBadAngle});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)()>(&Valve::VR::InteractionSystem::TeleportArc::Show)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)()>(&Valve::VR::InteractionSystem::TeleportArc::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::DrawArc
// Il2CppName: DrawArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::TeleportArc::*)(ByRef<::UnityEngine::RaycastHit>)>(&Valve::VR::InteractionSystem::TeleportArc::DrawArc)> {
  static const MethodInfo* get() {
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "DrawArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitInfo});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::DrawArcSegment
// Il2CppName: DrawArcSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)(int, float, float)>(&Valve::VR::InteractionSystem::TeleportArc::DrawArcSegment)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "DrawArcSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, startTime, endTime});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)(::UnityEngine::Color)>(&Valve::VR::InteractionSystem::TeleportArc::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::FindProjectileCollision
// Il2CppName: FindProjectileCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Valve::VR::InteractionSystem::TeleportArc::*)(ByRef<::UnityEngine::RaycastHit>)>(&Valve::VR::InteractionSystem::TeleportArc::FindProjectileCollision)> {
  static const MethodInfo* get() {
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "FindProjectileCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitInfo});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::GetArcPositionAtTime
// Il2CppName: GetArcPositionAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::TeleportArc::*)(float)>(&Valve::VR::InteractionSystem::TeleportArc::GetArcPositionAtTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "GetArcPositionAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::HideLineSegments
// Il2CppName: HideLineSegments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::TeleportArc::*)(int, int)>(&Valve::VR::InteractionSystem::TeleportArc::HideLineSegments)> {
  static const MethodInfo* get() {
    static auto* startSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::TeleportArc*), "HideLineSegments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startSegment, endSegment});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::TeleportArc::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
