// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Unparent
  class Unparent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Unparent);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Unparent*, "Valve.VR.InteractionSystem", "Unparent");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Unparent
  // [TokenAttribute] Offset: FFFFFFFF
  class Unparent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform oldParent
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* oldParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform oldParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_oldParent();
    // private System.Void Start()
    // Offset: 0xDCAE8C
    void Start();
    // private System.Void Update()
    // Offset: 0xDCAFC8
    void Update();
    // public UnityEngine.Transform GetOldParent()
    // Offset: 0xDCB08C
    ::UnityEngine::Transform* GetOldParent();
    // public System.Void .ctor()
    // Offset: 0xDCB094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Unparent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Unparent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Unparent*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.Unparent
  #pragma pack(pop)
  static check_size<sizeof(Unparent), 24 + sizeof(::UnityEngine::Transform*)> __Valve_VR_InteractionSystem_UnparentSizeCheck;
  static_assert(sizeof(Unparent) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Unparent::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Unparent::*)()>(&Valve::VR::InteractionSystem::Unparent::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Unparent*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Unparent::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Unparent::*)()>(&Valve::VR::InteractionSystem::Unparent::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Unparent*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Unparent::GetOldParent
// Il2CppName: GetOldParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Valve::VR::InteractionSystem::Unparent::*)()>(&Valve::VR::InteractionSystem::Unparent::GetOldParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Unparent*), "GetOldParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Unparent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
