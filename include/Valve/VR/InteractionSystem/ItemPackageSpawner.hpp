// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/AttachmentFlags
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: Valve.VR.InteractionSystem.ItemPackage
#include "Valve/VR/InteractionSystem/ItemPackage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Skipping declaration: Hand because it is already included!
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ItemPackageSpawner
  class ItemPackageSpawner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ItemPackageSpawner);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ItemPackageSpawner*, "Valve.VR.InteractionSystem", "ItemPackageSpawner");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ItemPackageSpawner
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0A08
  class ItemPackageSpawner : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Valve.VR.InteractionSystem.ItemPackage _itemPackage
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::ItemPackage* itemPackage;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::ItemPackage*) == 0x8);
    // private System.Boolean useItemPackagePreview
    // Size: 0x1
    // Offset: 0x20
    bool useItemPackagePreview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useFadedPreview
    // Size: 0x1
    // Offset: 0x21
    bool useFadedPreview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFadedPreview and: previewObject
    char __padding2[0x6] = {};
    // private UnityEngine.GameObject previewObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* previewObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean requireTriggerPressToTake
    // Size: 0x1
    // Offset: 0x30
    bool requireTriggerPressToTake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean requireTriggerPressToReturn
    // Size: 0x1
    // Offset: 0x31
    bool requireTriggerPressToReturn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showTriggerHint
    // Size: 0x1
    // Offset: 0x32
    bool showTriggerHint;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showTriggerHint and: attachmentFlags
    char __padding6[0x1] = {};
    // public Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
    // Size: 0x4
    // Offset: 0x34
    ::Valve::VR::InteractionSystem::Hand::AttachmentFlags attachmentFlags;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand::AttachmentFlags) == 0x4);
    // public System.String attachmentPoint
    // Size: 0x8
    // Offset: 0x38
    ::StringW attachmentPoint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean takeBackItem
    // Size: 0x1
    // Offset: 0x40
    bool takeBackItem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean acceptDifferentItems
    // Size: 0x1
    // Offset: 0x41
    bool acceptDifferentItems;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: acceptDifferentItems and: spawnedItem
    char __padding10[0x6] = {};
    // private UnityEngine.GameObject spawnedItem
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* spawnedItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean itemIsSpawned
    // Size: 0x1
    // Offset: 0x50
    bool itemIsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: itemIsSpawned and: pickupEvent
    char __padding12[0x7] = {};
    // public UnityEngine.Events.UnityEvent pickupEvent
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Events::UnityEvent* pickupEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent dropEvent
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Events::UnityEvent* dropEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public System.Boolean justPickedUpItem
    // Size: 0x1
    // Offset: 0x68
    bool justPickedUpItem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Valve.VR.InteractionSystem.ItemPackage _itemPackage
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage*& dyn__itemPackage();
    // Get instance field reference: private System.Boolean useItemPackagePreview
    [[deprecated("Use field access instead!")]] bool& dyn_useItemPackagePreview();
    // Get instance field reference: private System.Boolean useFadedPreview
    [[deprecated("Use field access instead!")]] bool& dyn_useFadedPreview();
    // Get instance field reference: private UnityEngine.GameObject previewObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_previewObject();
    // Get instance field reference: public System.Boolean requireTriggerPressToTake
    [[deprecated("Use field access instead!")]] bool& dyn_requireTriggerPressToTake();
    // Get instance field reference: public System.Boolean requireTriggerPressToReturn
    [[deprecated("Use field access instead!")]] bool& dyn_requireTriggerPressToReturn();
    // Get instance field reference: public System.Boolean showTriggerHint
    [[deprecated("Use field access instead!")]] bool& dyn_showTriggerHint();
    // Get instance field reference: public Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& dyn_attachmentFlags();
    // Get instance field reference: public System.String attachmentPoint
    [[deprecated("Use field access instead!")]] ::StringW& dyn_attachmentPoint();
    // Get instance field reference: public System.Boolean takeBackItem
    [[deprecated("Use field access instead!")]] bool& dyn_takeBackItem();
    // Get instance field reference: public System.Boolean acceptDifferentItems
    [[deprecated("Use field access instead!")]] bool& dyn_acceptDifferentItems();
    // Get instance field reference: private UnityEngine.GameObject spawnedItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spawnedItem();
    // Get instance field reference: private System.Boolean itemIsSpawned
    [[deprecated("Use field access instead!")]] bool& dyn_itemIsSpawned();
    // Get instance field reference: public UnityEngine.Events.UnityEvent pickupEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_pickupEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent dropEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_dropEvent();
    // Get instance field reference: public System.Boolean justPickedUpItem
    [[deprecated("Use field access instead!")]] bool& dyn_justPickedUpItem();
    // public Valve.VR.InteractionSystem.ItemPackage get_itemPackage()
    // Offset: 0x116C81C
    ::Valve::VR::InteractionSystem::ItemPackage* get_itemPackage();
    // public System.Void set_itemPackage(Valve.VR.InteractionSystem.ItemPackage value)
    // Offset: 0x116C824
    void set_itemPackage(::Valve::VR::InteractionSystem::ItemPackage* value);
    // private System.Void CreatePreviewObject()
    // Offset: 0x116C828
    void CreatePreviewObject();
    // private System.Void Start()
    // Offset: 0x116CE58
    void Start();
    // private System.Void VerifyItemPackage()
    // Offset: 0x116CE5C
    void VerifyItemPackage();
    // private System.Void ItemPackageNotValid()
    // Offset: 0x116CF38
    void ItemPackageNotValid();
    // private System.Void ClearPreview()
    // Offset: 0x116CB00
    void ClearPreview();
    // private System.Void Update()
    // Offset: 0x116D034
    void Update();
    // private System.Void OnHandHoverBegin(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D0E8
    void OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void TakeBackItem(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D304
    void TakeBackItem(::Valve::VR::InteractionSystem::Hand* hand);
    // private Valve.VR.InteractionSystem.ItemPackage GetAttachedItemPackage(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D1E4
    ::Valve::VR::InteractionSystem::ItemPackage* GetAttachedItemPackage(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void HandHoverUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D8E0
    void HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandHoverEnd(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D93C
    void OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void RemoveMatchingItemsFromHandStack(Valve.VR.InteractionSystem.ItemPackage package, Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D6DC
    void RemoveMatchingItemsFromHandStack(::Valve::VR::InteractionSystem::ItemPackage* package, ::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void RemoveMatchingItemTypesFromHand(Valve.VR.InteractionSystem.ItemPackage/ItemPackageType packageType, Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D984
    void RemoveMatchingItemTypesFromHand(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType packageType, ::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void SpawnAndAttachObject(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116D380
    void SpawnAndAttachObject(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void .ctor()
    // Offset: 0x116DB48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ItemPackageSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ItemPackageSpawner*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ItemPackageSpawner
  #pragma pack(pop)
  static check_size<sizeof(ItemPackageSpawner), 104 + sizeof(bool)> __Valve_VR_InteractionSystem_ItemPackageSpawnerSizeCheck;
  static_assert(sizeof(ItemPackageSpawner) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::get_itemPackage
// Il2CppName: get_itemPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::ItemPackage* (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::get_itemPackage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "get_itemPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::set_itemPackage
// Il2CppName: set_itemPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::ItemPackage*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::set_itemPackage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "ItemPackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "set_itemPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::CreatePreviewObject
// Il2CppName: CreatePreviewObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::CreatePreviewObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "CreatePreviewObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::VerifyItemPackage
// Il2CppName: VerifyItemPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::VerifyItemPackage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "VerifyItemPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::ItemPackageNotValid
// Il2CppName: ItemPackageNotValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::ItemPackageNotValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "ItemPackageNotValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::ClearPreview
// Il2CppName: ClearPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::ClearPreview)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "ClearPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)()>(&Valve::VR::InteractionSystem::ItemPackageSpawner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverBegin
// Il2CppName: OnHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverBegin)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "OnHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::TakeBackItem
// Il2CppName: TakeBackItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::TakeBackItem)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "TakeBackItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::GetAttachedItemPackage
// Il2CppName: GetAttachedItemPackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::ItemPackage* (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::GetAttachedItemPackage)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "GetAttachedItemPackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::HandHoverUpdate
// Il2CppName: HandHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::HandHoverUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "HandHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverEnd
// Il2CppName: OnHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverEnd)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "OnHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemsFromHandStack
// Il2CppName: RemoveMatchingItemsFromHandStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::ItemPackage*, ::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemsFromHandStack)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "ItemPackage")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "RemoveMatchingItemsFromHandStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package, hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemTypesFromHand
// Il2CppName: RemoveMatchingItemTypesFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType, ::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemTypesFromHand)> {
  static const MethodInfo* get() {
    static auto* packageType = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "RemoveMatchingItemTypesFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packageType, hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::SpawnAndAttachObject
// Il2CppName: SpawnAndAttachObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ItemPackageSpawner::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ItemPackageSpawner::SpawnAndAttachObject)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ItemPackageSpawner*), "SpawnAndAttachObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ItemPackageSpawner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
