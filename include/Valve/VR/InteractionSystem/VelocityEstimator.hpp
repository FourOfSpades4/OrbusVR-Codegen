// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: VelocityEstimator
  class VelocityEstimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::VelocityEstimator);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::VelocityEstimator*, "Valve.VR.InteractionSystem", "VelocityEstimator");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.VelocityEstimator
  // [TokenAttribute] Offset: FFFFFFFF
  class VelocityEstimator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13
    class $EstimateVelocityCoroutine$d__13;
    public:
    // [TooltipAttribute] Offset: 0xADE670
    // public System.Int32 velocityAverageFrames
    // Size: 0x4
    // Offset: 0x18
    int velocityAverageFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xADE6A8
    // public System.Int32 angularVelocityAverageFrames
    // Size: 0x4
    // Offset: 0x1C
    int angularVelocityAverageFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean estimateOnAwake
    // Size: 0x1
    // Offset: 0x20
    bool estimateOnAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: estimateOnAwake and: routine
    char __padding2[0x7] = {};
    // private UnityEngine.Coroutine routine
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Coroutine* routine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Int32 sampleCount
    // Size: 0x4
    // Offset: 0x30
    int sampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: sampleCount and: velocitySamples
    char __padding4[0x4] = {};
    // private UnityEngine.Vector3[] velocitySamples
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector3> velocitySamples;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] angularVelocitySamples
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector3> angularVelocitySamples;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 velocityAverageFrames
    [[deprecated("Use field access instead!")]] int& dyn_velocityAverageFrames();
    // Get instance field reference: public System.Int32 angularVelocityAverageFrames
    [[deprecated("Use field access instead!")]] int& dyn_angularVelocityAverageFrames();
    // Get instance field reference: public System.Boolean estimateOnAwake
    [[deprecated("Use field access instead!")]] bool& dyn_estimateOnAwake();
    // Get instance field reference: private UnityEngine.Coroutine routine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_routine();
    // Get instance field reference: private System.Int32 sampleCount
    [[deprecated("Use field access instead!")]] int& dyn_sampleCount();
    // Get instance field reference: private UnityEngine.Vector3[] velocitySamples
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_velocitySamples();
    // Get instance field reference: private UnityEngine.Vector3[] angularVelocitySamples
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_angularVelocitySamples();
    // public System.Void BeginEstimatingVelocity()
    // Offset: 0xDC99A8
    void BeginEstimatingVelocity();
    // public System.Void FinishEstimatingVelocity()
    // Offset: 0xDCA038
    void FinishEstimatingVelocity();
    // public UnityEngine.Vector3 GetVelocityEstimate()
    // Offset: 0xDCA06C
    ::UnityEngine::Vector3 GetVelocityEstimate();
    // public UnityEngine.Vector3 GetAngularVelocityEstimate()
    // Offset: 0xDCA24C
    ::UnityEngine::Vector3 GetAngularVelocityEstimate();
    // public UnityEngine.Vector3 GetAccelerationEstimate()
    // Offset: 0xDCD158
    ::UnityEngine::Vector3 GetAccelerationEstimate();
    // private System.Void Awake()
    // Offset: 0xDCD39C
    void Awake();
    // private System.Collections.IEnumerator EstimateVelocityCoroutine()
    // Offset: 0xDCD0E4
    ::System::Collections::IEnumerator* EstimateVelocityCoroutine();
    // public System.Void .ctor()
    // Offset: 0xDCD448
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VelocityEstimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VelocityEstimator*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.VelocityEstimator
  #pragma pack(pop)
  static check_size<sizeof(VelocityEstimator), 64 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __Valve_VR_InteractionSystem_VelocityEstimatorSizeCheck;
  static_assert(sizeof(VelocityEstimator) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::BeginEstimatingVelocity
// Il2CppName: BeginEstimatingVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::BeginEstimatingVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "BeginEstimatingVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::FinishEstimatingVelocity
// Il2CppName: FinishEstimatingVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::FinishEstimatingVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "FinishEstimatingVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::GetVelocityEstimate
// Il2CppName: GetVelocityEstimate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::GetVelocityEstimate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "GetVelocityEstimate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::GetAngularVelocityEstimate
// Il2CppName: GetAngularVelocityEstimate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::GetAngularVelocityEstimate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "GetAngularVelocityEstimate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::GetAccelerationEstimate
// Il2CppName: GetAccelerationEstimate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::GetAccelerationEstimate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "GetAccelerationEstimate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::EstimateVelocityCoroutine
// Il2CppName: EstimateVelocityCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::VelocityEstimator::*)()>(&Valve::VR::InteractionSystem::VelocityEstimator::EstimateVelocityCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::VelocityEstimator*), "EstimateVelocityCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::VelocityEstimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
