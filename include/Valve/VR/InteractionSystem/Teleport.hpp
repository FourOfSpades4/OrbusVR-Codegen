// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
  // Forward declaring type: Player
  class Player;
  // Forward declaring type: TeleportArc
  class TeleportArc;
  // Forward declaring type: TeleportMarkerBase
  class TeleportMarkerBase;
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: AllowTeleportWhileAttachedToHand
  class AllowTeleportWhileAttachedToHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction`1<T0>
  template<typename T0>
  class UnityAction_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Teleport
  class Teleport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Teleport);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Teleport*, "Valve.VR.InteractionSystem", "Teleport");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x248
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Teleport
  // [TokenAttribute] Offset: FFFFFFFF
  class Teleport : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105
    class $TeleportHintCoroutine$d__105;
    public:
    // public UnityEngine.LayerMask traceLayerMask
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::LayerMask traceLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask floorFixupTraceLayerMask
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::LayerMask floorFixupTraceLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single floorFixupMaximumTraceDistance
    // Size: 0x4
    // Offset: 0x20
    float floorFixupMaximumTraceDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: floorFixupMaximumTraceDistance and: areaVisibleMaterial
    char __padding2[0x4] = {};
    // public UnityEngine.Material areaVisibleMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* areaVisibleMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material areaLockedMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* areaLockedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material areaHighlightedMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* areaHighlightedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material pointVisibleMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* pointVisibleMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material pointLockedMaterial
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* pointLockedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material pointHighlightedMaterial
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* pointHighlightedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Transform destinationReticleTransform
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* destinationReticleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform invalidReticleTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* invalidReticleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject playAreaPreviewCorner
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* playAreaPreviewCorner;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject playAreaPreviewSide
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* playAreaPreviewSide;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Color pointerValidColor
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color pointerValidColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color pointerInvalidColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color pointerInvalidColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color pointerLockedColor
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Color pointerLockedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean showPlayAreaMarker
    // Size: 0x1
    // Offset: 0xA8
    bool showPlayAreaMarker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showPlayAreaMarker and: teleportFadeTime
    char __padding16[0x3] = {};
    // public System.Single teleportFadeTime
    // Size: 0x4
    // Offset: 0xAC
    float teleportFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single meshFadeTime
    // Size: 0x4
    // Offset: 0xB0
    float meshFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single arcDistance
    // Size: 0x4
    // Offset: 0xB4
    float arcDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADE768
    // public UnityEngine.Transform onActivateObjectTransform
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Transform* onActivateObjectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform onDeactivateObjectTransform
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* onDeactivateObjectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single activateObjectTime
    // Size: 0x4
    // Offset: 0xC8
    float activateObjectTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single deactivateObjectTime
    // Size: 0x4
    // Offset: 0xCC
    float deactivateObjectTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADE7A0
    // public UnityEngine.AudioSource pointerAudioSource
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::AudioSource* pointerAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource loopingAudioSource
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::AudioSource* loopingAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource headAudioSource
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::AudioSource* headAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource reticleAudioSource
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::AudioSource* reticleAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // [HeaderAttribute] Offset: 0xADE7D8
    // public UnityEngine.AudioClip teleportSound
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::AudioClip* teleportSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip pointerStartSound
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::AudioClip* pointerStartSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip pointerLoopSound
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::AudioClip* pointerLoopSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip pointerStopSound
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::AudioClip* pointerStopSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip goodHighlightSound
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::AudioClip* goodHighlightSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip badHighlightSound
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::AudioClip* badHighlightSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // [HeaderAttribute] Offset: 0xADE810
    // public System.Boolean debugFloor
    // Size: 0x1
    // Offset: 0x120
    bool debugFloor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showOffsetReticle
    // Size: 0x1
    // Offset: 0x121
    bool showOffsetReticle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showOffsetReticle and: offsetReticleTransform
    char __padding35[0x6] = {};
    // public UnityEngine.Transform offsetReticleTransform
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Transform* offsetReticleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.MeshRenderer floorDebugSphere
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::MeshRenderer* floorDebugSphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.LineRenderer floorDebugLine
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::LineRenderer* floorDebugLine;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.LineRenderer pointerLineRenderer
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::LineRenderer* pointerLineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.GameObject teleportPointerObject
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::GameObject* teleportPointerObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform pointerStartTransform
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Transform* pointerStartTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Valve.VR.InteractionSystem.Hand pointerHand
    // Size: 0x8
    // Offset: 0x158
    ::Valve::VR::InteractionSystem::Hand* pointerHand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // private Valve.VR.InteractionSystem.Player player
    // Size: 0x8
    // Offset: 0x160
    ::Valve::VR::InteractionSystem::Player* player;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Player*) == 0x8);
    // private Valve.VR.InteractionSystem.TeleportArc teleportArc
    // Size: 0x8
    // Offset: 0x168
    ::Valve::VR::InteractionSystem::TeleportArc* teleportArc;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::TeleportArc*) == 0x8);
    // private System.Boolean visible
    // Size: 0x1
    // Offset: 0x170
    bool visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: visible and: teleportMarkers
    char __padding45[0x7] = {};
    // private Valve.VR.InteractionSystem.TeleportMarkerBase[] teleportMarkers
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::Valve::VR::InteractionSystem::TeleportMarkerBase*> teleportMarkers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Valve::VR::InteractionSystem::TeleportMarkerBase*>) == 0x8);
    // private Valve.VR.InteractionSystem.TeleportMarkerBase pointedAtTeleportMarker
    // Size: 0x8
    // Offset: 0x180
    ::Valve::VR::InteractionSystem::TeleportMarkerBase* pointedAtTeleportMarker;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::TeleportMarkerBase*) == 0x8);
    // private Valve.VR.InteractionSystem.TeleportMarkerBase teleportingToMarker
    // Size: 0x8
    // Offset: 0x188
    ::Valve::VR::InteractionSystem::TeleportMarkerBase* teleportingToMarker;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::TeleportMarkerBase*) == 0x8);
    // private UnityEngine.Vector3 pointedAtPosition
    // Size: 0xC
    // Offset: 0x190
    ::UnityEngine::Vector3 pointedAtPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 prevPointedAtPosition
    // Size: 0xC
    // Offset: 0x19C
    ::UnityEngine::Vector3 prevPointedAtPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean teleporting
    // Size: 0x1
    // Offset: 0x1A8
    bool teleporting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: teleporting and: currentFadeTime
    char __padding51[0x3] = {};
    // private System.Single currentFadeTime
    // Size: 0x4
    // Offset: 0x1AC
    float currentFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single meshAlphaPercent
    // Size: 0x4
    // Offset: 0x1B0
    float meshAlphaPercent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pointerShowStartTime
    // Size: 0x4
    // Offset: 0x1B4
    float pointerShowStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pointerHideStartTime
    // Size: 0x4
    // Offset: 0x1B8
    float pointerHideStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean meshFading
    // Size: 0x1
    // Offset: 0x1BC
    bool meshFading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: meshFading and: fullTintAlpha
    char __padding56[0x3] = {};
    // private System.Single fullTintAlpha
    // Size: 0x4
    // Offset: 0x1C0
    float fullTintAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single invalidReticleMinScale
    // Size: 0x4
    // Offset: 0x1C4
    float invalidReticleMinScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single invalidReticleMaxScale
    // Size: 0x4
    // Offset: 0x1C8
    float invalidReticleMaxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single invalidReticleMinScaleDistance
    // Size: 0x4
    // Offset: 0x1CC
    float invalidReticleMinScaleDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single invalidReticleMaxScaleDistance
    // Size: 0x4
    // Offset: 0x1D0
    float invalidReticleMaxScaleDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 invalidReticleScale
    // Size: 0xC
    // Offset: 0x1D4
    ::UnityEngine::Vector3 invalidReticleScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion invalidReticleTargetRotation
    // Size: 0x10
    // Offset: 0x1E0
    ::UnityEngine::Quaternion invalidReticleTargetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Transform playAreaPreviewTransform
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::Transform* playAreaPreviewTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform[] playAreaPreviewCorners
    // Size: 0x8
    // Offset: 0x1F8
    ::ArrayW<::UnityEngine::Transform*> playAreaPreviewCorners;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private UnityEngine.Transform[] playAreaPreviewSides
    // Size: 0x8
    // Offset: 0x200
    ::ArrayW<::UnityEngine::Transform*> playAreaPreviewSides;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private System.Single loopingAudioMaxVolume
    // Size: 0x4
    // Offset: 0x208
    float loopingAudioMaxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: loopingAudioMaxVolume and: hintCoroutine
    char __padding67[0x4] = {};
    // private UnityEngine.Coroutine hintCoroutine
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::Coroutine* hintCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean originalHoverLockState
    // Size: 0x1
    // Offset: 0x218
    bool originalHoverLockState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: originalHoverLockState and: originalHoveringInteractable
    char __padding69[0x7] = {};
    // private Valve.VR.InteractionSystem.Interactable originalHoveringInteractable
    // Size: 0x8
    // Offset: 0x220
    ::Valve::VR::InteractionSystem::Interactable* originalHoveringInteractable;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Interactable*) == 0x8);
    // private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleportWhileAttached
    // Size: 0x8
    // Offset: 0x228
    ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand* allowTeleportWhileAttached;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*) == 0x8);
    // private UnityEngine.Vector3 startingFeetOffset
    // Size: 0xC
    // Offset: 0x230
    ::UnityEngine::Vector3 startingFeetOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean movedFeetFarEnough
    // Size: 0x1
    // Offset: 0x23C
    bool movedFeetFarEnough;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: movedFeetFarEnough and: chaperoneInfoInitializedAction
    char __padding73[0x3] = {};
    // private SteamVR_Events/Action chaperoneInfoInitializedAction
    // Size: 0x8
    // Offset: 0x240
    ::GlobalNamespace::SteamVR_Events::Action* chaperoneInfoInitializedAction;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_Events::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public SteamVR_Events/Event`1<System.Single> ChangeScene
    static ::GlobalNamespace::SteamVR_Events::Event_1<float>* _get_ChangeScene();
    // Set static field: static public SteamVR_Events/Event`1<System.Single> ChangeScene
    static void _set_ChangeScene(::GlobalNamespace::SteamVR_Events::Event_1<float>* value);
    // Get static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> Player
    static ::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* _get_Player();
    // Set static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> Player
    static void _set_Player(::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* value);
    // Get static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerPre
    static ::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* _get_PlayerPre();
    // Set static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerPre
    static void _set_PlayerPre(::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* value);
    // Get static field: static private Valve.VR.InteractionSystem.Teleport _instance
    static ::Valve::VR::InteractionSystem::Teleport* _get__instance();
    // Set static field: static private Valve.VR.InteractionSystem.Teleport _instance
    static void _set__instance(::Valve::VR::InteractionSystem::Teleport* value);
    // Get instance field reference: public UnityEngine.LayerMask traceLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_traceLayerMask();
    // Get instance field reference: public UnityEngine.LayerMask floorFixupTraceLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_floorFixupTraceLayerMask();
    // Get instance field reference: public System.Single floorFixupMaximumTraceDistance
    [[deprecated("Use field access instead!")]] float& dyn_floorFixupMaximumTraceDistance();
    // Get instance field reference: public UnityEngine.Material areaVisibleMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_areaVisibleMaterial();
    // Get instance field reference: public UnityEngine.Material areaLockedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_areaLockedMaterial();
    // Get instance field reference: public UnityEngine.Material areaHighlightedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_areaHighlightedMaterial();
    // Get instance field reference: public UnityEngine.Material pointVisibleMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pointVisibleMaterial();
    // Get instance field reference: public UnityEngine.Material pointLockedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pointLockedMaterial();
    // Get instance field reference: public UnityEngine.Material pointHighlightedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pointHighlightedMaterial();
    // Get instance field reference: public UnityEngine.Transform destinationReticleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_destinationReticleTransform();
    // Get instance field reference: public UnityEngine.Transform invalidReticleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_invalidReticleTransform();
    // Get instance field reference: public UnityEngine.GameObject playAreaPreviewCorner
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playAreaPreviewCorner();
    // Get instance field reference: public UnityEngine.GameObject playAreaPreviewSide
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playAreaPreviewSide();
    // Get instance field reference: public UnityEngine.Color pointerValidColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_pointerValidColor();
    // Get instance field reference: public UnityEngine.Color pointerInvalidColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_pointerInvalidColor();
    // Get instance field reference: public UnityEngine.Color pointerLockedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_pointerLockedColor();
    // Get instance field reference: public System.Boolean showPlayAreaMarker
    [[deprecated("Use field access instead!")]] bool& dyn_showPlayAreaMarker();
    // Get instance field reference: public System.Single teleportFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_teleportFadeTime();
    // Get instance field reference: public System.Single meshFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_meshFadeTime();
    // Get instance field reference: public System.Single arcDistance
    [[deprecated("Use field access instead!")]] float& dyn_arcDistance();
    // Get instance field reference: public UnityEngine.Transform onActivateObjectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_onActivateObjectTransform();
    // Get instance field reference: public UnityEngine.Transform onDeactivateObjectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_onDeactivateObjectTransform();
    // Get instance field reference: public System.Single activateObjectTime
    [[deprecated("Use field access instead!")]] float& dyn_activateObjectTime();
    // Get instance field reference: public System.Single deactivateObjectTime
    [[deprecated("Use field access instead!")]] float& dyn_deactivateObjectTime();
    // Get instance field reference: public UnityEngine.AudioSource pointerAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_pointerAudioSource();
    // Get instance field reference: public UnityEngine.AudioSource loopingAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_loopingAudioSource();
    // Get instance field reference: public UnityEngine.AudioSource headAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_headAudioSource();
    // Get instance field reference: public UnityEngine.AudioSource reticleAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_reticleAudioSource();
    // Get instance field reference: public UnityEngine.AudioClip teleportSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_teleportSound();
    // Get instance field reference: public UnityEngine.AudioClip pointerStartSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_pointerStartSound();
    // Get instance field reference: public UnityEngine.AudioClip pointerLoopSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_pointerLoopSound();
    // Get instance field reference: public UnityEngine.AudioClip pointerStopSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_pointerStopSound();
    // Get instance field reference: public UnityEngine.AudioClip goodHighlightSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_goodHighlightSound();
    // Get instance field reference: public UnityEngine.AudioClip badHighlightSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_badHighlightSound();
    // Get instance field reference: public System.Boolean debugFloor
    [[deprecated("Use field access instead!")]] bool& dyn_debugFloor();
    // Get instance field reference: public System.Boolean showOffsetReticle
    [[deprecated("Use field access instead!")]] bool& dyn_showOffsetReticle();
    // Get instance field reference: public UnityEngine.Transform offsetReticleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_offsetReticleTransform();
    // Get instance field reference: public UnityEngine.MeshRenderer floorDebugSphere
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_floorDebugSphere();
    // Get instance field reference: public UnityEngine.LineRenderer floorDebugLine
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_floorDebugLine();
    // Get instance field reference: private UnityEngine.LineRenderer pointerLineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_pointerLineRenderer();
    // Get instance field reference: private UnityEngine.GameObject teleportPointerObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_teleportPointerObject();
    // Get instance field reference: private UnityEngine.Transform pointerStartTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_pointerStartTransform();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand pointerHand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_pointerHand();
    // Get instance field reference: private Valve.VR.InteractionSystem.Player player
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& dyn_player();
    // Get instance field reference: private Valve.VR.InteractionSystem.TeleportArc teleportArc
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportArc*& dyn_teleportArc();
    // Get instance field reference: private System.Boolean visible
    [[deprecated("Use field access instead!")]] bool& dyn_visible();
    // Get instance field reference: private Valve.VR.InteractionSystem.TeleportMarkerBase[] teleportMarkers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::InteractionSystem::TeleportMarkerBase*>& dyn_teleportMarkers();
    // Get instance field reference: private Valve.VR.InteractionSystem.TeleportMarkerBase pointedAtTeleportMarker
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportMarkerBase*& dyn_pointedAtTeleportMarker();
    // Get instance field reference: private Valve.VR.InteractionSystem.TeleportMarkerBase teleportingToMarker
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportMarkerBase*& dyn_teleportingToMarker();
    // Get instance field reference: private UnityEngine.Vector3 pointedAtPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pointedAtPosition();
    // Get instance field reference: private UnityEngine.Vector3 prevPointedAtPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_prevPointedAtPosition();
    // Get instance field reference: private System.Boolean teleporting
    [[deprecated("Use field access instead!")]] bool& dyn_teleporting();
    // Get instance field reference: private System.Single currentFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_currentFadeTime();
    // Get instance field reference: private System.Single meshAlphaPercent
    [[deprecated("Use field access instead!")]] float& dyn_meshAlphaPercent();
    // Get instance field reference: private System.Single pointerShowStartTime
    [[deprecated("Use field access instead!")]] float& dyn_pointerShowStartTime();
    // Get instance field reference: private System.Single pointerHideStartTime
    [[deprecated("Use field access instead!")]] float& dyn_pointerHideStartTime();
    // Get instance field reference: private System.Boolean meshFading
    [[deprecated("Use field access instead!")]] bool& dyn_meshFading();
    // Get instance field reference: private System.Single fullTintAlpha
    [[deprecated("Use field access instead!")]] float& dyn_fullTintAlpha();
    // Get instance field reference: private System.Single invalidReticleMinScale
    [[deprecated("Use field access instead!")]] float& dyn_invalidReticleMinScale();
    // Get instance field reference: private System.Single invalidReticleMaxScale
    [[deprecated("Use field access instead!")]] float& dyn_invalidReticleMaxScale();
    // Get instance field reference: private System.Single invalidReticleMinScaleDistance
    [[deprecated("Use field access instead!")]] float& dyn_invalidReticleMinScaleDistance();
    // Get instance field reference: private System.Single invalidReticleMaxScaleDistance
    [[deprecated("Use field access instead!")]] float& dyn_invalidReticleMaxScaleDistance();
    // Get instance field reference: private UnityEngine.Vector3 invalidReticleScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_invalidReticleScale();
    // Get instance field reference: private UnityEngine.Quaternion invalidReticleTargetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_invalidReticleTargetRotation();
    // Get instance field reference: private UnityEngine.Transform playAreaPreviewTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playAreaPreviewTransform();
    // Get instance field reference: private UnityEngine.Transform[] playAreaPreviewCorners
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_playAreaPreviewCorners();
    // Get instance field reference: private UnityEngine.Transform[] playAreaPreviewSides
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_playAreaPreviewSides();
    // Get instance field reference: private System.Single loopingAudioMaxVolume
    [[deprecated("Use field access instead!")]] float& dyn_loopingAudioMaxVolume();
    // Get instance field reference: private UnityEngine.Coroutine hintCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_hintCoroutine();
    // Get instance field reference: private System.Boolean originalHoverLockState
    [[deprecated("Use field access instead!")]] bool& dyn_originalHoverLockState();
    // Get instance field reference: private Valve.VR.InteractionSystem.Interactable originalHoveringInteractable
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable*& dyn_originalHoveringInteractable();
    // Get instance field reference: private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleportWhileAttached
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*& dyn_allowTeleportWhileAttached();
    // Get instance field reference: private UnityEngine.Vector3 startingFeetOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingFeetOffset();
    // Get instance field reference: private System.Boolean movedFeetFarEnough
    [[deprecated("Use field access instead!")]] bool& dyn_movedFeetFarEnough();
    // Get instance field reference: private SteamVR_Events/Action chaperoneInfoInitializedAction
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& dyn_chaperoneInfoInitializedAction();
    // static public SteamVR_Events/Action`1<System.Single> ChangeSceneAction(UnityEngine.Events.UnityAction`1<System.Single> action)
    // Offset: 0xDC0EC0
    static ::GlobalNamespace::SteamVR_Events::Action_1<float>* ChangeSceneAction(::UnityEngine::Events::UnityAction_1<float>* action);
    // static public SteamVR_Events/Action`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerAction(UnityEngine.Events.UnityAction`1<Valve.VR.InteractionSystem.TeleportMarkerBase> action)
    // Offset: 0xDC0F64
    static ::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* PlayerAction(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* action);
    // static public SteamVR_Events/Action`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerPreAction(UnityEngine.Events.UnityAction`1<Valve.VR.InteractionSystem.TeleportMarkerBase> action)
    // Offset: 0xDC1008
    static ::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* PlayerPreAction(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* action);
    // static public Valve.VR.InteractionSystem.Teleport get_instance()
    // Offset: 0xDC10AC
    static ::Valve::VR::InteractionSystem::Teleport* get_instance();
    // private System.Void Awake()
    // Offset: 0xDC11D4
    void Awake();
    // private System.Void Start()
    // Offset: 0xDC13E8
    void Start();
    // private System.Void OnEnable()
    // Offset: 0xDC1A70
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xDC2DF0
    void OnDisable();
    // private System.Void CheckForSpawnPoint()
    // Offset: 0xDC1928
    void CheckForSpawnPoint();
    // public System.Void HideTeleportPointer()
    // Offset: 0xDC3374
    void HideTeleportPointer();
    // private System.Void Update()
    // Offset: 0xDC33FC
    void Update();
    // private System.Void UpdatePointer()
    // Offset: 0xDC4168
    void UpdatePointer();
    // private System.Void FixedUpdate()
    // Offset: 0xDC5998
    void FixedUpdate();
    // private System.Void OnChaperoneInfoInitialized()
    // Offset: 0xDC1AB0
    void OnChaperoneInfoInitialized();
    // private System.Void HidePointer()
    // Offset: 0xDC1510
    void HidePointer();
    // private System.Void ShowPointer(Valve.VR.InteractionSystem.Hand newPointerHand, Valve.VR.InteractionSystem.Hand oldPointerHand)
    // Offset: 0xDC39A8
    void ShowPointer(::Valve::VR::InteractionSystem::Hand* newPointerHand, ::Valve::VR::InteractionSystem::Hand* oldPointerHand);
    // private System.Void UpdateTeleportColors()
    // Offset: 0xDC5018
    void UpdateTeleportColors();
    // private System.Void PlayAudioClip(UnityEngine.AudioSource source, UnityEngine.AudioClip clip)
    // Offset: 0xDC600C
    void PlayAudioClip(::UnityEngine::AudioSource* source, ::UnityEngine::AudioClip* clip);
    // private System.Void PlayPointerHaptic(System.Boolean validLocation)
    // Offset: 0xDC6198
    void PlayPointerHaptic(bool validLocation);
    // private System.Void TryTeleportPlayer()
    // Offset: 0xDC3818
    void TryTeleportPlayer();
    // private System.Void InitiateTeleportFade()
    // Offset: 0xDC6228
    void InitiateTeleportFade();
    // private System.Void TeleportPlayer()
    // Offset: 0xDC2E30
    void TeleportPlayer();
    // private System.Void HighlightSelected(Valve.VR.InteractionSystem.TeleportMarkerBase hitTeleportMarker)
    // Offset: 0xDC5434
    void HighlightSelected(::Valve::VR::InteractionSystem::TeleportMarkerBase* hitTeleportMarker);
    // public System.Void ShowTeleportHint()
    // Offset: 0xDC66B4
    void ShowTeleportHint();
    // public System.Void CancelTeleportHint()
    // Offset: 0xDC64EC
    void CancelTeleportHint();
    // private System.Collections.IEnumerator TeleportHintCoroutine()
    // Offset: 0xDC66F0
    ::System::Collections::IEnumerator* TeleportHintCoroutine();
    // public System.Boolean IsEligibleForTeleport(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC6790
    bool IsEligibleForTeleport(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Boolean ShouldOverrideHoverLock()
    // Offset: 0xDC5F7C
    bool ShouldOverrideHoverLock();
    // private System.Boolean WasTeleportButtonReleased(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC3748
    bool WasTeleportButtonReleased(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Boolean IsTeleportButtonDown(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC4098
    bool IsTeleportButtonDown(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Boolean WasTeleportButtonPressed(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC38D8
    bool WasTeleportButtonPressed(::Valve::VR::InteractionSystem::Hand* hand);
    // private UnityEngine.Transform GetPointerStartTransform(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC60BC
    ::UnityEngine::Transform* GetPointerStartTransform(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void .ctor()
    // Offset: 0xDC6990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Teleport* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Teleport*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xDC6A9C
    static void _cctor();
  }; // Valve.VR.InteractionSystem.Teleport
  #pragma pack(pop)
  static check_size<sizeof(Teleport), 576 + sizeof(::GlobalNamespace::SteamVR_Events::Action*)> __Valve_VR_InteractionSystem_TeleportSizeCheck;
  static_assert(sizeof(Teleport) == 0x248);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::ChangeSceneAction
// Il2CppName: ChangeSceneAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR_Events::Action_1<float>* (*)(::UnityEngine::Events::UnityAction_1<float>*)>(&Valve::VR::InteractionSystem::Teleport::ChangeSceneAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "ChangeSceneAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::PlayerAction
// Il2CppName: PlayerAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* (*)(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*)>(&Valve::VR::InteractionSystem::Teleport::PlayerAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "TeleportMarkerBase")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "PlayerAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::PlayerPreAction
// Il2CppName: PlayerPreAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* (*)(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*)>(&Valve::VR::InteractionSystem::Teleport::PlayerPreAction)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "TeleportMarkerBase")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "PlayerPreAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::Teleport* (*)()>(&Valve::VR::InteractionSystem::Teleport::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::CheckForSpawnPoint
// Il2CppName: CheckForSpawnPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::CheckForSpawnPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "CheckForSpawnPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::HideTeleportPointer
// Il2CppName: HideTeleportPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::HideTeleportPointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "HideTeleportPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::UpdatePointer
// Il2CppName: UpdatePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::UpdatePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "UpdatePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::OnChaperoneInfoInitialized
// Il2CppName: OnChaperoneInfoInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::OnChaperoneInfoInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "OnChaperoneInfoInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::HidePointer
// Il2CppName: HidePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::HidePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "HidePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::ShowPointer
// Il2CppName: ShowPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*, ::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::ShowPointer)> {
  static const MethodInfo* get() {
    static auto* newPointerHand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    static auto* oldPointerHand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "ShowPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPointerHand, oldPointerHand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::UpdateTeleportColors
// Il2CppName: UpdateTeleportColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::UpdateTeleportColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "UpdateTeleportColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::PlayAudioClip
// Il2CppName: PlayAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)(::UnityEngine::AudioSource*, ::UnityEngine::AudioClip*)>(&Valve::VR::InteractionSystem::Teleport::PlayAudioClip)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "PlayAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, clip});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::PlayPointerHaptic
// Il2CppName: PlayPointerHaptic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)(bool)>(&Valve::VR::InteractionSystem::Teleport::PlayPointerHaptic)> {
  static const MethodInfo* get() {
    static auto* validLocation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "PlayPointerHaptic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validLocation});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::TryTeleportPlayer
// Il2CppName: TryTeleportPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::TryTeleportPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "TryTeleportPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::InitiateTeleportFade
// Il2CppName: InitiateTeleportFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::InitiateTeleportFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "InitiateTeleportFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::TeleportPlayer
// Il2CppName: TeleportPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::TeleportPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "TeleportPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::HighlightSelected
// Il2CppName: HighlightSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::TeleportMarkerBase*)>(&Valve::VR::InteractionSystem::Teleport::HighlightSelected)> {
  static const MethodInfo* get() {
    static auto* hitTeleportMarker = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "TeleportMarkerBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "HighlightSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitTeleportMarker});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::ShowTeleportHint
// Il2CppName: ShowTeleportHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::ShowTeleportHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "ShowTeleportHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::CancelTeleportHint
// Il2CppName: CancelTeleportHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::CancelTeleportHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "CancelTeleportHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::TeleportHintCoroutine
// Il2CppName: TeleportHintCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::TeleportHintCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "TeleportHintCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::IsEligibleForTeleport
// Il2CppName: IsEligibleForTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::IsEligibleForTeleport)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "IsEligibleForTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::ShouldOverrideHoverLock
// Il2CppName: ShouldOverrideHoverLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Teleport::*)()>(&Valve::VR::InteractionSystem::Teleport::ShouldOverrideHoverLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "ShouldOverrideHoverLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::WasTeleportButtonReleased
// Il2CppName: WasTeleportButtonReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::WasTeleportButtonReleased)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "WasTeleportButtonReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::IsTeleportButtonDown
// Il2CppName: IsTeleportButtonDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::IsTeleportButtonDown)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "IsTeleportButtonDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::WasTeleportButtonPressed
// Il2CppName: WasTeleportButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::WasTeleportButtonPressed)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "WasTeleportButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::GetPointerStartTransform
// Il2CppName: GetPointerStartTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Valve::VR::InteractionSystem::Teleport::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::Teleport::GetPointerStartTransform)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), "GetPointerStartTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Teleport::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Valve::VR::InteractionSystem::Teleport::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Teleport*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
