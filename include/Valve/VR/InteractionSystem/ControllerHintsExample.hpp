// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: ControllerHintsExample
  class ControllerHintsExample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::ControllerHintsExample);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::ControllerHintsExample*, "Valve.VR.InteractionSystem", "ControllerHintsExample");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.ControllerHintsExample
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerHintsExample : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5
    class $TestButtonHints$d__5;
    // Nested type: ::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6
    class $TestTextHints$d__6;
    public:
    // private UnityEngine.Coroutine buttonHintCoroutine
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Coroutine* buttonHintCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.Coroutine textHintCoroutine
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Coroutine* textHintCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Coroutine buttonHintCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_buttonHintCoroutine();
    // Get instance field reference: private UnityEngine.Coroutine textHintCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_textHintCoroutine();
    // public System.Void ShowButtonHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x11648B0
    void ShowButtonHints(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void ShowTextHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1164978
    void ShowTextHints(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void DisableHints()
    // Offset: 0x1164A40
    void DisableHints();
    // private System.Collections.IEnumerator TestButtonHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x1164904
    ::System::Collections::IEnumerator* TestButtonHints(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Collections.IEnumerator TestTextHints(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x11649CC
    ::System::Collections::IEnumerator* TestTextHints(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void .ctor()
    // Offset: 0x1164B5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerHintsExample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerHintsExample*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.ControllerHintsExample
  #pragma pack(pop)
  static check_size<sizeof(ControllerHintsExample), 32 + sizeof(::UnityEngine::Coroutine*)> __Valve_VR_InteractionSystem_ControllerHintsExampleSizeCheck;
  static_assert(sizeof(ControllerHintsExample) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::ShowButtonHints
// Il2CppName: ShowButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHintsExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerHintsExample::ShowButtonHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHintsExample*), "ShowButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::ShowTextHints
// Il2CppName: ShowTextHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHintsExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerHintsExample::ShowTextHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHintsExample*), "ShowTextHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::DisableHints
// Il2CppName: DisableHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::ControllerHintsExample::*)()>(&Valve::VR::InteractionSystem::ControllerHintsExample::DisableHints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHintsExample*), "DisableHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::TestButtonHints
// Il2CppName: TestButtonHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::ControllerHintsExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerHintsExample::TestButtonHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHintsExample*), "TestButtonHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::TestTextHints
// Il2CppName: TestTextHints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Valve::VR::InteractionSystem::ControllerHintsExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::ControllerHintsExample::TestTextHints)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::ControllerHintsExample*), "TestTextHints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::ControllerHintsExample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
