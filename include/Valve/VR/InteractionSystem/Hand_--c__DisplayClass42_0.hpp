// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0*, "Valve.VR.InteractionSystem", "Hand/<>c__DisplayClass42_0");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass42_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD089C
  class Hand::$$c__DisplayClass42_0 : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject objectToDetach
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* objectToDetach;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::GameObject*
    constexpr operator ::UnityEngine::GameObject*() const noexcept {
      return objectToDetach;
    }
    // Get instance field reference: public UnityEngine.GameObject objectToDetach
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_objectToDetach();
    // public System.Void .ctor()
    // Offset: 0x11682A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hand::$$c__DisplayClass42_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hand::$$c__DisplayClass42_0*, creationType>()));
    }
    // System.Boolean <DetachObject>b__0(Valve.VR.InteractionSystem.Hand/AttachedObject l)
    // Offset: 0x1169F44
    bool $DetachObject$b__0(::Valve::VR::InteractionSystem::Hand::AttachedObject l);
  }; // Valve.VR.InteractionSystem.Hand/<>c__DisplayClass42_0
  #pragma pack(pop)
  static check_size<sizeof(Hand::$$c__DisplayClass42_0), 16 + sizeof(::UnityEngine::GameObject*)> __Valve_VR_InteractionSystem_Hand_$$c__DisplayClass42_0SizeCheck;
  static_assert(sizeof(Hand::$$c__DisplayClass42_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::$DetachObject$b__0
// Il2CppName: <DetachObject>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::*)(::Valve::VR::InteractionSystem::Hand::AttachedObject)>(&Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::$DetachObject$b__0)> {
  static const MethodInfo* get() {
    static auto* l = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand/AttachedObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0*), "<DetachObject>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{l});
  }
};
