// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SteamVR_Controller
#include "GlobalNamespace/SteamVR_Controller.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Player
  class Player;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::Player);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::Player*, "Valve.VR.InteractionSystem", "Player");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.Player
  // [TokenAttribute] Offset: FFFFFFFF
  class Player : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [TooltipAttribute] Offset: 0xADDE40
    // public UnityEngine.Transform trackingOriginTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* trackingOriginTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xADDE78
    // public UnityEngine.Transform[] hmdTransforms
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> hmdTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // [TooltipAttribute] Offset: 0xADDEB0
    // public Valve.VR.InteractionSystem.Hand[] hands
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Valve::VR::InteractionSystem::Hand*> hands;
    // Field size check
    static_assert(sizeof(::ArrayW<::Valve::VR::InteractionSystem::Hand*>) == 0x8);
    // [TooltipAttribute] Offset: 0xADDEE8
    // public UnityEngine.Collider headCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Collider* headCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // [TooltipAttribute] Offset: 0xADDF20
    // public UnityEngine.GameObject rigSteamVR
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* rigSteamVR;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [TooltipAttribute] Offset: 0xADDF58
    // public UnityEngine.GameObject rig2DFallback
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* rig2DFallback;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [TooltipAttribute] Offset: 0xADDF90
    // public UnityEngine.Transform audioListener
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* audioListener;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean allowToggleTo2D
    // Size: 0x1
    // Offset: 0x50
    bool allowToggleTo2D;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Valve.VR.InteractionSystem.Player _instance
    static ::Valve::VR::InteractionSystem::Player* _get__instance();
    // Set static field: static private Valve.VR.InteractionSystem.Player _instance
    static void _set__instance(::Valve::VR::InteractionSystem::Player* value);
    // Get instance field reference: public UnityEngine.Transform trackingOriginTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_trackingOriginTransform();
    // Get instance field reference: public UnityEngine.Transform[] hmdTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_hmdTransforms();
    // Get instance field reference: public Valve.VR.InteractionSystem.Hand[] hands
    [[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::InteractionSystem::Hand*>& dyn_hands();
    // Get instance field reference: public UnityEngine.Collider headCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_headCollider();
    // Get instance field reference: public UnityEngine.GameObject rigSteamVR
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rigSteamVR();
    // Get instance field reference: public UnityEngine.GameObject rig2DFallback
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rig2DFallback();
    // Get instance field reference: public UnityEngine.Transform audioListener
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_audioListener();
    // Get instance field reference: public System.Boolean allowToggleTo2D
    [[deprecated("Use field access instead!")]] bool& dyn_allowToggleTo2D();
    // static public Valve.VR.InteractionSystem.Player get_instance()
    // Offset: 0xDBBDB4
    static ::Valve::VR::InteractionSystem::Player* get_instance();
    // public System.Int32 get_handCount()
    // Offset: 0xDBD33C
    int get_handCount();
    // public Valve.VR.InteractionSystem.Hand GetHand(System.Int32 i)
    // Offset: 0xDBD408
    ::Valve::VR::InteractionSystem::Hand* GetHand(int i);
    // public Valve.VR.InteractionSystem.Hand get_leftHand()
    // Offset: 0xDBD510
    ::Valve::VR::InteractionSystem::Hand* get_leftHand();
    // public Valve.VR.InteractionSystem.Hand get_rightHand()
    // Offset: 0xDBD654
    ::Valve::VR::InteractionSystem::Hand* get_rightHand();
    // public SteamVR_Controller/Device get_leftController()
    // Offset: 0xDBD79C
    ::GlobalNamespace::SteamVR_Controller::Device* get_leftController();
    // public SteamVR_Controller/Device get_rightController()
    // Offset: 0xDBD834
    ::GlobalNamespace::SteamVR_Controller::Device* get_rightController();
    // public UnityEngine.Transform get_hmdTransform()
    // Offset: 0xDBBE80
    ::UnityEngine::Transform* get_hmdTransform();
    // public System.Single get_eyeHeight()
    // Offset: 0xDBD8CC
    float get_eyeHeight();
    // public UnityEngine.Vector3 get_feetPositionGuess()
    // Offset: 0xDBDA84
    ::UnityEngine::Vector3 get_feetPositionGuess();
    // public UnityEngine.Vector3 get_bodyDirectionGuess()
    // Offset: 0xDBDC6C
    ::UnityEngine::Vector3 get_bodyDirectionGuess();
    // private System.Void Awake()
    // Offset: 0xDBDE70
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0xDBDEF8
    void OnEnable();
    // private System.Void OnDrawGizmos()
    // Offset: 0xDBE1D8
    void OnDrawGizmos();
    // public System.Void Draw2DDebug()
    // Offset: 0xDBE7FC
    void Draw2DDebug();
    // private System.Void ActivateRig(UnityEngine.GameObject rig)
    // Offset: 0xDBDF88
    void ActivateRig(::UnityEngine::GameObject* rig);
    // public System.Void PlayerShotSelf()
    // Offset: 0xDBE970
    void PlayerShotSelf();
    // public System.Void .ctor()
    // Offset: 0xDBE974
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Player* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Player*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.Player
  #pragma pack(pop)
  static check_size<sizeof(Player), 80 + sizeof(bool)> __Valve_VR_InteractionSystem_PlayerSizeCheck;
  static_assert(sizeof(Player) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::Player* (*)()>(&Valve::VR::InteractionSystem::Player::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_handCount
// Il2CppName: get_handCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_handCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_handCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::GetHand
// Il2CppName: GetHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::Hand* (Valve::VR::InteractionSystem::Player::*)(int)>(&Valve::VR::InteractionSystem::Player::GetHand)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "GetHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_leftHand
// Il2CppName: get_leftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::Hand* (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_leftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_leftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_rightHand
// Il2CppName: get_rightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::InteractionSystem::Hand* (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_rightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_rightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_leftController
// Il2CppName: get_leftController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR_Controller::Device* (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_leftController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_leftController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_rightController
// Il2CppName: get_rightController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR_Controller::Device* (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_rightController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_rightController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_hmdTransform
// Il2CppName: get_hmdTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_hmdTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_hmdTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_eyeHeight
// Il2CppName: get_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_eyeHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_feetPositionGuess
// Il2CppName: get_feetPositionGuess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_feetPositionGuess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_feetPositionGuess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::get_bodyDirectionGuess
// Il2CppName: get_bodyDirectionGuess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::get_bodyDirectionGuess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "get_bodyDirectionGuess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::Draw2DDebug
// Il2CppName: Draw2DDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::Draw2DDebug)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "Draw2DDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::ActivateRig
// Il2CppName: ActivateRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)(::UnityEngine::GameObject*)>(&Valve::VR::InteractionSystem::Player::ActivateRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "ActivateRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::PlayerShotSelf
// Il2CppName: PlayerShotSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::Player::*)()>(&Valve::VR::InteractionSystem::Player::PlayerShotSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::Player*), "PlayerShotSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::Player::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
