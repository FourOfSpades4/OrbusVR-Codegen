// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SoundPlayOneshot
  class SoundPlayOneshot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::SoundPlayOneshot);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::SoundPlayOneshot*, "Valve.VR.InteractionSystem", "SoundPlayOneshot");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.SoundPlayOneshot
  // [TokenAttribute] Offset: FFFFFFFF
  class SoundPlayOneshot : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.AudioClip[] waveFiles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::AudioClip*> waveFiles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private UnityEngine.AudioSource thisAudioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* thisAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single volMin
    // Size: 0x4
    // Offset: 0x28
    float volMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single volMax
    // Size: 0x4
    // Offset: 0x2C
    float volMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pitchMin
    // Size: 0x4
    // Offset: 0x30
    float pitchMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pitchMax
    // Size: 0x4
    // Offset: 0x34
    float pitchMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean playOnAwake
    // Size: 0x1
    // Offset: 0x38
    bool playOnAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.AudioClip[] waveFiles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_waveFiles();
    // Get instance field reference: private UnityEngine.AudioSource thisAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_thisAudioSource();
    // Get instance field reference: public System.Single volMin
    [[deprecated("Use field access instead!")]] float& dyn_volMin();
    // Get instance field reference: public System.Single volMax
    [[deprecated("Use field access instead!")]] float& dyn_volMax();
    // Get instance field reference: public System.Single pitchMin
    [[deprecated("Use field access instead!")]] float& dyn_pitchMin();
    // Get instance field reference: public System.Single pitchMax
    [[deprecated("Use field access instead!")]] float& dyn_pitchMax();
    // Get instance field reference: public System.Boolean playOnAwake
    [[deprecated("Use field access instead!")]] bool& dyn_playOnAwake();
    // private System.Void Awake()
    // Offset: 0xDBF9EC
    void Awake();
    // public System.Void Play()
    // Offset: 0xDBC168
    void Play();
    // public System.Void Pause()
    // Offset: 0xDBFA5C
    void Pause();
    // public System.Void UnPause()
    // Offset: 0xDBFAF8
    void UnPause();
    // public System.Void .ctor()
    // Offset: 0xDBFB94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SoundPlayOneshot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SoundPlayOneshot*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.SoundPlayOneshot
  #pragma pack(pop)
  static check_size<sizeof(SoundPlayOneshot), 56 + sizeof(bool)> __Valve_VR_InteractionSystem_SoundPlayOneshotSizeCheck;
  static_assert(sizeof(SoundPlayOneshot) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundPlayOneshot::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundPlayOneshot::*)()>(&Valve::VR::InteractionSystem::SoundPlayOneshot::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundPlayOneshot*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundPlayOneshot::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundPlayOneshot::*)()>(&Valve::VR::InteractionSystem::SoundPlayOneshot::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundPlayOneshot*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundPlayOneshot::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundPlayOneshot::*)()>(&Valve::VR::InteractionSystem::SoundPlayOneshot::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundPlayOneshot*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundPlayOneshot::UnPause
// Il2CppName: UnPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SoundPlayOneshot::*)()>(&Valve::VR::InteractionSystem::SoundPlayOneshot::UnPause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SoundPlayOneshot*), "UnPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SoundPlayOneshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
