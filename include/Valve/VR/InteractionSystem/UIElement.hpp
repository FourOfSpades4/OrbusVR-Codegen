// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.InteractionSystem.CustomEvents
#include "Valve/VR/InteractionSystem/CustomEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: UIElement
  class UIElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::UIElement);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::UIElement*, "Valve.VR.InteractionSystem", "UIElement");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.UIElement
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0BF8
  class UIElement : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Valve.VR.InteractionSystem.CustomEvents/UnityEventHand onHandClick
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::CustomEvents::UnityEventHand* onHandClick;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::CustomEvents::UnityEventHand*) == 0x8);
    // private Valve.VR.InteractionSystem.Hand currentHand
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::InteractionSystem::Hand* currentHand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Valve.VR.InteractionSystem.CustomEvents/UnityEventHand onHandClick
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::CustomEvents::UnityEventHand*& dyn_onHandClick();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand currentHand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_currentHand();
    // private System.Void Awake()
    // Offset: 0xDCAA6C
    void Awake();
    // private System.Void OnHandHoverBegin(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDCAB74
    void OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandHoverEnd(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDCAC48
    void OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void HandHoverUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDCAD20
    void HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnButtonClick()
    // Offset: 0xDCAE1C
    void OnButtonClick();
    // public System.Void .ctor()
    // Offset: 0xDCAE84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIElement*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.UIElement
  #pragma pack(pop)
  static check_size<sizeof(UIElement), 32 + sizeof(::Valve::VR::InteractionSystem::Hand*)> __Valve_VR_InteractionSystem_UIElementSizeCheck;
  static_assert(sizeof(UIElement) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::UIElement::*)()>(&Valve::VR::InteractionSystem::UIElement::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::UIElement*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::OnHandHoverBegin
// Il2CppName: OnHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::UIElement::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::UIElement::OnHandHoverBegin)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::UIElement*), "OnHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::OnHandHoverEnd
// Il2CppName: OnHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::UIElement::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::UIElement::OnHandHoverEnd)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::UIElement*), "OnHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::HandHoverUpdate
// Il2CppName: HandHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::UIElement::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::UIElement::HandHoverUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::UIElement*), "HandHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::OnButtonClick
// Il2CppName: OnButtonClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::UIElement::*)()>(&Valve::VR::InteractionSystem::UIElement::OnButtonClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::UIElement*), "OnButtonClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::UIElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
