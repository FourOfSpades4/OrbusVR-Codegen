// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/AttachmentFlags
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextMesh
  class TextMesh;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Skipping declaration: Hand because it is already included!
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: InteractableExample
  class InteractableExample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::InteractableExample);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::InteractableExample*, "Valve.VR.InteractionSystem", "InteractableExample");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.InteractableExample
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0D80
  class InteractableExample : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.TextMesh textMesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::TextMesh* textMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextMesh*) == 0x8);
    // private UnityEngine.Vector3 oldPosition
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 oldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion oldRotation
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion oldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single attachTime
    // Size: 0x4
    // Offset: 0x3C
    float attachTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
    // Size: 0x4
    // Offset: 0x40
    ::Valve::VR::InteractionSystem::Hand::AttachmentFlags attachmentFlags;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand::AttachmentFlags) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.TextMesh textMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& dyn_textMesh();
    // Get instance field reference: private UnityEngine.Vector3 oldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_oldPosition();
    // Get instance field reference: private UnityEngine.Quaternion oldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_oldRotation();
    // Get instance field reference: private System.Single attachTime
    [[deprecated("Use field access instead!")]] float& dyn_attachTime();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& dyn_attachmentFlags();
    // private System.Void Awake()
    // Offset: 0x116C0C4
    void Awake();
    // private System.Void OnHandHoverBegin(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C13C
    void OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandHoverEnd(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C1DC
    void OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void HandHoverUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C240
    void HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnAttachedToHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C4F4
    void OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnDetachedFromHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C5A4
    void OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void HandAttachedUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C644
    void HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandFocusAcquired(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C72C
    void OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnHandFocusLost(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C730
    void OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void .ctor()
    // Offset: 0x116C734
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableExample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableExample*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.InteractableExample
  #pragma pack(pop)
  static check_size<sizeof(InteractableExample), 64 + sizeof(::Valve::VR::InteractionSystem::Hand::AttachmentFlags)> __Valve_VR_InteractionSystem_InteractableExampleSizeCheck;
  static_assert(sizeof(InteractableExample) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)()>(&Valve::VR::InteractionSystem::InteractableExample::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnHandHoverBegin
// Il2CppName: OnHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnHandHoverBegin)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnHandHoverEnd
// Il2CppName: OnHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnHandHoverEnd)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::HandHoverUpdate
// Il2CppName: HandHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::HandHoverUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "HandHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnAttachedToHand
// Il2CppName: OnAttachedToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnAttachedToHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnAttachedToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnDetachedFromHand
// Il2CppName: OnDetachedFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnDetachedFromHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnDetachedFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::HandAttachedUpdate
// Il2CppName: HandAttachedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::HandAttachedUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "HandAttachedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnHandFocusAcquired
// Il2CppName: OnHandFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnHandFocusAcquired)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnHandFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::OnHandFocusLost
// Il2CppName: OnHandFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableExample::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableExample::OnHandFocusLost)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableExample*), "OnHandFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableExample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
