// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: LinearMapping
  class LinearMapping;
  // Forward declaring type: Hand
  class Hand;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: LinearDrive
  class LinearDrive;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::LinearDrive);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::LinearDrive*, "Valve.VR.InteractionSystem", "LinearDrive");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.LinearDrive
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0A6C
  class LinearDrive : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform startPosition
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform endPosition
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* endPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public Valve.VR.InteractionSystem.LinearMapping linearMapping
    // Size: 0x8
    // Offset: 0x28
    ::Valve::VR::InteractionSystem::LinearMapping* linearMapping;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::LinearMapping*) == 0x8);
    // public System.Boolean repositionGameObject
    // Size: 0x1
    // Offset: 0x30
    bool repositionGameObject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean maintainMomemntum
    // Size: 0x1
    // Offset: 0x31
    bool maintainMomemntum;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: maintainMomemntum and: momemtumDampenRate
    char __padding4[0x2] = {};
    // public System.Single momemtumDampenRate
    // Size: 0x4
    // Offset: 0x34
    float momemtumDampenRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single initialMappingOffset
    // Size: 0x4
    // Offset: 0x38
    float initialMappingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 numMappingChangeSamples
    // Size: 0x4
    // Offset: 0x3C
    int numMappingChangeSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single[] mappingChangeSamples
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> mappingChangeSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single prevMapping
    // Size: 0x4
    // Offset: 0x48
    float prevMapping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single mappingChangeRate
    // Size: 0x4
    // Offset: 0x4C
    float mappingChangeRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 sampleCount
    // Size: 0x4
    // Offset: 0x50
    int sampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_startPosition();
    // Get instance field reference: public UnityEngine.Transform endPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_endPosition();
    // Get instance field reference: public Valve.VR.InteractionSystem.LinearMapping linearMapping
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& dyn_linearMapping();
    // Get instance field reference: public System.Boolean repositionGameObject
    [[deprecated("Use field access instead!")]] bool& dyn_repositionGameObject();
    // Get instance field reference: public System.Boolean maintainMomemntum
    [[deprecated("Use field access instead!")]] bool& dyn_maintainMomemntum();
    // Get instance field reference: public System.Single momemtumDampenRate
    [[deprecated("Use field access instead!")]] float& dyn_momemtumDampenRate();
    // Get instance field reference: private System.Single initialMappingOffset
    [[deprecated("Use field access instead!")]] float& dyn_initialMappingOffset();
    // Get instance field reference: private System.Int32 numMappingChangeSamples
    [[deprecated("Use field access instead!")]] int& dyn_numMappingChangeSamples();
    // Get instance field reference: private System.Single[] mappingChangeSamples
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_mappingChangeSamples();
    // Get instance field reference: private System.Single prevMapping
    [[deprecated("Use field access instead!")]] float& dyn_prevMapping();
    // Get instance field reference: private System.Single mappingChangeRate
    [[deprecated("Use field access instead!")]] float& dyn_mappingChangeRate();
    // Get instance field reference: private System.Int32 sampleCount
    [[deprecated("Use field access instead!")]] int& dyn_sampleCount();
    // private System.Void Awake()
    // Offset: 0xDBA5CC
    void Awake();
    // private System.Void Start()
    // Offset: 0xDBA624
    void Start();
    // private System.Void HandHoverUpdate(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDBA9F0
    void HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void CalculateMappingChangeRate()
    // Offset: 0xDBAD1C
    void CalculateMappingChangeRate();
    // private System.Void UpdateLinearMapping(UnityEngine.Transform tr)
    // Offset: 0xDBA774
    void UpdateLinearMapping(::UnityEngine::Transform* tr);
    // private System.Single CalculateLinearMapping(UnityEngine.Transform tr)
    // Offset: 0xDBAB80
    float CalculateLinearMapping(::UnityEngine::Transform* tr);
    // private System.Void Update()
    // Offset: 0xDBAE2C
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDBB044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinearDrive* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinearDrive*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.LinearDrive
  #pragma pack(pop)
  static check_size<sizeof(LinearDrive), 80 + sizeof(int)> __Valve_VR_InteractionSystem_LinearDriveSizeCheck;
  static_assert(sizeof(LinearDrive) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)()>(&Valve::VR::InteractionSystem::LinearDrive::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)()>(&Valve::VR::InteractionSystem::LinearDrive::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::HandHoverUpdate
// Il2CppName: HandHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::LinearDrive::HandHoverUpdate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "HandHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::CalculateMappingChangeRate
// Il2CppName: CalculateMappingChangeRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)()>(&Valve::VR::InteractionSystem::LinearDrive::CalculateMappingChangeRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "CalculateMappingChangeRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::UpdateLinearMapping
// Il2CppName: UpdateLinearMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)(::UnityEngine::Transform*)>(&Valve::VR::InteractionSystem::LinearDrive::UpdateLinearMapping)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "UpdateLinearMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::CalculateLinearMapping
// Il2CppName: CalculateLinearMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Valve::VR::InteractionSystem::LinearDrive::*)(::UnityEngine::Transform*)>(&Valve::VR::InteractionSystem::LinearDrive::CalculateLinearMapping)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "CalculateLinearMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearDrive::*)()>(&Valve::VR::InteractionSystem::LinearDrive::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearDrive*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearDrive::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
