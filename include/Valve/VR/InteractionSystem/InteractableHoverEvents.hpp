// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: InteractableHoverEvents
  class InteractableHoverEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::InteractableHoverEvents);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::InteractableHoverEvents*, "Valve.VR.InteractionSystem", "InteractableHoverEvents");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.InteractableHoverEvents
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD09A4
  class InteractableHoverEvents : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Events.UnityEvent onHandHoverBegin
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Events::UnityEvent* onHandHoverBegin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onHandHoverEnd
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* onHandHoverEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onAttachedToHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* onAttachedToHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onDetachedFromHand
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onDetachedFromHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Events.UnityEvent onHandHoverBegin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onHandHoverBegin();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onHandHoverEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onHandHoverEnd();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onAttachedToHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onAttachedToHand();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onDetachedFromHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onDetachedFromHand();
    // private System.Void OnHandHoverBegin()
    // Offset: 0x116C744
    void OnHandHoverBegin();
    // private System.Void OnHandHoverEnd()
    // Offset: 0x116C774
    void OnHandHoverEnd();
    // private System.Void OnAttachedToHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C7A4
    void OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnDetachedFromHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0x116C7D4
    void OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand);
    // public System.Void .ctor()
    // Offset: 0x116C804
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableHoverEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableHoverEvents*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.InteractableHoverEvents
  #pragma pack(pop)
  static check_size<sizeof(InteractableHoverEvents), 48 + sizeof(::UnityEngine::Events::UnityEvent*)> __Valve_VR_InteractionSystem_InteractableHoverEventsSizeCheck;
  static_assert(sizeof(InteractableHoverEvents) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverBegin
// Il2CppName: OnHandHoverBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableHoverEvents::*)()>(&Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableHoverEvents*), "OnHandHoverBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverEnd
// Il2CppName: OnHandHoverEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableHoverEvents::*)()>(&Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableHoverEvents*), "OnHandHoverEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableHoverEvents::OnAttachedToHand
// Il2CppName: OnAttachedToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableHoverEvents::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableHoverEvents::OnAttachedToHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableHoverEvents*), "OnAttachedToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableHoverEvents::OnDetachedFromHand
// Il2CppName: OnDetachedFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableHoverEvents::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::InteractableHoverEvents::OnDetachedFromHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableHoverEvents*), "OnDetachedFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableHoverEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
