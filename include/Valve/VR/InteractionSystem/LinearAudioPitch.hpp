// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: LinearMapping
  class LinearMapping;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: LinearAudioPitch
  class LinearAudioPitch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::LinearAudioPitch);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::LinearAudioPitch*, "Valve.VR.InteractionSystem", "LinearAudioPitch");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.LinearAudioPitch
  // [TokenAttribute] Offset: FFFFFFFF
  class LinearAudioPitch : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Valve.VR.InteractionSystem.LinearMapping linearMapping
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::LinearMapping* linearMapping;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::LinearMapping*) == 0x8);
    // public UnityEngine.AnimationCurve pitchCurve
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* pitchCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Single minPitch
    // Size: 0x4
    // Offset: 0x28
    float minPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxPitch
    // Size: 0x4
    // Offset: 0x2C
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean applyContinuously
    // Size: 0x1
    // Offset: 0x30
    bool applyContinuously;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyContinuously and: audioSource
    char __padding4[0x7] = {};
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Valve.VR.InteractionSystem.LinearMapping linearMapping
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& dyn_linearMapping();
    // Get instance field reference: public UnityEngine.AnimationCurve pitchCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_pitchCurve();
    // Get instance field reference: public System.Single minPitch
    [[deprecated("Use field access instead!")]] float& dyn_minPitch();
    // Get instance field reference: public System.Single maxPitch
    [[deprecated("Use field access instead!")]] float& dyn_maxPitch();
    // Get instance field reference: public System.Boolean applyContinuously
    [[deprecated("Use field access instead!")]] bool& dyn_applyContinuously();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // private System.Void Awake()
    // Offset: 0xDB9F68
    void Awake();
    // private System.Void Update()
    // Offset: 0xDBA048
    void Update();
    // private System.Void Apply()
    // Offset: 0xDBA058
    void Apply();
    // public System.Void .ctor()
    // Offset: 0xDBA13C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinearAudioPitch* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinearAudioPitch*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.LinearAudioPitch
  #pragma pack(pop)
  static check_size<sizeof(LinearAudioPitch), 56 + sizeof(::UnityEngine::AudioSource*)> __Valve_VR_InteractionSystem_LinearAudioPitchSizeCheck;
  static_assert(sizeof(LinearAudioPitch) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearAudioPitch::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearAudioPitch::*)()>(&Valve::VR::InteractionSystem::LinearAudioPitch::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearAudioPitch*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearAudioPitch::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearAudioPitch::*)()>(&Valve::VR::InteractionSystem::LinearAudioPitch::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearAudioPitch*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearAudioPitch::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::LinearAudioPitch::*)()>(&Valve::VR::InteractionSystem::LinearAudioPitch::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::LinearAudioPitch*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::LinearAudioPitch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
