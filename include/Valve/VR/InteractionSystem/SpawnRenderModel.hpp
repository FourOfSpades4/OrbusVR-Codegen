// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_RenderModel
  class SteamVR_RenderModel;
}
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SpawnRenderModel
  class SpawnRenderModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::SpawnRenderModel);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::SpawnRenderModel*, "Valve.VR.InteractionSystem", "SpawnRenderModel");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.SpawnRenderModel
  // [TokenAttribute] Offset: FFFFFFFF
  class SpawnRenderModel : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material[] materials
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Material*> materials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private SteamVR_RenderModel[] renderModels
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::SteamVR_RenderModel*> renderModels;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SteamVR_RenderModel*>) == 0x8);
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x28
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*) == 0x8);
    // private SteamVR_Events/Action renderModelLoadedAction
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SteamVR_Events::Action* renderModelLoadedAction;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_Events::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.SpawnRenderModel> spawnRenderModels
    static ::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::SpawnRenderModel*>* _get_spawnRenderModels();
    // Set static field: static private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.SpawnRenderModel> spawnRenderModels
    static void _set_spawnRenderModels(::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::SpawnRenderModel*>* value);
    // Get static field: static private System.Int32 lastFrameUpdated
    static int _get_lastFrameUpdated();
    // Set static field: static private System.Int32 lastFrameUpdated
    static void _set_lastFrameUpdated(int value);
    // Get static field: static private System.Int32 spawnRenderModelUpdateIndex
    static int _get_spawnRenderModelUpdateIndex();
    // Set static field: static private System.Int32 spawnRenderModelUpdateIndex
    static void _set_spawnRenderModelUpdateIndex(int value);
    // Get instance field reference: public UnityEngine.Material[] materials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_materials();
    // Get instance field reference: private SteamVR_RenderModel[] renderModels
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SteamVR_RenderModel*>& dyn_renderModels();
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& dyn_renderers();
    // Get instance field reference: private SteamVR_Events/Action renderModelLoadedAction
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& dyn_renderModelLoadedAction();
    // private System.Void Awake()
    // Offset: 0xDBFF50
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0xDC001C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xDC04B8
    void OnDisable();
    // private System.Void OnAttachedToHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC06B8
    void OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void OnDetachedFromHand(Valve.VR.InteractionSystem.Hand hand)
    // Offset: 0xDC06C0
    void OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand);
    // private System.Void Update()
    // Offset: 0xDC06C8
    void Update();
    // private System.Void ShowController()
    // Offset: 0xDC00D0
    void ShowController();
    // private System.Void HideController()
    // Offset: 0xDC056C
    void HideController();
    // private System.Void OnRenderModelLoaded(SteamVR_RenderModel renderModel, System.Boolean success)
    // Offset: 0xDC09B8
    void OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool success);
    // public System.Void .ctor()
    // Offset: 0xDC0DDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpawnRenderModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpawnRenderModel*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xDC0E4C
    static void _cctor();
  }; // Valve.VR.InteractionSystem.SpawnRenderModel
  #pragma pack(pop)
  static check_size<sizeof(SpawnRenderModel), 56 + sizeof(::GlobalNamespace::SteamVR_Events::Action*)> __Valve_VR_InteractionSystem_SpawnRenderModelSizeCheck;
  static_assert(sizeof(SpawnRenderModel) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::OnAttachedToHand
// Il2CppName: OnAttachedToHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::SpawnRenderModel::OnAttachedToHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "OnAttachedToHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::OnDetachedFromHand
// Il2CppName: OnDetachedFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)(::Valve::VR::InteractionSystem::Hand*)>(&Valve::VR::InteractionSystem::SpawnRenderModel::OnDetachedFromHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Valve.VR.InteractionSystem", "Hand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "OnDetachedFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::ShowController
// Il2CppName: ShowController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::ShowController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "ShowController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::HideController
// Il2CppName: HideController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::HideController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "HideController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::OnRenderModelLoaded
// Il2CppName: OnRenderModelLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnRenderModel::*)(::GlobalNamespace::SteamVR_RenderModel*, bool)>(&Valve::VR::InteractionSystem::SpawnRenderModel::OnRenderModelLoaded)> {
  static const MethodInfo* get() {
    static auto* renderModel = &::il2cpp_utils::GetClassFromName("", "SteamVR_RenderModel")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), "OnRenderModelLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderModel, success});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnRenderModel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Valve::VR::InteractionSystem::SpawnRenderModel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnRenderModel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
