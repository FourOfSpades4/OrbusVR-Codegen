// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR::InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: SpawnAndAttachAfterControllerIsTracking
  class SpawnAndAttachAfterControllerIsTracking;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking*, "Valve.VR.InteractionSystem", "SpawnAndAttachAfterControllerIsTracking");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.SpawnAndAttachAfterControllerIsTracking
  // [TokenAttribute] Offset: FFFFFFFF
  class SpawnAndAttachAfterControllerIsTracking : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Valve.VR.InteractionSystem.Hand hand
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::InteractionSystem::Hand* hand;
    // Field size check
    static_assert(sizeof(::Valve::VR::InteractionSystem::Hand*) == 0x8);
    // public UnityEngine.GameObject itemPrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* itemPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Valve.VR.InteractionSystem.Hand hand
    [[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& dyn_hand();
    // Get instance field reference: public UnityEngine.GameObject itemPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_itemPrefab();
    // private System.Void Start()
    // Offset: 0xDBFB9C
    void Start();
    // private System.Void Update()
    // Offset: 0xDBFBF4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDBFE24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpawnAndAttachAfterControllerIsTracking* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpawnAndAttachAfterControllerIsTracking*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.SpawnAndAttachAfterControllerIsTracking
  #pragma pack(pop)
  static check_size<sizeof(SpawnAndAttachAfterControllerIsTracking), 32 + sizeof(::UnityEngine::GameObject*)> __Valve_VR_InteractionSystem_SpawnAndAttachAfterControllerIsTrackingSizeCheck;
  static_assert(sizeof(SpawnAndAttachAfterControllerIsTracking) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::*)()>(&Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::*)()>(&Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
