// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Forward declaring type: InteractableButtonEvents
  class InteractableButtonEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::InteractionSystem::InteractableButtonEvents);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::InteractionSystem::InteractableButtonEvents*, "Valve.VR.InteractionSystem", "InteractableButtonEvents");
// Type namespace: Valve.VR.InteractionSystem
namespace Valve::VR::InteractionSystem {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.InteractionSystem.InteractableButtonEvents
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0940
  class InteractableButtonEvents : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Events.UnityEvent onTriggerDown
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Events::UnityEvent* onTriggerDown;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onTriggerUp
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* onTriggerUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onGripDown
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* onGripDown;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onGripUp
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* onGripUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onTouchpadDown
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* onTouchpadDown;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onTouchpadUp
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent* onTouchpadUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onTouchpadTouch
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Events::UnityEvent* onTouchpadTouch;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onTouchpadRelease
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityEvent* onTouchpadRelease;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTriggerDown
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTriggerDown();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTriggerUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTriggerUp();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onGripDown
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onGripDown();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onGripUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onGripUp();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTouchpadDown
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTouchpadDown();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTouchpadUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTouchpadUp();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTouchpadTouch
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTouchpadTouch();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onTouchpadRelease
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onTouchpadRelease();
    // private System.Void Update()
    // Offset: 0x116BE40
    void Update();
    // public System.Void .ctor()
    // Offset: 0x116C0BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableButtonEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableButtonEvents*, creationType>()));
    }
  }; // Valve.VR.InteractionSystem.InteractableButtonEvents
  #pragma pack(pop)
  static check_size<sizeof(InteractableButtonEvents), 80 + sizeof(::UnityEngine::Events::UnityEvent*)> __Valve_VR_InteractionSystem_InteractableButtonEventsSizeCheck;
  static_assert(sizeof(InteractableButtonEvents) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableButtonEvents::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::InteractionSystem::InteractableButtonEvents::*)()>(&Valve::VR::InteractionSystem::InteractableButtonEvents::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::InteractionSystem::InteractableButtonEvents*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::InteractionSystem::InteractableButtonEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
