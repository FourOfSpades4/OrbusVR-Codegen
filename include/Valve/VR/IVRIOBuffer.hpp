// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: IVRIOBuffer
  struct IVRIOBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::IVRIOBuffer, "Valve.VR", "IVRIOBuffer");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.IVRIOBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct IVRIOBuffer/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Valve::VR::IVRIOBuffer::_Open
    class _Open;
    // Nested type: ::Valve::VR::IVRIOBuffer::_Close
    class _Close;
    // Nested type: ::Valve::VR::IVRIOBuffer::_Read
    class _Read;
    // Nested type: ::Valve::VR::IVRIOBuffer::_Write
    class _Write;
    // Nested type: ::Valve::VR::IVRIOBuffer::_PropertyContainer
    class _PropertyContainer;
    public:
    // Valve.VR.IVRIOBuffer/_Open Open
    // Size: 0x8
    // Offset: 0x0
    ::Valve::VR::IVRIOBuffer::_Open* Open;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRIOBuffer::_Open*) == 0x8);
    // Valve.VR.IVRIOBuffer/_Close Close
    // Size: 0x8
    // Offset: 0x8
    ::Valve::VR::IVRIOBuffer::_Close* Close;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRIOBuffer::_Close*) == 0x8);
    // Valve.VR.IVRIOBuffer/_Read Read
    // Size: 0x8
    // Offset: 0x10
    ::Valve::VR::IVRIOBuffer::_Read* Read;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRIOBuffer::_Read*) == 0x8);
    // Valve.VR.IVRIOBuffer/_Write Write
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::IVRIOBuffer::_Write* Write;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRIOBuffer::_Write*) == 0x8);
    // Valve.VR.IVRIOBuffer/_PropertyContainer PropertyContainer
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::IVRIOBuffer::_PropertyContainer* PropertyContainer;
    // Field size check
    static_assert(sizeof(::Valve::VR::IVRIOBuffer::_PropertyContainer*) == 0x8);
    public:
    // Creating value type constructor for type: IVRIOBuffer
    constexpr IVRIOBuffer(::Valve::VR::IVRIOBuffer::_Open* Open_ = {}, ::Valve::VR::IVRIOBuffer::_Close* Close_ = {}, ::Valve::VR::IVRIOBuffer::_Read* Read_ = {}, ::Valve::VR::IVRIOBuffer::_Write* Write_ = {}, ::Valve::VR::IVRIOBuffer::_PropertyContainer* PropertyContainer_ = {}) noexcept : Open{Open_}, Close{Close_}, Read{Read_}, Write{Write_}, PropertyContainer{PropertyContainer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: Valve.VR.IVRIOBuffer/_Open Open
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer::_Open*& dyn_Open();
    // Get instance field reference: Valve.VR.IVRIOBuffer/_Close Close
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer::_Close*& dyn_Close();
    // Get instance field reference: Valve.VR.IVRIOBuffer/_Read Read
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer::_Read*& dyn_Read();
    // Get instance field reference: Valve.VR.IVRIOBuffer/_Write Write
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer::_Write*& dyn_Write();
    // Get instance field reference: Valve.VR.IVRIOBuffer/_PropertyContainer PropertyContainer
    [[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer::_PropertyContainer*& dyn_PropertyContainer();
  }; // Valve.VR.IVRIOBuffer
  #pragma pack(pop)
  static check_size<sizeof(IVRIOBuffer), 32 + sizeof(::Valve::VR::IVRIOBuffer::_PropertyContainer*)> __Valve_VR_IVRIOBufferSizeCheck;
  static_assert(sizeof(IVRIOBuffer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
