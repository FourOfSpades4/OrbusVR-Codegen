// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: EVRFinger
  struct EVRFinger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::EVRFinger, "Valve.VR", "EVRFinger");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.EVRFinger
  // [TokenAttribute] Offset: FFFFFFFF
  struct EVRFinger/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EVRFinger
    constexpr EVRFinger(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Valve.VR.EVRFinger Thumb
    static constexpr const int Thumb = 0;
    // Get static field: static public Valve.VR.EVRFinger Thumb
    static ::Valve::VR::EVRFinger _get_Thumb();
    // Set static field: static public Valve.VR.EVRFinger Thumb
    static void _set_Thumb(::Valve::VR::EVRFinger value);
    // static field const value: static public Valve.VR.EVRFinger Index
    static constexpr const int Index = 1;
    // Get static field: static public Valve.VR.EVRFinger Index
    static ::Valve::VR::EVRFinger _get_Index();
    // Set static field: static public Valve.VR.EVRFinger Index
    static void _set_Index(::Valve::VR::EVRFinger value);
    // static field const value: static public Valve.VR.EVRFinger Middle
    static constexpr const int Middle = 2;
    // Get static field: static public Valve.VR.EVRFinger Middle
    static ::Valve::VR::EVRFinger _get_Middle();
    // Set static field: static public Valve.VR.EVRFinger Middle
    static void _set_Middle(::Valve::VR::EVRFinger value);
    // static field const value: static public Valve.VR.EVRFinger Ring
    static constexpr const int Ring = 3;
    // Get static field: static public Valve.VR.EVRFinger Ring
    static ::Valve::VR::EVRFinger _get_Ring();
    // Set static field: static public Valve.VR.EVRFinger Ring
    static void _set_Ring(::Valve::VR::EVRFinger value);
    // static field const value: static public Valve.VR.EVRFinger Pinky
    static constexpr const int Pinky = 4;
    // Get static field: static public Valve.VR.EVRFinger Pinky
    static ::Valve::VR::EVRFinger _get_Pinky();
    // Set static field: static public Valve.VR.EVRFinger Pinky
    static void _set_Pinky(::Valve::VR::EVRFinger value);
    // static field const value: static public Valve.VR.EVRFinger Count
    static constexpr const int Count = 5;
    // Get static field: static public Valve.VR.EVRFinger Count
    static ::Valve::VR::EVRFinger _get_Count();
    // Set static field: static public Valve.VR.EVRFinger Count
    static void _set_Count(::Valve::VR::EVRFinger value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Valve.VR.EVRFinger
  #pragma pack(pop)
  static check_size<sizeof(EVRFinger), 0 + sizeof(int)> __Valve_VR_EVRFingerSizeCheck;
  static_assert(sizeof(EVRFinger) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
