// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: EVRSkeletalReferencePose
  struct EVRSkeletalReferencePose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::EVRSkeletalReferencePose, "Valve.VR", "EVRSkeletalReferencePose");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.EVRSkeletalReferencePose
  // [TokenAttribute] Offset: FFFFFFFF
  struct EVRSkeletalReferencePose/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EVRSkeletalReferencePose
    constexpr EVRSkeletalReferencePose(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Valve.VR.EVRSkeletalReferencePose BindPose
    static constexpr const int BindPose = 0;
    // Get static field: static public Valve.VR.EVRSkeletalReferencePose BindPose
    static ::Valve::VR::EVRSkeletalReferencePose _get_BindPose();
    // Set static field: static public Valve.VR.EVRSkeletalReferencePose BindPose
    static void _set_BindPose(::Valve::VR::EVRSkeletalReferencePose value);
    // static field const value: static public Valve.VR.EVRSkeletalReferencePose OpenHand
    static constexpr const int OpenHand = 1;
    // Get static field: static public Valve.VR.EVRSkeletalReferencePose OpenHand
    static ::Valve::VR::EVRSkeletalReferencePose _get_OpenHand();
    // Set static field: static public Valve.VR.EVRSkeletalReferencePose OpenHand
    static void _set_OpenHand(::Valve::VR::EVRSkeletalReferencePose value);
    // static field const value: static public Valve.VR.EVRSkeletalReferencePose Fist
    static constexpr const int Fist = 2;
    // Get static field: static public Valve.VR.EVRSkeletalReferencePose Fist
    static ::Valve::VR::EVRSkeletalReferencePose _get_Fist();
    // Set static field: static public Valve.VR.EVRSkeletalReferencePose Fist
    static void _set_Fist(::Valve::VR::EVRSkeletalReferencePose value);
    // static field const value: static public Valve.VR.EVRSkeletalReferencePose GripLimit
    static constexpr const int GripLimit = 3;
    // Get static field: static public Valve.VR.EVRSkeletalReferencePose GripLimit
    static ::Valve::VR::EVRSkeletalReferencePose _get_GripLimit();
    // Set static field: static public Valve.VR.EVRSkeletalReferencePose GripLimit
    static void _set_GripLimit(::Valve::VR::EVRSkeletalReferencePose value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Valve.VR.EVRSkeletalReferencePose
  #pragma pack(pop)
  static check_size<sizeof(EVRSkeletalReferencePose), 0 + sizeof(int)> __Valve_VR_EVRSkeletalReferencePoseSizeCheck;
  static_assert(sizeof(EVRSkeletalReferencePose) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
