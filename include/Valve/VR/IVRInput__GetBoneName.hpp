// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.IVRInput
#include "Valve/VR/IVRInput.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: EVRInputError
  struct EVRInputError;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Valve::VR::IVRInput::_GetBoneName);
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::IVRInput::_GetBoneName*, "Valve.VR", "IVRInput/_GetBoneName");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.IVRInput/_GetBoneName
  // [TokenAttribute] Offset: FFFFFFFF
  // [UnmanagedFunctionPointerAttribute] Offset: AD03F8
  class IVRInput::_GetBoneName : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x2399B84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IVRInput::_GetBoneName* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IVRInput::_GetBoneName*, creationType>(object, method)));
    }
    // public Valve.VR.EVRInputError Invoke(System.UInt64 action, System.Int32 nBoneIndex, System.Text.StringBuilder pchBoneName, System.UInt32 unNameBufferSize)
    // Offset: 0x2399B94
    ::Valve::VR::EVRInputError Invoke(uint64_t action, int nBoneIndex, ::System::Text::StringBuilder* pchBoneName, uint unNameBufferSize);
    // public System.IAsyncResult BeginInvoke(System.UInt64 action, System.Int32 nBoneIndex, System.Text.StringBuilder pchBoneName, System.UInt32 unNameBufferSize, System.AsyncCallback callback, System.Object object)
    // Offset: 0x239A074
    ::System::IAsyncResult* BeginInvoke(uint64_t action, int nBoneIndex, ::System::Text::StringBuilder* pchBoneName, uint unNameBufferSize, ::System::AsyncCallback* callback, ::Il2CppObject* object);
    // public Valve.VR.EVRInputError EndInvoke(System.IAsyncResult result)
    // Offset: 0x239A148
    ::Valve::VR::EVRInputError EndInvoke(::System::IAsyncResult* result);
  }; // Valve.VR.IVRInput/_GetBoneName
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::IVRInput::_GetBoneName::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::IVRInput::_GetBoneName::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVRInputError (Valve::VR::IVRInput::_GetBoneName::*)(uint64_t, int, ::System::Text::StringBuilder*, uint)>(&Valve::VR::IVRInput::_GetBoneName::Invoke)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* nBoneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pchBoneName = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unNameBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRInput::_GetBoneName*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, nBoneIndex, pchBoneName, unNameBufferSize});
  }
};
// Writing MetadataGetter for method: Valve::VR::IVRInput::_GetBoneName::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (Valve::VR::IVRInput::_GetBoneName::*)(uint64_t, int, ::System::Text::StringBuilder*, uint, ::System::AsyncCallback*, ::Il2CppObject*)>(&Valve::VR::IVRInput::_GetBoneName::BeginInvoke)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* nBoneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pchBoneName = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* unNameBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* object = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRInput::_GetBoneName*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, nBoneIndex, pchBoneName, unNameBufferSize, callback, object});
  }
};
// Writing MetadataGetter for method: Valve::VR::IVRInput::_GetBoneName::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::EVRInputError (Valve::VR::IVRInput::_GetBoneName::*)(::System::IAsyncResult*)>(&Valve::VR::IVRInput::_GetBoneName::EndInvoke)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRInput::_GetBoneName*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
