// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Forward declaring type: Compositor_FrameTiming
  struct Compositor_FrameTiming;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Valve::VR::Compositor_FrameTiming, "Valve.VR", "Compositor_FrameTiming");
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0xB8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.Compositor_FrameTiming
  // [TokenAttribute] Offset: FFFFFFFF
  struct Compositor_FrameTiming/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 m_nSize
    // Size: 0x4
    // Offset: 0x0
    uint m_nSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nFrameIndex
    // Size: 0x4
    // Offset: 0x4
    uint m_nFrameIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nNumFramePresents
    // Size: 0x4
    // Offset: 0x8
    uint m_nNumFramePresents;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nNumMisPresented
    // Size: 0x4
    // Offset: 0xC
    uint m_nNumMisPresented;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nNumDroppedFrames
    // Size: 0x4
    // Offset: 0x10
    uint m_nNumDroppedFrames;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nReprojectionFlags
    // Size: 0x4
    // Offset: 0x14
    uint m_nReprojectionFlags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Double m_flSystemTimeInSeconds
    // Size: 0x8
    // Offset: 0x18
    double m_flSystemTimeInSeconds;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Single m_flPreSubmitGpuMs
    // Size: 0x4
    // Offset: 0x20
    float m_flPreSubmitGpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flPostSubmitGpuMs
    // Size: 0x4
    // Offset: 0x24
    float m_flPostSubmitGpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flTotalRenderGpuMs
    // Size: 0x4
    // Offset: 0x28
    float m_flTotalRenderGpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorRenderGpuMs
    // Size: 0x4
    // Offset: 0x2C
    float m_flCompositorRenderGpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorRenderCpuMs
    // Size: 0x4
    // Offset: 0x30
    float m_flCompositorRenderCpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorIdleCpuMs
    // Size: 0x4
    // Offset: 0x34
    float m_flCompositorIdleCpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flClientFrameIntervalMs
    // Size: 0x4
    // Offset: 0x38
    float m_flClientFrameIntervalMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flPresentCallCpuMs
    // Size: 0x4
    // Offset: 0x3C
    float m_flPresentCallCpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flWaitForPresentCpuMs
    // Size: 0x4
    // Offset: 0x40
    float m_flWaitForPresentCpuMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flSubmitFrameMs
    // Size: 0x4
    // Offset: 0x44
    float m_flSubmitFrameMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flWaitGetPosesCalledMs
    // Size: 0x4
    // Offset: 0x48
    float m_flWaitGetPosesCalledMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flNewPosesReadyMs
    // Size: 0x4
    // Offset: 0x4C
    float m_flNewPosesReadyMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flNewFrameReadyMs
    // Size: 0x4
    // Offset: 0x50
    float m_flNewFrameReadyMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorUpdateStartMs
    // Size: 0x4
    // Offset: 0x54
    float m_flCompositorUpdateStartMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorUpdateEndMs
    // Size: 0x4
    // Offset: 0x58
    float m_flCompositorUpdateEndMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_flCompositorRenderStartMs
    // Size: 0x4
    // Offset: 0x5C
    float m_flCompositorRenderStartMs;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Valve.VR.TrackedDevicePose_t m_HmdPose
    // Size: 0x4E
    // Offset: 0x60
    ::Valve::VR::TrackedDevicePose_t m_HmdPose;
    // Field size check
    static_assert(sizeof(::Valve::VR::TrackedDevicePose_t) == 0x4E);
    // Padding between fields: m_HmdPose and: m_nNumVSyncsReadyForUse
    char __padding23[0x2] = {};
    // public System.UInt32 m_nNumVSyncsReadyForUse
    // Size: 0x4
    // Offset: 0xB0
    uint m_nNumVSyncsReadyForUse;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 m_nNumVSyncsToFirstView
    // Size: 0x4
    // Offset: 0xB4
    uint m_nNumVSyncsToFirstView;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: Compositor_FrameTiming
    constexpr Compositor_FrameTiming(uint m_nSize_ = {}, uint m_nFrameIndex_ = {}, uint m_nNumFramePresents_ = {}, uint m_nNumMisPresented_ = {}, uint m_nNumDroppedFrames_ = {}, uint m_nReprojectionFlags_ = {}, double m_flSystemTimeInSeconds_ = {}, float m_flPreSubmitGpuMs_ = {}, float m_flPostSubmitGpuMs_ = {}, float m_flTotalRenderGpuMs_ = {}, float m_flCompositorRenderGpuMs_ = {}, float m_flCompositorRenderCpuMs_ = {}, float m_flCompositorIdleCpuMs_ = {}, float m_flClientFrameIntervalMs_ = {}, float m_flPresentCallCpuMs_ = {}, float m_flWaitForPresentCpuMs_ = {}, float m_flSubmitFrameMs_ = {}, float m_flWaitGetPosesCalledMs_ = {}, float m_flNewPosesReadyMs_ = {}, float m_flNewFrameReadyMs_ = {}, float m_flCompositorUpdateStartMs_ = {}, float m_flCompositorUpdateEndMs_ = {}, float m_flCompositorRenderStartMs_ = {}, ::Valve::VR::TrackedDevicePose_t m_HmdPose_ = {}, uint m_nNumVSyncsReadyForUse_ = {}, uint m_nNumVSyncsToFirstView_ = {}) noexcept : m_nSize{m_nSize_}, m_nFrameIndex{m_nFrameIndex_}, m_nNumFramePresents{m_nNumFramePresents_}, m_nNumMisPresented{m_nNumMisPresented_}, m_nNumDroppedFrames{m_nNumDroppedFrames_}, m_nReprojectionFlags{m_nReprojectionFlags_}, m_flSystemTimeInSeconds{m_flSystemTimeInSeconds_}, m_flPreSubmitGpuMs{m_flPreSubmitGpuMs_}, m_flPostSubmitGpuMs{m_flPostSubmitGpuMs_}, m_flTotalRenderGpuMs{m_flTotalRenderGpuMs_}, m_flCompositorRenderGpuMs{m_flCompositorRenderGpuMs_}, m_flCompositorRenderCpuMs{m_flCompositorRenderCpuMs_}, m_flCompositorIdleCpuMs{m_flCompositorIdleCpuMs_}, m_flClientFrameIntervalMs{m_flClientFrameIntervalMs_}, m_flPresentCallCpuMs{m_flPresentCallCpuMs_}, m_flWaitForPresentCpuMs{m_flWaitForPresentCpuMs_}, m_flSubmitFrameMs{m_flSubmitFrameMs_}, m_flWaitGetPosesCalledMs{m_flWaitGetPosesCalledMs_}, m_flNewPosesReadyMs{m_flNewPosesReadyMs_}, m_flNewFrameReadyMs{m_flNewFrameReadyMs_}, m_flCompositorUpdateStartMs{m_flCompositorUpdateStartMs_}, m_flCompositorUpdateEndMs{m_flCompositorUpdateEndMs_}, m_flCompositorRenderStartMs{m_flCompositorRenderStartMs_}, m_HmdPose{m_HmdPose_}, m_nNumVSyncsReadyForUse{m_nNumVSyncsReadyForUse_}, m_nNumVSyncsToFirstView{m_nNumVSyncsToFirstView_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 m_nSize
    [[deprecated("Use field access instead!")]] uint& dyn_m_nSize();
    // Get instance field reference: public System.UInt32 m_nFrameIndex
    [[deprecated("Use field access instead!")]] uint& dyn_m_nFrameIndex();
    // Get instance field reference: public System.UInt32 m_nNumFramePresents
    [[deprecated("Use field access instead!")]] uint& dyn_m_nNumFramePresents();
    // Get instance field reference: public System.UInt32 m_nNumMisPresented
    [[deprecated("Use field access instead!")]] uint& dyn_m_nNumMisPresented();
    // Get instance field reference: public System.UInt32 m_nNumDroppedFrames
    [[deprecated("Use field access instead!")]] uint& dyn_m_nNumDroppedFrames();
    // Get instance field reference: public System.UInt32 m_nReprojectionFlags
    [[deprecated("Use field access instead!")]] uint& dyn_m_nReprojectionFlags();
    // Get instance field reference: public System.Double m_flSystemTimeInSeconds
    [[deprecated("Use field access instead!")]] double& dyn_m_flSystemTimeInSeconds();
    // Get instance field reference: public System.Single m_flPreSubmitGpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flPreSubmitGpuMs();
    // Get instance field reference: public System.Single m_flPostSubmitGpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flPostSubmitGpuMs();
    // Get instance field reference: public System.Single m_flTotalRenderGpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flTotalRenderGpuMs();
    // Get instance field reference: public System.Single m_flCompositorRenderGpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorRenderGpuMs();
    // Get instance field reference: public System.Single m_flCompositorRenderCpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorRenderCpuMs();
    // Get instance field reference: public System.Single m_flCompositorIdleCpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorIdleCpuMs();
    // Get instance field reference: public System.Single m_flClientFrameIntervalMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flClientFrameIntervalMs();
    // Get instance field reference: public System.Single m_flPresentCallCpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flPresentCallCpuMs();
    // Get instance field reference: public System.Single m_flWaitForPresentCpuMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flWaitForPresentCpuMs();
    // Get instance field reference: public System.Single m_flSubmitFrameMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flSubmitFrameMs();
    // Get instance field reference: public System.Single m_flWaitGetPosesCalledMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flWaitGetPosesCalledMs();
    // Get instance field reference: public System.Single m_flNewPosesReadyMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flNewPosesReadyMs();
    // Get instance field reference: public System.Single m_flNewFrameReadyMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flNewFrameReadyMs();
    // Get instance field reference: public System.Single m_flCompositorUpdateStartMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorUpdateStartMs();
    // Get instance field reference: public System.Single m_flCompositorUpdateEndMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorUpdateEndMs();
    // Get instance field reference: public System.Single m_flCompositorRenderStartMs
    [[deprecated("Use field access instead!")]] float& dyn_m_flCompositorRenderStartMs();
    // Get instance field reference: public Valve.VR.TrackedDevicePose_t m_HmdPose
    [[deprecated("Use field access instead!")]] ::Valve::VR::TrackedDevicePose_t& dyn_m_HmdPose();
    // Get instance field reference: public System.UInt32 m_nNumVSyncsReadyForUse
    [[deprecated("Use field access instead!")]] uint& dyn_m_nNumVSyncsReadyForUse();
    // Get instance field reference: public System.UInt32 m_nNumVSyncsToFirstView
    [[deprecated("Use field access instead!")]] uint& dyn_m_nNumVSyncsToFirstView();
  }; // Valve.VR.Compositor_FrameTiming
  #pragma pack(pop)
  static check_size<sizeof(Compositor_FrameTiming), 180 + sizeof(uint)> __Valve_VR_Compositor_FrameTimingSizeCheck;
  static_assert(sizeof(Compositor_FrameTiming) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
