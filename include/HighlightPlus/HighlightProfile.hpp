// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HighlightPlus.GlowPassData
#include "HighlightPlus/GlowPassData.hpp"
// Including type: HighlightPlus.SeeThroughMode
#include "HighlightPlus/SeeThroughMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HighlightPlus
namespace HighlightPlus {
  // Forward declaring type: HighlightEffect
  class HighlightEffect;
}
// Completed forward declares
// Type namespace: HighlightPlus
namespace HighlightPlus {
  // Forward declaring type: HighlightProfile
  class HighlightProfile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightPlus::HighlightProfile);
DEFINE_IL2CPP_ARG_TYPE(::HighlightPlus::HighlightProfile*, "HighlightPlus", "HighlightProfile");
// Type namespace: HighlightPlus
namespace HighlightPlus {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: HighlightPlus.HighlightProfile
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: AD2280
  // [HelpURLAttribute] Offset: AD2280
  class HighlightProfile : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.Single fadeInDuration
    // Size: 0x4
    // Offset: 0x18
    float fadeInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeOutDuration
    // Size: 0x4
    // Offset: 0x1C
    float fadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE1664
    // public System.Single overlay
    // Size: 0x4
    // Offset: 0x20
    float overlay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color overlayColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color overlayColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single overlayAnimationSpeed
    // Size: 0x4
    // Offset: 0x34
    float overlayAnimationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE167C
    // public System.Single overlayMinIntensity
    // Size: 0x4
    // Offset: 0x38
    float overlayMinIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE1694
    // public System.Single overlayBlending
    // Size: 0x4
    // Offset: 0x3C
    float overlayBlending;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE16AC
    // public System.Single outline
    // Size: 0x4
    // Offset: 0x40
    float outline;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color outlineColor
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Color outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single outlineWidth
    // Size: 0x4
    // Offset: 0x54
    float outlineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean outlineHQ
    // Size: 0x1
    // Offset: 0x58
    bool outlineHQ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: outlineHQ and: glow
    char __padding10[0x3] = {};
    // [RangeAttribute] Offset: 0xAE16C4
    // public System.Single glow
    // Size: 0x4
    // Offset: 0x5C
    float glow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single glowWidth
    // Size: 0x4
    // Offset: 0x60
    float glowWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean glowHQ
    // Size: 0x1
    // Offset: 0x64
    bool glowHQ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean glowDithering
    // Size: 0x1
    // Offset: 0x65
    bool glowDithering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: glowDithering and: glowMagicNumber1
    char __padding14[0x2] = {};
    // public System.Single glowMagicNumber1
    // Size: 0x4
    // Offset: 0x68
    float glowMagicNumber1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single glowMagicNumber2
    // Size: 0x4
    // Offset: 0x6C
    float glowMagicNumber2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single glowAnimationSpeed
    // Size: 0x4
    // Offset: 0x70
    float glowAnimationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: glowAnimationSpeed and: glowPasses
    char __padding17[0x4] = {};
    // public HighlightPlus.GlowPassData[] glowPasses
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::HighlightPlus::GlowPassData> glowPasses;
    // Field size check
    static_assert(sizeof(::ArrayW<::HighlightPlus::GlowPassData>) == 0x8);
    // [RangeAttribute] Offset: 0xAE16DC
    // public System.Single innerGlow
    // Size: 0x4
    // Offset: 0x80
    float innerGlow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE16F4
    // public System.Single innerGlowWidth
    // Size: 0x4
    // Offset: 0x84
    float innerGlowWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color innerGlowColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color innerGlowColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public HighlightPlus.SeeThroughMode seeThrough
    // Size: 0x4
    // Offset: 0x98
    ::HighlightPlus::SeeThroughMode seeThrough;
    // Field size check
    static_assert(sizeof(::HighlightPlus::SeeThroughMode) == 0x4);
    // [RangeAttribute] Offset: 0xAE170C
    // public System.Single seeThroughIntensity
    // Size: 0x4
    // Offset: 0x9C
    float seeThroughIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAE1724
    // public System.Single seeThroughTintAlpha
    // Size: 0x4
    // Offset: 0xA0
    float seeThroughTintAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color seeThroughTintColor
    // Size: 0x10
    // Offset: 0xA4
    ::UnityEngine::Color seeThroughTintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single fadeInDuration
    [[deprecated("Use field access instead!")]] float& dyn_fadeInDuration();
    // Get instance field reference: public System.Single fadeOutDuration
    [[deprecated("Use field access instead!")]] float& dyn_fadeOutDuration();
    // Get instance field reference: public System.Single overlay
    [[deprecated("Use field access instead!")]] float& dyn_overlay();
    // Get instance field reference: public UnityEngine.Color overlayColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_overlayColor();
    // Get instance field reference: public System.Single overlayAnimationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_overlayAnimationSpeed();
    // Get instance field reference: public System.Single overlayMinIntensity
    [[deprecated("Use field access instead!")]] float& dyn_overlayMinIntensity();
    // Get instance field reference: public System.Single overlayBlending
    [[deprecated("Use field access instead!")]] float& dyn_overlayBlending();
    // Get instance field reference: public System.Single outline
    [[deprecated("Use field access instead!")]] float& dyn_outline();
    // Get instance field reference: public UnityEngine.Color outlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_outlineColor();
    // Get instance field reference: public System.Single outlineWidth
    [[deprecated("Use field access instead!")]] float& dyn_outlineWidth();
    // Get instance field reference: public System.Boolean outlineHQ
    [[deprecated("Use field access instead!")]] bool& dyn_outlineHQ();
    // Get instance field reference: public System.Single glow
    [[deprecated("Use field access instead!")]] float& dyn_glow();
    // Get instance field reference: public System.Single glowWidth
    [[deprecated("Use field access instead!")]] float& dyn_glowWidth();
    // Get instance field reference: public System.Boolean glowHQ
    [[deprecated("Use field access instead!")]] bool& dyn_glowHQ();
    // Get instance field reference: public System.Boolean glowDithering
    [[deprecated("Use field access instead!")]] bool& dyn_glowDithering();
    // Get instance field reference: public System.Single glowMagicNumber1
    [[deprecated("Use field access instead!")]] float& dyn_glowMagicNumber1();
    // Get instance field reference: public System.Single glowMagicNumber2
    [[deprecated("Use field access instead!")]] float& dyn_glowMagicNumber2();
    // Get instance field reference: public System.Single glowAnimationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_glowAnimationSpeed();
    // Get instance field reference: public HighlightPlus.GlowPassData[] glowPasses
    [[deprecated("Use field access instead!")]] ::ArrayW<::HighlightPlus::GlowPassData>& dyn_glowPasses();
    // Get instance field reference: public System.Single innerGlow
    [[deprecated("Use field access instead!")]] float& dyn_innerGlow();
    // Get instance field reference: public System.Single innerGlowWidth
    [[deprecated("Use field access instead!")]] float& dyn_innerGlowWidth();
    // Get instance field reference: public UnityEngine.Color innerGlowColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_innerGlowColor();
    // Get instance field reference: public HighlightPlus.SeeThroughMode seeThrough
    [[deprecated("Use field access instead!")]] ::HighlightPlus::SeeThroughMode& dyn_seeThrough();
    // Get instance field reference: public System.Single seeThroughIntensity
    [[deprecated("Use field access instead!")]] float& dyn_seeThroughIntensity();
    // Get instance field reference: public System.Single seeThroughTintAlpha
    [[deprecated("Use field access instead!")]] float& dyn_seeThroughTintAlpha();
    // Get instance field reference: public UnityEngine.Color seeThroughTintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_seeThroughTintColor();
    // public System.Void Load(HighlightPlus.HighlightEffect effect)
    // Offset: 0x149B7AC
    void Load(::HighlightPlus::HighlightEffect* effect);
    // public System.Void Save(HighlightPlus.HighlightEffect effect)
    // Offset: 0x149BC5C
    void Save(::HighlightPlus::HighlightEffect* effect);
    // private HighlightPlus.GlowPassData[] GetGlowPassesCopy(HighlightPlus.GlowPassData[] glowPasses)
    // Offset: 0x149BAB0
    ::ArrayW<::HighlightPlus::GlowPassData> GetGlowPassesCopy(::ArrayW<::HighlightPlus::GlowPassData> glowPasses);
    // public System.Void .ctor()
    // Offset: 0x149BF84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightProfile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightPlus::HighlightProfile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightProfile*, creationType>()));
    }
  }; // HighlightPlus.HighlightProfile
  #pragma pack(pop)
  static check_size<sizeof(HighlightProfile), 164 + sizeof(::UnityEngine::Color)> __HighlightPlus_HighlightProfileSizeCheck;
  static_assert(sizeof(HighlightProfile) == 0xB4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightPlus::HighlightProfile::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightProfile::*)(::HighlightPlus::HighlightEffect*)>(&HighlightPlus::HighlightProfile::Load)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("HighlightPlus", "HighlightEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightProfile*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightProfile::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightProfile::*)(::HighlightPlus::HighlightEffect*)>(&HighlightPlus::HighlightProfile::Save)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("HighlightPlus", "HighlightEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightProfile*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightProfile::GetGlowPassesCopy
// Il2CppName: GetGlowPassesCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::HighlightPlus::GlowPassData> (HighlightPlus::HighlightProfile::*)(::ArrayW<::HighlightPlus::GlowPassData>)>(&HighlightPlus::HighlightProfile::GetGlowPassesCopy)> {
  static const MethodInfo* get() {
    static auto* glowPasses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HighlightPlus", "GlowPassData"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightProfile*), "GetGlowPassesCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glowPasses});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightProfile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
