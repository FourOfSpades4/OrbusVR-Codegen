// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HighlightPlus.TriggerMode
#include "HighlightPlus/TriggerMode.hpp"
// Including type: HighlightPlus.RayCastSource
#include "HighlightPlus/RayCastSource.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HighlightPlus
namespace HighlightPlus {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: HighlightPlus
namespace HighlightPlus {
  // Forward declaring type: HighlightTrigger
  class HighlightTrigger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HighlightPlus::HighlightTrigger);
DEFINE_IL2CPP_ARG_TYPE(::HighlightPlus::HighlightTrigger*, "HighlightPlus", "HighlightTrigger");
// Type namespace: HighlightPlus
namespace HighlightPlus {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: HighlightPlus.HighlightTrigger
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD23B8
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: AD23B8
  class HighlightTrigger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HighlightPlus::HighlightTrigger::$DoRayCast$d__9
    class $DoRayCast$d__9;
    public:
    // [TooltipAttribute] Offset: 0xAE173C
    // public HighlightPlus.TriggerMode triggerMode
    // Size: 0x4
    // Offset: 0x18
    ::HighlightPlus::TriggerMode triggerMode;
    // Field size check
    static_assert(sizeof(::HighlightPlus::TriggerMode) == 0x4);
    // Padding between fields: triggerMode and: raycastCamera
    char __padding0[0x4] = {};
    // public UnityEngine.Camera raycastCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* raycastCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public HighlightPlus.RayCastSource raycastSource
    // Size: 0x4
    // Offset: 0x28
    ::HighlightPlus::RayCastSource raycastSource;
    // Field size check
    static_assert(sizeof(::HighlightPlus::RayCastSource) == 0x4);
    // Padding between fields: raycastSource and: colliders
    char __padding2[0x4] = {};
    // public UnityEngine.Collider[] colliders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.Collider currentCollider
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Collider* currentCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 MAX_RAYCAST_HITS
    static constexpr const int MAX_RAYCAST_HITS = 100;
    // Get static field: static private System.Int32 MAX_RAYCAST_HITS
    static int _get_MAX_RAYCAST_HITS();
    // Set static field: static private System.Int32 MAX_RAYCAST_HITS
    static void _set_MAX_RAYCAST_HITS(int value);
    // Get static field: static private UnityEngine.RaycastHit[] hits
    static ::ArrayW<::UnityEngine::RaycastHit> _get_hits();
    // Set static field: static private UnityEngine.RaycastHit[] hits
    static void _set_hits(::ArrayW<::UnityEngine::RaycastHit> value);
    // Get instance field reference: public HighlightPlus.TriggerMode triggerMode
    [[deprecated("Use field access instead!")]] ::HighlightPlus::TriggerMode& dyn_triggerMode();
    // Get instance field reference: public UnityEngine.Camera raycastCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_raycastCamera();
    // Get instance field reference: public HighlightPlus.RayCastSource raycastSource
    [[deprecated("Use field access instead!")]] ::HighlightPlus::RayCastSource& dyn_raycastSource();
    // Get instance field reference: public UnityEngine.Collider[] colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_colliders();
    // Get instance field reference: private UnityEngine.Collider currentCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_currentCollider();
    // private System.Void OnEnable()
    // Offset: 0x149C0D0
    void OnEnable();
    // private System.Void Start()
    // Offset: 0x149C178
    void Start();
    // private System.Collections.IEnumerator DoRayCast()
    // Offset: 0x149C3E8
    ::System::Collections::IEnumerator* DoRayCast();
    // private System.Void SwitchCollider(UnityEngine.Collider newCollider)
    // Offset: 0x149C488
    void SwitchCollider(::UnityEngine::Collider* newCollider);
    // private System.Void OnMouseDown()
    // Offset: 0x149C658
    void OnMouseDown();
    // private System.Void OnMouseEnter()
    // Offset: 0x149C66C
    void OnMouseEnter();
    // private System.Void OnMouseExit()
    // Offset: 0x149C680
    void OnMouseExit();
    // private System.Void Highlight(System.Boolean state)
    // Offset: 0x149C520
    void Highlight(bool state);
    // public System.Void Init()
    // Offset: 0x149C0D4
    void Init();
    // public System.Void .ctor()
    // Offset: 0x149C694
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HighlightTrigger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HighlightPlus::HighlightTrigger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HighlightTrigger*, creationType>()));
    }
  }; // HighlightPlus.HighlightTrigger
  #pragma pack(pop)
  static check_size<sizeof(HighlightTrigger), 56 + sizeof(::UnityEngine::Collider*)> __HighlightPlus_HighlightTriggerSizeCheck;
  static_assert(sizeof(HighlightTrigger) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::DoRayCast
// Il2CppName: DoRayCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::DoRayCast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "DoRayCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::SwitchCollider
// Il2CppName: SwitchCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)(::UnityEngine::Collider*)>(&HighlightPlus::HighlightTrigger::SwitchCollider)> {
  static const MethodInfo* get() {
    static auto* newCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "SwitchCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCollider});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::OnMouseDown
// Il2CppName: OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::OnMouseDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::OnMouseEnter
// Il2CppName: OnMouseEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::OnMouseEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "OnMouseEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::OnMouseExit
// Il2CppName: OnMouseExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::OnMouseExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "OnMouseExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::Highlight
// Il2CppName: Highlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)(bool)>(&HighlightPlus::HighlightTrigger::Highlight)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "Highlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HighlightPlus::HighlightTrigger::*)()>(&HighlightPlus::HighlightTrigger::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HighlightPlus::HighlightTrigger*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HighlightPlus::HighlightTrigger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
