// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: FriendGameInfo_t
  struct FriendGameInfo_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::SteamNative::FriendGameInfo_t, "SteamNative", "FriendGameInfo_t");
// Type namespace: SteamNative
namespace SteamNative {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: SteamNative.FriendGameInfo_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct FriendGameInfo_t/*, public ::System::ValueType*/ {
    public:
    public:
    // System.UInt64 GameID
    // Size: 0x8
    // Offset: 0x0
    uint64_t GameID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // System.UInt32 GameIP
    // Size: 0x4
    // Offset: 0x8
    uint GameIP;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt16 GamePort
    // Size: 0x2
    // Offset: 0xC
    uint16_t GamePort;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 QueryPort
    // Size: 0x2
    // Offset: 0xE
    uint16_t QueryPort;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt64 SteamIDLobby
    // Size: 0x8
    // Offset: 0x10
    uint64_t SteamIDLobby;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: FriendGameInfo_t
    constexpr FriendGameInfo_t(uint64_t GameID_ = {}, uint GameIP_ = {}, uint16_t GamePort_ = {}, uint16_t QueryPort_ = {}, uint64_t SteamIDLobby_ = {}) noexcept : GameID{GameID_}, GameIP{GameIP_}, GamePort{GamePort_}, QueryPort{QueryPort_}, SteamIDLobby{SteamIDLobby_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.UInt64 GameID
    [[deprecated("Use field access instead!")]] uint64_t& dyn_GameID();
    // Get instance field reference: System.UInt32 GameIP
    [[deprecated("Use field access instead!")]] uint& dyn_GameIP();
    // Get instance field reference: System.UInt16 GamePort
    [[deprecated("Use field access instead!")]] uint16_t& dyn_GamePort();
    // Get instance field reference: System.UInt16 QueryPort
    [[deprecated("Use field access instead!")]] uint16_t& dyn_QueryPort();
    // Get instance field reference: System.UInt64 SteamIDLobby
    [[deprecated("Use field access instead!")]] uint64_t& dyn_SteamIDLobby();
  }; // SteamNative.FriendGameInfo_t
  #pragma pack(pop)
  static check_size<sizeof(FriendGameInfo_t), 16 + sizeof(uint64_t)> __SteamNative_FriendGameInfo_tSizeCheck;
  static_assert(sizeof(FriendGameInfo_t) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
