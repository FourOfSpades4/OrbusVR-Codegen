// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SteamNative.Platform
#include "SteamNative/Platform.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: CSteamID
  struct CSteamID;
  // Forward declaring type: FriendRelationship
  struct FriendRelationship;
  // Forward declaring type: PersonaState
  struct PersonaState;
  // Forward declaring type: FriendGameInfo_t
  struct FriendGameInfo_t;
  // Forward declaring type: ChatEntryType
  struct ChatEntryType;
  // Forward declaring type: VoiceResult
  struct VoiceResult;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::SteamNative::Platform::Interface);
DEFINE_IL2CPP_ARG_TYPE(::SteamNative::Platform::Interface*, "SteamNative", "Platform/Interface");
// Type namespace: SteamNative
namespace SteamNative {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: SteamNative.Platform/Interface
  // [TokenAttribute] Offset: FFFFFFFF
  class Platform::Interface/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public System.Int32 ISteamFriends_GetFriendCount(System.Int32 iFriendFlags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ISteamFriends_GetFriendCount(int iFriendFlags);
    // public SteamNative.CSteamID ISteamFriends_GetFriendByIndex(System.Int32 iFriend, System.Int32 iFriendFlags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::SteamNative::CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);
    // public SteamNative.FriendRelationship ISteamFriends_GetFriendRelationship(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::SteamNative::FriendRelationship ISteamFriends_GetFriendRelationship(uint64_t steamIDFriend);
    // public SteamNative.PersonaState ISteamFriends_GetFriendPersonaState(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::SteamNative::PersonaState ISteamFriends_GetFriendPersonaState(uint64_t steamIDFriend);
    // public System.IntPtr ISteamFriends_GetFriendPersonaName(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::IntPtr ISteamFriends_GetFriendPersonaName(uint64_t steamIDFriend);
    // public System.Boolean ISteamFriends_GetFriendGamePlayed(System.UInt64 steamIDFriend, ref SteamNative.FriendGameInfo_t pFriendGameInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamFriends_GetFriendGamePlayed(uint64_t steamIDFriend, ByRef<::SteamNative::FriendGameInfo_t> pFriendGameInfo);
    // public System.Int32 ISteamFriends_GetSmallFriendAvatar(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ISteamFriends_GetSmallFriendAvatar(uint64_t steamIDFriend);
    // public System.Int32 ISteamFriends_GetMediumFriendAvatar(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ISteamFriends_GetMediumFriendAvatar(uint64_t steamIDFriend);
    // public System.Int32 ISteamFriends_GetLargeFriendAvatar(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ISteamFriends_GetLargeFriendAvatar(uint64_t steamIDFriend);
    // public System.Void ISteamFriends_RequestFriendRichPresence(System.UInt64 steamIDFriend)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ISteamFriends_RequestFriendRichPresence(uint64_t steamIDFriend);
    // public System.Int32 ISteamFriends_GetFriendMessage(System.UInt64 steamIDFriend, System.Int32 iMessageID, System.IntPtr pvData, System.Int32 cubData, out SteamNative.ChatEntryType peChatEntryType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ISteamFriends_GetFriendMessage(uint64_t steamIDFriend, int iMessageID, ::System::IntPtr pvData, int cubData, ByRef<::SteamNative::ChatEntryType> peChatEntryType);
    // public System.Void ISteamInventory_DestroyResult(System.Int32 resultHandle)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ISteamInventory_DestroyResult(int resultHandle);
    // public System.Boolean ISteamNetworking_IsP2PPacketAvailable(out System.UInt32 pcubMsgSize, System.Int32 nChannel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamNetworking_IsP2PPacketAvailable(ByRef<uint> pcubMsgSize, int nChannel);
    // public System.Boolean ISteamNetworking_ReadP2PPacket(System.IntPtr pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out System.UInt64 psteamIDRemote, System.Int32 nChannel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamNetworking_ReadP2PPacket(::System::IntPtr pubDest, uint cubDest, ByRef<uint> pcubMsgSize, ByRef<uint64_t> psteamIDRemote, int nChannel);
    // public SteamNative.VoiceResult ISteamUser_GetAvailableVoice(out System.UInt32 pcbCompressed, out System.UInt32 pcbUncompressed_Deprecated, System.UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::SteamNative::VoiceResult ISteamUser_GetAvailableVoice(ByRef<uint> pcbCompressed, ByRef<uint> pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);
    // public SteamNative.VoiceResult ISteamUser_GetVoice(System.Boolean bWantCompressed, System.IntPtr pDestBuffer, System.UInt32 cbDestBufferSize, out System.UInt32 nBytesWritten, System.Boolean bWantUncompressed_Deprecated, System.IntPtr pUncompressedDestBuffer_Deprecated, System.UInt32 cbUncompressedDestBufferSize_Deprecated, out System.UInt32 nUncompressBytesWritten_Deprecated, System.UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::SteamNative::VoiceResult ISteamUser_GetVoice(bool bWantCompressed, ::System::IntPtr pDestBuffer, uint cbDestBufferSize, ByRef<uint> nBytesWritten, bool bWantUncompressed_Deprecated, ::System::IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, ByRef<uint> nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);
    // public System.UInt32 ISteamUser_GetVoiceOptimalSampleRate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint ISteamUser_GetVoiceOptimalSampleRate();
    // public System.Boolean ISteamUtils_GetImageSize(System.Int32 iImage, out System.UInt32 pnWidth, out System.UInt32 pnHeight)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamUtils_GetImageSize(int iImage, ByRef<uint> pnWidth, ByRef<uint> pnHeight);
    // public System.Boolean ISteamUtils_GetImageRGBA(System.Int32 iImage, System.IntPtr pubDest, System.Int32 nDestBufferSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamUtils_GetImageRGBA(int iImage, ::System::IntPtr pubDest, int nDestBufferSize);
    // public System.Boolean ISteamUtils_IsAPICallCompleted(System.UInt64 hSteamAPICall, ref System.Boolean pbFailed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ISteamUtils_IsAPICallCompleted(uint64_t hSteamAPICall, ByRef<bool> pbFailed);
    // public System.Void SteamApi_SteamAPI_RunCallbacks()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SteamApi_SteamAPI_RunCallbacks();
    // public System.Void SteamApi_SteamAPI_UnregisterCallback(System.IntPtr pCallback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SteamApi_SteamAPI_UnregisterCallback(::System::IntPtr pCallback);
    // public System.Void SteamApi_SteamAPI_Shutdown()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SteamApi_SteamAPI_Shutdown();
    // public System.Void SteamApi_SteamGameServer_Shutdown()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SteamApi_SteamGameServer_Shutdown();
  }; // SteamNative.Platform/Interface
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendCount
// Il2CppName: ISteamFriends_GetFriendCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SteamNative::Platform::Interface::*)(int)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendCount)> {
  static const MethodInfo* get() {
    static auto* iFriendFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iFriendFlags});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendByIndex
// Il2CppName: ISteamFriends_GetFriendByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::CSteamID (SteamNative::Platform::Interface::*)(int, int)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendByIndex)> {
  static const MethodInfo* get() {
    static auto* iFriend = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* iFriendFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iFriend, iFriendFlags});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendRelationship
// Il2CppName: ISteamFriends_GetFriendRelationship
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::FriendRelationship (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendRelationship)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendRelationship", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendPersonaState
// Il2CppName: ISteamFriends_GetFriendPersonaState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::PersonaState (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendPersonaState)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendPersonaState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendPersonaName
// Il2CppName: ISteamFriends_GetFriendPersonaName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendPersonaName)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendPersonaName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendGamePlayed
// Il2CppName: ISteamFriends_GetFriendGamePlayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(uint64_t, ByRef<::SteamNative::FriendGameInfo_t>)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendGamePlayed)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pFriendGameInfo = &::il2cpp_utils::GetClassFromName("SteamNative", "FriendGameInfo_t")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendGamePlayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend, pFriendGameInfo});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetSmallFriendAvatar
// Il2CppName: ISteamFriends_GetSmallFriendAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetSmallFriendAvatar)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetSmallFriendAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetMediumFriendAvatar
// Il2CppName: ISteamFriends_GetMediumFriendAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetMediumFriendAvatar)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetMediumFriendAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetLargeFriendAvatar
// Il2CppName: ISteamFriends_GetLargeFriendAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_GetLargeFriendAvatar)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetLargeFriendAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_RequestFriendRichPresence
// Il2CppName: ISteamFriends_RequestFriendRichPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)(uint64_t)>(&SteamNative::Platform::Interface::ISteamFriends_RequestFriendRichPresence)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_RequestFriendRichPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamFriends_GetFriendMessage
// Il2CppName: ISteamFriends_GetFriendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SteamNative::Platform::Interface::*)(uint64_t, int, ::System::IntPtr, int, ByRef<::SteamNative::ChatEntryType>)>(&SteamNative::Platform::Interface::ISteamFriends_GetFriendMessage)> {
  static const MethodInfo* get() {
    static auto* steamIDFriend = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* iMessageID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pvData = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cubData = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* peChatEntryType = &::il2cpp_utils::GetClassFromName("SteamNative", "ChatEntryType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamFriends_GetFriendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steamIDFriend, iMessageID, pvData, cubData, peChatEntryType});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamInventory_DestroyResult
// Il2CppName: ISteamInventory_DestroyResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)(int)>(&SteamNative::Platform::Interface::ISteamInventory_DestroyResult)> {
  static const MethodInfo* get() {
    static auto* resultHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamInventory_DestroyResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultHandle});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamNetworking_IsP2PPacketAvailable
// Il2CppName: ISteamNetworking_IsP2PPacketAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(ByRef<uint>, int)>(&SteamNative::Platform::Interface::ISteamNetworking_IsP2PPacketAvailable)> {
  static const MethodInfo* get() {
    static auto* pcubMsgSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamNetworking_IsP2PPacketAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcubMsgSize, nChannel});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamNetworking_ReadP2PPacket
// Il2CppName: ISteamNetworking_ReadP2PPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(::System::IntPtr, uint, ByRef<uint>, ByRef<uint64_t>, int)>(&SteamNative::Platform::Interface::ISteamNetworking_ReadP2PPacket)> {
  static const MethodInfo* get() {
    static auto* pubDest = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cubDest = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pcubMsgSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* psteamIDRemote = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* nChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamNetworking_ReadP2PPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUser_GetAvailableVoice
// Il2CppName: ISteamUser_GetAvailableVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::VoiceResult (SteamNative::Platform::Interface::*)(ByRef<uint>, ByRef<uint>, uint)>(&SteamNative::Platform::Interface::ISteamUser_GetAvailableVoice)> {
  static const MethodInfo* get() {
    static auto* pcbCompressed = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pcbUncompressed_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nUncompressedVoiceDesiredSampleRate_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUser_GetAvailableVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUser_GetVoice
// Il2CppName: ISteamUser_GetVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::VoiceResult (SteamNative::Platform::Interface::*)(bool, ::System::IntPtr, uint, ByRef<uint>, bool, ::System::IntPtr, uint, ByRef<uint>, uint)>(&SteamNative::Platform::Interface::ISteamUser_GetVoice)> {
  static const MethodInfo* get() {
    static auto* bWantCompressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pDestBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbDestBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* nBytesWritten = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bWantUncompressed_Deprecated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pUncompressedDestBuffer_Deprecated = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbUncompressedDestBufferSize_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* nUncompressBytesWritten_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nUncompressedVoiceDesiredSampleRate_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUser_GetVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUser_GetVoiceOptimalSampleRate
// Il2CppName: ISteamUser_GetVoiceOptimalSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamNative::Platform::Interface::*)()>(&SteamNative::Platform::Interface::ISteamUser_GetVoiceOptimalSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUser_GetVoiceOptimalSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUtils_GetImageSize
// Il2CppName: ISteamUtils_GetImageSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(int, ByRef<uint>, ByRef<uint>)>(&SteamNative::Platform::Interface::ISteamUtils_GetImageSize)> {
  static const MethodInfo* get() {
    static auto* iImage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pnWidth = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pnHeight = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUtils_GetImageSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iImage, pnWidth, pnHeight});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUtils_GetImageRGBA
// Il2CppName: ISteamUtils_GetImageRGBA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(int, ::System::IntPtr, int)>(&SteamNative::Platform::Interface::ISteamUtils_GetImageRGBA)> {
  static const MethodInfo* get() {
    static auto* iImage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pubDest = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* nDestBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUtils_GetImageRGBA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iImage, pubDest, nDestBufferSize});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::ISteamUtils_IsAPICallCompleted
// Il2CppName: ISteamUtils_IsAPICallCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::Platform::Interface::*)(uint64_t, ByRef<bool>)>(&SteamNative::Platform::Interface::ISteamUtils_IsAPICallCompleted)> {
  static const MethodInfo* get() {
    static auto* hSteamAPICall = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* pbFailed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "ISteamUtils_IsAPICallCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hSteamAPICall, pbFailed});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::SteamApi_SteamAPI_RunCallbacks
// Il2CppName: SteamApi_SteamAPI_RunCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)()>(&SteamNative::Platform::Interface::SteamApi_SteamAPI_RunCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "SteamApi_SteamAPI_RunCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::SteamApi_SteamAPI_UnregisterCallback
// Il2CppName: SteamApi_SteamAPI_UnregisterCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)(::System::IntPtr)>(&SteamNative::Platform::Interface::SteamApi_SteamAPI_UnregisterCallback)> {
  static const MethodInfo* get() {
    static auto* pCallback = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "SteamApi_SteamAPI_UnregisterCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pCallback});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::SteamApi_SteamAPI_Shutdown
// Il2CppName: SteamApi_SteamAPI_Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)()>(&SteamNative::Platform::Interface::SteamApi_SteamAPI_Shutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "SteamApi_SteamAPI_Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamNative::Platform::Interface::SteamApi_SteamGameServer_Shutdown
// Il2CppName: SteamApi_SteamGameServer_Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::Platform::Interface::*)()>(&SteamNative::Platform::Interface::SteamApi_SteamGameServer_Shutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::Platform::Interface*), "SteamApi_SteamGameServer_Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
