// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: SteamNative.Platform
#include "SteamNative/Platform.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: CSteamID
  struct CSteamID;
}
// Completed forward declares
// Type namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: SteamNetworking
  class SteamNetworking;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::SteamNative::SteamNetworking);
DEFINE_IL2CPP_ARG_TYPE(::SteamNative::SteamNetworking*, "SteamNative", "SteamNetworking");
// Type namespace: SteamNative
namespace SteamNative {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: SteamNative.SteamNetworking
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamNetworking : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // SteamNative.Platform/Interface platform
    // Size: 0x8
    // Offset: 0x10
    ::SteamNative::Platform::Interface* platform;
    // Field size check
    static_assert(sizeof(::SteamNative::Platform::Interface*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::SteamNative::Platform::Interface*
    constexpr operator ::SteamNative::Platform::Interface*() const noexcept {
      return platform;
    }
    // Get instance field reference: SteamNative.Platform/Interface platform
    [[deprecated("Use field access instead!")]] ::SteamNative::Platform::Interface*& dyn_platform();
    // public System.Void Dispose()
    // Offset: 0x2846AA8
    void Dispose();
    // public System.Boolean IsP2PPacketAvailable(out System.UInt32 pcubMsgSize, System.Int32 nChannel)
    // Offset: 0x2844F0C
    bool IsP2PPacketAvailable(ByRef<uint> pcubMsgSize, int nChannel);
    // public System.Boolean ReadP2PPacket(System.IntPtr pubDest, System.UInt32 cubDest, out System.UInt32 pcubMsgSize, out SteamNative.CSteamID psteamIDRemote, System.Int32 nChannel)
    // Offset: 0x2844FDC
    bool ReadP2PPacket(::System::IntPtr pubDest, uint cubDest, ByRef<uint> pcubMsgSize, ByRef<::SteamNative::CSteamID> psteamIDRemote, int nChannel);
  }; // SteamNative.SteamNetworking
  #pragma pack(pop)
  static check_size<sizeof(SteamNetworking), 16 + sizeof(::SteamNative::Platform::Interface*)> __SteamNative_SteamNetworkingSizeCheck;
  static_assert(sizeof(SteamNetworking) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: SteamNative::SteamNetworking::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::SteamNetworking::*)()>(&SteamNative::SteamNetworking::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamNetworking*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamNative::SteamNetworking::IsP2PPacketAvailable
// Il2CppName: IsP2PPacketAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::SteamNetworking::*)(ByRef<uint>, int)>(&SteamNative::SteamNetworking::IsP2PPacketAvailable)> {
  static const MethodInfo* get() {
    static auto* pcubMsgSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamNetworking*), "IsP2PPacketAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcubMsgSize, nChannel});
  }
};
// Writing MetadataGetter for method: SteamNative::SteamNetworking::ReadP2PPacket
// Il2CppName: ReadP2PPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SteamNative::SteamNetworking::*)(::System::IntPtr, uint, ByRef<uint>, ByRef<::SteamNative::CSteamID>, int)>(&SteamNative::SteamNetworking::ReadP2PPacket)> {
  static const MethodInfo* get() {
    static auto* pubDest = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cubDest = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* pcubMsgSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* psteamIDRemote = &::il2cpp_utils::GetClassFromName("SteamNative", "CSteamID")->this_arg;
    static auto* nChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamNetworking*), "ReadP2PPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel});
  }
};
