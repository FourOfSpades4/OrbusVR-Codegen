// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: SteamNative.Platform
#include "SteamNative/Platform.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: VoiceResult
  struct VoiceResult;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: SteamUser
  class SteamUser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::SteamNative::SteamUser);
DEFINE_IL2CPP_ARG_TYPE(::SteamNative::SteamUser*, "SteamNative", "SteamUser");
// Type namespace: SteamNative
namespace SteamNative {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: SteamNative.SteamUser
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamUser : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // SteamNative.Platform/Interface platform
    // Size: 0x8
    // Offset: 0x10
    ::SteamNative::Platform::Interface* platform;
    // Field size check
    static_assert(sizeof(::SteamNative::Platform::Interface*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::SteamNative::Platform::Interface*
    constexpr operator ::SteamNative::Platform::Interface*() const noexcept {
      return platform;
    }
    // Get instance field reference: SteamNative.Platform/Interface platform
    [[deprecated("Use field access instead!")]] ::SteamNative::Platform::Interface*& dyn_platform();
    // public System.Void Dispose()
    // Offset: 0x2846D78
    void Dispose();
    // public SteamNative.VoiceResult GetAvailableVoice(out System.UInt32 pcbCompressed, out System.UInt32 pcbUncompressed_Deprecated, System.UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
    // Offset: 0x2845EC0
    ::SteamNative::VoiceResult GetAvailableVoice(ByRef<uint> pcbCompressed, ByRef<uint> pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);
    // public SteamNative.VoiceResult GetVoice(System.Boolean bWantCompressed, System.IntPtr pDestBuffer, System.UInt32 cbDestBufferSize, out System.UInt32 nBytesWritten, System.Boolean bWantUncompressed_Deprecated, System.IntPtr pUncompressedDestBuffer_Deprecated, System.UInt32 cbUncompressedDestBufferSize_Deprecated, out System.UInt32 nUncompressBytesWritten_Deprecated, System.UInt32 nUncompressedVoiceDesiredSampleRate_Deprecated)
    // Offset: 0x2845FA0
    ::SteamNative::VoiceResult GetVoice(bool bWantCompressed, ::System::IntPtr pDestBuffer, uint cbDestBufferSize, ByRef<uint> nBytesWritten, bool bWantUncompressed_Deprecated, ::System::IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, ByRef<uint> nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);
    // public System.UInt32 GetVoiceOptimalSampleRate()
    // Offset: 0x2845E00
    uint GetVoiceOptimalSampleRate();
  }; // SteamNative.SteamUser
  #pragma pack(pop)
  static check_size<sizeof(SteamUser), 16 + sizeof(::SteamNative::Platform::Interface*)> __SteamNative_SteamUserSizeCheck;
  static_assert(sizeof(SteamUser) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: SteamNative::SteamUser::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNative::SteamUser::*)()>(&SteamNative::SteamUser::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamUser*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamNative::SteamUser::GetAvailableVoice
// Il2CppName: GetAvailableVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::VoiceResult (SteamNative::SteamUser::*)(ByRef<uint>, ByRef<uint>, uint)>(&SteamNative::SteamUser::GetAvailableVoice)> {
  static const MethodInfo* get() {
    static auto* pcbCompressed = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* pcbUncompressed_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nUncompressedVoiceDesiredSampleRate_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamUser*), "GetAvailableVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcbCompressed, pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated});
  }
};
// Writing MetadataGetter for method: SteamNative::SteamUser::GetVoice
// Il2CppName: GetVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::VoiceResult (SteamNative::SteamUser::*)(bool, ::System::IntPtr, uint, ByRef<uint>, bool, ::System::IntPtr, uint, ByRef<uint>, uint)>(&SteamNative::SteamUser::GetVoice)> {
  static const MethodInfo* get() {
    static auto* bWantCompressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pDestBuffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbDestBufferSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* nBytesWritten = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bWantUncompressed_Deprecated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pUncompressedDestBuffer_Deprecated = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cbUncompressedDestBufferSize_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* nUncompressBytesWritten_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* nUncompressedVoiceDesiredSampleRate_Deprecated = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamUser*), "GetVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bWantCompressed, pDestBuffer, cbDestBufferSize, nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated});
  }
};
// Writing MetadataGetter for method: SteamNative::SteamUser::GetVoiceOptimalSampleRate
// Il2CppName: GetVoiceOptimalSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (SteamNative::SteamUser::*)()>(&SteamNative::SteamUser::GetVoiceOptimalSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNative::SteamUser*), "GetVoiceOptimalSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
