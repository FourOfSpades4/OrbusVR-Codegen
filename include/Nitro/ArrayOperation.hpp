// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ArrayOperation
  class ArrayOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ArrayOperation);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ArrayOperation*, "Nitro", "ArrayOperation");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ArrayOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class ArrayOperation : public ::Nitro::Operation {
    public:
    public:
    // public System.Type ArrayType
    // Size: 0x8
    // Offset: 0x68
    ::System::Type* ArrayType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Int32 DirectSize
    // Size: 0x4
    // Offset: 0x70
    int DirectSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: DirectSize and: Size
    char __padding1[0x4] = {};
    // public Nitro.CompiledFragment Size
    // Size: 0x8
    // Offset: 0x78
    ::Nitro::CompiledFragment* Size;
    // Field size check
    static_assert(sizeof(::Nitro::CompiledFragment*) == 0x8);
    // public Nitro.CompiledFragment[] DefaultValues
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::Nitro::CompiledFragment*> DefaultValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::Nitro::CompiledFragment*>) == 0x8);
    public:
    // Get instance field reference: public System.Type ArrayType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_ArrayType();
    // Get instance field reference: public System.Int32 DirectSize
    [[deprecated("Use field access instead!")]] int& dyn_DirectSize();
    // Get instance field reference: public Nitro.CompiledFragment Size
    [[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& dyn_Size();
    // Get instance field reference: public Nitro.CompiledFragment[] DefaultValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& dyn_DefaultValues();
    // public System.Void .ctor(Nitro.CompiledMethod method, System.Type arrayType, Nitro.CompiledFragment size, Nitro.CompiledFragment[] defaultValues)
    // Offset: 0xF56834
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayOperation* New_ctor(::Nitro::CompiledMethod* method, ::System::Type* arrayType, ::Nitro::CompiledFragment* size, ::ArrayW<::Nitro::CompiledFragment*> defaultValues) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayOperation*, creationType>(method, arrayType, size, defaultValues)));
    }
    // public System.Void .ctor(Nitro.CompiledMethod method, System.Type elementType, Nitro.CompiledFragment[] defaultValues)
    // Offset: 0xF56988
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayOperation* New_ctor(::Nitro::CompiledMethod* method, ::System::Type* elementType, ::ArrayW<::Nitro::CompiledFragment*> defaultValues) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayOperation*, creationType>(method, elementType, defaultValues)));
    }
    // private System.Void SetDefaults(Nitro.CompiledFragment[] defaultValues)
    // Offset: 0xF56954
    void SetDefaults(::ArrayW<::Nitro::CompiledFragment*> defaultValues);
    // public override System.Type OutputType(out Nitro.CompiledFragment newOperation)
    // Offset: 0xF56A10
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Type CompiledFragment::OutputType(out Nitro.CompiledFragment newOperation)
    ::System::Type* OutputType(ByRef<::Nitro::CompiledFragment*> newOperation);
    // public override System.Void OutputIL(Nitro.NitroIL into)
    // Offset: 0xF56D1C
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Void CompiledFragment::OutputIL(Nitro.NitroIL into)
    void OutputIL(::Nitro::NitroIL* into);
  }; // Nitro.ArrayOperation
  #pragma pack(pop)
  static check_size<sizeof(ArrayOperation), 128 + sizeof(::ArrayW<::Nitro::CompiledFragment*>)> __Nitro_ArrayOperationSizeCheck;
  static_assert(sizeof(ArrayOperation) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ArrayOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ArrayOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ArrayOperation::SetDefaults
// Il2CppName: SetDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::ArrayOperation::*)(::ArrayW<::Nitro::CompiledFragment*>)>(&Nitro::ArrayOperation::SetDefaults)> {
  static const MethodInfo* get() {
    static auto* defaultValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ArrayOperation*), "SetDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultValues});
  }
};
// Writing MetadataGetter for method: Nitro::ArrayOperation::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::ArrayOperation::*)(ByRef<::Nitro::CompiledFragment*>)>(&Nitro::ArrayOperation::OutputType)> {
  static const MethodInfo* get() {
    static auto* newOperation = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ArrayOperation*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOperation});
  }
};
// Writing MetadataGetter for method: Nitro::ArrayOperation::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::ArrayOperation::*)(::Nitro::NitroIL*)>(&Nitro::ArrayOperation::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ArrayOperation*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
