// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CompiledFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CompiledFragment*, "Nitro", "CompiledFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CompiledFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class CompiledFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public System.Object Value
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* Value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept {
      return Value;
    }
    // Get instance field reference: public System.Object Value
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_Value();
    // public System.Object ActiveValue()
    // Offset: 0xF5DCA0
    ::Il2CppObject* ActiveValue();
    // public System.Void .ctor(System.Object value)
    // Offset: 0xF5DCB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompiledFragment* New_ctor(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompiledFragment*, creationType>(value)));
    }
    // public System.Boolean IsConstant()
    // Offset: 0xF5DCDC
    bool IsConstant();
    // public System.Boolean IsLogical()
    // Offset: 0xF5DCE4
    bool IsLogical();
    // public System.Type OutputType()
    // Offset: 0xF5DD98
    ::System::Type* OutputType();
    // public System.Type OutputType(out Nitro.CompiledFragment v)
    // Offset: 0xF5DDC4
    ::System::Type* OutputType(ByRef<::Nitro::CompiledFragment*> v);
    // public System.Void OutputIL(Nitro.NitroIL into)
    // Offset: 0xF5DF98
    void OutputIL(::Nitro::NitroIL* into);
    // public System.Void EmitValue(System.Type type, Nitro.NitroIL into)
    // Offset: 0xF5E068
    void EmitValue(::System::Type* type, ::Nitro::NitroIL* into);
    // public System.Boolean get_EmitsAddress()
    // Offset: 0xF5EF80
    bool get_EmitsAddress();
    // public System.Void .ctor()
    // Offset: 0xF5DC98
    // Implemented from: Nitro.CodeFragment
    // Base method: System.Void CodeFragment::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompiledFragment* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompiledFragment*, creationType>()));
    }
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod method)
    // Offset: 0xF5DF94
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod method)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* method);
  }; // Nitro.CompiledFragment
  #pragma pack(pop)
  static check_size<sizeof(CompiledFragment), 64 + sizeof(::Il2CppObject*)> __Nitro_CompiledFragmentSizeCheck;
  static_assert(sizeof(CompiledFragment) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CompiledFragment::ActiveValue
// Il2CppName: ActiveValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::CompiledFragment::*)()>(&Nitro::CompiledFragment::ActiveValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "ActiveValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CompiledFragment::IsConstant
// Il2CppName: IsConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CompiledFragment::*)()>(&Nitro::CompiledFragment::IsConstant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "IsConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::IsLogical
// Il2CppName: IsLogical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CompiledFragment::*)()>(&Nitro::CompiledFragment::IsLogical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "IsLogical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::CompiledFragment::*)()>(&Nitro::CompiledFragment::OutputType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::CompiledFragment::*)(ByRef<::Nitro::CompiledFragment*>)>(&Nitro::CompiledFragment::OutputType)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CompiledFragment::*)(::Nitro::NitroIL*)>(&Nitro::CompiledFragment::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::EmitValue
// Il2CppName: EmitValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CompiledFragment::*)(::System::Type*, ::Nitro::NitroIL*)>(&Nitro::CompiledFragment::EmitValue)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "EmitValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, into});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::get_EmitsAddress
// Il2CppName: get_EmitsAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CompiledFragment::*)()>(&Nitro::CompiledFragment::get_EmitsAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "get_EmitsAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CompiledFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CompiledFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::CompiledFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::CompiledFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompiledFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
