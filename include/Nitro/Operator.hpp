// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: Operation
  class Operation;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: Operator
  class Operator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::Operator);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::Operator*, "Nitro", "Operator");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.Operator
  // [TokenAttribute] Offset: FFFFFFFF
  class Operator : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Priority
    // Size: 0x4
    // Offset: 0x10
    int Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean LeftOnly
    // Size: 0x1
    // Offset: 0x14
    bool LeftOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean RightOnly
    // Size: 0x1
    // Offset: 0x15
    bool RightOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RightOnly and: Pattern
    char __padding2[0x2] = {};
    // public System.String Pattern
    // Size: 0x8
    // Offset: 0x18
    ::StringW Pattern;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean LeftAndRight
    // Size: 0x1
    // Offset: 0x20
    bool LeftAndRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.Char,System.Int32> Starts
    static ::System::Collections::Generic::Dictionary_2<::Il2CppChar, int>* _get_Starts();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.Char,System.Int32> Starts
    static void _set_Starts(::System::Collections::Generic::Dictionary_2<::Il2CppChar, int>* value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.Operator> FullOperators
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::Operator*>* _get_FullOperators();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.Operator> FullOperators
    static void _set_FullOperators(::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::Operator*>* value);
    // Get instance field reference: public System.Int32 Priority
    [[deprecated("Use field access instead!")]] int& dyn_Priority();
    // Get instance field reference: public System.Boolean LeftOnly
    [[deprecated("Use field access instead!")]] bool& dyn_LeftOnly();
    // Get instance field reference: public System.Boolean RightOnly
    [[deprecated("Use field access instead!")]] bool& dyn_RightOnly();
    // Get instance field reference: public System.String Pattern
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Pattern();
    // Get instance field reference: public System.Boolean LeftAndRight
    [[deprecated("Use field access instead!")]] bool& dyn_LeftAndRight();
    // static public System.Void Add(Nitro.Operator newOperator)
    // Offset: 0x16E2348
    static void Add(::Nitro::Operator* newOperator);
    // static public System.Boolean IsOperator(System.Char character)
    // Offset: 0x16E24B4
    static bool IsOperator(::Il2CppChar character);
    // public System.Void .ctor(System.String pattern, System.Int32 priority)
    // Offset: 0x16E2540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Operator* New_ctor(::StringW pattern, int priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Operator*, creationType>(pattern, priority)));
    }
    // public Nitro.Operation ToOperation(Nitro.CompiledFragment left, Nitro.CompiledFragment right, Nitro.CompiledMethod method)
    // Offset: 0x16E2584
    ::Nitro::Operation* ToOperation(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method);
    // protected Nitro.Operation Compile(Nitro.CompiledFragment left, Nitro.CompiledFragment right, Nitro.CompiledMethod method)
    // Offset: 0x16E25E4
    ::Nitro::Operation* Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method);
    // static private System.Void .cctor()
    // Offset: 0x16E25EC
    static void _cctor();
  }; // Nitro.Operator
  #pragma pack(pop)
  static check_size<sizeof(Operator), 32 + sizeof(bool)> __Nitro_OperatorSizeCheck;
  static_assert(sizeof(Operator) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::Operator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Nitro::Operator*)>(&Nitro::Operator::Add)> {
  static const MethodInfo* get() {
    static auto* newOperator = &::il2cpp_utils::GetClassFromName("Nitro", "Operator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Operator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOperator});
  }
};
// Writing MetadataGetter for method: Nitro::Operator::IsOperator
// Il2CppName: IsOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::Operator::IsOperator)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Operator*), "IsOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::Operator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::Operator::ToOperation
// Il2CppName: ToOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::Operation* (Nitro::Operator::*)(::Nitro::CompiledFragment*, ::Nitro::CompiledFragment*, ::Nitro::CompiledMethod*)>(&Nitro::Operator::ToOperation)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Operator*), "ToOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, method});
  }
};
// Writing MetadataGetter for method: Nitro::Operator::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::Operation* (Nitro::Operator::*)(::Nitro::CompiledFragment*, ::Nitro::CompiledFragment*, ::Nitro::CompiledMethod*)>(&Nitro::Operator::Compile)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Operator*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, method});
  }
};
// Writing MetadataGetter for method: Nitro::Operator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::Operator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::Operator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
