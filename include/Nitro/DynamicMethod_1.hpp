// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.NitroBaseMethod
#include "Nitro/NitroBaseMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: DynamicMethod`1<T>
  template<typename T>
  class DynamicMethod_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Nitro::DynamicMethod_1, "Nitro", "DynamicMethod`1");
// Type namespace: Nitro
namespace Nitro {
  // WARNING Size may be invalid!
  // Autogenerated type: Nitro.DynamicMethod`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class DynamicMethod_1 : public ::Nitro::NitroBaseMethod {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Object Object
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* Object;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Reflection.MethodInfo Method
    // Size: 0x8
    // Offset: 0x0
    ::System::Reflection::MethodInfo* Method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::dyn_Name");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Object Object
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_Object() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::dyn_Object");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Object"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Reflection.MethodInfo Method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_Method() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::dyn_Method");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Method"))->offset;
      return *reinterpret_cast<::System::Reflection::MethodInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicMethod_1<T>* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicMethod_1<T>*, creationType>(name)));
    }
    // public System.Void .ctor(System.String name, System.Object onObject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicMethod_1<T>* New_ctor(::StringW name, ::Il2CppObject* onObject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicMethod_1<T>*, creationType>(name, onObject)));
    }
    // public T Run(params System.Object[] arguments)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Run(::ArrayW<::Il2CppObject*> arguments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::Run");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::DynamicMethod_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, arguments);
    }
    // public System.Delegate ToDelegate(System.Type type)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Delegate* ToDelegate(::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::ToDelegate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Delegate*, false>(this, ___internal__method, type);
    }
    // public override System.Object RunBoxed(params System.Object[] arguments)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Nitro.NitroBaseMethod
    // Base method: System.Object NitroBaseMethod::RunBoxed(params System.Object[] arguments)
    ::Il2CppObject* RunBoxed(::ArrayW<::Il2CppObject*> arguments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethod_1::RunBoxed");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::NitroBaseMethod*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, arguments);
    }
  }; // Nitro.DynamicMethod`1
  // Could not write size check! Type: Nitro.DynamicMethod`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
