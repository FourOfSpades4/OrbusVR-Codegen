// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: VariableFragment
  class VariableFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: KeyWords
  class KeyWords;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::KeyWords);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::KeyWords*, "Nitro", "KeyWords");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.KeyWords
  // [TokenAttribute] Offset: FFFFFFFF
  class KeyWords : public ::Il2CppObject {
    public:
    // static public Nitro.CompiledFragment Compile(Nitro.VariableFragment kwd, Nitro.CompiledMethod method)
    // Offset: 0xF635AC
    static ::Nitro::CompiledFragment* Compile(::Nitro::VariableFragment* kwd, ::Nitro::CompiledMethod* method);
  }; // Nitro.KeyWords
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::KeyWords::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (*)(::Nitro::VariableFragment*, ::Nitro::CompiledMethod*)>(&Nitro::KeyWords::Compile)> {
  static const MethodInfo* get() {
    static auto* kwd = &::il2cpp_utils::GetClassFromName("Nitro", "VariableFragment")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::KeyWords*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kwd, method});
  }
};
