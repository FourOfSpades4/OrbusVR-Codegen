// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: Handler
  struct Handler;
  // Forward declaring type: CodeFragment
  class CodeFragment;
  // Forward declaring type: CodeLexer
  class CodeLexer;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: Handlers
  class Handlers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::Handlers);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::Handlers*, "Nitro", "Handlers");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.Handlers
  // [TokenAttribute] Offset: FFFFFFFF
  class Handlers : public ::Il2CppObject {
    public:
    // static public Nitro.Handler Find(System.Char peek)
    // Offset: 0xF6207C
    static ::Nitro::Handler Find(::Il2CppChar peek);
    // static public Nitro.CodeFragment Handle(Nitro.Handler handle, Nitro.CodeLexer sr)
    // Offset: 0xF6220C
    static ::Nitro::CodeFragment* Handle(::Nitro::Handler handle, ::Nitro::CodeLexer* sr);
  }; // Nitro.Handlers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::Handlers::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::Handler (*)(::Il2CppChar)>(&Nitro::Handlers::Find)> {
  static const MethodInfo* get() {
    static auto* peek = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Handlers*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peek});
  }
};
// Writing MetadataGetter for method: Nitro::Handlers::Handle
// Il2CppName: Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CodeFragment* (*)(::Nitro::Handler, ::Nitro::CodeLexer*)>(&Nitro::Handlers::Handle)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Nitro", "Handler")->byval_arg;
    static auto* sr = &::il2cpp_utils::GetClassFromName("Nitro", "CodeLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Handlers*), "Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, sr});
  }
};
