// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeAssembly
  class CodeAssembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeReference
  class CodeReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CodeReference);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CodeReference*, "Nitro", "CodeReference");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CodeReference
  // [TokenAttribute] Offset: FFFFFFFF
  class CodeReference : public ::Il2CppObject {
    public:
    public:
    // public System.String Reference
    // Size: 0x8
    // Offset: 0x10
    ::StringW Reference;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Reflection.Assembly InAssembly
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::Assembly* InAssembly;
    // Field size check
    static_assert(sizeof(::System::Reflection::Assembly*) == 0x8);
    public:
    // Get static field: static public System.Reflection.Assembly CurrentAssembly
    static ::System::Reflection::Assembly* _get_CurrentAssembly();
    // Set static field: static public System.Reflection.Assembly CurrentAssembly
    static void _set_CurrentAssembly(::System::Reflection::Assembly* value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.CodeAssembly> Assemblies
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CodeAssembly*>* _get_Assemblies();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.CodeAssembly> Assemblies
    static void _set_Assemblies(::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CodeAssembly*>* value);
    // Get instance field reference: public System.String Reference
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Reference();
    // Get instance field reference: public System.Reflection.Assembly InAssembly
    [[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& dyn_InAssembly();
    // static public System.Type GetFirstType(System.String name)
    // Offset: 0xF5A0F4
    static ::System::Type* GetFirstType(::StringW name);
    // static public System.Reflection.Assembly GetAssembly(System.String name)
    // Offset: 0xF5A2A8
    static ::System::Reflection::Assembly* GetAssembly(::StringW name);
    // static public System.Void Setup()
    // Offset: 0xF5A350
    static void Setup();
    // static public System.Void AddAssembly(System.Reflection.Assembly assembly)
    // Offset: 0xF5A448
    static void AddAssembly(::System::Reflection::Assembly* assembly);
    // public System.Void .ctor(System.String reference)
    // Offset: 0xF5A52C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CodeReference* New_ctor(::StringW reference) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CodeReference*, creationType>(reference)));
    }
    // public System.Type GetType(System.String name)
    // Offset: 0xF5A74C
    ::System::Type* GetType(::StringW name);
  }; // Nitro.CodeReference
  #pragma pack(pop)
  static check_size<sizeof(CodeReference), 24 + sizeof(::System::Reflection::Assembly*)> __Nitro_CodeReferenceSizeCheck;
  static_assert(sizeof(CodeReference) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CodeReference::GetFirstType
// Il2CppName: GetFirstType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::StringW)>(&Nitro::CodeReference::GetFirstType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeReference*), "GetFirstType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Nitro::CodeReference::GetAssembly
// Il2CppName: GetAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (*)(::StringW)>(&Nitro::CodeReference::GetAssembly)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeReference*), "GetAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Nitro::CodeReference::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::CodeReference::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeReference*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeReference::AddAssembly
// Il2CppName: AddAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::Assembly*)>(&Nitro::CodeReference::AddAssembly)> {
  static const MethodInfo* get() {
    static auto* assembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeReference*), "AddAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assembly});
  }
};
// Writing MetadataGetter for method: Nitro::CodeReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CodeReference::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::CodeReference::*)(::StringW)>(&Nitro::CodeReference::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeReference*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
