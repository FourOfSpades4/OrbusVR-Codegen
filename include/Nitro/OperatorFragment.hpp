// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: Operator
  class Operator;
  // Forward declaring type: CodeLexer
  class CodeLexer;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: OperatorFragment
  class OperatorFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::OperatorFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::OperatorFragment*, "Nitro", "OperatorFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.OperatorFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class OperatorFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public Nitro.Operator Value
    // Size: 0x8
    // Offset: 0x40
    ::Nitro::Operator* Value;
    // Field size check
    static_assert(sizeof(::Nitro::Operator*) == 0x8);
    public:
    // Creating conversion operator: operator ::Nitro::Operator*
    constexpr operator ::Nitro::Operator*() const noexcept {
      return Value;
    }
    // Get instance field reference: public Nitro.Operator Value
    [[deprecated("Use field access instead!")]] ::Nitro::Operator*& dyn_Value();
    // static public System.Boolean WillHandle(System.Char character)
    // Offset: 0x16E3020
    static bool WillHandle(::Il2CppChar character);
    // public System.Void .ctor(System.String operatorText)
    // Offset: 0x16E30AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OperatorFragment* New_ctor(::StringW operatorText) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OperatorFragment*, creationType>(operatorText)));
    }
    // public System.Void .ctor(Nitro.CodeLexer sr)
    // Offset: 0x16E3190
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OperatorFragment* New_ctor(::Nitro::CodeLexer* sr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OperatorFragment*, creationType>(sr)));
    }
    // public System.Boolean get_IsSetOperator()
    // Offset: 0x16E3308
    bool get_IsSetOperator();
    // public System.Boolean Set(System.String value)
    // Offset: 0x16E30DC
    bool Set(::StringW value);
    // public override System.String ToString()
    // Offset: 0x16E33B0
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.OperatorFragment
  #pragma pack(pop)
  static check_size<sizeof(OperatorFragment), 64 + sizeof(::Nitro::Operator*)> __Nitro_OperatorFragmentSizeCheck;
  static_assert(sizeof(OperatorFragment) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::OperatorFragment::WillHandle
// Il2CppName: WillHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::OperatorFragment::WillHandle)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::OperatorFragment*), "WillHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::OperatorFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::OperatorFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::OperatorFragment::get_IsSetOperator
// Il2CppName: get_IsSetOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::OperatorFragment::*)()>(&Nitro::OperatorFragment::get_IsSetOperator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::OperatorFragment*), "get_IsSetOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::OperatorFragment::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::OperatorFragment::*)(::StringW)>(&Nitro::OperatorFragment::Set)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::OperatorFragment*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Nitro::OperatorFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::OperatorFragment::*)()>(&Nitro::OperatorFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::OperatorFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
