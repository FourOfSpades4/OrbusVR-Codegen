// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: SecureName
  class SecureName;
  // Forward declaring type: CodeReference
  class CodeReference;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroDomainManager
  class NitroDomainManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::NitroDomainManager);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::NitroDomainManager*, "Nitro", "NitroDomainManager");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.NitroDomainManager
  // [TokenAttribute] Offset: FFFFFFFF
  class NitroDomainManager : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean AllowAll
    // Size: 0x1
    // Offset: 0x10
    bool AllowAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AllowAll and: BlockedNames
    char __padding0[0x7] = {};
    // private System.Collections.Generic.List`1<Nitro.SecureName> BlockedNames
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Nitro::SecureName*>* BlockedNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Nitro::SecureName*>*) == 0x8);
    // private System.Collections.Generic.List`1<Nitro.CodeReference> DefaultReferences
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Nitro::CodeReference*>* DefaultReferences;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Nitro::CodeReference*>*) == 0x8);
    // private System.Collections.Generic.List`1<Nitro.SecureName> AllowedNames
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Nitro::SecureName*>* AllowedNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Nitro::SecureName*>*) == 0x8);
    public:
    // Get static field: static private Nitro.NitroDomainManager DefaultManager
    static ::Nitro::NitroDomainManager* _get_DefaultManager();
    // Set static field: static private Nitro.NitroDomainManager DefaultManager
    static void _set_DefaultManager(::Nitro::NitroDomainManager* value);
    // Get instance field reference: private System.Boolean AllowAll
    [[deprecated("Use field access instead!")]] bool& dyn_AllowAll();
    // Get instance field reference: private System.Collections.Generic.List`1<Nitro.SecureName> BlockedNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::SecureName*>*& dyn_BlockedNames();
    // Get instance field reference: private System.Collections.Generic.List`1<Nitro.CodeReference> DefaultReferences
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::CodeReference*>*& dyn_DefaultReferences();
    // Get instance field reference: private System.Collections.Generic.List`1<Nitro.SecureName> AllowedNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::SecureName*>*& dyn_AllowedNames();
    // static public Nitro.NitroDomainManager GetDefaultManager()
    // Offset: 0xF662C0
    static ::Nitro::NitroDomainManager* GetDefaultManager();
    // public System.Void .ctor()
    // Offset: 0xF68300
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NitroDomainManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NitroDomainManager*, creationType>()));
    }
    // public System.Void ClearDefaultReferences()
    // Offset: 0xF6854C
    void ClearDefaultReferences();
    // public System.Collections.Generic.List`1<Nitro.CodeReference> GetDefaultReferences()
    // Offset: 0xF66328
    ::System::Collections::Generic::List_1<::Nitro::CodeReference*>* GetDefaultReferences();
    // protected System.Void AddReference(System.String text)
    // Offset: 0xF683D4
    void AddReference(::StringW text);
    // public System.Boolean AllowsEverything()
    // Offset: 0xF673F8
    bool AllowsEverything();
    // public System.Boolean IsAllowed(System.Type type)
    // Offset: 0xF67400
    bool IsAllowed(::System::Type* type);
    // protected System.Void AllowEverything()
    // Offset: 0xF686C0
    void AllowEverything();
    // protected System.Void Allow(System.String name)
    // Offset: 0xF68490
    void Allow(::StringW name);
    // protected System.Void Block(System.String name)
    // Offset: 0xF686CC
    void Block(::StringW name);
    // private System.Boolean Blocked(System.Type type)
    // Offset: 0xF68554
    bool Blocked(::System::Type* type);
    // public System.Boolean AllowAccess(System.String protocol, System.String host, System.String fullPath)
    // Offset: 0xF68788
    bool AllowAccess(::StringW protocol, ::StringW host, ::StringW fullPath);
    // static private System.Void .cctor()
    // Offset: 0xF68790
    static void _cctor();
  }; // Nitro.NitroDomainManager
  #pragma pack(pop)
  static check_size<sizeof(NitroDomainManager), 40 + sizeof(::System::Collections::Generic::List_1<::Nitro::SecureName*>*)> __Nitro_NitroDomainManagerSizeCheck;
  static_assert(sizeof(NitroDomainManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::NitroDomainManager::GetDefaultManager
// Il2CppName: GetDefaultManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::NitroDomainManager* (*)()>(&Nitro::NitroDomainManager::GetDefaultManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "GetDefaultManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::NitroDomainManager::ClearDefaultReferences
// Il2CppName: ClearDefaultReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroDomainManager::*)()>(&Nitro::NitroDomainManager::ClearDefaultReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "ClearDefaultReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::GetDefaultReferences
// Il2CppName: GetDefaultReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Nitro::CodeReference*>* (Nitro::NitroDomainManager::*)()>(&Nitro::NitroDomainManager::GetDefaultReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "GetDefaultReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::AddReference
// Il2CppName: AddReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroDomainManager::*)(::StringW)>(&Nitro::NitroDomainManager::AddReference)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "AddReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::AllowsEverything
// Il2CppName: AllowsEverything
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::NitroDomainManager::*)()>(&Nitro::NitroDomainManager::AllowsEverything)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "AllowsEverything", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::IsAllowed
// Il2CppName: IsAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::NitroDomainManager::*)(::System::Type*)>(&Nitro::NitroDomainManager::IsAllowed)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "IsAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::AllowEverything
// Il2CppName: AllowEverything
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroDomainManager::*)()>(&Nitro::NitroDomainManager::AllowEverything)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "AllowEverything", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::Allow
// Il2CppName: Allow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroDomainManager::*)(::StringW)>(&Nitro::NitroDomainManager::Allow)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "Allow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroDomainManager::*)(::StringW)>(&Nitro::NitroDomainManager::Block)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::Blocked
// Il2CppName: Blocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::NitroDomainManager::*)(::System::Type*)>(&Nitro::NitroDomainManager::Blocked)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "Blocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::AllowAccess
// Il2CppName: AllowAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::NitroDomainManager::*)(::StringW, ::StringW, ::StringW)>(&Nitro::NitroDomainManager::AllowAccess)> {
  static const MethodInfo* get() {
    static auto* protocol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fullPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), "AllowAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocol, host, fullPath});
  }
};
// Writing MetadataGetter for method: Nitro::NitroDomainManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::NitroDomainManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroDomainManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
