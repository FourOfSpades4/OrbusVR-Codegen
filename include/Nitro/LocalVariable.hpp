// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Variable
#include "Nitro/Variable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection::Emit
namespace System::Reflection::Emit {
  // Forward declaring type: LocalBuilder
  class LocalBuilder;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: LocalVariable
  class LocalVariable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::LocalVariable);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::LocalVariable*, "Nitro", "LocalVariable");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.LocalVariable
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalVariable : public ::Nitro::Variable {
    public:
    public:
    // private System.Type VariableType
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* VariableType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Reflection.Emit.LocalBuilder Builder
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::Emit::LocalBuilder* Builder;
    // Field size check
    static_assert(sizeof(::System::Reflection::Emit::LocalBuilder*) == 0x8);
    public:
    // Deleting conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept = delete;
    // Get instance field reference: private System.Type VariableType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_VariableType();
    // Get instance field reference: public System.Reflection.Emit.LocalBuilder Builder
    [[deprecated("Use field access instead!")]] ::System::Reflection::Emit::LocalBuilder*& dyn_Builder();
    // public System.Void .ctor(System.String name, System.Type type)
    // Offset: 0xF60250
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVariable* New_ctor(::StringW name, ::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVariable*, creationType>(name, type)));
    }
    // public override System.Type Type()
    // Offset: 0xF64108
    // Implemented from: Nitro.Variable
    // Base method: System.Type Variable::Type()
    ::System::Type* Type();
    // public override System.Void OutputSet(Nitro.NitroIL into, System.Type setting)
    // Offset: 0xF64110
    // Implemented from: Nitro.Variable
    // Base method: System.Void Variable::OutputSet(Nitro.NitroIL into, System.Type setting)
    void OutputSet(::Nitro::NitroIL* into, ::System::Type* setting);
    // public override System.Void OutputIL(Nitro.NitroIL into, System.Boolean accessingMember)
    // Offset: 0xF64314
    // Implemented from: Nitro.Variable
    // Base method: System.Void Variable::OutputIL(Nitro.NitroIL into, System.Boolean accessingMember)
    void OutputIL(::Nitro::NitroIL* into, bool accessingMember);
  }; // Nitro.LocalVariable
  #pragma pack(pop)
  static check_size<sizeof(LocalVariable), 32 + sizeof(::System::Reflection::Emit::LocalBuilder*)> __Nitro_LocalVariableSizeCheck;
  static_assert(sizeof(LocalVariable) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::LocalVariable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::LocalVariable::Type
// Il2CppName: Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::LocalVariable::*)()>(&Nitro::LocalVariable::Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::LocalVariable*), "Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::LocalVariable::OutputSet
// Il2CppName: OutputSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::LocalVariable::*)(::Nitro::NitroIL*, ::System::Type*)>(&Nitro::LocalVariable::OutputSet)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    static auto* setting = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::LocalVariable*), "OutputSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into, setting});
  }
};
// Writing MetadataGetter for method: Nitro::LocalVariable::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::LocalVariable::*)(::Nitro::NitroIL*, bool)>(&Nitro::LocalVariable::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    static auto* accessingMember = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::LocalVariable*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into, accessingMember});
  }
};
