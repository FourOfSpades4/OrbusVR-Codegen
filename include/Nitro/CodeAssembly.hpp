// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeAssembly
  class CodeAssembly;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CodeAssembly);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CodeAssembly*, "Nitro", "CodeAssembly");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CodeAssembly
  // [TokenAttribute] Offset: FFFFFFFF
  class CodeAssembly : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean Current
    // Size: 0x1
    // Offset: 0x18
    bool Current;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean NitroAOT
    // Size: 0x1
    // Offset: 0x19
    bool NitroAOT;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: NitroAOT and: Assembly
    char __padding2[0x6] = {};
    // public System.Reflection.Assembly Assembly
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::Assembly* Assembly;
    // Field size check
    static_assert(sizeof(::System::Reflection::Assembly*) == 0x8);
    public:
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.Boolean Current
    [[deprecated("Use field access instead!")]] bool& dyn_Current();
    // Get instance field reference: public System.Boolean NitroAOT
    [[deprecated("Use field access instead!")]] bool& dyn_NitroAOT();
    // Get instance field reference: public System.Reflection.Assembly Assembly
    [[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& dyn_Assembly();
    // public System.Void .ctor(System.Reflection.Assembly assembly, System.Boolean current)
    // Offset: 0xF598E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CodeAssembly* New_ctor(::System::Reflection::Assembly* assembly, bool current) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CodeAssembly*, creationType>(assembly, current)));
    }
    // public System.Type GetType(System.String name)
    // Offset: 0xF59A44
    ::System::Type* GetType(::StringW name);
  }; // Nitro.CodeAssembly
  #pragma pack(pop)
  static check_size<sizeof(CodeAssembly), 32 + sizeof(::System::Reflection::Assembly*)> __Nitro_CodeAssemblySizeCheck;
  static_assert(sizeof(CodeAssembly) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CodeAssembly::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CodeAssembly::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::CodeAssembly::*)(::StringW)>(&Nitro::CodeAssembly::GetType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeAssembly*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
