// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: OperationFragment
  class OperationFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
  // Forward declaring type: CodeFragment
  class CodeFragment;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CompilationServices
  class CompilationServices;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CompilationServices);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CompilationServices*, "Nitro", "CompilationServices");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CompilationServices
  // [TokenAttribute] Offset: FFFFFFFF
  class CompilationServices : public ::Il2CppObject {
    public:
    // static public System.Void CompileOperators(Nitro.OperationFragment fragment, Nitro.CompiledMethod parentBlock)
    // Offset: 0xF5A8C0
    static void CompileOperators(::Nitro::OperationFragment* fragment, ::Nitro::CompiledMethod* parentBlock);
    // static public System.Boolean CompileOperations(Nitro.CodeFragment fragment, Nitro.CompiledMethod block)
    // Offset: 0xF581F0
    static bool CompileOperations(::Nitro::CodeFragment* fragment, ::Nitro::CompiledMethod* block);
    // static public Nitro.CompiledFragment[] CompileParameters(Nitro.CodeFragment brackets, Nitro.CompiledMethod parentBlock)
    // Offset: 0xF56678
    static ::ArrayW<::Nitro::CompiledFragment*> CompileParameters(::Nitro::CodeFragment* brackets, ::Nitro::CompiledMethod* parentBlock);
  }; // Nitro.CompilationServices
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CompilationServices::CompileOperators
// Il2CppName: CompileOperators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Nitro::OperationFragment*, ::Nitro::CompiledMethod*)>(&Nitro::CompilationServices::CompileOperators)> {
  static const MethodInfo* get() {
    static auto* fragment = &::il2cpp_utils::GetClassFromName("Nitro", "OperationFragment")->byval_arg;
    static auto* parentBlock = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompilationServices*), "CompileOperators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fragment, parentBlock});
  }
};
// Writing MetadataGetter for method: Nitro::CompilationServices::CompileOperations
// Il2CppName: CompileOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Nitro::CodeFragment*, ::Nitro::CompiledMethod*)>(&Nitro::CompilationServices::CompileOperations)> {
  static const MethodInfo* get() {
    static auto* fragment = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompilationServices*), "CompileOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fragment, block});
  }
};
// Writing MetadataGetter for method: Nitro::CompilationServices::CompileParameters
// Il2CppName: CompileParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Nitro::CompiledFragment*> (*)(::Nitro::CodeFragment*, ::Nitro::CompiledMethod*)>(&Nitro::CompilationServices::CompileParameters)> {
  static const MethodInfo* get() {
    static auto* brackets = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* parentBlock = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompilationServices*), "CompileParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brackets, parentBlock});
  }
};
