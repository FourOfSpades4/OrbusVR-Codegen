// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: BracketFragment
  class BracketFragment;
  // Forward declaring type: CodeLexer
  class CodeLexer;
  // Forward declaring type: AddResult
  struct AddResult;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ForFragment
  class ForFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ForFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ForFragment*, "Nitro", "ForFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ForFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class ForFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public System.String Value
    // Size: 0x8
    // Offset: 0x40
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Nitro.BracketFragment Body
    // Size: 0x8
    // Offset: 0x48
    ::Nitro::BracketFragment* Body;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    // public Nitro.BracketFragment Parameters
    // Size: 0x8
    // Offset: 0x50
    ::Nitro::BracketFragment* Parameters;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    public:
    // Get instance field reference: public System.String Value
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Value();
    // Get instance field reference: public Nitro.BracketFragment Body
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_Body();
    // Get instance field reference: public Nitro.BracketFragment Parameters
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_Parameters();
    // public System.Void .ctor(Nitro.CodeLexer sr, System.String name)
    // Offset: 0xF61294
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ForFragment* New_ctor(::Nitro::CodeLexer* sr, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ForFragment*, creationType>(sr, name)));
    }
    // public override Nitro.AddResult AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    // Offset: 0xF61348
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.AddResult CodeFragment::AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    ::Nitro::AddResult AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr);
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod method)
    // Offset: 0xF61384
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod method)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* method);
    // public override System.String ToString()
    // Offset: 0xF61458
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.ForFragment
  #pragma pack(pop)
  static check_size<sizeof(ForFragment), 80 + sizeof(::Nitro::BracketFragment*)> __Nitro_ForFragmentSizeCheck;
  static_assert(sizeof(ForFragment) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ForFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ForFragment::AddTo
// Il2CppName: AddTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::AddResult (Nitro::ForFragment::*)(::Nitro::CodeFragment*, ::Nitro::CodeLexer*)>(&Nitro::ForFragment::AddTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* sr = &::il2cpp_utils::GetClassFromName("Nitro", "CodeLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ForFragment*), "AddTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, sr});
  }
};
// Writing MetadataGetter for method: Nitro::ForFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::ForFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::ForFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ForFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: Nitro::ForFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::ForFragment::*)()>(&Nitro::ForFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::ForFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
