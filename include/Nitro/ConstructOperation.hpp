// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
  // Forward declaring type: TypeFragment
  class TypeFragment;
  // Forward declaring type: BracketFragment
  class BracketFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ConstructOperation
  class ConstructOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ConstructOperation);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ConstructOperation*, "Nitro", "ConstructOperation");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ConstructOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class ConstructOperation : public ::Nitro::Operation {
    public:
    public:
    // public System.Type ObjectType
    // Size: 0x8
    // Offset: 0x68
    ::System::Type* ObjectType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Reflection.ConstructorInfo Constructor
    // Size: 0x8
    // Offset: 0x70
    ::System::Reflection::ConstructorInfo* Constructor;
    // Field size check
    static_assert(sizeof(::System::Reflection::ConstructorInfo*) == 0x8);
    // public Nitro.CompiledFragment[] Parameters
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::Nitro::CompiledFragment*> Parameters;
    // Field size check
    static_assert(sizeof(::ArrayW<::Nitro::CompiledFragment*>) == 0x8);
    public:
    // Get instance field reference: public System.Type ObjectType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_ObjectType();
    // Get instance field reference: public System.Reflection.ConstructorInfo Constructor
    [[deprecated("Use field access instead!")]] ::System::Reflection::ConstructorInfo*& dyn_Constructor();
    // Get instance field reference: public Nitro.CompiledFragment[] Parameters
    [[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& dyn_Parameters();
    // public System.Void .ctor(Nitro.TypeFragment type, Nitro.BracketFragment brackets, Nitro.CompiledMethod method)
    // Offset: 0xF6034C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructOperation* New_ctor(::Nitro::TypeFragment* type, ::Nitro::BracketFragment* brackets, ::Nitro::CompiledMethod* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructOperation*, creationType>(type, brackets, method)));
    }
    // public System.Void .ctor(Nitro.CompiledMethod method, System.Type type, params Nitro.CompiledFragment[] parameters)
    // Offset: 0xF605D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstructOperation* New_ctor(::Nitro::CompiledMethod* method, ::System::Type* type, ::ArrayW<::Nitro::CompiledFragment*> parameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstructOperation*, creationType>(method, type, parameters)));
    }
    // public System.Void SetConstructor()
    // Offset: 0xF60464
    void SetConstructor();
    // public override System.Type OutputType(out Nitro.CompiledFragment v)
    // Offset: 0xF60618
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Type CompiledFragment::OutputType(out Nitro.CompiledFragment v)
    ::System::Type* OutputType(ByRef<::Nitro::CompiledFragment*> v);
    // public override System.Void OutputIL(Nitro.NitroIL into)
    // Offset: 0xF60744
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Void CompiledFragment::OutputIL(Nitro.NitroIL into)
    void OutputIL(::Nitro::NitroIL* into);
  }; // Nitro.ConstructOperation
  #pragma pack(pop)
  static check_size<sizeof(ConstructOperation), 120 + sizeof(::ArrayW<::Nitro::CompiledFragment*>)> __Nitro_ConstructOperationSizeCheck;
  static_assert(sizeof(ConstructOperation) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ConstructOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ConstructOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ConstructOperation::SetConstructor
// Il2CppName: SetConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::ConstructOperation::*)()>(&Nitro::ConstructOperation::SetConstructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::ConstructOperation*), "SetConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::ConstructOperation::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::ConstructOperation::*)(ByRef<::Nitro::CompiledFragment*>)>(&Nitro::ConstructOperation::OutputType)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ConstructOperation*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Nitro::ConstructOperation::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::ConstructOperation::*)(::Nitro::NitroIL*)>(&Nitro::ConstructOperation::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ConstructOperation*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
