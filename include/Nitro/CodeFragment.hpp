// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: TypeFragment
  class TypeFragment;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
  // Forward declaring type: AddResult
  struct AddResult;
  // Forward declaring type: CodeLexer
  class CodeLexer;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeFragment
  class CodeFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CodeFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CodeFragment*, "Nitro", "CodeFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CodeFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class CodeFragment : public ::Il2CppObject {
    public:
    public:
    // public Nitro.TypeFragment GivenType
    // Size: 0x8
    // Offset: 0x10
    ::Nitro::TypeFragment* GivenType;
    // Field size check
    static_assert(sizeof(::Nitro::TypeFragment*) == 0x8);
    // public Nitro.CodeFragment NextChild
    // Size: 0x8
    // Offset: 0x18
    ::Nitro::CodeFragment* NextChild;
    // Field size check
    static_assert(sizeof(::Nitro::CodeFragment*) == 0x8);
    // public Nitro.CodeFragment LastChild
    // Size: 0x8
    // Offset: 0x20
    ::Nitro::CodeFragment* LastChild;
    // Field size check
    static_assert(sizeof(::Nitro::CodeFragment*) == 0x8);
    // public Nitro.CodeFragment FirstChild
    // Size: 0x8
    // Offset: 0x28
    ::Nitro::CodeFragment* FirstChild;
    // Field size check
    static_assert(sizeof(::Nitro::CodeFragment*) == 0x8);
    // public Nitro.CodeFragment PreviousChild
    // Size: 0x8
    // Offset: 0x30
    ::Nitro::CodeFragment* PreviousChild;
    // Field size check
    static_assert(sizeof(::Nitro::CodeFragment*) == 0x8);
    // public Nitro.CodeFragment ParentFragment
    // Size: 0x8
    // Offset: 0x38
    ::Nitro::CodeFragment* ParentFragment;
    // Field size check
    static_assert(sizeof(::Nitro::CodeFragment*) == 0x8);
    public:
    // Get instance field reference: public Nitro.TypeFragment GivenType
    [[deprecated("Use field access instead!")]] ::Nitro::TypeFragment*& dyn_GivenType();
    // Get instance field reference: public Nitro.CodeFragment NextChild
    [[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& dyn_NextChild();
    // Get instance field reference: public Nitro.CodeFragment LastChild
    [[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& dyn_LastChild();
    // Get instance field reference: public Nitro.CodeFragment FirstChild
    [[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& dyn_FirstChild();
    // Get instance field reference: public Nitro.CodeFragment PreviousChild
    [[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& dyn_PreviousChild();
    // Get instance field reference: public Nitro.CodeFragment ParentFragment
    [[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& dyn_ParentFragment();
    // static public System.Int32 IsOfType(System.Char[] arrayToSearch, System.Char charToFind)
    // Offset: 0xF57C00
    static int IsOfType(::ArrayW<::Il2CppChar> arrayToSearch, ::Il2CppChar charToFind);
    // public System.Void Error(System.String message)
    // Offset: 0xF56CB0
    void Error(::StringW message);
    // public System.Int32 GetLineNumber()
    // Offset: 0xF59B0C
    int GetLineNumber();
    // public System.Boolean IsMemberAccessor()
    // Offset: 0xF59B28
    bool IsMemberAccessor();
    // public Nitro.CompiledFragment Compile(Nitro.CompiledMethod method)
    // Offset: 0xF59B30
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* method);
    // public System.Void AddToStart(Nitro.CodeFragment parent)
    // Offset: 0xF59B38
    void AddToStart(::Nitro::CodeFragment* parent);
    // public System.Void AddBefore(Nitro.CodeFragment frag)
    // Offset: 0xF59B64
    void AddBefore(::Nitro::CodeFragment* frag);
    // public System.Void AddAfter(Nitro.CodeFragment frag)
    // Offset: 0xF580C0
    void AddAfter(::Nitro::CodeFragment* frag);
    // public System.Void Remove()
    // Offset: 0xF580EC
    void Remove();
    // public System.Void AddChild(Nitro.CodeFragment child)
    // Offset: 0xF5649C
    void AddChild(::Nitro::CodeFragment* child);
    // public System.Boolean Typeable()
    // Offset: 0xF59BFC
    bool Typeable();
    // public System.Boolean get_IsParent()
    // Offset: 0xF580B0
    bool get_IsParent();
    // public System.Int32 ChildCount()
    // Offset: 0xF59C04
    int ChildCount();
    // public Nitro.AddResult AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    // Offset: 0xF58F54
    ::Nitro::AddResult AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr);
    // public System.Void .ctor()
    // Offset: 0xF56494
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CodeFragment* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CodeFragment*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0xF590A0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Nitro.CodeFragment
  #pragma pack(pop)
  static check_size<sizeof(CodeFragment), 56 + sizeof(::Nitro::CodeFragment*)> __Nitro_CodeFragmentSizeCheck;
  static_assert(sizeof(CodeFragment) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CodeFragment::IsOfType
// Il2CppName: IsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Il2CppChar>, ::Il2CppChar)>(&Nitro::CodeFragment::IsOfType)> {
  static const MethodInfo* get() {
    static auto* arrayToSearch = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* charToFind = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "IsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arrayToSearch, charToFind});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::Error
// Il2CppName: Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)(::StringW)>(&Nitro::CodeFragment::Error)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::GetLineNumber
// Il2CppName: GetLineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::GetLineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "GetLineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::IsMemberAccessor
// Il2CppName: IsMemberAccessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::IsMemberAccessor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "IsMemberAccessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::CodeFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::CodeFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::AddToStart
// Il2CppName: AddToStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)(::Nitro::CodeFragment*)>(&Nitro::CodeFragment::AddToStart)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "AddToStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::AddBefore
// Il2CppName: AddBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)(::Nitro::CodeFragment*)>(&Nitro::CodeFragment::AddBefore)> {
  static const MethodInfo* get() {
    static auto* frag = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "AddBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frag});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::AddAfter
// Il2CppName: AddAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)(::Nitro::CodeFragment*)>(&Nitro::CodeFragment::AddAfter)> {
  static const MethodInfo* get() {
    static auto* frag = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "AddAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frag});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::AddChild
// Il2CppName: AddChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::CodeFragment::*)(::Nitro::CodeFragment*)>(&Nitro::CodeFragment::AddChild)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "AddChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::Typeable
// Il2CppName: Typeable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::Typeable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "Typeable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::get_IsParent
// Il2CppName: get_IsParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::get_IsParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "get_IsParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::ChildCount
// Il2CppName: ChildCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::ChildCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "ChildCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::AddTo
// Il2CppName: AddTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::AddResult (Nitro::CodeFragment::*)(::Nitro::CodeFragment*, ::Nitro::CodeLexer*)>(&Nitro::CodeFragment::AddTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* sr = &::il2cpp_utils::GetClassFromName("Nitro", "CodeLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "AddTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, sr});
  }
};
// Writing MetadataGetter for method: Nitro::CodeFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CodeFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::CodeFragment::*)()>(&Nitro::CodeFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CodeFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
