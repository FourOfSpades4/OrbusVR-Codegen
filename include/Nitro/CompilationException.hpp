// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: CompilationException
  class CompilationException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::CompilationException);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::CompilationException*, "Nitro", "CompilationException");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.CompilationException
  // [TokenAttribute] Offset: FFFFFFFF
  class CompilationException : public ::System::Exception {
    public:
    public:
    // public System.Int32 LineNumber
    // Size: 0x4
    // Offset: 0x88
    int LineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return LineNumber;
    }
    // Get instance field reference: public System.Int32 LineNumber
    [[deprecated("Use field access instead!")]] int& dyn_LineNumber();
    // public System.Void .ctor(System.String errorMessage)
    // Offset: 0xF59A8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompilationException* New_ctor(::StringW errorMessage) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompilationException*, creationType>(errorMessage)));
    }
    // public override System.String ToString()
    // Offset: 0xF5A81C
    // Implemented from: System.Exception
    // Base method: System.String Exception::ToString()
    ::StringW ToString();
  }; // Nitro.CompilationException
  #pragma pack(pop)
  static check_size<sizeof(CompilationException), 136 + sizeof(int)> __Nitro_CompilationExceptionSizeCheck;
  static_assert(sizeof(CompilationException) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::CompilationException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::CompilationException::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::CompilationException::*)()>(&Nitro::CompilationException::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::CompilationException*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
