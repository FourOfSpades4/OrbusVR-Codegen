// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: Variable
  class Variable;
  // Forward declaring type: BracketFragment
  class BracketFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
  // Forward declaring type: NitroIL
  class NitroIL;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: SwitchOperation
  class SwitchOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::SwitchOperation);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::SwitchOperation*, "Nitro", "SwitchOperation");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.SwitchOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class SwitchOperation : public ::Nitro::Operation {
    public:
    public:
    // public Nitro.Variable Switching
    // Size: 0x8
    // Offset: 0x68
    ::Nitro::Variable* Switching;
    // Field size check
    static_assert(sizeof(::Nitro::Variable*) == 0x8);
    // public Nitro.BracketFragment Body
    // Size: 0x8
    // Offset: 0x70
    ::Nitro::BracketFragment* Body;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    public:
    // Get instance field reference: public Nitro.Variable Switching
    [[deprecated("Use field access instead!")]] ::Nitro::Variable*& dyn_Switching();
    // Get instance field reference: public Nitro.BracketFragment Body
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_Body();
    // public System.Void .ctor(Nitro.CompiledMethod method, Nitro.BracketFragment switching, Nitro.BracketFragment body)
    // Offset: 0x16EA628
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SwitchOperation* New_ctor(::Nitro::CompiledMethod* method, ::Nitro::BracketFragment* switching, ::Nitro::BracketFragment* body) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SwitchOperation*, creationType>(method, switching, body)));
    }
    // public override System.Boolean get_RequiresStoring()
    // Offset: 0x16EA828
    // Implemented from: Nitro.Operation
    // Base method: System.Boolean Operation::get_RequiresStoring()
    bool get_RequiresStoring();
    // public override System.Type OutputType(out Nitro.CompiledFragment v)
    // Offset: 0x16EA830
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Type CompiledFragment::OutputType(out Nitro.CompiledFragment v)
    ::System::Type* OutputType(ByRef<::Nitro::CompiledFragment*> v);
    // public override System.Void OutputIL(Nitro.NitroIL into)
    // Offset: 0x16EA83C
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Void CompiledFragment::OutputIL(Nitro.NitroIL into)
    void OutputIL(::Nitro::NitroIL* into);
  }; // Nitro.SwitchOperation
  #pragma pack(pop)
  static check_size<sizeof(SwitchOperation), 112 + sizeof(::Nitro::BracketFragment*)> __Nitro_SwitchOperationSizeCheck;
  static_assert(sizeof(SwitchOperation) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::SwitchOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::SwitchOperation::get_RequiresStoring
// Il2CppName: get_RequiresStoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::SwitchOperation::*)()>(&Nitro::SwitchOperation::get_RequiresStoring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::SwitchOperation*), "get_RequiresStoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::SwitchOperation::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::SwitchOperation::*)(ByRef<::Nitro::CompiledFragment*>)>(&Nitro::SwitchOperation::OutputType)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::SwitchOperation*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Nitro::SwitchOperation::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::SwitchOperation::*)(::Nitro::NitroIL*)>(&Nitro::SwitchOperation::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::SwitchOperation*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
