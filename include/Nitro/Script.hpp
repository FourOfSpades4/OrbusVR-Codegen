// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: Script
  class Script;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::Script);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::Script*, "Nitro", "Script");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.Script
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD1168
  class Script : public ::Il2CppObject {
    public:
    // public System.Object Run(System.String functionName, params System.Object[] args)
    // Offset: 0x16E8378
    ::Il2CppObject* Run(::StringW functionName, ::ArrayW<::Il2CppObject*> args);
    // public System.Object Run(System.String functionName, System.Type[] typeSet, params System.Object[] args)
    // Offset: 0x16E8394
    ::Il2CppObject* Run(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args);
    // public System.Void OnScriptReady()
    // Offset: 0x16E839C
    void OnScriptReady();
    // public System.Object RunLiteral(System.String functionName, System.Object[] args)
    // Offset: 0x16E83A0
    ::Il2CppObject* RunLiteral(::StringW functionName, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String functionName, System.Type[] typeSet, System.Object[] args)
    // Offset: 0x16E838C
    ::Il2CppObject* RunLiteral(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String functionName, System.Object[] args, System.Boolean optional)
    // Offset: 0x16E86F4
    ::Il2CppObject* RunLiteral(::StringW functionName, ::ArrayW<::Il2CppObject*> args, bool optional);
    // public System.Object RunLiteral(System.String functionName, System.Type[] typeSet, System.Object[] args, System.Boolean optional)
    // Offset: 0x16E83B4
    ::Il2CppObject* RunLiteral(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args, bool optional);
    // public System.Object get_Item(System.String property)
    // Offset: 0x16E8708
    ::Il2CppObject* get_Item(::StringW property);
    // public System.Void set_Item(System.String property, System.Object value)
    // Offset: 0x16E8844
    void set_Item(::StringW property, ::Il2CppObject* value);
    // public System.Void .ctor()
    // Offset: 0x16E897C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Script* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Script*, creationType>()));
    }
  }; // Nitro.Script
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::Script::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Nitro::Script::Run)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, args});
  }
};
// Writing MetadataGetter for method: Nitro::Script::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::System::Type*>, ::ArrayW<::Il2CppObject*>)>(&Nitro::Script::Run)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeSet = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, typeSet, args});
  }
};
// Writing MetadataGetter for method: Nitro::Script::OnScriptReady
// Il2CppName: OnScriptReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::Script::*)()>(&Nitro::Script::OnScriptReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "OnScriptReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::Script::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Nitro::Script::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, args});
  }
};
// Writing MetadataGetter for method: Nitro::Script::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::System::Type*>, ::ArrayW<::Il2CppObject*>)>(&Nitro::Script::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeSet = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, typeSet, args});
  }
};
// Writing MetadataGetter for method: Nitro::Script::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::Il2CppObject*>, bool)>(&Nitro::Script::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* optional = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, args, optional});
  }
};
// Writing MetadataGetter for method: Nitro::Script::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW, ::ArrayW<::System::Type*>, ::ArrayW<::Il2CppObject*>, bool)>(&Nitro::Script::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* functionName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeSet = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* optional = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{functionName, typeSet, args, optional});
  }
};
// Writing MetadataGetter for method: Nitro::Script::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Nitro::Script::*)(::StringW)>(&Nitro::Script::get_Item)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: Nitro::Script::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::Script::*)(::StringW, ::Il2CppObject*)>(&Nitro::Script::set_Item)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::Script*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: Nitro::Script::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
