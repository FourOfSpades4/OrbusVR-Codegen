// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeLexer
  class CodeLexer;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: AddResult
  struct AddResult;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: BracketFragment
  class BracketFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::BracketFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::BracketFragment*, "Nitro", "BracketFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.BracketFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class BracketFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public System.Char Bracket
    // Size: 0x2
    // Offset: 0x40
    ::Il2CppChar Bracket;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // public System.Char CloseBracket
    // Size: 0x2
    // Offset: 0x42
    ::Il2CppChar CloseBracket;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    public:
    // Get static field: static public System.Char[] Brackets
    static ::ArrayW<::Il2CppChar> _get_Brackets();
    // Set static field: static public System.Char[] Brackets
    static void _set_Brackets(::ArrayW<::Il2CppChar> value);
    // Get static field: static public System.Char[] EndBrackets
    static ::ArrayW<::Il2CppChar> _get_EndBrackets();
    // Set static field: static public System.Char[] EndBrackets
    static void _set_EndBrackets(::ArrayW<::Il2CppChar> value);
    // Get instance field reference: public System.Char Bracket
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_Bracket();
    // Get instance field reference: public System.Char CloseBracket
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_CloseBracket();
    // static public System.Boolean WillHandle(System.Char character)
    // Offset: 0xF57B20
    static bool WillHandle(::Il2CppChar character);
    // static public System.Int32 IsBracket(System.Char character)
    // Offset: 0xF57B90
    static int IsBracket(::Il2CppChar character);
    // static public System.Int32 IsEndBracket(System.Char character)
    // Offset: 0xF57C80
    static int IsEndBracket(::Il2CppChar character);
    // static public System.Boolean AnyBracket(System.Char character)
    // Offset: 0xF57CF0
    static bool AnyBracket(::Il2CppChar character);
    // public System.Void .ctor(Nitro.CodeLexer sr)
    // Offset: 0xF57E14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BracketFragment* New_ctor(::Nitro::CodeLexer* sr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BracketFragment*, creationType>(sr)));
    }
    // public System.Void .ctor(Nitro.CodeLexer sr, System.Boolean readBracket)
    // Offset: 0xF57358
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BracketFragment* New_ctor(::Nitro::CodeLexer* sr, bool readBracket) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BracketFragment*, creationType>(sr, readBracket)));
    }
    // public System.Boolean CompileBody(Nitro.CompiledMethod method)
    // Offset: 0xF581BC
    bool CompileBody(::Nitro::CompiledMethod* method);
    // static private System.Void .cctor()
    // Offset: 0xF59124
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0xF57D90
    // Implemented from: Nitro.CodeFragment
    // Base method: System.Void CodeFragment::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BracketFragment* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BracketFragment*, creationType>()));
    }
    // public override System.Boolean Typeable()
    // Offset: 0xF57E1C
    // Implemented from: Nitro.CodeFragment
    // Base method: System.Boolean CodeFragment::Typeable()
    bool Typeable();
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod method)
    // Offset: 0xF57E24
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod method)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* method);
    // public override Nitro.AddResult AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    // Offset: 0xF588B0
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.AddResult CodeFragment::AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    ::Nitro::AddResult AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr);
    // public override System.String ToString()
    // Offset: 0xF58F90
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.BracketFragment
  #pragma pack(pop)
  static check_size<sizeof(BracketFragment), 66 + sizeof(::Il2CppChar)> __Nitro_BracketFragmentSizeCheck;
  static_assert(sizeof(BracketFragment) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::BracketFragment::WillHandle
// Il2CppName: WillHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::BracketFragment::WillHandle)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "WillHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::IsBracket
// Il2CppName: IsBracket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&Nitro::BracketFragment::IsBracket)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "IsBracket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::IsEndBracket
// Il2CppName: IsEndBracket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&Nitro::BracketFragment::IsEndBracket)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "IsEndBracket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::AnyBracket
// Il2CppName: AnyBracket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::BracketFragment::AnyBracket)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "AnyBracket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::BracketFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::BracketFragment::CompileBody
// Il2CppName: CompileBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::BracketFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::BracketFragment::CompileBody)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "CompileBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::BracketFragment::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::BracketFragment::Typeable
// Il2CppName: Typeable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::BracketFragment::*)()>(&Nitro::BracketFragment::Typeable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "Typeable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::BracketFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::BracketFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::AddTo
// Il2CppName: AddTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::AddResult (Nitro::BracketFragment::*)(::Nitro::CodeFragment*, ::Nitro::CodeLexer*)>(&Nitro::BracketFragment::AddTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* sr = &::il2cpp_utils::GetClassFromName("Nitro", "CodeLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "AddTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, sr});
  }
};
// Writing MetadataGetter for method: Nitro::BracketFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::BracketFragment::*)()>(&Nitro::BracketFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::BracketFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
