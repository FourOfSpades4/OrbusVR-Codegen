// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: Handler
  struct Handler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Nitro::Handler, "Nitro", "Handler");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.Handler
  // [TokenAttribute] Offset: FFFFFFFF
  struct Handler/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Handler
    constexpr Handler(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Nitro.Handler Stop
    static constexpr const int Stop = 0;
    // Get static field: static public Nitro.Handler Stop
    static ::Nitro::Handler _get_Stop();
    // Set static field: static public Nitro.Handler Stop
    static void _set_Stop(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Brackets
    static constexpr const int Brackets = 1;
    // Get static field: static public Nitro.Handler Brackets
    static ::Nitro::Handler _get_Brackets();
    // Set static field: static public Nitro.Handler Brackets
    static void _set_Brackets(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler String
    static constexpr const int String = 2;
    // Get static field: static public Nitro.Handler String
    static ::Nitro::Handler _get_String();
    // Set static field: static public Nitro.Handler String
    static void _set_String(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Type
    static constexpr const int Type = 3;
    // Get static field: static public Nitro.Handler Type
    static ::Nitro::Handler _get_Type();
    // Set static field: static public Nitro.Handler Type
    static void _set_Type(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Operator
    static constexpr const int Operator = 4;
    // Get static field: static public Nitro.Handler Operator
    static ::Nitro::Handler _get_Operator();
    // Set static field: static public Nitro.Handler Operator
    static void _set_Operator(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Number
    static constexpr const int Number = 5;
    // Get static field: static public Nitro.Handler Number
    static ::Nitro::Handler _get_Number();
    // Set static field: static public Nitro.Handler Number
    static void _set_Number(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Variable
    static constexpr const int Variable = 6;
    // Get static field: static public Nitro.Handler Variable
    static ::Nitro::Handler _get_Variable();
    // Set static field: static public Nitro.Handler Variable
    static void _set_Variable(::Nitro::Handler value);
    // static field const value: static public Nitro.Handler Property
    static constexpr const int Property = 7;
    // Get static field: static public Nitro.Handler Property
    static ::Nitro::Handler _get_Property();
    // Set static field: static public Nitro.Handler Property
    static void _set_Property(::Nitro::Handler value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Nitro.Handler
  #pragma pack(pop)
  static check_size<sizeof(Handler), 0 + sizeof(int)> __Nitro_HandlerSizeCheck;
  static_assert(sizeof(Handler) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
