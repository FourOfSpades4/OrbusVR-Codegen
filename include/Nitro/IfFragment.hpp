// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: BracketFragment
  class BracketFragment;
  // Forward declaring type: CodeLexer
  class CodeLexer;
  // Forward declaring type: AddResult
  struct AddResult;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: IfFragment
  class IfFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::IfFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::IfFragment*, "Nitro", "IfFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.IfFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class IfFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public Nitro.IfFragment ApplyElseTo
    // Size: 0x8
    // Offset: 0x40
    ::Nitro::IfFragment* ApplyElseTo;
    // Field size check
    static_assert(sizeof(::Nitro::IfFragment*) == 0x8);
    // public Nitro.BracketFragment IfTrue
    // Size: 0x8
    // Offset: 0x48
    ::Nitro::BracketFragment* IfTrue;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    // public Nitro.BracketFragment IfFalse
    // Size: 0x8
    // Offset: 0x50
    ::Nitro::BracketFragment* IfFalse;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    // public Nitro.BracketFragment Condition
    // Size: 0x8
    // Offset: 0x58
    ::Nitro::BracketFragment* Condition;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    public:
    // Get instance field reference: public Nitro.IfFragment ApplyElseTo
    [[deprecated("Use field access instead!")]] ::Nitro::IfFragment*& dyn_ApplyElseTo();
    // Get instance field reference: public Nitro.BracketFragment IfTrue
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_IfTrue();
    // Get instance field reference: public Nitro.BracketFragment IfFalse
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_IfFalse();
    // Get instance field reference: public Nitro.BracketFragment Condition
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_Condition();
    // public System.Void .ctor(Nitro.CodeLexer sr)
    // Offset: 0xF6237C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IfFragment* New_ctor(::Nitro::CodeLexer* sr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IfFragment*, creationType>(sr)));
    }
    // public System.Void SetIfFalse(Nitro.BracketFragment ifFalse)
    // Offset: 0xF6242C
    void SetIfFalse(::Nitro::BracketFragment* ifFalse);
    // public override Nitro.AddResult AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    // Offset: 0xF62434
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.AddResult CodeFragment::AddTo(Nitro.CodeFragment to, Nitro.CodeLexer sr)
    ::Nitro::AddResult AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr);
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod method)
    // Offset: 0xF62470
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod method)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* method);
    // public override System.String ToString()
    // Offset: 0xF6259C
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.IfFragment
  #pragma pack(pop)
  static check_size<sizeof(IfFragment), 88 + sizeof(::Nitro::BracketFragment*)> __Nitro_IfFragmentSizeCheck;
  static_assert(sizeof(IfFragment) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::IfFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::IfFragment::SetIfFalse
// Il2CppName: SetIfFalse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::IfFragment::*)(::Nitro::BracketFragment*)>(&Nitro::IfFragment::SetIfFalse)> {
  static const MethodInfo* get() {
    static auto* ifFalse = &::il2cpp_utils::GetClassFromName("Nitro", "BracketFragment")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::IfFragment*), "SetIfFalse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ifFalse});
  }
};
// Writing MetadataGetter for method: Nitro::IfFragment::AddTo
// Il2CppName: AddTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::AddResult (Nitro::IfFragment::*)(::Nitro::CodeFragment*, ::Nitro::CodeLexer*)>(&Nitro::IfFragment::AddTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("Nitro", "CodeFragment")->byval_arg;
    static auto* sr = &::il2cpp_utils::GetClassFromName("Nitro", "CodeLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::IfFragment*), "AddTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, sr});
  }
};
// Writing MetadataGetter for method: Nitro::IfFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::IfFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::IfFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::IfFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: Nitro::IfFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::IfFragment::*)()>(&Nitro::IfFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::IfFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
