// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CompilationException
#include "Nitro/CompilationException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ReferenceError
  class ReferenceError;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ReferenceError);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ReferenceError*, "Nitro", "ReferenceError");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ReferenceError
  // [TokenAttribute] Offset: FFFFFFFF
  class ReferenceError : public ::Nitro::CompilationException {
    public:
    // public System.Void .ctor(System.String varName)
    // Offset: 0x16E8014
    // Implemented from: Nitro.CompilationException
    // Base method: System.Void CompilationException::.ctor(System.String varName)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReferenceError* New_ctor(::StringW varName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ReferenceError::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReferenceError*, creationType>(varName)));
    }
  }; // Nitro.ReferenceError
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ReferenceError::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
