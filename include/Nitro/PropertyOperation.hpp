// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.ISettable
#include "Nitro/ISettable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
  // Forward declaring type: NitroIL
  class NitroIL;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: PropertyOperation
  class PropertyOperation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::PropertyOperation);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::PropertyOperation*, "Nitro", "PropertyOperation");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.PropertyOperation
  // [TokenAttribute] Offset: FFFFFFFF
  class PropertyOperation : public ::Nitro::Operation/*, public ::Nitro::ISettable*/ {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x68
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean IsStatic
    // Size: 0x1
    // Offset: 0x70
    bool IsStatic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsStatic and: Field
    char __padding1[0x7] = {};
    // public System.Reflection.FieldInfo Field
    // Size: 0x8
    // Offset: 0x78
    ::System::Reflection::FieldInfo* Field;
    // Field size check
    static_assert(sizeof(::System::Reflection::FieldInfo*) == 0x8);
    // public Nitro.CompiledFragment Of
    // Size: 0x8
    // Offset: 0x80
    ::Nitro::CompiledFragment* Of;
    // Field size check
    static_assert(sizeof(::Nitro::CompiledFragment*) == 0x8);
    // public System.Reflection.PropertyInfo Property
    // Size: 0x8
    // Offset: 0x88
    ::System::Reflection::PropertyInfo* Property;
    // Field size check
    static_assert(sizeof(::System::Reflection::PropertyInfo*) == 0x8);
    // public System.Type MethodReturnType
    // Size: 0x8
    // Offset: 0x90
    ::System::Type* MethodReturnType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Collections.Generic.List`1<System.Reflection.MethodInfo> Methods
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>* Methods;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Nitro::ISettable
    operator ::Nitro::ISettable() noexcept {
      return *reinterpret_cast<::Nitro::ISettable*>(this);
    }
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.Boolean IsStatic
    [[deprecated("Use field access instead!")]] bool& dyn_IsStatic();
    // Get instance field reference: public System.Reflection.FieldInfo Field
    [[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& dyn_Field();
    // Get instance field reference: public Nitro.CompiledFragment Of
    [[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& dyn_Of();
    // Get instance field reference: public System.Reflection.PropertyInfo Property
    [[deprecated("Use field access instead!")]] ::System::Reflection::PropertyInfo*& dyn_Property();
    // Get instance field reference: public System.Type MethodReturnType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_MethodReturnType();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Reflection.MethodInfo> Methods
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>*& dyn_Methods();
    // public System.Void .ctor(Nitro.CompiledMethod method, System.String name)
    // Offset: 0x16E511C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PropertyOperation* New_ctor(::Nitro::CompiledMethod* method, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PropertyOperation*, creationType>(method, name)));
    }
    // public System.Void .ctor(Nitro.CompiledMethod method, Nitro.CompiledFragment of, System.String name)
    // Offset: 0x16E5000
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PropertyOperation* New_ctor(::Nitro::CompiledMethod* method, ::Nitro::CompiledFragment* of, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PropertyOperation*, creationType>(method, of, name)));
    }
    // public System.Type OfType()
    // Offset: 0x16E51A4
    ::System::Type* OfType();
    // public System.Reflection.MethodInfo FindExtensionMethod(System.Type type, System.String alternative)
    // Offset: 0x16E53F4
    ::System::Reflection::MethodInfo* FindExtensionMethod(::System::Type* type, ::StringW alternative);
    // public System.Boolean Equals(Nitro.PropertyOperation prop)
    // Offset: 0x16E6994
    bool Equals(::Nitro::PropertyOperation* prop);
    // public System.Reflection.MethodInfo GetOverload(Nitro.CompiledFragment[] arguments)
    // Offset: 0x16E6AEC
    ::System::Reflection::MethodInfo* GetOverload(::ArrayW<::Nitro::CompiledFragment*> arguments);
    // public System.Reflection.MethodInfo GetOverload(System.Type[] paramTypes)
    // Offset: 0x16E71CC
    ::System::Reflection::MethodInfo* GetOverload(::ArrayW<::System::Type*> paramTypes);
    // public System.Boolean OutputTarget(Nitro.NitroIL into)
    // Offset: 0x16E74C4
    bool OutputTarget(::Nitro::NitroIL* into);
    // public System.Void OutputSet(Nitro.NitroIL into, System.Type setting)
    // Offset: 0x16E7620
    void OutputSet(::Nitro::NitroIL* into, ::System::Type* setting);
    // public override System.Boolean IsMemberAccessor()
    // Offset: 0x16E519C
    // Implemented from: Nitro.CodeFragment
    // Base method: System.Boolean CodeFragment::IsMemberAccessor()
    bool IsMemberAccessor();
    // public override System.Type OutputType(out Nitro.CompiledFragment v)
    // Offset: 0x16E571C
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Type CompiledFragment::OutputType(out Nitro.CompiledFragment v)
    ::System::Type* OutputType(ByRef<::Nitro::CompiledFragment*> v);
    // public override System.Void OutputIL(Nitro.NitroIL into)
    // Offset: 0x16E79B8
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Void CompiledFragment::OutputIL(Nitro.NitroIL into)
    void OutputIL(::Nitro::NitroIL* into);
    // public override System.Boolean get_EmitsAddress()
    // Offset: 0x16E7F10
    // Implemented from: Nitro.CompiledFragment
    // Base method: System.Boolean CompiledFragment::get_EmitsAddress()
    bool get_EmitsAddress();
    // public override System.String ToString()
    // Offset: 0x16E7F6C
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.PropertyOperation
  #pragma pack(pop)
  static check_size<sizeof(PropertyOperation), 152 + sizeof(::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>*)> __Nitro_PropertyOperationSizeCheck;
  static_assert(sizeof(PropertyOperation) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::PropertyOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::PropertyOperation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::PropertyOperation::OfType
// Il2CppName: OfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::PropertyOperation::*)()>(&Nitro::PropertyOperation::OfType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "OfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::FindExtensionMethod
// Il2CppName: FindExtensionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (Nitro::PropertyOperation::*)(::System::Type*, ::StringW)>(&Nitro::PropertyOperation::FindExtensionMethod)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* alternative = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "FindExtensionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, alternative});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::PropertyOperation::*)(::Nitro::PropertyOperation*)>(&Nitro::PropertyOperation::Equals)> {
  static const MethodInfo* get() {
    static auto* prop = &::il2cpp_utils::GetClassFromName("Nitro", "PropertyOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prop});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::GetOverload
// Il2CppName: GetOverload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (Nitro::PropertyOperation::*)(::ArrayW<::Nitro::CompiledFragment*>)>(&Nitro::PropertyOperation::GetOverload)> {
  static const MethodInfo* get() {
    static auto* arguments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "GetOverload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arguments});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::GetOverload
// Il2CppName: GetOverload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (Nitro::PropertyOperation::*)(::ArrayW<::System::Type*>)>(&Nitro::PropertyOperation::GetOverload)> {
  static const MethodInfo* get() {
    static auto* paramTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "GetOverload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramTypes});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::OutputTarget
// Il2CppName: OutputTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::PropertyOperation::*)(::Nitro::NitroIL*)>(&Nitro::PropertyOperation::OutputTarget)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "OutputTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::OutputSet
// Il2CppName: OutputSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::PropertyOperation::*)(::Nitro::NitroIL*, ::System::Type*)>(&Nitro::PropertyOperation::OutputSet)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    static auto* setting = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "OutputSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into, setting});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::IsMemberAccessor
// Il2CppName: IsMemberAccessor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::PropertyOperation::*)()>(&Nitro::PropertyOperation::IsMemberAccessor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "IsMemberAccessor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::OutputType
// Il2CppName: OutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Nitro::PropertyOperation::*)(ByRef<::Nitro::CompiledFragment*>)>(&Nitro::PropertyOperation::OutputType)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledFragment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "OutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::OutputIL
// Il2CppName: OutputIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::PropertyOperation::*)(::Nitro::NitroIL*)>(&Nitro::PropertyOperation::OutputIL)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "OutputIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::get_EmitsAddress
// Il2CppName: get_EmitsAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::PropertyOperation::*)()>(&Nitro::PropertyOperation::get_EmitsAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "get_EmitsAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::PropertyOperation::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::PropertyOperation::*)()>(&Nitro::PropertyOperation::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::PropertyOperation*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
