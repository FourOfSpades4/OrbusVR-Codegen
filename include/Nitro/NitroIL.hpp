// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection::Emit
namespace System::Reflection::Emit {
  // Forward declaring type: ILGenerator
  class ILGenerator;
  // Forward declaring type: Label
  struct Label;
  // Forward declaring type: OpCode
  struct OpCode;
  // Forward declaring type: LocalBuilder
  class LocalBuilder;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::NitroIL);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::NitroIL*, "Nitro", "NitroIL");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.NitroIL
  // [TokenAttribute] Offset: FFFFFFFF
  class NitroIL : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 ILLine
    // Size: 0x4
    // Offset: 0x10
    int ILLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ILLine and: DebugOutput
    char __padding0[0x4] = {};
    // public System.String DebugOutput
    // Size: 0x8
    // Offset: 0x18
    ::StringW DebugOutput;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Reflection.Emit.ILGenerator Generator
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::Emit::ILGenerator* Generator;
    // Field size check
    static_assert(sizeof(::System::Reflection::Emit::ILGenerator*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 ILLine
    [[deprecated("Use field access instead!")]] int& dyn_ILLine();
    // Get instance field reference: public System.String DebugOutput
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DebugOutput();
    // Get instance field reference: public System.Reflection.Emit.ILGenerator Generator
    [[deprecated("Use field access instead!")]] ::System::Reflection::Emit::ILGenerator*& dyn_Generator();
    // public System.Void .ctor(System.Reflection.Emit.ILGenerator generator)
    // Offset: 0xF5FD98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NitroIL* New_ctor(::System::Reflection::Emit::ILGenerator* generator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NitroIL*, creationType>(generator)));
    }
    // public System.Void Output(System.String line)
    // Offset: 0xF687F0
    void Output(::StringW line);
    // public System.Reflection.Emit.Label DefineLabel()
    // Offset: 0xF5FDC4
    ::System::Reflection::Emit::Label DefineLabel();
    // public System.Void MarkLabel(System.Reflection.Emit.Label label)
    // Offset: 0xF61B5C
    void MarkLabel(::System::Reflection::Emit::Label label);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode)
    // Offset: 0xF55B10
    void Emit(::System::Reflection::Emit::OpCode opcode);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder builder)
    // Offset: 0xF57208
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::Emit::LocalBuilder* builder);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo constructor)
    // Offset: 0xF608D4
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::ConstructorInfo* constructor);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo method)
    // Offset: 0xF60CF8
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::MethodInfo* method);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field)
    // Offset: 0xF68A6C
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::FieldInfo* field);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Byte value)
    // Offset: 0xF5EEEC
    void Emit(::System::Reflection::Emit::OpCode opcode, uint8_t value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.SByte value)
    // Offset: 0xF5EF38
    void Emit(::System::Reflection::Emit::OpCode opcode, int8_t value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Double value)
    // Offset: 0xF5EE54
    void Emit(::System::Reflection::Emit::OpCode opcode, double value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Single value)
    // Offset: 0xF5EE04
    void Emit(::System::Reflection::Emit::OpCode opcode, float value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Int16 value)
    // Offset: 0xF5EEA0
    void Emit(::System::Reflection::Emit::OpCode opcode, int16_t value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Int32 value)
    // Offset: 0xF57130
    void Emit(::System::Reflection::Emit::OpCode opcode, int value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Int64 value)
    // Offset: 0xF5EDB8
    void Emit(::System::Reflection::Emit::OpCode opcode, int64_t value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.String value)
    // Offset: 0xF5ED68
    void Emit(::System::Reflection::Emit::OpCode opcode, ::StringW value);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Type type)
    // Offset: 0xF5717C
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Type* type);
    // public System.Void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label)
    // Offset: 0xF5947C
    void Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::Emit::Label label);
    // public System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType)
    // Offset: 0xF571CC
    ::System::Reflection::Emit::LocalBuilder* DeclareLocal(::System::Type* localType);
    // public System.Void Done(System.String message)
    // Offset: 0xF60094
    void Done(::StringW message);
  }; // Nitro.NitroIL
  #pragma pack(pop)
  static check_size<sizeof(NitroIL), 32 + sizeof(::System::Reflection::Emit::ILGenerator*)> __Nitro_NitroILSizeCheck;
  static_assert(sizeof(NitroIL) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::NitroIL::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::NitroIL::Output
// Il2CppName: Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::StringW)>(&Nitro::NitroIL::Output)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::DefineLabel
// Il2CppName: DefineLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Emit::Label (Nitro::NitroIL::*)()>(&Nitro::NitroIL::DefineLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "DefineLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::MarkLabel
// Il2CppName: MarkLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::Label)>(&Nitro::NitroIL::MarkLabel)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "Label")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "MarkLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Reflection::Emit::LocalBuilder*)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "LocalBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, builder});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Reflection::ConstructorInfo*)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* constructor = &::il2cpp_utils::GetClassFromName("System.Reflection", "ConstructorInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, constructor});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Reflection::MethodInfo*)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, method});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Reflection::FieldInfo*)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* field = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, field});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, uint8_t)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, int8_t)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, double)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, float)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, int16_t)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, int)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, int64_t)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::StringW)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, value});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Type*)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, type});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::System::Reflection::Emit::OpCode, ::System::Reflection::Emit::Label)>(&Nitro::NitroIL::Emit)> {
  static const MethodInfo* get() {
    static auto* opcode = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "OpCode")->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System.Reflection.Emit", "Label")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opcode, label});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::DeclareLocal
// Il2CppName: DeclareLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Emit::LocalBuilder* (Nitro::NitroIL::*)(::System::Type*)>(&Nitro::NitroIL::DeclareLocal)> {
  static const MethodInfo* get() {
    static auto* localType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "DeclareLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localType});
  }
};
// Writing MetadataGetter for method: Nitro::NitroIL::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::NitroIL::*)(::StringW)>(&Nitro::NitroIL::Done)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NitroIL*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
