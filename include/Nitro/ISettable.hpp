// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroIL
  class NitroIL;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ISettable
  class ISettable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ISettable);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ISettable*, "Nitro", "ISettable");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ISettable
  // [TokenAttribute] Offset: FFFFFFFF
  class ISettable {
    public:
    // public System.Void OutputSet(Nitro.NitroIL into, System.Type setting)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OutputSet(::Nitro::NitroIL* into, ::System::Type* setting);
    // public System.Boolean OutputTarget(Nitro.NitroIL into)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool OutputTarget(::Nitro::NitroIL* into);
  }; // Nitro.ISettable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ISettable::OutputSet
// Il2CppName: OutputSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Nitro::ISettable::*)(::Nitro::NitroIL*, ::System::Type*)>(&Nitro::ISettable::OutputSet)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    static auto* setting = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ISettable*), "OutputSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into, setting});
  }
};
// Writing MetadataGetter for method: Nitro::ISettable::OutputTarget
// Il2CppName: OutputTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Nitro::ISettable::*)(::Nitro::NitroIL*)>(&Nitro::ISettable::OutputTarget)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("Nitro", "NitroIL")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ISettable*), "OutputTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
