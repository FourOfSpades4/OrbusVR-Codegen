// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeLexer
  class CodeLexer;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: NumberFragment
  class NumberFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::NumberFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::NumberFragment*, "Nitro", "NumberFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.NumberFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class NumberFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public System.Boolean Float
    // Size: 0x1
    // Offset: 0x40
    bool Float;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Float and: Value
    char __padding0[0x7] = {};
    // public System.String Value
    // Size: 0x8
    // Offset: 0x48
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static public System.Char[] Number
    static ::ArrayW<::Il2CppChar> _get_Number();
    // Set static field: static public System.Char[] Number
    static void _set_Number(::ArrayW<::Il2CppChar> value);
    // Get instance field reference: public System.Boolean Float
    [[deprecated("Use field access instead!")]] bool& dyn_Float();
    // Get instance field reference: public System.String Value
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Value();
    // static public System.Boolean WillHandle(System.Char character)
    // Offset: 0x16E0DD8
    static bool WillHandle(::Il2CppChar character);
    // public System.Void .ctor(Nitro.CodeLexer sr)
    // Offset: 0x16E0E68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberFragment* New_ctor(::Nitro::CodeLexer* sr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberFragment*, creationType>(sr)));
    }
    // static private System.Void .cctor()
    // Offset: 0x16E11AC
    static void _cctor();
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod parent)
    // Offset: 0x16E104C
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod parent)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* parent);
    // public override System.String ToString()
    // Offset: 0x16E1144
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.NumberFragment
  #pragma pack(pop)
  static check_size<sizeof(NumberFragment), 72 + sizeof(::StringW)> __Nitro_NumberFragmentSizeCheck;
  static_assert(sizeof(NumberFragment) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::NumberFragment::WillHandle
// Il2CppName: WillHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::NumberFragment::WillHandle)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NumberFragment*), "WillHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::NumberFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::NumberFragment::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::NumberFragment::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NumberFragment*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::NumberFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::NumberFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::NumberFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::NumberFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: Nitro::NumberFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::NumberFragment::*)()>(&Nitro::NumberFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::NumberFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
