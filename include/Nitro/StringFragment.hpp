// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: CodeLexer
  class CodeLexer;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: StringFragment
  class StringFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::StringFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::StringFragment*, "Nitro", "StringFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.StringFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class StringFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public System.String Value
    // Size: 0x8
    // Offset: 0x40
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Value;
    }
    // Get static field: static public System.Char Delimiter
    static ::Il2CppChar _get_Delimiter();
    // Set static field: static public System.Char Delimiter
    static void _set_Delimiter(::Il2CppChar value);
    // Get static field: static public System.Char[] Quotes
    static ::ArrayW<::Il2CppChar> _get_Quotes();
    // Set static field: static public System.Char[] Quotes
    static void _set_Quotes(::ArrayW<::Il2CppChar> value);
    // Get instance field reference: public System.String Value
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Value();
    // static public System.Boolean WillHandle(System.Char character)
    // Offset: 0x16E9D88
    static bool WillHandle(::Il2CppChar character);
    // static public System.Int32 IsQuote(System.Char character)
    // Offset: 0x16E9DF8
    static int IsQuote(::Il2CppChar character);
    // public System.Void .ctor(Nitro.CodeLexer sr)
    // Offset: 0x16E9E6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringFragment* New_ctor(::Nitro::CodeLexer* sr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringFragment*, creationType>(sr)));
    }
    // public System.Void .ctor(System.String value)
    // Offset: 0x16EA06C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringFragment* New_ctor(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringFragment*, creationType>(value)));
    }
    // static private System.Void .cctor()
    // Offset: 0x16EA1E4
    static void _cctor();
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod parent)
    // Offset: 0x16EA0D8
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod parent)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* parent);
    // public override System.String ToString()
    // Offset: 0x16EA140
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.StringFragment
  #pragma pack(pop)
  static check_size<sizeof(StringFragment), 64 + sizeof(::StringW)> __Nitro_StringFragmentSizeCheck;
  static_assert(sizeof(StringFragment) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::StringFragment::WillHandle
// Il2CppName: WillHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Nitro::StringFragment::WillHandle)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::StringFragment*), "WillHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::StringFragment::IsQuote
// Il2CppName: IsQuote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&Nitro::StringFragment::IsQuote)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::StringFragment*), "IsQuote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Nitro::StringFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::StringFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::StringFragment::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Nitro::StringFragment::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::StringFragment*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Nitro::StringFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::StringFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::StringFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::StringFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: Nitro::StringFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::StringFragment::*)()>(&Nitro::StringFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::StringFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
