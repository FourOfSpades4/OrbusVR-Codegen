// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: TypeFragment
  class TypeFragment;
  // Forward declaring type: BracketFragment
  class BracketFragment;
  // Forward declaring type: CompiledFragment
  class CompiledFragment;
  // Forward declaring type: CompiledMethod
  class CompiledMethod;
}
// Completed forward declares
// Type namespace: Nitro
namespace Nitro {
  // Forward declaring type: ArrayFragment
  class ArrayFragment;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Nitro::ArrayFragment);
DEFINE_IL2CPP_ARG_TYPE(::Nitro::ArrayFragment*, "Nitro", "ArrayFragment");
// Type namespace: Nitro
namespace Nitro {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Nitro.ArrayFragment
  // [TokenAttribute] Offset: FFFFFFFF
  class ArrayFragment : public ::Nitro::CodeFragment {
    public:
    public:
    // public Nitro.TypeFragment ArrayType
    // Size: 0x8
    // Offset: 0x40
    ::Nitro::TypeFragment* ArrayType;
    // Field size check
    static_assert(sizeof(::Nitro::TypeFragment*) == 0x8);
    // public Nitro.BracketFragment Defaults
    // Size: 0x8
    // Offset: 0x48
    ::Nitro::BracketFragment* Defaults;
    // Field size check
    static_assert(sizeof(::Nitro::BracketFragment*) == 0x8);
    public:
    // Get instance field reference: public Nitro.TypeFragment ArrayType
    [[deprecated("Use field access instead!")]] ::Nitro::TypeFragment*& dyn_ArrayType();
    // Get instance field reference: public Nitro.BracketFragment Defaults
    [[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& dyn_Defaults();
    // public System.Void .ctor(Nitro.TypeFragment arrayType, Nitro.BracketFragment defaults)
    // Offset: 0xF56454
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayFragment* New_ctor(::Nitro::TypeFragment* arrayType, ::Nitro::BracketFragment* defaults) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayFragment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayFragment*, creationType>(arrayType, defaults)));
    }
    // public override Nitro.CompiledFragment Compile(Nitro.CompiledMethod parent)
    // Offset: 0xF565B4
    // Implemented from: Nitro.CodeFragment
    // Base method: Nitro.CompiledFragment CodeFragment::Compile(Nitro.CompiledMethod parent)
    ::Nitro::CompiledFragment* Compile(::Nitro::CompiledMethod* parent);
    // public override System.String ToString()
    // Offset: 0xF568A0
    // Implemented from: Nitro.CodeFragment
    // Base method: System.String CodeFragment::ToString()
    ::StringW ToString();
  }; // Nitro.ArrayFragment
  #pragma pack(pop)
  static check_size<sizeof(ArrayFragment), 72 + sizeof(::Nitro::BracketFragment*)> __Nitro_ArrayFragmentSizeCheck;
  static_assert(sizeof(ArrayFragment) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Nitro::ArrayFragment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Nitro::ArrayFragment::Compile
// Il2CppName: Compile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Nitro::CompiledFragment* (Nitro::ArrayFragment::*)(::Nitro::CompiledMethod*)>(&Nitro::ArrayFragment::Compile)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Nitro", "CompiledMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Nitro::ArrayFragment*), "Compile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: Nitro::ArrayFragment::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Nitro::ArrayFragment::*)()>(&Nitro::ArrayFragment::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Nitro::ArrayFragment*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
