// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AmplifyBloom.DebugToScreenEnum
#include "AmplifyBloom/DebugToScreenEnum.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: AmplifyBloom.UpscaleQualityEnum
#include "AmplifyBloom/UpscaleQualityEnum.hpp"
// Including type: AmplifyBloom.MainThresholdSizeEnum
#include "AmplifyBloom/MainThresholdSizeEnum.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyLensFlare
  class AmplifyLensFlare;
  // Forward declaring type: AmplifyGlare
  class AmplifyGlare;
  // Forward declaring type: AmplifyBokeh
  class AmplifyBokeh;
  // Forward declaring type: PrecisionModes
  struct PrecisionModes;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyBloomBase
  class AmplifyBloomBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyBloomBase);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyBloomBase*, "AmplifyBloom", "AmplifyBloomBase");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x189
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyBloomBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AD8770
  class AmplifyBloomBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Texture m_maskTexture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture* m_maskTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private UnityEngine.RenderTexture m_targetTexture
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RenderTexture* m_targetTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private System.Boolean m_showDebugMessages
    // Size: 0x1
    // Offset: 0x28
    bool m_showDebugMessages;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_showDebugMessages and: m_softMaxdownscales
    char __padding2[0x3] = {};
    // private System.Int32 m_softMaxdownscales
    // Size: 0x4
    // Offset: 0x2C
    int m_softMaxdownscales;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private AmplifyBloom.DebugToScreenEnum m_debugToScreen
    // Size: 0x4
    // Offset: 0x30
    ::AmplifyBloom::DebugToScreenEnum m_debugToScreen;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::DebugToScreenEnum) == 0x4);
    // private System.Boolean m_highPrecision
    // Size: 0x1
    // Offset: 0x34
    bool m_highPrecision;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_highPrecision and: m_bloomRange
    char __padding5[0x3] = {};
    // private UnityEngine.Vector4 m_bloomRange
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Vector4 m_bloomRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Single m_overallThreshold
    // Size: 0x4
    // Offset: 0x48
    float m_overallThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector4 m_bloomParams
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Vector4 m_bloomParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Boolean m_temporalFilteringActive
    // Size: 0x1
    // Offset: 0x5C
    bool m_temporalFilteringActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_temporalFilteringActive and: m_temporalFilteringValue
    char __padding9[0x3] = {};
    // private System.Single m_temporalFilteringValue
    // Size: 0x4
    // Offset: 0x60
    float m_temporalFilteringValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_bloomDownsampleCount
    // Size: 0x4
    // Offset: 0x64
    int m_bloomDownsampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.AnimationCurve m_temporalFilteringCurve
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* m_temporalFilteringCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Boolean m_separateFeaturesThreshold
    // Size: 0x1
    // Offset: 0x70
    bool m_separateFeaturesThreshold;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_separateFeaturesThreshold and: m_featuresThreshold
    char __padding13[0x3] = {};
    // private System.Single m_featuresThreshold
    // Size: 0x4
    // Offset: 0x74
    float m_featuresThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private AmplifyBloom.AmplifyLensFlare m_lensFlare
    // Size: 0x8
    // Offset: 0x78
    ::AmplifyBloom::AmplifyLensFlare* m_lensFlare;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::AmplifyLensFlare*) == 0x8);
    // private System.Boolean m_applyLensDirt
    // Size: 0x1
    // Offset: 0x80
    bool m_applyLensDirt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_applyLensDirt and: m_lensDirtStrength
    char __padding16[0x3] = {};
    // private System.Single m_lensDirtStrength
    // Size: 0x4
    // Offset: 0x84
    float m_lensDirtStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Texture m_lensDirtTexture
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Texture* m_lensDirtTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private System.Boolean m_applyLensStardurst
    // Size: 0x1
    // Offset: 0x90
    bool m_applyLensStardurst;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_applyLensStardurst and: m_lensStardurstTex
    char __padding19[0x7] = {};
    // private UnityEngine.Texture m_lensStardurstTex
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Texture* m_lensStardurstTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private System.Single m_lensStarburstStrength
    // Size: 0x4
    // Offset: 0xA0
    float m_lensStarburstStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_lensStarburstStrength and: m_anamorphicGlare
    char __padding21[0x4] = {};
    // private AmplifyBloom.AmplifyGlare m_anamorphicGlare
    // Size: 0x8
    // Offset: 0xA8
    ::AmplifyBloom::AmplifyGlare* m_anamorphicGlare;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::AmplifyGlare*) == 0x8);
    // private AmplifyBloom.AmplifyBokeh m_bokehFilter
    // Size: 0x8
    // Offset: 0xB0
    ::AmplifyBloom::AmplifyBokeh* m_bokehFilter;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::AmplifyBokeh*) == 0x8);
    // private System.Single[] m_upscaleWeights
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<float> m_upscaleWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_gaussianRadius
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<float> m_gaussianRadius;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32[] m_gaussianSteps
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<int> m_gaussianSteps;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Single[] m_lensDirtWeights
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<float> m_lensDirtWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_lensStarburstWeights
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<float> m_lensStarburstWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean[] m_downscaleSettingsFoldout
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<bool> m_downscaleSettingsFoldout;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Int32 m_featuresSourceId
    // Size: 0x4
    // Offset: 0xE8
    int m_featuresSourceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private AmplifyBloom.UpscaleQualityEnum m_upscaleQuality
    // Size: 0x4
    // Offset: 0xEC
    ::AmplifyBloom::UpscaleQualityEnum m_upscaleQuality;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::UpscaleQualityEnum) == 0x4);
    // private AmplifyBloom.MainThresholdSizeEnum m_mainThresholdSize
    // Size: 0x4
    // Offset: 0xF0
    ::AmplifyBloom::MainThresholdSizeEnum m_mainThresholdSize;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::MainThresholdSizeEnum) == 0x4);
    // Padding between fields: m_mainThresholdSize and: m_cameraTransform
    char __padding32[0x4] = {};
    // private UnityEngine.Transform m_cameraTransform
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Transform* m_cameraTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Matrix4x4 m_starburstMat
    // Size: 0x40
    // Offset: 0x100
    ::UnityEngine::Matrix4x4 m_starburstMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Shader m_bloomShader
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::Shader* m_bloomShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Material m_bloomMaterial
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Material* m_bloomMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Shader m_finalCompositionShader
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Shader* m_finalCompositionShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Material m_finalCompositionMaterial
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Material* m_finalCompositionMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture m_tempFilterBuffer
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::RenderTexture* m_tempFilterBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Camera m_camera
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Camera* m_camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.RenderTexture[] m_tempUpscaleRTs
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::UnityEngine::RenderTexture*> m_tempUpscaleRTs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RenderTexture*>) == 0x8);
    // private UnityEngine.RenderTexture[] m_tempAuxDownsampleRTs
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::UnityEngine::RenderTexture*> m_tempAuxDownsampleRTs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RenderTexture*>) == 0x8);
    // private UnityEngine.Vector2[] m_tempDownsamplesSizes
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::UnityEngine::Vector2> m_tempDownsamplesSizes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Boolean silentError
    // Size: 0x1
    // Offset: 0x188
    bool silentError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 MaxGhosts
    static constexpr const int MaxGhosts = 5;
    // Get static field: static public System.Int32 MaxGhosts
    static int _get_MaxGhosts();
    // Set static field: static public System.Int32 MaxGhosts
    static void _set_MaxGhosts(int value);
    // static field const value: static public System.Int32 MinDownscales
    static constexpr const int MinDownscales = 1;
    // Get static field: static public System.Int32 MinDownscales
    static int _get_MinDownscales();
    // Set static field: static public System.Int32 MinDownscales
    static void _set_MinDownscales(int value);
    // static field const value: static public System.Int32 MaxDownscales
    static constexpr const int MaxDownscales = 6;
    // Get static field: static public System.Int32 MaxDownscales
    static int _get_MaxDownscales();
    // Set static field: static public System.Int32 MaxDownscales
    static void _set_MaxDownscales(int value);
    // static field const value: static public System.Int32 MaxGaussian
    static constexpr const int MaxGaussian = 8;
    // Get static field: static public System.Int32 MaxGaussian
    static int _get_MaxGaussian();
    // Set static field: static public System.Int32 MaxGaussian
    static void _set_MaxGaussian(int value);
    // static field const value: static private System.Single MaxDirtIntensity
    static constexpr const float MaxDirtIntensity = 1;
    // Get static field: static private System.Single MaxDirtIntensity
    static float _get_MaxDirtIntensity();
    // Set static field: static private System.Single MaxDirtIntensity
    static void _set_MaxDirtIntensity(float value);
    // static field const value: static private System.Single MaxStarburstIntensity
    static constexpr const float MaxStarburstIntensity = 1;
    // Get static field: static private System.Single MaxStarburstIntensity
    static float _get_MaxStarburstIntensity();
    // Set static field: static private System.Single MaxStarburstIntensity
    static void _set_MaxStarburstIntensity(float value);
    // Get instance field reference: private UnityEngine.Texture m_maskTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_maskTexture();
    // Get instance field reference: private UnityEngine.RenderTexture m_targetTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_targetTexture();
    // Get instance field reference: private System.Boolean m_showDebugMessages
    [[deprecated("Use field access instead!")]] bool& dyn_m_showDebugMessages();
    // Get instance field reference: private System.Int32 m_softMaxdownscales
    [[deprecated("Use field access instead!")]] int& dyn_m_softMaxdownscales();
    // Get instance field reference: private AmplifyBloom.DebugToScreenEnum m_debugToScreen
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::DebugToScreenEnum& dyn_m_debugToScreen();
    // Get instance field reference: private System.Boolean m_highPrecision
    [[deprecated("Use field access instead!")]] bool& dyn_m_highPrecision();
    // Get instance field reference: private UnityEngine.Vector4 m_bloomRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_bloomRange();
    // Get instance field reference: private System.Single m_overallThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_overallThreshold();
    // Get instance field reference: private UnityEngine.Vector4 m_bloomParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_bloomParams();
    // Get instance field reference: private System.Boolean m_temporalFilteringActive
    [[deprecated("Use field access instead!")]] bool& dyn_m_temporalFilteringActive();
    // Get instance field reference: private System.Single m_temporalFilteringValue
    [[deprecated("Use field access instead!")]] float& dyn_m_temporalFilteringValue();
    // Get instance field reference: private System.Int32 m_bloomDownsampleCount
    [[deprecated("Use field access instead!")]] int& dyn_m_bloomDownsampleCount();
    // Get instance field reference: private UnityEngine.AnimationCurve m_temporalFilteringCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_temporalFilteringCurve();
    // Get instance field reference: private System.Boolean m_separateFeaturesThreshold
    [[deprecated("Use field access instead!")]] bool& dyn_m_separateFeaturesThreshold();
    // Get instance field reference: private System.Single m_featuresThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_featuresThreshold();
    // Get instance field reference: private AmplifyBloom.AmplifyLensFlare m_lensFlare
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::AmplifyLensFlare*& dyn_m_lensFlare();
    // Get instance field reference: private System.Boolean m_applyLensDirt
    [[deprecated("Use field access instead!")]] bool& dyn_m_applyLensDirt();
    // Get instance field reference: private System.Single m_lensDirtStrength
    [[deprecated("Use field access instead!")]] float& dyn_m_lensDirtStrength();
    // Get instance field reference: private UnityEngine.Texture m_lensDirtTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_lensDirtTexture();
    // Get instance field reference: private System.Boolean m_applyLensStardurst
    [[deprecated("Use field access instead!")]] bool& dyn_m_applyLensStardurst();
    // Get instance field reference: private UnityEngine.Texture m_lensStardurstTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_lensStardurstTex();
    // Get instance field reference: private System.Single m_lensStarburstStrength
    [[deprecated("Use field access instead!")]] float& dyn_m_lensStarburstStrength();
    // Get instance field reference: private AmplifyBloom.AmplifyGlare m_anamorphicGlare
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::AmplifyGlare*& dyn_m_anamorphicGlare();
    // Get instance field reference: private AmplifyBloom.AmplifyBokeh m_bokehFilter
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::AmplifyBokeh*& dyn_m_bokehFilter();
    // Get instance field reference: private System.Single[] m_upscaleWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_upscaleWeights();
    // Get instance field reference: private System.Single[] m_gaussianRadius
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_gaussianRadius();
    // Get instance field reference: private System.Int32[] m_gaussianSteps
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_gaussianSteps();
    // Get instance field reference: private System.Single[] m_lensDirtWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_lensDirtWeights();
    // Get instance field reference: private System.Single[] m_lensStarburstWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_lensStarburstWeights();
    // Get instance field reference: private System.Boolean[] m_downscaleSettingsFoldout
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_downscaleSettingsFoldout();
    // Get instance field reference: private System.Int32 m_featuresSourceId
    [[deprecated("Use field access instead!")]] int& dyn_m_featuresSourceId();
    // Get instance field reference: private AmplifyBloom.UpscaleQualityEnum m_upscaleQuality
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::UpscaleQualityEnum& dyn_m_upscaleQuality();
    // Get instance field reference: private AmplifyBloom.MainThresholdSizeEnum m_mainThresholdSize
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::MainThresholdSizeEnum& dyn_m_mainThresholdSize();
    // Get instance field reference: private UnityEngine.Transform m_cameraTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_cameraTransform();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_starburstMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_starburstMat();
    // Get instance field reference: private UnityEngine.Shader m_bloomShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_bloomShader();
    // Get instance field reference: private UnityEngine.Material m_bloomMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_bloomMaterial();
    // Get instance field reference: private UnityEngine.Shader m_finalCompositionShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_finalCompositionShader();
    // Get instance field reference: private UnityEngine.Material m_finalCompositionMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_finalCompositionMaterial();
    // Get instance field reference: private UnityEngine.RenderTexture m_tempFilterBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_m_tempFilterBuffer();
    // Get instance field reference: private UnityEngine.Camera m_camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_camera();
    // Get instance field reference: private UnityEngine.RenderTexture[] m_tempUpscaleRTs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RenderTexture*>& dyn_m_tempUpscaleRTs();
    // Get instance field reference: private UnityEngine.RenderTexture[] m_tempAuxDownsampleRTs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RenderTexture*>& dyn_m_tempAuxDownsampleRTs();
    // Get instance field reference: private UnityEngine.Vector2[] m_tempDownsamplesSizes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_m_tempDownsamplesSizes();
    // Get instance field reference: private System.Boolean silentError
    [[deprecated("Use field access instead!")]] bool& dyn_silentError();
    // private System.Void Awake()
    // Offset: 0xEF4CF0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xEF7024
    void OnDestroy();
    // private System.Void ApplyGaussianBlur(UnityEngine.RenderTexture renderTexture, System.Int32 amount, System.Single radius, System.Boolean applyTemporal)
    // Offset: 0xEF73EC
    void ApplyGaussianBlur(::UnityEngine::RenderTexture* renderTexture, int amount, float radius, bool applyTemporal);
    // private System.Void CreateTempFilterRT(UnityEngine.RenderTexture source)
    // Offset: 0xEF7ADC
    void CreateTempFilterRT(::UnityEngine::RenderTexture* source);
    // private System.Void CleanTempFilterRT()
    // Offset: 0xEF7A08
    void CleanTempFilterRT();
    // private System.Void OnRenderImage(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dest)
    // Offset: 0xEF7D98
    void OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest);
    // private System.Void FinalComposition(System.Single srcContribution, System.Single upscaleContribution, UnityEngine.RenderTexture src, UnityEngine.RenderTexture dest, System.Int32 forcePassId)
    // Offset: 0xEFC614
    void FinalComposition(float srcContribution, float upscaleContribution, ::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest, int forcePassId);
    // private System.Void ApplyUpscale()
    // Offset: 0xEFC264
    void ApplyUpscale();
    // public AmplifyBloom.AmplifyGlare get_LensGlareInstance()
    // Offset: 0xEFC7C4
    ::AmplifyBloom::AmplifyGlare* get_LensGlareInstance();
    // public AmplifyBloom.AmplifyBokeh get_BokehFilterInstance()
    // Offset: 0xEFC7CC
    ::AmplifyBloom::AmplifyBokeh* get_BokehFilterInstance();
    // public AmplifyBloom.AmplifyLensFlare get_LensFlareInstance()
    // Offset: 0xEFC7BC
    ::AmplifyBloom::AmplifyLensFlare* get_LensFlareInstance();
    // public System.Boolean get_ApplyLensDirt()
    // Offset: 0xEFC7D4
    bool get_ApplyLensDirt();
    // public System.Void set_ApplyLensDirt(System.Boolean value)
    // Offset: 0xEFC7DC
    void set_ApplyLensDirt(bool value);
    // public System.Single get_LensDirtStrength()
    // Offset: 0xEFC7E8
    float get_LensDirtStrength();
    // public System.Void set_LensDirtStrength(System.Single value)
    // Offset: 0xEFC7F0
    void set_LensDirtStrength(float value);
    // public UnityEngine.Texture get_LensDirtTexture()
    // Offset: 0xEFC828
    ::UnityEngine::Texture* get_LensDirtTexture();
    // public System.Void set_LensDirtTexture(UnityEngine.Texture value)
    // Offset: 0xEFC830
    void set_LensDirtTexture(::UnityEngine::Texture* value);
    // public System.Boolean get_ApplyLensStardurst()
    // Offset: 0xEFC838
    bool get_ApplyLensStardurst();
    // public System.Void set_ApplyLensStardurst(System.Boolean value)
    // Offset: 0xEFC840
    void set_ApplyLensStardurst(bool value);
    // public UnityEngine.Texture get_LensStardurstTex()
    // Offset: 0xEFC84C
    ::UnityEngine::Texture* get_LensStardurstTex();
    // public System.Void set_LensStardurstTex(UnityEngine.Texture value)
    // Offset: 0xEFC854
    void set_LensStardurstTex(::UnityEngine::Texture* value);
    // public System.Single get_LensStarburstStrength()
    // Offset: 0xEFC85C
    float get_LensStarburstStrength();
    // public System.Void set_LensStarburstStrength(System.Single value)
    // Offset: 0xEFC864
    void set_LensStarburstStrength(float value);
    // public AmplifyBloom.PrecisionModes get_CurrentPrecisionMode()
    // Offset: 0xEFC89C
    ::AmplifyBloom::PrecisionModes get_CurrentPrecisionMode();
    // public System.Void set_CurrentPrecisionMode(AmplifyBloom.PrecisionModes value)
    // Offset: 0xEFC8A4
    void set_CurrentPrecisionMode(::AmplifyBloom::PrecisionModes value);
    // public System.Boolean get_HighPrecision()
    // Offset: 0xEFC8F8
    bool get_HighPrecision();
    // public System.Void set_HighPrecision(System.Boolean value)
    // Offset: 0xEFC8D4
    void set_HighPrecision(bool value);
    // public System.Single get_BloomRange()
    // Offset: 0xEFC900
    float get_BloomRange();
    // public System.Void set_BloomRange(System.Single value)
    // Offset: 0xEFC908
    void set_BloomRange(float value);
    // public System.Single get_OverallThreshold()
    // Offset: 0xEFC918
    float get_OverallThreshold();
    // public System.Void set_OverallThreshold(System.Single value)
    // Offset: 0xEFC920
    void set_OverallThreshold(float value);
    // public UnityEngine.Vector4 get_BloomParams()
    // Offset: 0xEFC958
    ::UnityEngine::Vector4 get_BloomParams();
    // public System.Void set_BloomParams(UnityEngine.Vector4 value)
    // Offset: 0xEFC964
    void set_BloomParams(::UnityEngine::Vector4 value);
    // public System.Single get_OverallIntensity()
    // Offset: 0xEFC970
    float get_OverallIntensity();
    // public System.Void set_OverallIntensity(System.Single value)
    // Offset: 0xEFC978
    void set_OverallIntensity(float value);
    // public System.Single get_BloomScale()
    // Offset: 0xEFC988
    float get_BloomScale();
    // public System.Void set_BloomScale(System.Single value)
    // Offset: 0xEFC990
    void set_BloomScale(float value);
    // public System.Single get_UpscaleBlurRadius()
    // Offset: 0xEFC9A0
    float get_UpscaleBlurRadius();
    // public System.Void set_UpscaleBlurRadius(System.Single value)
    // Offset: 0xEFC9A8
    void set_UpscaleBlurRadius(float value);
    // public System.Boolean get_TemporalFilteringActive()
    // Offset: 0xEFC9B0
    bool get_TemporalFilteringActive();
    // public System.Void set_TemporalFilteringActive(System.Boolean value)
    // Offset: 0xEFC9B8
    void set_TemporalFilteringActive(bool value);
    // public System.Single get_TemporalFilteringValue()
    // Offset: 0xEFC9FC
    float get_TemporalFilteringValue();
    // public System.Void set_TemporalFilteringValue(System.Single value)
    // Offset: 0xEFCA04
    void set_TemporalFilteringValue(float value);
    // public System.Int32 get_SoftMaxdownscales()
    // Offset: 0xEFCA0C
    int get_SoftMaxdownscales();
    // public System.Int32 get_BloomDownsampleCount()
    // Offset: 0xEFCA14
    int get_BloomDownsampleCount();
    // public System.Void set_BloomDownsampleCount(System.Int32 value)
    // Offset: 0xEFCA1C
    void set_BloomDownsampleCount(int value);
    // public System.Int32 get_FeaturesSourceId()
    // Offset: 0xEFCAA4
    int get_FeaturesSourceId();
    // public System.Void set_FeaturesSourceId(System.Int32 value)
    // Offset: 0xEFCAAC
    void set_FeaturesSourceId(int value);
    // public System.Boolean[] get_DownscaleSettingsFoldout()
    // Offset: 0xEFCB34
    ::ArrayW<bool> get_DownscaleSettingsFoldout();
    // public System.Single[] get_UpscaleWeights()
    // Offset: 0xEFCB3C
    ::ArrayW<float> get_UpscaleWeights();
    // public System.Single[] get_LensDirtWeights()
    // Offset: 0xEFCB44
    ::ArrayW<float> get_LensDirtWeights();
    // public System.Single[] get_LensStarburstWeights()
    // Offset: 0xEFCB4C
    ::ArrayW<float> get_LensStarburstWeights();
    // public System.Single[] get_GaussianRadius()
    // Offset: 0xEFCB54
    ::ArrayW<float> get_GaussianRadius();
    // public System.Int32[] get_GaussianSteps()
    // Offset: 0xEFCB5C
    ::ArrayW<int> get_GaussianSteps();
    // public UnityEngine.AnimationCurve get_TemporalFilteringCurve()
    // Offset: 0xEFCB64
    ::UnityEngine::AnimationCurve* get_TemporalFilteringCurve();
    // public System.Void set_TemporalFilteringCurve(UnityEngine.AnimationCurve value)
    // Offset: 0xEFCB6C
    void set_TemporalFilteringCurve(::UnityEngine::AnimationCurve* value);
    // public System.Boolean get_SeparateFeaturesThreshold()
    // Offset: 0xEFCB74
    bool get_SeparateFeaturesThreshold();
    // public System.Void set_SeparateFeaturesThreshold(System.Boolean value)
    // Offset: 0xEFCB7C
    void set_SeparateFeaturesThreshold(bool value);
    // public System.Single get_FeaturesThreshold()
    // Offset: 0xEFCB88
    float get_FeaturesThreshold();
    // public System.Void set_FeaturesThreshold(System.Single value)
    // Offset: 0xEFCB90
    void set_FeaturesThreshold(float value);
    // public AmplifyBloom.DebugToScreenEnum get_DebugToScreen()
    // Offset: 0xEFCBC8
    ::AmplifyBloom::DebugToScreenEnum get_DebugToScreen();
    // public System.Void set_DebugToScreen(AmplifyBloom.DebugToScreenEnum value)
    // Offset: 0xEFCBD0
    void set_DebugToScreen(::AmplifyBloom::DebugToScreenEnum value);
    // public AmplifyBloom.UpscaleQualityEnum get_UpscaleQuality()
    // Offset: 0xEFCBD8
    ::AmplifyBloom::UpscaleQualityEnum get_UpscaleQuality();
    // public System.Void set_UpscaleQuality(AmplifyBloom.UpscaleQualityEnum value)
    // Offset: 0xEFCBE0
    void set_UpscaleQuality(::AmplifyBloom::UpscaleQualityEnum value);
    // public System.Boolean get_ShowDebugMessages()
    // Offset: 0xEFCBE8
    bool get_ShowDebugMessages();
    // public System.Void set_ShowDebugMessages(System.Boolean value)
    // Offset: 0xEFCBF0
    void set_ShowDebugMessages(bool value);
    // public AmplifyBloom.MainThresholdSizeEnum get_MainThresholdSize()
    // Offset: 0xEFCBFC
    ::AmplifyBloom::MainThresholdSizeEnum get_MainThresholdSize();
    // public System.Void set_MainThresholdSize(AmplifyBloom.MainThresholdSizeEnum value)
    // Offset: 0xEFCC04
    void set_MainThresholdSize(::AmplifyBloom::MainThresholdSizeEnum value);
    // public UnityEngine.RenderTexture get_TargetTexture()
    // Offset: 0xEFCC0C
    ::UnityEngine::RenderTexture* get_TargetTexture();
    // public System.Void set_TargetTexture(UnityEngine.RenderTexture value)
    // Offset: 0xEFCC14
    void set_TargetTexture(::UnityEngine::RenderTexture* value);
    // public UnityEngine.Texture get_MaskTexture()
    // Offset: 0xEFCC1C
    ::UnityEngine::Texture* get_MaskTexture();
    // public System.Void set_MaskTexture(UnityEngine.Texture value)
    // Offset: 0xEFCC24
    void set_MaskTexture(::UnityEngine::Texture* value);
    // public System.Boolean get_ApplyBokehFilter()
    // Offset: 0xEFCC2C
    bool get_ApplyBokehFilter();
    // public System.Void set_ApplyBokehFilter(System.Boolean value)
    // Offset: 0xEFCC58
    void set_ApplyBokehFilter(bool value);
    // public System.Boolean get_ApplyLensFlare()
    // Offset: 0xEFCC98
    bool get_ApplyLensFlare();
    // public System.Void set_ApplyLensFlare(System.Boolean value)
    // Offset: 0xEFCCC4
    void set_ApplyLensFlare(bool value);
    // public System.Boolean get_ApplyLensGlare()
    // Offset: 0xEFCD04
    bool get_ApplyLensGlare();
    // public System.Void set_ApplyLensGlare(System.Boolean value)
    // Offset: 0xEFCD30
    void set_ApplyLensGlare(bool value);
    // public System.Void .ctor()
    // Offset: 0xEFCD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyBloomBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyBloomBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyBloomBase*, creationType>()));
    }
  }; // AmplifyBloom.AmplifyBloomBase
  #pragma pack(pop)
  static check_size<sizeof(AmplifyBloomBase), 392 + sizeof(bool)> __AmplifyBloom_AmplifyBloomBaseSizeCheck;
  static_assert(sizeof(AmplifyBloomBase) == 0x189);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::ApplyGaussianBlur
// Il2CppName: ApplyGaussianBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::RenderTexture*, int, float, bool)>(&AmplifyBloom::AmplifyBloomBase::ApplyGaussianBlur)> {
  static const MethodInfo* get() {
    static auto* renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* applyTemporal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "ApplyGaussianBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTexture, amount, radius, applyTemporal});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::CreateTempFilterRT
// Il2CppName: CreateTempFilterRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::RenderTexture*)>(&AmplifyBloom::AmplifyBloomBase::CreateTempFilterRT)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "CreateTempFilterRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::CleanTempFilterRT
// Il2CppName: CleanTempFilterRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::CleanTempFilterRT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "CleanTempFilterRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&AmplifyBloom::AmplifyBloomBase::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dest});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::FinalComposition
// Il2CppName: FinalComposition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float, float, ::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*, int)>(&AmplifyBloom::AmplifyBloomBase::FinalComposition)> {
  static const MethodInfo* get() {
    static auto* srcContribution = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upscaleContribution = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* forcePassId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "FinalComposition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcContribution, upscaleContribution, src, dest, forcePassId});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::ApplyUpscale
// Il2CppName: ApplyUpscale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::ApplyUpscale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "ApplyUpscale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensGlareInstance
// Il2CppName: get_LensGlareInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::AmplifyGlare* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensGlareInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensGlareInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_BokehFilterInstance
// Il2CppName: get_BokehFilterInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::AmplifyBokeh* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_BokehFilterInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_BokehFilterInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensFlareInstance
// Il2CppName: get_LensFlareInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::AmplifyLensFlare* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensFlareInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensFlareInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ApplyLensDirt
// Il2CppName: get_ApplyLensDirt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ApplyLensDirt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ApplyLensDirt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ApplyLensDirt
// Il2CppName: set_ApplyLensDirt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ApplyLensDirt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ApplyLensDirt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensDirtStrength
// Il2CppName: get_LensDirtStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensDirtStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensDirtStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_LensDirtStrength
// Il2CppName: set_LensDirtStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_LensDirtStrength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_LensDirtStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensDirtTexture
// Il2CppName: get_LensDirtTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensDirtTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensDirtTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_LensDirtTexture
// Il2CppName: set_LensDirtTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::Texture*)>(&AmplifyBloom::AmplifyBloomBase::set_LensDirtTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_LensDirtTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ApplyLensStardurst
// Il2CppName: get_ApplyLensStardurst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ApplyLensStardurst)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ApplyLensStardurst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ApplyLensStardurst
// Il2CppName: set_ApplyLensStardurst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ApplyLensStardurst)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ApplyLensStardurst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensStardurstTex
// Il2CppName: get_LensStardurstTex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensStardurstTex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensStardurstTex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_LensStardurstTex
// Il2CppName: set_LensStardurstTex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::Texture*)>(&AmplifyBloom::AmplifyBloomBase::set_LensStardurstTex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_LensStardurstTex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensStarburstStrength
// Il2CppName: get_LensStarburstStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensStarburstStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensStarburstStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_LensStarburstStrength
// Il2CppName: set_LensStarburstStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_LensStarburstStrength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_LensStarburstStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_CurrentPrecisionMode
// Il2CppName: get_CurrentPrecisionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::PrecisionModes (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_CurrentPrecisionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_CurrentPrecisionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_CurrentPrecisionMode
// Il2CppName: set_CurrentPrecisionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::AmplifyBloom::PrecisionModes)>(&AmplifyBloom::AmplifyBloomBase::set_CurrentPrecisionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "PrecisionModes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_CurrentPrecisionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_HighPrecision
// Il2CppName: get_HighPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_HighPrecision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_HighPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_HighPrecision
// Il2CppName: set_HighPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_HighPrecision)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_HighPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_BloomRange
// Il2CppName: get_BloomRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_BloomRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_BloomRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_BloomRange
// Il2CppName: set_BloomRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_BloomRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_BloomRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_OverallThreshold
// Il2CppName: get_OverallThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_OverallThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_OverallThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_OverallThreshold
// Il2CppName: set_OverallThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_OverallThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_OverallThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_BloomParams
// Il2CppName: get_BloomParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_BloomParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_BloomParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_BloomParams
// Il2CppName: set_BloomParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::Vector4)>(&AmplifyBloom::AmplifyBloomBase::set_BloomParams)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_BloomParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_OverallIntensity
// Il2CppName: get_OverallIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_OverallIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_OverallIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_OverallIntensity
// Il2CppName: set_OverallIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_OverallIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_OverallIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_BloomScale
// Il2CppName: get_BloomScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_BloomScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_BloomScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_BloomScale
// Il2CppName: set_BloomScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_BloomScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_BloomScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_UpscaleBlurRadius
// Il2CppName: get_UpscaleBlurRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_UpscaleBlurRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_UpscaleBlurRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_UpscaleBlurRadius
// Il2CppName: set_UpscaleBlurRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_UpscaleBlurRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_UpscaleBlurRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringActive
// Il2CppName: get_TemporalFilteringActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_TemporalFilteringActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringActive
// Il2CppName: set_TemporalFilteringActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_TemporalFilteringActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringValue
// Il2CppName: get_TemporalFilteringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_TemporalFilteringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringValue
// Il2CppName: set_TemporalFilteringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_TemporalFilteringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_SoftMaxdownscales
// Il2CppName: get_SoftMaxdownscales
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_SoftMaxdownscales)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_SoftMaxdownscales", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_BloomDownsampleCount
// Il2CppName: get_BloomDownsampleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_BloomDownsampleCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_BloomDownsampleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_BloomDownsampleCount
// Il2CppName: set_BloomDownsampleCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(int)>(&AmplifyBloom::AmplifyBloomBase::set_BloomDownsampleCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_BloomDownsampleCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_FeaturesSourceId
// Il2CppName: get_FeaturesSourceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_FeaturesSourceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_FeaturesSourceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_FeaturesSourceId
// Il2CppName: set_FeaturesSourceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(int)>(&AmplifyBloom::AmplifyBloomBase::set_FeaturesSourceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_FeaturesSourceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_DownscaleSettingsFoldout
// Il2CppName: get_DownscaleSettingsFoldout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_DownscaleSettingsFoldout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_DownscaleSettingsFoldout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_UpscaleWeights
// Il2CppName: get_UpscaleWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_UpscaleWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_UpscaleWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensDirtWeights
// Il2CppName: get_LensDirtWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensDirtWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensDirtWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_LensStarburstWeights
// Il2CppName: get_LensStarburstWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_LensStarburstWeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_LensStarburstWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_GaussianRadius
// Il2CppName: get_GaussianRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_GaussianRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_GaussianRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_GaussianSteps
// Il2CppName: get_GaussianSteps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_GaussianSteps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_GaussianSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringCurve
// Il2CppName: get_TemporalFilteringCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_TemporalFilteringCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_TemporalFilteringCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringCurve
// Il2CppName: set_TemporalFilteringCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::AnimationCurve*)>(&AmplifyBloom::AmplifyBloomBase::set_TemporalFilteringCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_TemporalFilteringCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_SeparateFeaturesThreshold
// Il2CppName: get_SeparateFeaturesThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_SeparateFeaturesThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_SeparateFeaturesThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_SeparateFeaturesThreshold
// Il2CppName: set_SeparateFeaturesThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_SeparateFeaturesThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_SeparateFeaturesThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_FeaturesThreshold
// Il2CppName: get_FeaturesThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_FeaturesThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_FeaturesThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_FeaturesThreshold
// Il2CppName: set_FeaturesThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(float)>(&AmplifyBloom::AmplifyBloomBase::set_FeaturesThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_FeaturesThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_DebugToScreen
// Il2CppName: get_DebugToScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::DebugToScreenEnum (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_DebugToScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_DebugToScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_DebugToScreen
// Il2CppName: set_DebugToScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::AmplifyBloom::DebugToScreenEnum)>(&AmplifyBloom::AmplifyBloomBase::set_DebugToScreen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "DebugToScreenEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_DebugToScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_UpscaleQuality
// Il2CppName: get_UpscaleQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::UpscaleQualityEnum (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_UpscaleQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_UpscaleQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_UpscaleQuality
// Il2CppName: set_UpscaleQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::AmplifyBloom::UpscaleQualityEnum)>(&AmplifyBloom::AmplifyBloomBase::set_UpscaleQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "UpscaleQualityEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_UpscaleQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ShowDebugMessages
// Il2CppName: get_ShowDebugMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ShowDebugMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ShowDebugMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ShowDebugMessages
// Il2CppName: set_ShowDebugMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ShowDebugMessages)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ShowDebugMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_MainThresholdSize
// Il2CppName: get_MainThresholdSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::MainThresholdSizeEnum (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_MainThresholdSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_MainThresholdSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_MainThresholdSize
// Il2CppName: set_MainThresholdSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::AmplifyBloom::MainThresholdSizeEnum)>(&AmplifyBloom::AmplifyBloomBase::set_MainThresholdSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "MainThresholdSizeEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_MainThresholdSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_TargetTexture
// Il2CppName: get_TargetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_TargetTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_TargetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_TargetTexture
// Il2CppName: set_TargetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::RenderTexture*)>(&AmplifyBloom::AmplifyBloomBase::set_TargetTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_TargetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_MaskTexture
// Il2CppName: get_MaskTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_MaskTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_MaskTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_MaskTexture
// Il2CppName: set_MaskTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(::UnityEngine::Texture*)>(&AmplifyBloom::AmplifyBloomBase::set_MaskTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_MaskTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ApplyBokehFilter
// Il2CppName: get_ApplyBokehFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ApplyBokehFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ApplyBokehFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ApplyBokehFilter
// Il2CppName: set_ApplyBokehFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ApplyBokehFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ApplyBokehFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ApplyLensFlare
// Il2CppName: get_ApplyLensFlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ApplyLensFlare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ApplyLensFlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ApplyLensFlare
// Il2CppName: set_ApplyLensFlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ApplyLensFlare)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ApplyLensFlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::get_ApplyLensGlare
// Il2CppName: get_ApplyLensGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBloomBase::*)()>(&AmplifyBloom::AmplifyBloomBase::get_ApplyLensGlare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "get_ApplyLensGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::set_ApplyLensGlare
// Il2CppName: set_ApplyLensGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBloomBase::*)(bool)>(&AmplifyBloom::AmplifyBloomBase::set_ApplyLensGlare)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBloomBase*), "set_ApplyLensGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBloomBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
