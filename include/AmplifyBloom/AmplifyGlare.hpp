// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AmplifyBloom.IAmplifyItem
#include "AmplifyBloom/IAmplifyItem.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: AmplifyBloom.GlareLibType
#include "AmplifyBloom/GlareLibType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: GlareDefData
  class GlareDefData;
  // Forward declaring type: StarDefData
  class StarDefData;
  // Forward declaring type: AmplifyGlareCache
  class AmplifyGlareCache;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyGlare
  class AmplifyGlare;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyGlare);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyGlare*, "AmplifyBloom", "AmplifyGlare");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyGlare
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyGlare : public ::Il2CppObject/*, public ::AmplifyBloom::IAmplifyItem*/ {
    public:
    public:
    // private AmplifyBloom.GlareDefData[] m_customGlareDef
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::AmplifyBloom::GlareDefData*> m_customGlareDef;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::GlareDefData*>) == 0x8);
    // private System.Int32 m_customGlareDefIdx
    // Size: 0x4
    // Offset: 0x18
    int m_customGlareDefIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_customGlareDefAmount
    // Size: 0x4
    // Offset: 0x1C
    int m_customGlareDefAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_applyGlare
    // Size: 0x1
    // Offset: 0x20
    bool m_applyGlare;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_applyGlare and: overallTint
    char __padding3[0x3] = {};
    // private UnityEngine.Color _overallTint
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color overallTint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: overallTint and: m_cromaticAberrationGrad
    char __padding4[0x4] = {};
    // private UnityEngine.Gradient m_cromaticAberrationGrad
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Gradient* m_cromaticAberrationGrad;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private System.Int32 m_glareMaxPassCount
    // Size: 0x4
    // Offset: 0x40
    int m_glareMaxPassCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_glareMaxPassCount and: m_starDefArr
    char __padding6[0x4] = {};
    // private AmplifyBloom.StarDefData[] m_starDefArr
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::AmplifyBloom::StarDefData*> m_starDefArr;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::StarDefData*>) == 0x8);
    // private AmplifyBloom.GlareDefData[] m_glareDefArr
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::AmplifyBloom::GlareDefData*> m_glareDefArr;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::GlareDefData*>) == 0x8);
    // private UnityEngine.Matrix4x4[] m_weigthsMat
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Matrix4x4> m_weigthsMat;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Matrix4x4[] m_offsetsMat
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Matrix4x4> m_offsetsMat;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Color m_whiteReference
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color m_whiteReference;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single m_aTanFoV
    // Size: 0x4
    // Offset: 0x78
    float m_aTanFoV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_aTanFoV and: m_amplifyGlareCache
    char __padding12[0x4] = {};
    // private AmplifyBloom.AmplifyGlareCache m_amplifyGlareCache
    // Size: 0x8
    // Offset: 0x80
    ::AmplifyBloom::AmplifyGlareCache* m_amplifyGlareCache;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::AmplifyGlareCache*) == 0x8);
    // private System.Int32 m_currentWidth
    // Size: 0x4
    // Offset: 0x88
    int m_currentWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_currentHeight
    // Size: 0x4
    // Offset: 0x8C
    int m_currentHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private AmplifyBloom.GlareLibType m_currentGlareType
    // Size: 0x4
    // Offset: 0x90
    ::AmplifyBloom::GlareLibType m_currentGlareType;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::GlareLibType) == 0x4);
    // private System.Int32 m_currentGlareIdx
    // Size: 0x4
    // Offset: 0x94
    int m_currentGlareIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_perPassDisplacement
    // Size: 0x4
    // Offset: 0x98
    float m_perPassDisplacement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_intensity
    // Size: 0x4
    // Offset: 0x9C
    float m_intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_overallStreakScale
    // Size: 0x4
    // Offset: 0xA0
    float m_overallStreakScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_isDirty
    // Size: 0x1
    // Offset: 0xA4
    bool m_isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isDirty and: rtBuffer
    char __padding21[0x3] = {};
    // private UnityEngine.RenderTexture[] _rtBuffer
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::RenderTexture*> rtBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RenderTexture*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::AmplifyBloom::IAmplifyItem
    operator ::AmplifyBloom::IAmplifyItem() noexcept {
      return *reinterpret_cast<::AmplifyBloom::IAmplifyItem*>(this);
    }
    // static field const value: static public System.Int32 MaxLineSamples
    static constexpr const int MaxLineSamples = 8;
    // Get static field: static public System.Int32 MaxLineSamples
    static int _get_MaxLineSamples();
    // Set static field: static public System.Int32 MaxLineSamples
    static void _set_MaxLineSamples(int value);
    // static field const value: static public System.Int32 MaxTotalSamples
    static constexpr const int MaxTotalSamples = 16;
    // Get static field: static public System.Int32 MaxTotalSamples
    static int _get_MaxTotalSamples();
    // Set static field: static public System.Int32 MaxTotalSamples
    static void _set_MaxTotalSamples(int value);
    // static field const value: static public System.Int32 MaxStarLines
    static constexpr const int MaxStarLines = 4;
    // Get static field: static public System.Int32 MaxStarLines
    static int _get_MaxStarLines();
    // Set static field: static public System.Int32 MaxStarLines
    static void _set_MaxStarLines(int value);
    // static field const value: static public System.Int32 MaxPasses
    static constexpr const int MaxPasses = 4;
    // Get static field: static public System.Int32 MaxPasses
    static int _get_MaxPasses();
    // Set static field: static public System.Int32 MaxPasses
    static void _set_MaxPasses(int value);
    // static field const value: static public System.Int32 MaxCustomGlare
    static constexpr const int MaxCustomGlare = 32;
    // Get static field: static public System.Int32 MaxCustomGlare
    static int _get_MaxCustomGlare();
    // Set static field: static public System.Int32 MaxCustomGlare
    static void _set_MaxCustomGlare(int value);
    // Get instance field reference: private AmplifyBloom.GlareDefData[] m_customGlareDef
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::GlareDefData*>& dyn_m_customGlareDef();
    // Get instance field reference: private System.Int32 m_customGlareDefIdx
    [[deprecated("Use field access instead!")]] int& dyn_m_customGlareDefIdx();
    // Get instance field reference: private System.Int32 m_customGlareDefAmount
    [[deprecated("Use field access instead!")]] int& dyn_m_customGlareDefAmount();
    // Get instance field reference: private System.Boolean m_applyGlare
    [[deprecated("Use field access instead!")]] bool& dyn_m_applyGlare();
    // Get instance field reference: private UnityEngine.Color _overallTint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__overallTint();
    // Get instance field reference: private UnityEngine.Gradient m_cromaticAberrationGrad
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_m_cromaticAberrationGrad();
    // Get instance field reference: private System.Int32 m_glareMaxPassCount
    [[deprecated("Use field access instead!")]] int& dyn_m_glareMaxPassCount();
    // Get instance field reference: private AmplifyBloom.StarDefData[] m_starDefArr
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::StarDefData*>& dyn_m_starDefArr();
    // Get instance field reference: private AmplifyBloom.GlareDefData[] m_glareDefArr
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::GlareDefData*>& dyn_m_glareDefArr();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_weigthsMat
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_weigthsMat();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_offsetsMat
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_offsetsMat();
    // Get instance field reference: private UnityEngine.Color m_whiteReference
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_whiteReference();
    // Get instance field reference: private System.Single m_aTanFoV
    [[deprecated("Use field access instead!")]] float& dyn_m_aTanFoV();
    // Get instance field reference: private AmplifyBloom.AmplifyGlareCache m_amplifyGlareCache
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::AmplifyGlareCache*& dyn_m_amplifyGlareCache();
    // Get instance field reference: private System.Int32 m_currentWidth
    [[deprecated("Use field access instead!")]] int& dyn_m_currentWidth();
    // Get instance field reference: private System.Int32 m_currentHeight
    [[deprecated("Use field access instead!")]] int& dyn_m_currentHeight();
    // Get instance field reference: private AmplifyBloom.GlareLibType m_currentGlareType
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::GlareLibType& dyn_m_currentGlareType();
    // Get instance field reference: private System.Int32 m_currentGlareIdx
    [[deprecated("Use field access instead!")]] int& dyn_m_currentGlareIdx();
    // Get instance field reference: private System.Single m_perPassDisplacement
    [[deprecated("Use field access instead!")]] float& dyn_m_perPassDisplacement();
    // Get instance field reference: private System.Single m_intensity
    [[deprecated("Use field access instead!")]] float& dyn_m_intensity();
    // Get instance field reference: private System.Single m_overallStreakScale
    [[deprecated("Use field access instead!")]] float& dyn_m_overallStreakScale();
    // Get instance field reference: private System.Boolean m_isDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_isDirty();
    // Get instance field reference: private UnityEngine.RenderTexture[] _rtBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RenderTexture*>& dyn__rtBuffer();
    // public System.Void .ctor()
    // Offset: 0xEFD170
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyGlare* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyGlare::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyGlare*, creationType>()));
    }
    // public System.Void Init()
    // Offset: 0xEF6764
    void Init();
    // public System.Void Destroy()
    // Offset: 0xEF7134
    void Destroy();
    // public System.Void SetDirty()
    // Offset: 0xEFE57C
    void SetDirty();
    // public System.Void OnRenderFromCache(UnityEngine.RenderTexture source, UnityEngine.RenderTexture dest, UnityEngine.Material material, System.Single glareIntensity, System.Single cameraRotation)
    // Offset: 0xEFE588
    void OnRenderFromCache(::UnityEngine::RenderTexture* source, ::UnityEngine::RenderTexture* dest, ::UnityEngine::Material* material, float glareIntensity, float cameraRotation);
    // public System.Void UpdateMatrixesForPass(UnityEngine.Material material, UnityEngine.Vector4[] offsets, UnityEngine.Vector4[] weights, System.Single glareIntensity, System.Single rotation)
    // Offset: 0xEFECF8
    void UpdateMatrixesForPass(::UnityEngine::Material* material, ::ArrayW<::UnityEngine::Vector4> offsets, ::ArrayW<::UnityEngine::Vector4> weights, float glareIntensity, float rotation);
    // public System.Void OnRenderImage(UnityEngine.Material material, UnityEngine.RenderTexture source, UnityEngine.RenderTexture dest, System.Single cameraRot)
    // Offset: 0xEFA9C8
    void OnRenderImage(::UnityEngine::Material* material, ::UnityEngine::RenderTexture* source, ::UnityEngine::RenderTexture* dest, float cameraRot);
    // public AmplifyBloom.GlareLibType get_CurrentGlare()
    // Offset: 0xEFF268
    ::AmplifyBloom::GlareLibType get_CurrentGlare();
    // public System.Void set_CurrentGlare(AmplifyBloom.GlareLibType value)
    // Offset: 0xEFF270
    void set_CurrentGlare(::AmplifyBloom::GlareLibType value);
    // public System.Int32 get_GlareMaxPassCount()
    // Offset: 0xEFF28C
    int get_GlareMaxPassCount();
    // public System.Void set_GlareMaxPassCount(System.Int32 value)
    // Offset: 0xEFF294
    void set_GlareMaxPassCount(int value);
    // public System.Single get_PerPassDisplacement()
    // Offset: 0xEFF2A4
    float get_PerPassDisplacement();
    // public System.Void set_PerPassDisplacement(System.Single value)
    // Offset: 0xEFF2AC
    void set_PerPassDisplacement(float value);
    // public System.Single get_Intensity()
    // Offset: 0xEFF2BC
    float get_Intensity();
    // public System.Void set_Intensity(System.Single value)
    // Offset: 0xEFF2C4
    void set_Intensity(float value);
    // public UnityEngine.Color get_OverallTint()
    // Offset: 0xEFF304
    ::UnityEngine::Color get_OverallTint();
    // public System.Void set_OverallTint(UnityEngine.Color value)
    // Offset: 0xEFF310
    void set_OverallTint(::UnityEngine::Color value);
    // public System.Boolean get_ApplyLensGlare()
    // Offset: 0xEFA9C0
    bool get_ApplyLensGlare();
    // public System.Void set_ApplyLensGlare(System.Boolean value)
    // Offset: 0xEFCD64
    void set_ApplyLensGlare(bool value);
    // public UnityEngine.Gradient get_CromaticColorGradient()
    // Offset: 0xEFF324
    ::UnityEngine::Gradient* get_CromaticColorGradient();
    // public System.Void set_CromaticColorGradient(UnityEngine.Gradient value)
    // Offset: 0xEFF32C
    void set_CromaticColorGradient(::UnityEngine::Gradient* value);
    // public System.Single get_OverallStreakScale()
    // Offset: 0xEFF33C
    float get_OverallStreakScale();
    // public System.Void set_OverallStreakScale(System.Single value)
    // Offset: 0xEFF344
    void set_OverallStreakScale(float value);
    // public AmplifyBloom.GlareDefData[] get_CustomGlareDef()
    // Offset: 0xEFF354
    ::ArrayW<::AmplifyBloom::GlareDefData*> get_CustomGlareDef();
    // public System.Void set_CustomGlareDef(AmplifyBloom.GlareDefData[] value)
    // Offset: 0xEFF35C
    void set_CustomGlareDef(::ArrayW<::AmplifyBloom::GlareDefData*> value);
    // public System.Int32 get_CustomGlareDefIdx()
    // Offset: 0xEFF364
    int get_CustomGlareDefIdx();
    // public System.Void set_CustomGlareDefIdx(System.Int32 value)
    // Offset: 0xEFF36C
    void set_CustomGlareDefIdx(int value);
    // public System.Int32 get_CustomGlareDefAmount()
    // Offset: 0xEFF374
    int get_CustomGlareDefAmount();
    // public System.Void set_CustomGlareDefAmount(System.Int32 value)
    // Offset: 0xEFF37C
    void set_CustomGlareDefAmount(int value);
  }; // AmplifyBloom.AmplifyGlare
  #pragma pack(pop)
  static check_size<sizeof(AmplifyGlare), 168 + sizeof(::ArrayW<::UnityEngine::RenderTexture*>)> __AmplifyBloom_AmplifyGlareSizeCheck;
  static_assert(sizeof(AmplifyGlare) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::SetDirty
// Il2CppName: SetDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::SetDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "SetDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::OnRenderFromCache
// Il2CppName: OnRenderFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*, ::UnityEngine::Material*, float, float)>(&AmplifyBloom::AmplifyGlare::OnRenderFromCache)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* glareIntensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cameraRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "OnRenderFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest, material, glareIntensity, cameraRotation});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::UpdateMatrixesForPass
// Il2CppName: UpdateMatrixesForPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::UnityEngine::Material*, ::ArrayW<::UnityEngine::Vector4>, ::ArrayW<::UnityEngine::Vector4>, float, float)>(&AmplifyBloom::AmplifyGlare::UpdateMatrixesForPass)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* offsets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* weights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* glareIntensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "UpdateMatrixesForPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, offsets, weights, glareIntensity, rotation});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::UnityEngine::Material*, ::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*, float)>(&AmplifyBloom::AmplifyGlare::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* cameraRot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, source, dest, cameraRot});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_CurrentGlare
// Il2CppName: get_CurrentGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::GlareLibType (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_CurrentGlare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_CurrentGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_CurrentGlare
// Il2CppName: set_CurrentGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::AmplifyBloom::GlareLibType)>(&AmplifyBloom::AmplifyGlare::set_CurrentGlare)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "GlareLibType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_CurrentGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_GlareMaxPassCount
// Il2CppName: get_GlareMaxPassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_GlareMaxPassCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_GlareMaxPassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_GlareMaxPassCount
// Il2CppName: set_GlareMaxPassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(int)>(&AmplifyBloom::AmplifyGlare::set_GlareMaxPassCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_GlareMaxPassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_PerPassDisplacement
// Il2CppName: get_PerPassDisplacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_PerPassDisplacement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_PerPassDisplacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_PerPassDisplacement
// Il2CppName: set_PerPassDisplacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(float)>(&AmplifyBloom::AmplifyGlare::set_PerPassDisplacement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_PerPassDisplacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_Intensity
// Il2CppName: get_Intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_Intensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_Intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_Intensity
// Il2CppName: set_Intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(float)>(&AmplifyBloom::AmplifyGlare::set_Intensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_Intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_OverallTint
// Il2CppName: get_OverallTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_OverallTint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_OverallTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_OverallTint
// Il2CppName: set_OverallTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::UnityEngine::Color)>(&AmplifyBloom::AmplifyGlare::set_OverallTint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_OverallTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_ApplyLensGlare
// Il2CppName: get_ApplyLensGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_ApplyLensGlare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_ApplyLensGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_ApplyLensGlare
// Il2CppName: set_ApplyLensGlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(bool)>(&AmplifyBloom::AmplifyGlare::set_ApplyLensGlare)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_ApplyLensGlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_CromaticColorGradient
// Il2CppName: get_CromaticColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_CromaticColorGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_CromaticColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_CromaticColorGradient
// Il2CppName: set_CromaticColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::UnityEngine::Gradient*)>(&AmplifyBloom::AmplifyGlare::set_CromaticColorGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_CromaticColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_OverallStreakScale
// Il2CppName: get_OverallStreakScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_OverallStreakScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_OverallStreakScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_OverallStreakScale
// Il2CppName: set_OverallStreakScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(float)>(&AmplifyBloom::AmplifyGlare::set_OverallStreakScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_OverallStreakScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_CustomGlareDef
// Il2CppName: get_CustomGlareDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::AmplifyBloom::GlareDefData*> (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_CustomGlareDef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_CustomGlareDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_CustomGlareDef
// Il2CppName: set_CustomGlareDef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(::ArrayW<::AmplifyBloom::GlareDefData*>)>(&AmplifyBloom::AmplifyGlare::set_CustomGlareDef)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("AmplifyBloom", "GlareDefData"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_CustomGlareDef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_CustomGlareDefIdx
// Il2CppName: get_CustomGlareDefIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_CustomGlareDefIdx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_CustomGlareDefIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_CustomGlareDefIdx
// Il2CppName: set_CustomGlareDefIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(int)>(&AmplifyBloom::AmplifyGlare::set_CustomGlareDefIdx)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_CustomGlareDefIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::get_CustomGlareDefAmount
// Il2CppName: get_CustomGlareDefAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyGlare::*)()>(&AmplifyBloom::AmplifyGlare::get_CustomGlareDefAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "get_CustomGlareDefAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlare::set_CustomGlareDefAmount
// Il2CppName: set_CustomGlareDefAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlare::*)(int)>(&AmplifyBloom::AmplifyGlare::set_CustomGlareDefAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlare*), "set_CustomGlareDefAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
