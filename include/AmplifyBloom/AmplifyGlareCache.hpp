// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyStarlineCache
  class AmplifyStarlineCache;
  // Forward declaring type: GlareDefData
  class GlareDefData;
  // Forward declaring type: StarDefData
  class StarDefData;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyGlareCache
  class AmplifyGlareCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyGlareCache);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyGlareCache*, "AmplifyBloom", "AmplifyGlareCache");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyGlareCache
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyGlareCache : public ::Il2CppObject {
    public:
    public:
    // AmplifyBloom.AmplifyStarlineCache[] Starlines
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::AmplifyBloom::AmplifyStarlineCache*> Starlines;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::AmplifyStarlineCache*>) == 0x8);
    // UnityEngine.Vector4 AverageWeight
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Vector4 AverageWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // UnityEngine.Vector4[,] CromaticAberrationMat
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector4> CromaticAberrationMat;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // System.Int32 TotalRT
    // Size: 0x4
    // Offset: 0x30
    int TotalRT;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: TotalRT and: GlareDef
    char __padding3[0x4] = {};
    // AmplifyBloom.GlareDefData GlareDef
    // Size: 0x8
    // Offset: 0x38
    ::AmplifyBloom::GlareDefData* GlareDef;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::GlareDefData*) == 0x8);
    // AmplifyBloom.StarDefData StarDef
    // Size: 0x8
    // Offset: 0x40
    ::AmplifyBloom::StarDefData* StarDef;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::StarDefData*) == 0x8);
    // System.Int32 CurrentPassCount
    // Size: 0x4
    // Offset: 0x48
    int CurrentPassCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: AmplifyBloom.AmplifyStarlineCache[] Starlines
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::AmplifyStarlineCache*>& dyn_Starlines();
    // Get instance field reference: UnityEngine.Vector4 AverageWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_AverageWeight();
    // Get instance field reference: UnityEngine.Vector4[,] CromaticAberrationMat
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_CromaticAberrationMat();
    // Get instance field reference: System.Int32 TotalRT
    [[deprecated("Use field access instead!")]] int& dyn_TotalRT();
    // Get instance field reference: AmplifyBloom.GlareDefData GlareDef
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::GlareDefData*& dyn_GlareDef();
    // Get instance field reference: AmplifyBloom.StarDefData StarDef
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::StarDefData*& dyn_StarDef();
    // Get instance field reference: System.Int32 CurrentPassCount
    [[deprecated("Use field access instead!")]] int& dyn_CurrentPassCount();
    // public System.Void .ctor()
    // Offset: 0xEFE284
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyGlareCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyGlareCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyGlareCache*, creationType>()));
    }
    // public System.Void Destroy()
    // Offset: 0xEFE4F8
    void Destroy();
  }; // AmplifyBloom.AmplifyGlareCache
  #pragma pack(pop)
  static check_size<sizeof(AmplifyGlareCache), 72 + sizeof(int)> __AmplifyBloom_AmplifyGlareCacheSizeCheck;
  static_assert(sizeof(AmplifyGlareCache) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlareCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyGlareCache::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyGlareCache::*)()>(&AmplifyBloom::AmplifyGlareCache::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyGlareCache*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
