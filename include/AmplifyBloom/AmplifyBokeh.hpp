// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AmplifyBloom.IAmplifyItem
#include "AmplifyBloom/IAmplifyItem.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: AmplifyBloom.ApertureShape
#include "AmplifyBloom/ApertureShape.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyBokehData
  class AmplifyBokehData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyBokeh
  class AmplifyBokeh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyBokeh);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyBokeh*, "AmplifyBloom", "AmplifyBokeh");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyBokeh
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyBokeh : public ::Il2CppObject/*, public ::AmplifyBloom::IAmplifyItem, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    public:
    // private System.Boolean m_isActive
    // Size: 0x1
    // Offset: 0x10
    bool m_isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_applyOnBloomSource
    // Size: 0x1
    // Offset: 0x11
    bool m_applyOnBloomSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_applyOnBloomSource and: m_bokehSampleRadius
    char __padding1[0x2] = {};
    // private System.Single m_bokehSampleRadius
    // Size: 0x4
    // Offset: 0x14
    float m_bokehSampleRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector4 m_bokehCameraProperties
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Vector4 m_bokehCameraProperties;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Single m_offsetRotation
    // Size: 0x4
    // Offset: 0x28
    float m_offsetRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private AmplifyBloom.ApertureShape m_apertureShape
    // Size: 0x4
    // Offset: 0x2C
    ::AmplifyBloom::ApertureShape m_apertureShape;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::ApertureShape) == 0x4);
    // private System.Collections.Generic.List`1<AmplifyBloom.AmplifyBokehData> m_bokehOffsets
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::AmplifyBloom::AmplifyBokehData*>* m_bokehOffsets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AmplifyBloom::AmplifyBokehData*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::AmplifyBloom::IAmplifyItem
    operator ::AmplifyBloom::IAmplifyItem() noexcept {
      return *reinterpret_cast<::AmplifyBloom::IAmplifyItem*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // static field const value: static private System.Int32 PerPassSampleCount
    static constexpr const int PerPassSampleCount = 8;
    // Get static field: static private System.Int32 PerPassSampleCount
    static int _get_PerPassSampleCount();
    // Set static field: static private System.Int32 PerPassSampleCount
    static void _set_PerPassSampleCount(int value);
    // Get instance field reference: private System.Boolean m_isActive
    [[deprecated("Use field access instead!")]] bool& dyn_m_isActive();
    // Get instance field reference: private System.Boolean m_applyOnBloomSource
    [[deprecated("Use field access instead!")]] bool& dyn_m_applyOnBloomSource();
    // Get instance field reference: private System.Single m_bokehSampleRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_bokehSampleRadius();
    // Get instance field reference: private UnityEngine.Vector4 m_bokehCameraProperties
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_bokehCameraProperties();
    // Get instance field reference: private System.Single m_offsetRotation
    [[deprecated("Use field access instead!")]] float& dyn_m_offsetRotation();
    // Get instance field reference: private AmplifyBloom.ApertureShape m_apertureShape
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::ApertureShape& dyn_m_apertureShape();
    // Get instance field reference: private System.Collections.Generic.List`1<AmplifyBloom.AmplifyBokehData> m_bokehOffsets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::AmplifyBloom::AmplifyBokehData*>*& dyn_m_bokehOffsets();
    // public System.Void .ctor()
    // Offset: 0xEFDA88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyBokeh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyBokeh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyBokeh*, creationType>()));
    }
    // public System.Void Destroy()
    // Offset: 0xEF7070
    void Destroy();
    // private System.Void CreateBokehOffsets(AmplifyBloom.ApertureShape shape)
    // Offset: 0xEFDB6C
    void CreateBokehOffsets(::AmplifyBloom::ApertureShape shape);
    // private UnityEngine.Vector4[] CalculateBokehSamples(System.Int32 sampleCount, System.Single angle)
    // Offset: 0xEFDFA8
    ::ArrayW<::UnityEngine::Vector4> CalculateBokehSamples(int sampleCount, float angle);
    // public System.Void ApplyBokehFilter(UnityEngine.RenderTexture source, UnityEngine.Material material)
    // Offset: 0xEFA1CC
    void ApplyBokehFilter(::UnityEngine::RenderTexture* source, ::UnityEngine::Material* material);
    // public System.Void OnAfterDeserialize()
    // Offset: 0xEFE1D4
    void OnAfterDeserialize();
    // public System.Void OnBeforeSerialize()
    // Offset: 0xEFE1DC
    void OnBeforeSerialize();
    // public AmplifyBloom.ApertureShape get_ApertureShape()
    // Offset: 0xEFE1E0
    ::AmplifyBloom::ApertureShape get_ApertureShape();
    // public System.Void set_ApertureShape(AmplifyBloom.ApertureShape value)
    // Offset: 0xEFE1E8
    void set_ApertureShape(::AmplifyBloom::ApertureShape value);
    // public System.Boolean get_ApplyBokeh()
    // Offset: 0xEFA1BC
    bool get_ApplyBokeh();
    // public System.Void set_ApplyBokeh(System.Boolean value)
    // Offset: 0xEFCC8C
    void set_ApplyBokeh(bool value);
    // public System.Boolean get_ApplyOnBloomSource()
    // Offset: 0xEFA1C4
    bool get_ApplyOnBloomSource();
    // public System.Void set_ApplyOnBloomSource(System.Boolean value)
    // Offset: 0xEFE200
    void set_ApplyOnBloomSource(bool value);
    // public System.Single get_BokehSampleRadius()
    // Offset: 0xEFE20C
    float get_BokehSampleRadius();
    // public System.Void set_BokehSampleRadius(System.Single value)
    // Offset: 0xEFE214
    void set_BokehSampleRadius(float value);
    // public System.Single get_OffsetRotation()
    // Offset: 0xEFE21C
    float get_OffsetRotation();
    // public System.Void set_OffsetRotation(System.Single value)
    // Offset: 0xEFE224
    void set_OffsetRotation(float value);
    // public UnityEngine.Vector4 get_BokehCameraProperties()
    // Offset: 0xEFE22C
    ::UnityEngine::Vector4 get_BokehCameraProperties();
    // public System.Void set_BokehCameraProperties(UnityEngine.Vector4 value)
    // Offset: 0xEFE238
    void set_BokehCameraProperties(::UnityEngine::Vector4 value);
    // public System.Single get_Aperture()
    // Offset: 0xEFE244
    float get_Aperture();
    // public System.Void set_Aperture(System.Single value)
    // Offset: 0xEFE24C
    void set_Aperture(float value);
    // public System.Single get_FocalLength()
    // Offset: 0xEFE254
    float get_FocalLength();
    // public System.Void set_FocalLength(System.Single value)
    // Offset: 0xEFE25C
    void set_FocalLength(float value);
    // public System.Single get_FocalDistance()
    // Offset: 0xEFE264
    float get_FocalDistance();
    // public System.Void set_FocalDistance(System.Single value)
    // Offset: 0xEFE26C
    void set_FocalDistance(float value);
    // public System.Single get_MaxCoCDiameter()
    // Offset: 0xEFE274
    float get_MaxCoCDiameter();
    // public System.Void set_MaxCoCDiameter(System.Single value)
    // Offset: 0xEFE27C
    void set_MaxCoCDiameter(float value);
  }; // AmplifyBloom.AmplifyBokeh
  #pragma pack(pop)
  static check_size<sizeof(AmplifyBokeh), 48 + sizeof(::System::Collections::Generic::List_1<::AmplifyBloom::AmplifyBokehData*>*)> __AmplifyBloom_AmplifyBokehSizeCheck;
  static_assert(sizeof(AmplifyBokeh) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::CreateBokehOffsets
// Il2CppName: CreateBokehOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(::AmplifyBloom::ApertureShape)>(&AmplifyBloom::AmplifyBokeh::CreateBokehOffsets)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "ApertureShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "CreateBokehOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::CalculateBokehSamples
// Il2CppName: CalculateBokehSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector4> (AmplifyBloom::AmplifyBokeh::*)(int, float)>(&AmplifyBloom::AmplifyBokeh::CalculateBokehSamples)> {
  static const MethodInfo* get() {
    static auto* sampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "CalculateBokehSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleCount, angle});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::ApplyBokehFilter
// Il2CppName: ApplyBokehFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(::UnityEngine::RenderTexture*, ::UnityEngine::Material*)>(&AmplifyBloom::AmplifyBokeh::ApplyBokehFilter)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "ApplyBokehFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, material});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_ApertureShape
// Il2CppName: get_ApertureShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::ApertureShape (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_ApertureShape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_ApertureShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_ApertureShape
// Il2CppName: set_ApertureShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(::AmplifyBloom::ApertureShape)>(&AmplifyBloom::AmplifyBokeh::set_ApertureShape)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "ApertureShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_ApertureShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_ApplyBokeh
// Il2CppName: get_ApplyBokeh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_ApplyBokeh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_ApplyBokeh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_ApplyBokeh
// Il2CppName: set_ApplyBokeh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(bool)>(&AmplifyBloom::AmplifyBokeh::set_ApplyBokeh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_ApplyBokeh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_ApplyOnBloomSource
// Il2CppName: get_ApplyOnBloomSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_ApplyOnBloomSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_ApplyOnBloomSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_ApplyOnBloomSource
// Il2CppName: set_ApplyOnBloomSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(bool)>(&AmplifyBloom::AmplifyBokeh::set_ApplyOnBloomSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_ApplyOnBloomSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_BokehSampleRadius
// Il2CppName: get_BokehSampleRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_BokehSampleRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_BokehSampleRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_BokehSampleRadius
// Il2CppName: set_BokehSampleRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_BokehSampleRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_BokehSampleRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_OffsetRotation
// Il2CppName: get_OffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_OffsetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_OffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_OffsetRotation
// Il2CppName: set_OffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_OffsetRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_OffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_BokehCameraProperties
// Il2CppName: get_BokehCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_BokehCameraProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_BokehCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_BokehCameraProperties
// Il2CppName: set_BokehCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(::UnityEngine::Vector4)>(&AmplifyBloom::AmplifyBokeh::set_BokehCameraProperties)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_BokehCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_Aperture
// Il2CppName: get_Aperture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_Aperture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_Aperture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_Aperture
// Il2CppName: set_Aperture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_Aperture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_Aperture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_FocalLength
// Il2CppName: get_FocalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_FocalLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_FocalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_FocalLength
// Il2CppName: set_FocalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_FocalLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_FocalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_FocalDistance
// Il2CppName: get_FocalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_FocalDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_FocalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_FocalDistance
// Il2CppName: set_FocalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_FocalDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_FocalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::get_MaxCoCDiameter
// Il2CppName: get_MaxCoCDiameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyBokeh::*)()>(&AmplifyBloom::AmplifyBokeh::get_MaxCoCDiameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "get_MaxCoCDiameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyBokeh::set_MaxCoCDiameter
// Il2CppName: set_MaxCoCDiameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyBokeh::*)(float)>(&AmplifyBloom::AmplifyBokeh::set_MaxCoCDiameter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyBokeh*), "set_MaxCoCDiameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
