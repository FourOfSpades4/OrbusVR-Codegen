// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AmplifyBloom.IAmplifyItem
#include "AmplifyBloom/IAmplifyItem.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyLensFlare
  class AmplifyLensFlare;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyLensFlare);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyLensFlare*, "AmplifyBloom", "AmplifyLensFlare");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyLensFlare
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyLensFlare : public ::Il2CppObject/*, public ::AmplifyBloom::IAmplifyItem*/ {
    public:
    public:
    // private System.Single m_overallIntensity
    // Size: 0x4
    // Offset: 0x10
    float m_overallIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_normalizedGhostIntensity
    // Size: 0x4
    // Offset: 0x14
    float m_normalizedGhostIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_normalizedHaloIntensity
    // Size: 0x4
    // Offset: 0x18
    float m_normalizedHaloIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_applyLensFlare
    // Size: 0x1
    // Offset: 0x1C
    bool m_applyLensFlare;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_applyLensFlare and: m_lensFlareGhostAmount
    char __padding3[0x3] = {};
    // private System.Int32 m_lensFlareGhostAmount
    // Size: 0x4
    // Offset: 0x20
    int m_lensFlareGhostAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector4 m_lensFlareGhostsParams
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Vector4 m_lensFlareGhostsParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Single m_lensFlareGhostChrDistortion
    // Size: 0x4
    // Offset: 0x34
    float m_lensFlareGhostChrDistortion;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Gradient m_lensGradient
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Gradient* m_lensGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Texture2D m_lensFlareGradTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture2D* m_lensFlareGradTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Color[] m_lensFlareGradColor
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Color> m_lensFlareGradColor;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Vector4 m_lensFlareHaloParams
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Vector4 m_lensFlareHaloParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Single m_lensFlareHaloChrDistortion
    // Size: 0x4
    // Offset: 0x60
    float m_lensFlareHaloChrDistortion;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_lensFlareGaussianBlurAmount
    // Size: 0x4
    // Offset: 0x64
    int m_lensFlareGaussianBlurAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::AmplifyBloom::IAmplifyItem
    operator ::AmplifyBloom::IAmplifyItem() noexcept {
      return *reinterpret_cast<::AmplifyBloom::IAmplifyItem*>(this);
    }
    // static field const value: static private System.Int32 LUTTextureWidth
    static constexpr const int LUTTextureWidth = 256;
    // Get static field: static private System.Int32 LUTTextureWidth
    static int _get_LUTTextureWidth();
    // Set static field: static private System.Int32 LUTTextureWidth
    static void _set_LUTTextureWidth(int value);
    // Get instance field reference: private System.Single m_overallIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_overallIntensity();
    // Get instance field reference: private System.Single m_normalizedGhostIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_normalizedGhostIntensity();
    // Get instance field reference: private System.Single m_normalizedHaloIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_normalizedHaloIntensity();
    // Get instance field reference: private System.Boolean m_applyLensFlare
    [[deprecated("Use field access instead!")]] bool& dyn_m_applyLensFlare();
    // Get instance field reference: private System.Int32 m_lensFlareGhostAmount
    [[deprecated("Use field access instead!")]] int& dyn_m_lensFlareGhostAmount();
    // Get instance field reference: private UnityEngine.Vector4 m_lensFlareGhostsParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_lensFlareGhostsParams();
    // Get instance field reference: private System.Single m_lensFlareGhostChrDistortion
    [[deprecated("Use field access instead!")]] float& dyn_m_lensFlareGhostChrDistortion();
    // Get instance field reference: private UnityEngine.Gradient m_lensGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_m_lensGradient();
    // Get instance field reference: private UnityEngine.Texture2D m_lensFlareGradTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_m_lensFlareGradTexture();
    // Get instance field reference: private UnityEngine.Color[] m_lensFlareGradColor
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_m_lensFlareGradColor();
    // Get instance field reference: private UnityEngine.Vector4 m_lensFlareHaloParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_lensFlareHaloParams();
    // Get instance field reference: private System.Single m_lensFlareHaloChrDistortion
    [[deprecated("Use field access instead!")]] float& dyn_m_lensFlareHaloChrDistortion();
    // Get instance field reference: private System.Int32 m_lensFlareGaussianBlurAmount
    [[deprecated("Use field access instead!")]] int& dyn_m_lensFlareGaussianBlurAmount();
    // public System.Void .ctor()
    // Offset: 0xEFD014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyLensFlare* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyLensFlare::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyLensFlare*, creationType>()));
    }
    // public System.Void Init()
    // Offset: 0xEF6B7C
    void Init();
    // public System.Void Destroy()
    // Offset: 0xEF7340
    void Destroy();
    // public System.Void CreateLUTexture()
    // Offset: 0xEF6F94
    void CreateLUTexture();
    // public UnityEngine.RenderTexture ApplyFlare(UnityEngine.Material material, UnityEngine.RenderTexture source)
    // Offset: 0xEFA784
    ::UnityEngine::RenderTexture* ApplyFlare(::UnityEngine::Material* material, ::UnityEngine::RenderTexture* source);
    // public System.Void TextureFromGradient()
    // Offset: 0xEFF724
    void TextureFromGradient();
    // public System.Boolean get_ApplyLensFlare()
    // Offset: 0xEFA77C
    bool get_ApplyLensFlare();
    // public System.Void set_ApplyLensFlare(System.Boolean value)
    // Offset: 0xEFCCF8
    void set_ApplyLensFlare(bool value);
    // public System.Single get_OverallIntensity()
    // Offset: 0xEFF82C
    float get_OverallIntensity();
    // public System.Void set_OverallIntensity(System.Single value)
    // Offset: 0xEFF834
    void set_OverallIntensity(float value);
    // public System.Int32 get_LensFlareGhostAmount()
    // Offset: 0xEFF884
    int get_LensFlareGhostAmount();
    // public System.Void set_LensFlareGhostAmount(System.Int32 value)
    // Offset: 0xEFF88C
    void set_LensFlareGhostAmount(int value);
    // public UnityEngine.Vector4 get_LensFlareGhostsParams()
    // Offset: 0xEFF894
    ::UnityEngine::Vector4 get_LensFlareGhostsParams();
    // public System.Void set_LensFlareGhostsParams(UnityEngine.Vector4 value)
    // Offset: 0xEFF8A0
    void set_LensFlareGhostsParams(::UnityEngine::Vector4 value);
    // public System.Single get_LensFlareNormalizedGhostsIntensity()
    // Offset: 0xEFF8AC
    float get_LensFlareNormalizedGhostsIntensity();
    // public System.Void set_LensFlareNormalizedGhostsIntensity(System.Single value)
    // Offset: 0xEFF8B4
    void set_LensFlareNormalizedGhostsIntensity(float value);
    // public System.Single get_LensFlareGhostsIntensity()
    // Offset: 0xEFF8F8
    float get_LensFlareGhostsIntensity();
    // public System.Void set_LensFlareGhostsIntensity(System.Single value)
    // Offset: 0xEFF900
    void set_LensFlareGhostsIntensity(float value);
    // public System.Single get_LensFlareGhostsDispersal()
    // Offset: 0xEFF910
    float get_LensFlareGhostsDispersal();
    // public System.Void set_LensFlareGhostsDispersal(System.Single value)
    // Offset: 0xEFF918
    void set_LensFlareGhostsDispersal(float value);
    // public System.Single get_LensFlareGhostsPowerFactor()
    // Offset: 0xEFF920
    float get_LensFlareGhostsPowerFactor();
    // public System.Void set_LensFlareGhostsPowerFactor(System.Single value)
    // Offset: 0xEFF928
    void set_LensFlareGhostsPowerFactor(float value);
    // public System.Single get_LensFlareGhostsPowerFalloff()
    // Offset: 0xEFF930
    float get_LensFlareGhostsPowerFalloff();
    // public System.Void set_LensFlareGhostsPowerFalloff(System.Single value)
    // Offset: 0xEFF938
    void set_LensFlareGhostsPowerFalloff(float value);
    // public UnityEngine.Gradient get_LensFlareGradient()
    // Offset: 0xEFF940
    ::UnityEngine::Gradient* get_LensFlareGradient();
    // public System.Void set_LensFlareGradient(UnityEngine.Gradient value)
    // Offset: 0xEFF948
    void set_LensFlareGradient(::UnityEngine::Gradient* value);
    // public UnityEngine.Vector4 get_LensFlareHaloParams()
    // Offset: 0xEFF950
    ::UnityEngine::Vector4 get_LensFlareHaloParams();
    // public System.Void set_LensFlareHaloParams(UnityEngine.Vector4 value)
    // Offset: 0xEFF95C
    void set_LensFlareHaloParams(::UnityEngine::Vector4 value);
    // public System.Single get_LensFlareNormalizedHaloIntensity()
    // Offset: 0xEFF968
    float get_LensFlareNormalizedHaloIntensity();
    // public System.Void set_LensFlareNormalizedHaloIntensity(System.Single value)
    // Offset: 0xEFF970
    void set_LensFlareNormalizedHaloIntensity(float value);
    // public System.Single get_LensFlareHaloIntensity()
    // Offset: 0xEFF9B4
    float get_LensFlareHaloIntensity();
    // public System.Void set_LensFlareHaloIntensity(System.Single value)
    // Offset: 0xEFF9BC
    void set_LensFlareHaloIntensity(float value);
    // public System.Single get_LensFlareHaloWidth()
    // Offset: 0xEFF9CC
    float get_LensFlareHaloWidth();
    // public System.Void set_LensFlareHaloWidth(System.Single value)
    // Offset: 0xEFF9D4
    void set_LensFlareHaloWidth(float value);
    // public System.Single get_LensFlareHaloPowerFactor()
    // Offset: 0xEFF9DC
    float get_LensFlareHaloPowerFactor();
    // public System.Void set_LensFlareHaloPowerFactor(System.Single value)
    // Offset: 0xEFF9E4
    void set_LensFlareHaloPowerFactor(float value);
    // public System.Single get_LensFlareHaloPowerFalloff()
    // Offset: 0xEFF9EC
    float get_LensFlareHaloPowerFalloff();
    // public System.Void set_LensFlareHaloPowerFalloff(System.Single value)
    // Offset: 0xEFF9F4
    void set_LensFlareHaloPowerFalloff(float value);
    // public System.Single get_LensFlareGhostChrDistortion()
    // Offset: 0xEFF9FC
    float get_LensFlareGhostChrDistortion();
    // public System.Void set_LensFlareGhostChrDistortion(System.Single value)
    // Offset: 0xEFFA04
    void set_LensFlareGhostChrDistortion(float value);
    // public System.Single get_LensFlareHaloChrDistortion()
    // Offset: 0xEFFA0C
    float get_LensFlareHaloChrDistortion();
    // public System.Void set_LensFlareHaloChrDistortion(System.Single value)
    // Offset: 0xEFFA14
    void set_LensFlareHaloChrDistortion(float value);
    // public System.Int32 get_LensFlareGaussianBlurAmount()
    // Offset: 0xEFA9B8
    int get_LensFlareGaussianBlurAmount();
    // public System.Void set_LensFlareGaussianBlurAmount(System.Int32 value)
    // Offset: 0xEFFA1C
    void set_LensFlareGaussianBlurAmount(int value);
  }; // AmplifyBloom.AmplifyLensFlare
  #pragma pack(pop)
  static check_size<sizeof(AmplifyLensFlare), 100 + sizeof(int)> __AmplifyBloom_AmplifyLensFlareSizeCheck;
  static_assert(sizeof(AmplifyLensFlare) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::CreateLUTexture
// Il2CppName: CreateLUTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::CreateLUTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "CreateLUTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::ApplyFlare
// Il2CppName: ApplyFlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (AmplifyBloom::AmplifyLensFlare::*)(::UnityEngine::Material*, ::UnityEngine::RenderTexture*)>(&AmplifyBloom::AmplifyLensFlare::ApplyFlare)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "ApplyFlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, source});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::TextureFromGradient
// Il2CppName: TextureFromGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::TextureFromGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "TextureFromGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_ApplyLensFlare
// Il2CppName: get_ApplyLensFlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_ApplyLensFlare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_ApplyLensFlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_ApplyLensFlare
// Il2CppName: set_ApplyLensFlare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(bool)>(&AmplifyBloom::AmplifyLensFlare::set_ApplyLensFlare)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_ApplyLensFlare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_OverallIntensity
// Il2CppName: get_OverallIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_OverallIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_OverallIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_OverallIntensity
// Il2CppName: set_OverallIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_OverallIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_OverallIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostAmount
// Il2CppName: get_LensFlareGhostAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostAmount
// Il2CppName: set_LensFlareGhostAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(int)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsParams
// Il2CppName: get_LensFlareGhostsParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostsParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsParams
// Il2CppName: set_LensFlareGhostsParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(::UnityEngine::Vector4)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsParams)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostsParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareNormalizedGhostsIntensity
// Il2CppName: get_LensFlareNormalizedGhostsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareNormalizedGhostsIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareNormalizedGhostsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareNormalizedGhostsIntensity
// Il2CppName: set_LensFlareNormalizedGhostsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareNormalizedGhostsIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareNormalizedGhostsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsIntensity
// Il2CppName: get_LensFlareGhostsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsIntensity
// Il2CppName: set_LensFlareGhostsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsDispersal
// Il2CppName: get_LensFlareGhostsDispersal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsDispersal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostsDispersal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsDispersal
// Il2CppName: set_LensFlareGhostsDispersal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsDispersal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostsDispersal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsPowerFactor
// Il2CppName: get_LensFlareGhostsPowerFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsPowerFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostsPowerFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsPowerFactor
// Il2CppName: set_LensFlareGhostsPowerFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsPowerFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostsPowerFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsPowerFalloff
// Il2CppName: get_LensFlareGhostsPowerFalloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostsPowerFalloff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostsPowerFalloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsPowerFalloff
// Il2CppName: set_LensFlareGhostsPowerFalloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostsPowerFalloff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostsPowerFalloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGradient
// Il2CppName: get_LensFlareGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGradient
// Il2CppName: set_LensFlareGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(::UnityEngine::Gradient*)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloParams
// Il2CppName: get_LensFlareHaloParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloParams
// Il2CppName: set_LensFlareHaloParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(::UnityEngine::Vector4)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloParams)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareNormalizedHaloIntensity
// Il2CppName: get_LensFlareNormalizedHaloIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareNormalizedHaloIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareNormalizedHaloIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareNormalizedHaloIntensity
// Il2CppName: set_LensFlareNormalizedHaloIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareNormalizedHaloIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareNormalizedHaloIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloIntensity
// Il2CppName: get_LensFlareHaloIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloIntensity
// Il2CppName: set_LensFlareHaloIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloIntensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloWidth
// Il2CppName: get_LensFlareHaloWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloWidth
// Il2CppName: set_LensFlareHaloWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloPowerFactor
// Il2CppName: get_LensFlareHaloPowerFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloPowerFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloPowerFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloPowerFactor
// Il2CppName: set_LensFlareHaloPowerFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloPowerFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloPowerFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloPowerFalloff
// Il2CppName: get_LensFlareHaloPowerFalloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloPowerFalloff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloPowerFalloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloPowerFalloff
// Il2CppName: set_LensFlareHaloPowerFalloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloPowerFalloff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloPowerFalloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostChrDistortion
// Il2CppName: get_LensFlareGhostChrDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGhostChrDistortion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGhostChrDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostChrDistortion
// Il2CppName: set_LensFlareGhostChrDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGhostChrDistortion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGhostChrDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloChrDistortion
// Il2CppName: get_LensFlareHaloChrDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareHaloChrDistortion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareHaloChrDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloChrDistortion
// Il2CppName: set_LensFlareHaloChrDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(float)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareHaloChrDistortion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareHaloChrDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::get_LensFlareGaussianBlurAmount
// Il2CppName: get_LensFlareGaussianBlurAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::AmplifyLensFlare::*)()>(&AmplifyBloom::AmplifyLensFlare::get_LensFlareGaussianBlurAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "get_LensFlareGaussianBlurAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyLensFlare::set_LensFlareGaussianBlurAmount
// Il2CppName: set_LensFlareGaussianBlurAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyLensFlare::*)(int)>(&AmplifyBloom::AmplifyLensFlare::set_LensFlareGaussianBlurAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyLensFlare*), "set_LensFlareGaussianBlurAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
