// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AmplifyBloom.StarLibType
#include "AmplifyBloom/StarLibType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: StarLineData
  class StarLineData;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: StarDefData
  class StarDefData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::StarDefData);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::StarDefData*, "AmplifyBloom", "StarDefData");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.StarDefData
  // [TokenAttribute] Offset: FFFFFFFF
  class StarDefData : public ::Il2CppObject {
    public:
    public:
    // private AmplifyBloom.StarLibType m_starType
    // Size: 0x4
    // Offset: 0x10
    ::AmplifyBloom::StarLibType m_starType;
    // Field size check
    static_assert(sizeof(::AmplifyBloom::StarLibType) == 0x4);
    // Padding between fields: m_starType and: m_starName
    char __padding0[0x4] = {};
    // private System.String m_starName
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_starName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 m_starlinesCount
    // Size: 0x4
    // Offset: 0x20
    int m_starlinesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_passCount
    // Size: 0x4
    // Offset: 0x24
    int m_passCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_sampleLength
    // Size: 0x4
    // Offset: 0x28
    float m_sampleLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_attenuation
    // Size: 0x4
    // Offset: 0x2C
    float m_attenuation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_inclination
    // Size: 0x4
    // Offset: 0x30
    float m_inclination;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_rotation
    // Size: 0x4
    // Offset: 0x34
    float m_rotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private AmplifyBloom.StarLineData[] m_starLinesArr
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::AmplifyBloom::StarLineData*> m_starLinesArr;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::StarLineData*>) == 0x8);
    // private System.Single m_customIncrement
    // Size: 0x4
    // Offset: 0x40
    float m_customIncrement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_longAttenuation
    // Size: 0x4
    // Offset: 0x44
    float m_longAttenuation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private AmplifyBloom.StarLibType m_starType
    [[deprecated("Use field access instead!")]] ::AmplifyBloom::StarLibType& dyn_m_starType();
    // Get instance field reference: private System.String m_starName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_starName();
    // Get instance field reference: private System.Int32 m_starlinesCount
    [[deprecated("Use field access instead!")]] int& dyn_m_starlinesCount();
    // Get instance field reference: private System.Int32 m_passCount
    [[deprecated("Use field access instead!")]] int& dyn_m_passCount();
    // Get instance field reference: private System.Single m_sampleLength
    [[deprecated("Use field access instead!")]] float& dyn_m_sampleLength();
    // Get instance field reference: private System.Single m_attenuation
    [[deprecated("Use field access instead!")]] float& dyn_m_attenuation();
    // Get instance field reference: private System.Single m_inclination
    [[deprecated("Use field access instead!")]] float& dyn_m_inclination();
    // Get instance field reference: private System.Single m_rotation
    [[deprecated("Use field access instead!")]] float& dyn_m_rotation();
    // Get instance field reference: private AmplifyBloom.StarLineData[] m_starLinesArr
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::StarLineData*>& dyn_m_starLinesArr();
    // Get instance field reference: private System.Single m_customIncrement
    [[deprecated("Use field access instead!")]] float& dyn_m_customIncrement();
    // Get instance field reference: private System.Single m_longAttenuation
    [[deprecated("Use field access instead!")]] float& dyn_m_longAttenuation();
    // public System.Void .ctor()
    // Offset: 0xEFFBB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StarDefData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::StarDefData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StarDefData*, creationType>()));
    }
    // public System.Void Destroy()
    // Offset: 0xEFE4F0
    void Destroy();
    // public System.Void .ctor(AmplifyBloom.StarLibType starType, System.String starName, System.Int32 starLinesCount, System.Int32 passCount, System.Single sampleLength, System.Single attenuation, System.Single inclination, System.Single rotation, System.Single longAttenuation, System.Single customIncrement)
    // Offset: 0xEFE3B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StarDefData* New_ctor(::AmplifyBloom::StarLibType starType, ::StringW starName, int starLinesCount, int passCount, float sampleLength, float attenuation, float inclination, float rotation, float longAttenuation, float customIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::StarDefData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StarDefData*, creationType>(starType, starName, starLinesCount, passCount, sampleLength, attenuation, inclination, rotation, longAttenuation, customIncrement)));
    }
    // public System.Void CalculateStarData()
    // Offset: 0xEFFC78
    void CalculateStarData();
    // public AmplifyBloom.StarLibType get_StarType()
    // Offset: 0xEFFF1C
    ::AmplifyBloom::StarLibType get_StarType();
    // public System.Void set_StarType(AmplifyBloom.StarLibType value)
    // Offset: 0xEFFF24
    void set_StarType(::AmplifyBloom::StarLibType value);
    // public System.String get_StarName()
    // Offset: 0xEFFF2C
    ::StringW get_StarName();
    // public System.Void set_StarName(System.String value)
    // Offset: 0xEFFF34
    void set_StarName(::StringW value);
    // public System.Int32 get_StarlinesCount()
    // Offset: 0xEFF228
    int get_StarlinesCount();
    // public System.Void set_StarlinesCount(System.Int32 value)
    // Offset: 0xEFFF3C
    void set_StarlinesCount(int value);
    // public System.Int32 get_PassCount()
    // Offset: 0xEFF240
    int get_PassCount();
    // public System.Void set_PassCount(System.Int32 value)
    // Offset: 0xEFFF44
    void set_PassCount(int value);
    // public System.Single get_SampleLength()
    // Offset: 0xEFFF4C
    float get_SampleLength();
    // public System.Void set_SampleLength(System.Single value)
    // Offset: 0xEFFF54
    void set_SampleLength(float value);
    // public System.Single get_Attenuation()
    // Offset: 0xEFFF5C
    float get_Attenuation();
    // public System.Void set_Attenuation(System.Single value)
    // Offset: 0xEFFF64
    void set_Attenuation(float value);
    // public System.Single get_Inclination()
    // Offset: 0xEFF250
    float get_Inclination();
    // public System.Void set_Inclination(System.Single value)
    // Offset: 0xEFFF6C
    void set_Inclination(float value);
    // public System.Single get_CameraRotInfluence()
    // Offset: 0xEFECF0
    float get_CameraRotInfluence();
    // public System.Void set_CameraRotInfluence(System.Single value)
    // Offset: 0xEFFF74
    void set_CameraRotInfluence(float value);
    // public AmplifyBloom.StarLineData[] get_StarLinesArr()
    // Offset: 0xEFF260
    ::ArrayW<::AmplifyBloom::StarLineData*> get_StarLinesArr();
    // public System.Single get_CustomIncrement()
    // Offset: 0xEFFF7C
    float get_CustomIncrement();
    // public System.Void set_CustomIncrement(System.Single value)
    // Offset: 0xEFFF84
    void set_CustomIncrement(float value);
    // public System.Single get_LongAttenuation()
    // Offset: 0xEFFF8C
    float get_LongAttenuation();
    // public System.Void set_LongAttenuation(System.Single value)
    // Offset: 0xEFFF94
    void set_LongAttenuation(float value);
  }; // AmplifyBloom.StarDefData
  #pragma pack(pop)
  static check_size<sizeof(StarDefData), 68 + sizeof(float)> __AmplifyBloom_StarDefDataSizeCheck;
  static_assert(sizeof(StarDefData) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::CalculateStarData
// Il2CppName: CalculateStarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::CalculateStarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "CalculateStarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_StarType
// Il2CppName: get_StarType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyBloom::StarLibType (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_StarType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_StarType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_StarType
// Il2CppName: set_StarType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(::AmplifyBloom::StarLibType)>(&AmplifyBloom::StarDefData::set_StarType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "StarLibType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_StarType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_StarName
// Il2CppName: get_StarName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_StarName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_StarName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_StarName
// Il2CppName: set_StarName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(::StringW)>(&AmplifyBloom::StarDefData::set_StarName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_StarName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_StarlinesCount
// Il2CppName: get_StarlinesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_StarlinesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_StarlinesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_StarlinesCount
// Il2CppName: set_StarlinesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(int)>(&AmplifyBloom::StarDefData::set_StarlinesCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_StarlinesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_PassCount
// Il2CppName: get_PassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_PassCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_PassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_PassCount
// Il2CppName: set_PassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(int)>(&AmplifyBloom::StarDefData::set_PassCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_PassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_SampleLength
// Il2CppName: get_SampleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_SampleLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_SampleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_SampleLength
// Il2CppName: set_SampleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_SampleLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_SampleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_Attenuation
// Il2CppName: get_Attenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_Attenuation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_Attenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_Attenuation
// Il2CppName: set_Attenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_Attenuation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_Attenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_Inclination
// Il2CppName: get_Inclination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_Inclination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_Inclination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_Inclination
// Il2CppName: set_Inclination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_Inclination)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_Inclination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_CameraRotInfluence
// Il2CppName: get_CameraRotInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_CameraRotInfluence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_CameraRotInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_CameraRotInfluence
// Il2CppName: set_CameraRotInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_CameraRotInfluence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_CameraRotInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_StarLinesArr
// Il2CppName: get_StarLinesArr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::AmplifyBloom::StarLineData*> (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_StarLinesArr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_StarLinesArr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_CustomIncrement
// Il2CppName: get_CustomIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_CustomIncrement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_CustomIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_CustomIncrement
// Il2CppName: set_CustomIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_CustomIncrement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_CustomIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::get_LongAttenuation
// Il2CppName: get_LongAttenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AmplifyBloom::StarDefData::*)()>(&AmplifyBloom::StarDefData::get_LongAttenuation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "get_LongAttenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::StarDefData::set_LongAttenuation
// Il2CppName: set_LongAttenuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::StarDefData::*)(float)>(&AmplifyBloom::StarDefData::set_LongAttenuation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::StarDefData*), "set_LongAttenuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
