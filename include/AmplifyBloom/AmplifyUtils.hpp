// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RenderTextureFormat
#include "UnityEngine/RenderTextureFormat.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.TextureWrapMode
#include "UnityEngine/TextureWrapMode.hpp"
// Including type: UnityEngine.RenderTextureReadWrite
#include "UnityEngine/RenderTextureReadWrite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyUtils
  class AmplifyUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyUtils);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyUtils*, "AmplifyBloom", "AmplifyUtils");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyUtils : public ::Il2CppObject {
    public:
    // Get static field: static public System.Int32 MaskTextureId
    static int _get_MaskTextureId();
    // Set static field: static public System.Int32 MaskTextureId
    static void _set_MaskTextureId(int value);
    // Get static field: static public System.Int32 BlurRadiusId
    static int _get_BlurRadiusId();
    // Set static field: static public System.Int32 BlurRadiusId
    static void _set_BlurRadiusId(int value);
    // Get static field: static public System.String HighPrecisionKeyword
    static ::StringW _get_HighPrecisionKeyword();
    // Set static field: static public System.String HighPrecisionKeyword
    static void _set_HighPrecisionKeyword(::StringW value);
    // Get static field: static public System.String ShaderModeTag
    static ::StringW _get_ShaderModeTag();
    // Set static field: static public System.String ShaderModeTag
    static void _set_ShaderModeTag(::StringW value);
    // Get static field: static public System.String ShaderModeValue
    static ::StringW _get_ShaderModeValue();
    // Set static field: static public System.String ShaderModeValue
    static void _set_ShaderModeValue(::StringW value);
    // Get static field: static public System.String DebugStr
    static ::StringW _get_DebugStr();
    // Set static field: static public System.String DebugStr
    static void _set_DebugStr(::StringW value);
    // Get static field: static public System.Int32 UpscaleContributionId
    static int _get_UpscaleContributionId();
    // Set static field: static public System.Int32 UpscaleContributionId
    static void _set_UpscaleContributionId(int value);
    // Get static field: static public System.Int32 SourceContributionId
    static int _get_SourceContributionId();
    // Set static field: static public System.Int32 SourceContributionId
    static void _set_SourceContributionId(int value);
    // Get static field: static public System.Int32 LensStarburstRTId
    static int _get_LensStarburstRTId();
    // Set static field: static public System.Int32 LensStarburstRTId
    static void _set_LensStarburstRTId(int value);
    // Get static field: static public System.Int32 LensDirtRTId
    static int _get_LensDirtRTId();
    // Set static field: static public System.Int32 LensDirtRTId
    static void _set_LensDirtRTId(int value);
    // Get static field: static public System.Int32 LensFlareRTId
    static int _get_LensFlareRTId();
    // Set static field: static public System.Int32 LensFlareRTId
    static void _set_LensFlareRTId(int value);
    // Get static field: static public System.Int32 LensGlareRTId
    static int _get_LensGlareRTId();
    // Set static field: static public System.Int32 LensGlareRTId
    static void _set_LensGlareRTId(int value);
    // Get static field: static public System.Int32[] MipResultsRTS
    static ::ArrayW<int> _get_MipResultsRTS();
    // Set static field: static public System.Int32[] MipResultsRTS
    static void _set_MipResultsRTS(::ArrayW<int> value);
    // Get static field: static public System.Int32[] AnamorphicRTS
    static ::ArrayW<int> _get_AnamorphicRTS();
    // Set static field: static public System.Int32[] AnamorphicRTS
    static void _set_AnamorphicRTS(::ArrayW<int> value);
    // Get static field: static public System.Int32[] AnamorphicGlareWeightsMatStr
    static ::ArrayW<int> _get_AnamorphicGlareWeightsMatStr();
    // Set static field: static public System.Int32[] AnamorphicGlareWeightsMatStr
    static void _set_AnamorphicGlareWeightsMatStr(::ArrayW<int> value);
    // Get static field: static public System.Int32[] AnamorphicGlareOffsetsMatStr
    static ::ArrayW<int> _get_AnamorphicGlareOffsetsMatStr();
    // Set static field: static public System.Int32[] AnamorphicGlareOffsetsMatStr
    static void _set_AnamorphicGlareOffsetsMatStr(::ArrayW<int> value);
    // Get static field: static public System.Int32[] AnamorphicGlareWeightsStr
    static ::ArrayW<int> _get_AnamorphicGlareWeightsStr();
    // Set static field: static public System.Int32[] AnamorphicGlareWeightsStr
    static void _set_AnamorphicGlareWeightsStr(::ArrayW<int> value);
    // Get static field: static public System.Int32[] UpscaleWeightsStr
    static ::ArrayW<int> _get_UpscaleWeightsStr();
    // Set static field: static public System.Int32[] UpscaleWeightsStr
    static void _set_UpscaleWeightsStr(::ArrayW<int> value);
    // Get static field: static public System.Int32[] LensDirtWeightsStr
    static ::ArrayW<int> _get_LensDirtWeightsStr();
    // Set static field: static public System.Int32[] LensDirtWeightsStr
    static void _set_LensDirtWeightsStr(::ArrayW<int> value);
    // Get static field: static public System.Int32[] LensStarburstWeightsStr
    static ::ArrayW<int> _get_LensStarburstWeightsStr();
    // Set static field: static public System.Int32[] LensStarburstWeightsStr
    static void _set_LensStarburstWeightsStr(::ArrayW<int> value);
    // Get static field: static public System.Int32 BloomRangeId
    static int _get_BloomRangeId();
    // Set static field: static public System.Int32 BloomRangeId
    static void _set_BloomRangeId(int value);
    // Get static field: static public System.Int32 LensDirtStrengthId
    static int _get_LensDirtStrengthId();
    // Set static field: static public System.Int32 LensDirtStrengthId
    static void _set_LensDirtStrengthId(int value);
    // Get static field: static public System.Int32 BloomParamsId
    static int _get_BloomParamsId();
    // Set static field: static public System.Int32 BloomParamsId
    static void _set_BloomParamsId(int value);
    // Get static field: static public System.Int32 TempFilterValueId
    static int _get_TempFilterValueId();
    // Set static field: static public System.Int32 TempFilterValueId
    static void _set_TempFilterValueId(int value);
    // Get static field: static public System.Int32 LensFlareStarMatrixId
    static int _get_LensFlareStarMatrixId();
    // Set static field: static public System.Int32 LensFlareStarMatrixId
    static void _set_LensFlareStarMatrixId(int value);
    // Get static field: static public System.Int32 LensFlareStarburstStrengthId
    static int _get_LensFlareStarburstStrengthId();
    // Set static field: static public System.Int32 LensFlareStarburstStrengthId
    static void _set_LensFlareStarburstStrengthId(int value);
    // Get static field: static public System.Int32 LensFlareGhostsParamsId
    static int _get_LensFlareGhostsParamsId();
    // Set static field: static public System.Int32 LensFlareGhostsParamsId
    static void _set_LensFlareGhostsParamsId(int value);
    // Get static field: static public System.Int32 LensFlareLUTId
    static int _get_LensFlareLUTId();
    // Set static field: static public System.Int32 LensFlareLUTId
    static void _set_LensFlareLUTId(int value);
    // Get static field: static public System.Int32 LensFlareHaloParamsId
    static int _get_LensFlareHaloParamsId();
    // Set static field: static public System.Int32 LensFlareHaloParamsId
    static void _set_LensFlareHaloParamsId(int value);
    // Get static field: static public System.Int32 LensFlareGhostChrDistortionId
    static int _get_LensFlareGhostChrDistortionId();
    // Set static field: static public System.Int32 LensFlareGhostChrDistortionId
    static void _set_LensFlareGhostChrDistortionId(int value);
    // Get static field: static public System.Int32 LensFlareHaloChrDistortionId
    static int _get_LensFlareHaloChrDistortionId();
    // Set static field: static public System.Int32 LensFlareHaloChrDistortionId
    static void _set_LensFlareHaloChrDistortionId(int value);
    // Get static field: static public System.Int32 BokehParamsId
    static int _get_BokehParamsId();
    // Set static field: static public System.Int32 BokehParamsId
    static void _set_BokehParamsId(int value);
    // Get static field: static public UnityEngine.RenderTextureFormat CurrentRTFormat
    static ::UnityEngine::RenderTextureFormat _get_CurrentRTFormat();
    // Set static field: static public UnityEngine.RenderTextureFormat CurrentRTFormat
    static void _set_CurrentRTFormat(::UnityEngine::RenderTextureFormat value);
    // Get static field: static public UnityEngine.FilterMode CurrentFilterMode
    static ::UnityEngine::FilterMode _get_CurrentFilterMode();
    // Set static field: static public UnityEngine.FilterMode CurrentFilterMode
    static void _set_CurrentFilterMode(::UnityEngine::FilterMode value);
    // Get static field: static public UnityEngine.TextureWrapMode CurrentWrapMode
    static ::UnityEngine::TextureWrapMode _get_CurrentWrapMode();
    // Set static field: static public UnityEngine.TextureWrapMode CurrentWrapMode
    static void _set_CurrentWrapMode(::UnityEngine::TextureWrapMode value);
    // Get static field: static public UnityEngine.RenderTextureReadWrite CurrentReadWriteMode
    static ::UnityEngine::RenderTextureReadWrite _get_CurrentReadWriteMode();
    // Set static field: static public UnityEngine.RenderTextureReadWrite CurrentReadWriteMode
    static void _set_CurrentReadWriteMode(::UnityEngine::RenderTextureReadWrite value);
    // Get static field: static public System.Boolean IsInitialized
    static bool _get_IsInitialized();
    // Set static field: static public System.Boolean IsInitialized
    static void _set_IsInitialized(bool value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.RenderTexture> _allocatedRT
    static ::System::Collections::Generic::List_1<::UnityEngine::RenderTexture*>* _get__allocatedRT();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.RenderTexture> _allocatedRT
    static void _set__allocatedRT(::System::Collections::Generic::List_1<::UnityEngine::RenderTexture*>* value);
    // static public System.Void InitializeIds()
    // Offset: 0xEF5598
    static void InitializeIds();
    // static public System.Void DebugLog(System.String value, AmplifyBloom.LogType type)
    // Offset: 0xEF53D0
    static void DebugLog(::StringW value, ::AmplifyBloom::LogType type);
    // static public UnityEngine.RenderTexture GetTempRenderTarget(System.Int32 width, System.Int32 height)
    // Offset: 0xEF78F4
    static ::UnityEngine::RenderTexture* GetTempRenderTarget(int width, int height);
    // static public System.Void ReleaseTempRenderTarget(UnityEngine.RenderTexture renderTarget)
    // Offset: 0xEF7CA4
    static void ReleaseTempRenderTarget(::UnityEngine::RenderTexture* renderTarget);
    // static public System.Void ReleaseAllRT()
    // Offset: 0xEFA040
    static void ReleaseAllRT();
    // static public System.Void EnsureKeywordEnabled(UnityEngine.Material mat, System.String keyword, System.Boolean state)
    // Offset: 0xEF9F28
    static void EnsureKeywordEnabled(::UnityEngine::Material* mat, ::StringW keyword, bool state);
    // public System.Void .ctor()
    // Offset: 0xEFFAA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyUtils* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyUtils*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xEFFAA8
    static void _cctor();
  }; // AmplifyBloom.AmplifyUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::InitializeIds
// Il2CppName: InitializeIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AmplifyBloom::AmplifyUtils::InitializeIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "InitializeIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::DebugLog
// Il2CppName: DebugLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::AmplifyBloom::LogType)>(&AmplifyBloom::AmplifyUtils::DebugLog)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("AmplifyBloom", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "DebugLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::GetTempRenderTarget
// Il2CppName: GetTempRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (*)(int, int)>(&AmplifyBloom::AmplifyUtils::GetTempRenderTarget)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "GetTempRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::ReleaseTempRenderTarget
// Il2CppName: ReleaseTempRenderTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*)>(&AmplifyBloom::AmplifyUtils::ReleaseTempRenderTarget)> {
  static const MethodInfo* get() {
    static auto* renderTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "ReleaseTempRenderTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTarget});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::ReleaseAllRT
// Il2CppName: ReleaseAllRT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AmplifyBloom::AmplifyUtils::ReleaseAllRT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "ReleaseAllRT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::EnsureKeywordEnabled
// Il2CppName: EnsureKeywordEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::StringW, bool)>(&AmplifyBloom::AmplifyUtils::EnsureKeywordEnabled)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), "EnsureKeywordEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, keyword, state});
  }
};
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AmplifyBloom::AmplifyUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
