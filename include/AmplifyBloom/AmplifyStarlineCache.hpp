// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyPassCache
  class AmplifyPassCache;
}
// Completed forward declares
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Forward declaring type: AmplifyStarlineCache
  class AmplifyStarlineCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyBloom::AmplifyStarlineCache);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyBloom::AmplifyStarlineCache*, "AmplifyBloom", "AmplifyStarlineCache");
// Type namespace: AmplifyBloom
namespace AmplifyBloom {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyBloom.AmplifyStarlineCache
  // [TokenAttribute] Offset: FFFFFFFF
  class AmplifyStarlineCache : public ::Il2CppObject {
    public:
    public:
    // AmplifyBloom.AmplifyPassCache[] Passes
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::AmplifyBloom::AmplifyPassCache*> Passes;
    // Field size check
    static_assert(sizeof(::ArrayW<::AmplifyBloom::AmplifyPassCache*>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::AmplifyBloom::AmplifyPassCache*>
    constexpr operator ::ArrayW<::AmplifyBloom::AmplifyPassCache*>() const noexcept {
      return Passes;
    }
    // Get instance field reference: AmplifyBloom.AmplifyPassCache[] Passes
    [[deprecated("Use field access instead!")]] ::ArrayW<::AmplifyBloom::AmplifyPassCache*>& dyn_Passes();
    // public System.Void .ctor()
    // Offset: 0xEFF5A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyStarlineCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyBloom::AmplifyStarlineCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyStarlineCache*, creationType>()));
    }
    // public System.Void Destroy()
    // Offset: 0xEFF6A8
    void Destroy();
  }; // AmplifyBloom.AmplifyStarlineCache
  #pragma pack(pop)
  static check_size<sizeof(AmplifyStarlineCache), 16 + sizeof(::ArrayW<::AmplifyBloom::AmplifyPassCache*>)> __AmplifyBloom_AmplifyStarlineCacheSizeCheck;
  static_assert(sizeof(AmplifyStarlineCache) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyBloom::AmplifyStarlineCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyBloom::AmplifyStarlineCache::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyBloom::AmplifyStarlineCache::*)()>(&AmplifyBloom::AmplifyStarlineCache::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyBloom::AmplifyStarlineCache*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
