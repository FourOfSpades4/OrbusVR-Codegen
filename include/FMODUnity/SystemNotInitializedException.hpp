// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: SystemNotInitializedException
  class SystemNotInitializedException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMODUnity::SystemNotInitializedException);
DEFINE_IL2CPP_ARG_TYPE(::FMODUnity::SystemNotInitializedException*, "FMODUnity", "SystemNotInitializedException");
// Type namespace: FMODUnity
namespace FMODUnity {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: FMODUnity.SystemNotInitializedException
  // [TokenAttribute] Offset: FFFFFFFF
  class SystemNotInitializedException : public ::System::Exception {
    public:
    public:
    // public FMOD.RESULT Result
    // Size: 0x4
    // Offset: 0x88
    ::FMOD::RESULT Result;
    // Field size check
    static_assert(sizeof(::FMOD::RESULT) == 0x4);
    // Padding between fields: Result and: Location
    char __padding0[0x4] = {};
    // public System.String Location
    // Size: 0x8
    // Offset: 0x90
    ::StringW Location;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public FMOD.RESULT Result
    [[deprecated("Use field access instead!")]] ::FMOD::RESULT& dyn_Result();
    // Get instance field reference: public System.String Location
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Location();
    // public System.Void .ctor(FMOD.RESULT result, System.String location)
    // Offset: 0x15D6644
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SystemNotInitializedException* New_ctor(::FMOD::RESULT result, ::StringW location) {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::SystemNotInitializedException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SystemNotInitializedException*, creationType>(result, location)));
    }
    // public System.Void .ctor(System.Exception inner)
    // Offset: 0x15D65C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SystemNotInitializedException* New_ctor(::System::Exception* inner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::SystemNotInitializedException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SystemNotInitializedException*, creationType>(inner)));
    }
  }; // FMODUnity.SystemNotInitializedException
  #pragma pack(pop)
  static check_size<sizeof(SystemNotInitializedException), 144 + sizeof(::StringW)> __FMODUnity_SystemNotInitializedExceptionSizeCheck;
  static_assert(sizeof(SystemNotInitializedException) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMODUnity::SystemNotInitializedException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: FMODUnity::SystemNotInitializedException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
