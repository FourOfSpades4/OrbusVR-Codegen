// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: FMODUnity.EmitterGameEvent
#include "FMODUnity/EmitterGameEvent.hpp"
// Including type: FMOD.Studio.EventDescription
#include "FMOD/Studio/EventDescription.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: ParamRef
  class ParamRef;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collider2D
  class Collider2D;
}
// Completed forward declares
// Type namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: StudioEventEmitter
  class StudioEventEmitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMODUnity::StudioEventEmitter);
DEFINE_IL2CPP_ARG_TYPE(::FMODUnity::StudioEventEmitter*, "FMODUnity", "StudioEventEmitter");
// Type namespace: FMODUnity
namespace FMODUnity {
  // Size: 0x63
  #pragma pack(push, 1)
  // Autogenerated type: FMODUnity.StudioEventEmitter
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC2104
  class StudioEventEmitter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String Event
    // Size: 0x8
    // Offset: 0x18
    ::StringW Event;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public FMODUnity.EmitterGameEvent PlayEvent
    // Size: 0x4
    // Offset: 0x20
    ::FMODUnity::EmitterGameEvent PlayEvent;
    // Field size check
    static_assert(sizeof(::FMODUnity::EmitterGameEvent) == 0x4);
    // public FMODUnity.EmitterGameEvent StopEvent
    // Size: 0x4
    // Offset: 0x24
    ::FMODUnity::EmitterGameEvent StopEvent;
    // Field size check
    static_assert(sizeof(::FMODUnity::EmitterGameEvent) == 0x4);
    // public System.String CollisionTag
    // Size: 0x8
    // Offset: 0x28
    ::StringW CollisionTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean AllowFadeout
    // Size: 0x1
    // Offset: 0x30
    bool AllowFadeout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean TriggerOnce
    // Size: 0x1
    // Offset: 0x31
    bool TriggerOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Preload
    // Size: 0x1
    // Offset: 0x32
    bool Preload;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Preload and: Params
    char __padding6[0x5] = {};
    // public FMODUnity.ParamRef[] Params
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::FMODUnity::ParamRef*> Params;
    // Field size check
    static_assert(sizeof(::ArrayW<::FMODUnity::ParamRef*>) == 0x8);
    // public System.Boolean OverrideAttenuation
    // Size: 0x1
    // Offset: 0x40
    bool OverrideAttenuation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OverrideAttenuation and: OverrideMinDistance
    char __padding8[0x3] = {};
    // public System.Single OverrideMinDistance
    // Size: 0x4
    // Offset: 0x44
    float OverrideMinDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single OverrideMaxDistance
    // Size: 0x4
    // Offset: 0x48
    float OverrideMaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: OverrideMaxDistance and: eventDescription
    char __padding10[0x4] = {};
    // private FMOD.Studio.EventDescription eventDescription
    // Size: 0x8
    // Offset: 0x50
    ::FMOD::Studio::EventDescription eventDescription;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::EventDescription) == 0x8);
    // private FMOD.Studio.EventInstance instance
    // Size: 0x8
    // Offset: 0x58
    ::FMOD::Studio::EventInstance instance;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::EventInstance) == 0x8);
    // private System.Boolean hasTriggered
    // Size: 0x1
    // Offset: 0x60
    bool hasTriggered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isQuitting
    // Size: 0x1
    // Offset: 0x61
    bool isQuitting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isInside
    // Size: 0x1
    // Offset: 0x62
    bool isInside;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String Event
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Event();
    // Get instance field reference: public FMODUnity.EmitterGameEvent PlayEvent
    [[deprecated("Use field access instead!")]] ::FMODUnity::EmitterGameEvent& dyn_PlayEvent();
    // Get instance field reference: public FMODUnity.EmitterGameEvent StopEvent
    [[deprecated("Use field access instead!")]] ::FMODUnity::EmitterGameEvent& dyn_StopEvent();
    // Get instance field reference: public System.String CollisionTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_CollisionTag();
    // Get instance field reference: public System.Boolean AllowFadeout
    [[deprecated("Use field access instead!")]] bool& dyn_AllowFadeout();
    // Get instance field reference: public System.Boolean TriggerOnce
    [[deprecated("Use field access instead!")]] bool& dyn_TriggerOnce();
    // Get instance field reference: public System.Boolean Preload
    [[deprecated("Use field access instead!")]] bool& dyn_Preload();
    // Get instance field reference: public FMODUnity.ParamRef[] Params
    [[deprecated("Use field access instead!")]] ::ArrayW<::FMODUnity::ParamRef*>& dyn_Params();
    // Get instance field reference: public System.Boolean OverrideAttenuation
    [[deprecated("Use field access instead!")]] bool& dyn_OverrideAttenuation();
    // Get instance field reference: public System.Single OverrideMinDistance
    [[deprecated("Use field access instead!")]] float& dyn_OverrideMinDistance();
    // Get instance field reference: public System.Single OverrideMaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_OverrideMaxDistance();
    // Get instance field reference: private FMOD.Studio.EventDescription eventDescription
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::EventDescription& dyn_eventDescription();
    // Get instance field reference: private FMOD.Studio.EventInstance instance
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::EventInstance& dyn_instance();
    // Get instance field reference: private System.Boolean hasTriggered
    [[deprecated("Use field access instead!")]] bool& dyn_hasTriggered();
    // Get instance field reference: private System.Boolean isQuitting
    [[deprecated("Use field access instead!")]] bool& dyn_isQuitting();
    // Get instance field reference: private System.Boolean isInside
    [[deprecated("Use field access instead!")]] bool& dyn_isInside();
    // public FMOD.Studio.EventDescription get_EventDescription()
    // Offset: 0x15DB74C
    ::FMOD::Studio::EventDescription get_EventDescription();
    // public FMOD.Studio.EventInstance get_EventInstance()
    // Offset: 0x15DB754
    ::FMOD::Studio::EventInstance get_EventInstance();
    // private System.Void Start()
    // Offset: 0x15DB75C
    void Start();
    // private System.Void OnApplicationQuit()
    // Offset: 0x15DB8EC
    void OnApplicationQuit();
    // private System.Void OnDestroy()
    // Offset: 0x15DB8F8
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x15DB9B0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x15DB9B8
    void OnDisable();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x15DB9E4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x15DBA54
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void OnTriggerEnter2D(UnityEngine.Collider2D other)
    // Offset: 0x15DBAC0
    void OnTriggerEnter2D(::UnityEngine::Collider2D* other);
    // private System.Void OnTriggerExit2D(UnityEngine.Collider2D other)
    // Offset: 0x15DBB34
    void OnTriggerExit2D(::UnityEngine::Collider2D* other);
    // private System.Void OnCollisionEnter()
    // Offset: 0x15DBBA8
    void OnCollisionEnter();
    // private System.Void OnCollisionExit()
    // Offset: 0x15DBBB0
    void OnCollisionExit();
    // private System.Void OnCollisionEnter2D()
    // Offset: 0x15DBBB8
    void OnCollisionEnter2D();
    // private System.Void OnCollisionExit2D()
    // Offset: 0x15DBBC0
    void OnCollisionExit2D();
    // private System.Void HandleGameEvent(FMODUnity.EmitterGameEvent gameEvent)
    // Offset: 0x15DB89C
    void HandleGameEvent(::FMODUnity::EmitterGameEvent gameEvent);
    // private System.Void Lookup()
    // Offset: 0x15DB82C
    void Lookup();
    // public System.Void Play()
    // Offset: 0x15DBBC8
    void Play();
    // public System.Void Stop()
    // Offset: 0x15DBF38
    void Stop();
    // public System.Void SetParameter(System.String name, System.Single value)
    // Offset: 0x15DBFA0
    void SetParameter(::StringW name, float value);
    // public System.Boolean IsPlaying()
    // Offset: 0x15DBFFC
    bool IsPlaying();
    // public System.Void .ctor()
    // Offset: 0x15DC068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StudioEventEmitter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::StudioEventEmitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StudioEventEmitter*, creationType>()));
    }
  }; // FMODUnity.StudioEventEmitter
  #pragma pack(pop)
  static check_size<sizeof(StudioEventEmitter), 98 + sizeof(bool)> __FMODUnity_StudioEventEmitterSizeCheck;
  static_assert(sizeof(StudioEventEmitter) == 0x63);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::get_EventDescription
// Il2CppName: get_EventDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::Studio::EventDescription (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::get_EventDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "get_EventDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::get_EventInstance
// Il2CppName: get_EventInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::Studio::EventInstance (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::get_EventInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "get_EventInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::UnityEngine::Collider*)>(&FMODUnity::StudioEventEmitter::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::UnityEngine::Collider*)>(&FMODUnity::StudioEventEmitter::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnTriggerEnter2D
// Il2CppName: OnTriggerEnter2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::UnityEngine::Collider2D*)>(&FMODUnity::StudioEventEmitter::OnTriggerEnter2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnTriggerEnter2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnTriggerExit2D
// Il2CppName: OnTriggerExit2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::UnityEngine::Collider2D*)>(&FMODUnity::StudioEventEmitter::OnTriggerExit2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnTriggerExit2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnCollisionEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnCollisionExit
// Il2CppName: OnCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnCollisionExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnCollisionEnter2D
// Il2CppName: OnCollisionEnter2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnCollisionEnter2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnCollisionEnter2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::OnCollisionExit2D
// Il2CppName: OnCollisionExit2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::OnCollisionExit2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "OnCollisionExit2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::HandleGameEvent
// Il2CppName: HandleGameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::FMODUnity::EmitterGameEvent)>(&FMODUnity::StudioEventEmitter::HandleGameEvent)> {
  static const MethodInfo* get() {
    static auto* gameEvent = &::il2cpp_utils::GetClassFromName("FMODUnity", "EmitterGameEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "HandleGameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameEvent});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::Lookup
// Il2CppName: Lookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::Lookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "Lookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::SetParameter
// Il2CppName: SetParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioEventEmitter::*)(::StringW, float)>(&FMODUnity::StudioEventEmitter::SetParameter)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "SetParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMODUnity::StudioEventEmitter::*)()>(&FMODUnity::StudioEventEmitter::IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioEventEmitter*), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioEventEmitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
