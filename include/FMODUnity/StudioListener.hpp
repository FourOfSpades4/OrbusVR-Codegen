// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
}
// Completed forward declares
// Type namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: StudioListener
  class StudioListener;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMODUnity::StudioListener);
DEFINE_IL2CPP_ARG_TYPE(::FMODUnity::StudioListener*, "FMODUnity", "StudioListener");
// Type namespace: FMODUnity
namespace FMODUnity {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: FMODUnity.StudioListener
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC213C
  class StudioListener : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Rigidbody rigidBody
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Rigidbody2D rigidBody2D
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody2D* rigidBody2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody2D*) == 0x8);
    // public System.Int32 ListenerNumber
    // Size: 0x4
    // Offset: 0x28
    int ListenerNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Rigidbody rigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigidBody();
    // Get instance field reference: private UnityEngine.Rigidbody2D rigidBody2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& dyn_rigidBody2D();
    // Get instance field reference: public System.Int32 ListenerNumber
    [[deprecated("Use field access instead!")]] int& dyn_ListenerNumber();
    // private System.Void OnEnable()
    // Offset: 0x15DC0F0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x15DC300
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x15DC3A0
    void Update();
    // private System.Void SetListenerLocation()
    // Offset: 0x15DC204
    void SetListenerLocation();
    // public System.Void .ctor()
    // Offset: 0x15DC3A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StudioListener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::StudioListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StudioListener*, creationType>()));
    }
  }; // FMODUnity.StudioListener
  #pragma pack(pop)
  static check_size<sizeof(StudioListener), 40 + sizeof(int)> __FMODUnity_StudioListenerSizeCheck;
  static_assert(sizeof(StudioListener) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMODUnity::StudioListener::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioListener::*)()>(&FMODUnity::StudioListener::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioListener*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioListener::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioListener::*)()>(&FMODUnity::StudioListener::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioListener*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioListener::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioListener::*)()>(&FMODUnity::StudioListener::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioListener*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioListener::SetListenerLocation
// Il2CppName: SetListenerLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::StudioListener::*)()>(&FMODUnity::StudioListener::SetListenerLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::StudioListener*), "SetListenerLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::StudioListener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
