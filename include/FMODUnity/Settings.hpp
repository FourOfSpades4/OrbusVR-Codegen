// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: FMODUnity.ImportType
#include "FMODUnity/ImportType.hpp"
// Including type: FMOD.DEBUG_FLAGS
#include "FMOD/DEBUG_FLAGS.hpp"
// Including type: FMODUnity.FMODPlatform
#include "FMODUnity/FMODPlatform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: PlatformIntSetting
  class PlatformIntSetting;
  // Forward declaring type: PlatformBoolSetting
  class PlatformBoolSetting;
  // Forward declaring type: PlatformStringSetting
  class PlatformStringSetting;
  // Forward declaring type: PlatformSetting`1<T>
  template<typename T>
  class PlatformSetting_1;
  // Forward declaring type: PlatformSettingBase
  class PlatformSettingBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: Settings
  class Settings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMODUnity::Settings);
DEFINE_IL2CPP_ARG_TYPE(::FMODUnity::Settings*, "FMODUnity", "Settings");
// Type namespace: FMODUnity
namespace FMODUnity {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: FMODUnity.Settings
  // [TokenAttribute] Offset: FFFFFFFF
  class Settings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::FMODUnity::Settings::$$c__DisplayClass33_0_1<T>
    template<typename T>
    class $$c__DisplayClass33_0_1;
    // Nested type: ::FMODUnity::Settings::$$c__DisplayClass34_0_2<T, U>
    template<typename T, typename U>
    class $$c__DisplayClass34_0_2;
    // Nested type: ::FMODUnity::Settings::$$c__DisplayClass35_0_2<T, U>
    template<typename T, typename U>
    class $$c__DisplayClass35_0_2;
    // Nested type: ::FMODUnity::Settings::$$c__DisplayClass36_0_1<T>
    template<typename T>
    class $$c__DisplayClass36_0_1;
    public:
    // public System.Boolean HasSourceProject
    // Size: 0x1
    // Offset: 0x18
    bool HasSourceProject;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HasPlatforms
    // Size: 0x1
    // Offset: 0x19
    bool HasPlatforms;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HasPlatforms and: sourceProjectPath
    char __padding1[0x6] = {};
    // private System.String sourceProjectPath
    // Size: 0x8
    // Offset: 0x20
    ::StringW sourceProjectPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SourceProjectPathUnformatted
    // Size: 0x8
    // Offset: 0x28
    ::StringW SourceProjectPathUnformatted;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String sourceBankPath
    // Size: 0x8
    // Offset: 0x30
    ::StringW sourceBankPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SourceBankPathUnformatted
    // Size: 0x8
    // Offset: 0x38
    ::StringW SourceBankPathUnformatted;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean AutomaticEventLoading
    // Size: 0x1
    // Offset: 0x40
    bool AutomaticEventLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutomaticSampleLoading
    // Size: 0x1
    // Offset: 0x41
    bool AutomaticSampleLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutomaticSampleLoading and: ImportType
    char __padding7[0x2] = {};
    // public FMODUnity.ImportType ImportType
    // Size: 0x4
    // Offset: 0x44
    ::FMODUnity::ImportType ImportType;
    // Field size check
    static_assert(sizeof(::FMODUnity::ImportType) == 0x4);
    // public System.String TargetAssetPath
    // Size: 0x8
    // Offset: 0x48
    ::StringW TargetAssetPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public FMOD.DEBUG_FLAGS LoggingLevel
    // Size: 0x4
    // Offset: 0x50
    ::FMOD::DEBUG_FLAGS LoggingLevel;
    // Field size check
    static_assert(sizeof(::FMOD::DEBUG_FLAGS) == 0x4);
    // Padding between fields: LoggingLevel and: SpeakerModeSettings
    char __padding10[0x4] = {};
    // public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> SpeakerModeSettings
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>* SpeakerModeSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> SampleRateSettings
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>* SampleRateSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> LiveUpdateSettings
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>* LiveUpdateSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> OverlaySettings
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>* OverlaySettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> LoggingSettings
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>* LoggingSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformStringSetting> BankDirectorySettings
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformStringSetting*>* BankDirectorySettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformStringSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> VirtualChannelSettings
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>* VirtualChannelSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> RealChannelSettings
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>* RealChannelSettings;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> Plugins
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::StringW>* Plugins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> MasterBanks
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::StringW>* MasterBanks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> Banks
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::StringW>* Banks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String SettingsAssetName
    static constexpr const char* SettingsAssetName = "FMODStudioSettings";
    // Get static field: static private System.String SettingsAssetName
    static ::StringW _get_SettingsAssetName();
    // Set static field: static private System.String SettingsAssetName
    static void _set_SettingsAssetName(::StringW value);
    // Get static field: static private FMODUnity.Settings instance
    static ::FMODUnity::Settings* _get_instance();
    // Set static field: static private FMODUnity.Settings instance
    static void _set_instance(::FMODUnity::Settings* value);
    // Get instance field reference: public System.Boolean HasSourceProject
    [[deprecated("Use field access instead!")]] bool& dyn_HasSourceProject();
    // Get instance field reference: public System.Boolean HasPlatforms
    [[deprecated("Use field access instead!")]] bool& dyn_HasPlatforms();
    // Get instance field reference: private System.String sourceProjectPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sourceProjectPath();
    // Get instance field reference: public System.String SourceProjectPathUnformatted
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SourceProjectPathUnformatted();
    // Get instance field reference: private System.String sourceBankPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sourceBankPath();
    // Get instance field reference: public System.String SourceBankPathUnformatted
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SourceBankPathUnformatted();
    // Get instance field reference: public System.Boolean AutomaticEventLoading
    [[deprecated("Use field access instead!")]] bool& dyn_AutomaticEventLoading();
    // Get instance field reference: public System.Boolean AutomaticSampleLoading
    [[deprecated("Use field access instead!")]] bool& dyn_AutomaticSampleLoading();
    // Get instance field reference: public FMODUnity.ImportType ImportType
    [[deprecated("Use field access instead!")]] ::FMODUnity::ImportType& dyn_ImportType();
    // Get instance field reference: public System.String TargetAssetPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TargetAssetPath();
    // Get instance field reference: public FMOD.DEBUG_FLAGS LoggingLevel
    [[deprecated("Use field access instead!")]] ::FMOD::DEBUG_FLAGS& dyn_LoggingLevel();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> SpeakerModeSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*& dyn_SpeakerModeSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> SampleRateSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*& dyn_SampleRateSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> LiveUpdateSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*& dyn_LiveUpdateSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> OverlaySettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*& dyn_OverlaySettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformBoolSetting> LoggingSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformBoolSetting*>*& dyn_LoggingSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformStringSetting> BankDirectorySettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformStringSetting*>*& dyn_BankDirectorySettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> VirtualChannelSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*& dyn_VirtualChannelSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<FMODUnity.PlatformIntSetting> RealChannelSettings
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::FMODUnity::PlatformIntSetting*>*& dyn_RealChannelSettings();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> Plugins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_Plugins();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> MasterBanks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_MasterBanks();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> Banks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_Banks();
    // static public FMODUnity.Settings get_Instance()
    // Offset: 0x15D690C
    static ::FMODUnity::Settings* get_Instance();
    // public System.String get_SourceProjectPath()
    // Offset: 0x15DAB34
    ::StringW get_SourceProjectPath();
    // public System.Void set_SourceProjectPath(System.String value)
    // Offset: 0x15DAC3C
    void set_SourceProjectPath(::StringW value);
    // public System.String get_SourceBankPath()
    // Offset: 0x15DAC60
    ::StringW get_SourceBankPath();
    // public System.Void set_SourceBankPath(System.String value)
    // Offset: 0x15DACAC
    void set_SourceBankPath(::StringW value);
    // static public FMODUnity.FMODPlatform GetParent(FMODUnity.FMODPlatform platform)
    // Offset: 0x15DACD0
    static ::FMODUnity::FMODPlatform GetParent(::FMODUnity::FMODPlatform platform);
    // static public System.Boolean HasSetting(System.Collections.Generic.List`1<T> list, FMODUnity.FMODPlatform platform)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool HasSetting(::System::Collections::Generic::List_1<T>* list, ::FMODUnity::FMODPlatform platform) {
      static_assert(std::is_convertible_v<T, ::FMODUnity::PlatformSettingBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::Settings::HasSetting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMODUnity", "Settings", "HasSetting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(platform)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, platform);
    }
    // static public U GetSetting(System.Collections.Generic.List`1<T> list, FMODUnity.FMODPlatform platform, U def)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static U GetSetting(::System::Collections::Generic::List_1<T>* list, ::FMODUnity::FMODPlatform platform, U def) {
      static_assert(std::is_convertible_v<T, ::FMODUnity::PlatformSetting_1<U>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::Settings::GetSetting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMODUnity", "Settings", "GetSetting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(platform), ::il2cpp_utils::ExtractType(def)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<U, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, platform, def);
    }
    // static public System.Void SetSetting(System.Collections.Generic.List`1<T> list, FMODUnity.FMODPlatform platform, U value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static void SetSetting(::System::Collections::Generic::List_1<T>* list, ::FMODUnity::FMODPlatform platform, U value) {
      static_assert(std::is_convertible_v<T, ::FMODUnity::PlatformSetting_1<U>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::Settings::SetSetting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMODUnity", "Settings", "SetSetting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(platform), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, platform, value);
    }
    // static public System.Void RemoveSetting(System.Collections.Generic.List`1<T> list, FMODUnity.FMODPlatform platform)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void RemoveSetting(::System::Collections::Generic::List_1<T>* list, ::FMODUnity::FMODPlatform platform) {
      static_assert(std::is_convertible_v<T, ::FMODUnity::PlatformSettingBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::Settings::RemoveSetting");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMODUnity", "Settings", "RemoveSetting", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(platform)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, platform);
    }
    // public System.Boolean IsLiveUpdateEnabled(FMODUnity.FMODPlatform platform)
    // Offset: 0x15D6E48
    bool IsLiveUpdateEnabled(::FMODUnity::FMODPlatform platform);
    // public System.Boolean IsOverlayEnabled(FMODUnity.FMODPlatform platform)
    // Offset: 0x15DAD1C
    bool IsOverlayEnabled(::FMODUnity::FMODPlatform platform);
    // public System.Int32 GetRealChannels(FMODUnity.FMODPlatform platform)
    // Offset: 0x15D6CAC
    int GetRealChannels(::FMODUnity::FMODPlatform platform);
    // public System.Int32 GetVirtualChannels(FMODUnity.FMODPlatform platform)
    // Offset: 0x15D6D34
    int GetVirtualChannels(::FMODUnity::FMODPlatform platform);
    // public System.Int32 GetSpeakerMode(FMODUnity.FMODPlatform platform)
    // Offset: 0x15D6DBC
    int GetSpeakerMode(::FMODUnity::FMODPlatform platform);
    // public System.Int32 GetSampleRate(FMODUnity.FMODPlatform platform)
    // Offset: 0x15D6C24
    int GetSampleRate(::FMODUnity::FMODPlatform platform);
    // public System.String GetBankPlatform(FMODUnity.FMODPlatform platform)
    // Offset: 0x15DADB0
    ::StringW GetBankPlatform(::FMODUnity::FMODPlatform platform);
    // private System.Void .ctor()
    // Offset: 0x15DAE5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Settings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::Settings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Settings*, creationType>()));
    }
    // private System.String GetPlatformSpecificPath(System.String path)
    // Offset: 0x15DAB80
    ::StringW GetPlatformSpecificPath(::StringW path);
    // static private System.Void .cctor()
    // Offset: 0x15DB164
    static void _cctor();
  }; // FMODUnity.Settings
  #pragma pack(pop)
  static check_size<sizeof(Settings), 168 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __FMODUnity_SettingsSizeCheck;
  static_assert(sizeof(Settings) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMODUnity::Settings::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMODUnity::Settings* (*)()>(&FMODUnity::Settings::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::get_SourceProjectPath
// Il2CppName: get_SourceProjectPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMODUnity::Settings::*)()>(&FMODUnity::Settings::get_SourceProjectPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "get_SourceProjectPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::set_SourceProjectPath
// Il2CppName: set_SourceProjectPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::Settings::*)(::StringW)>(&FMODUnity::Settings::set_SourceProjectPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "set_SourceProjectPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::get_SourceBankPath
// Il2CppName: get_SourceBankPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMODUnity::Settings::*)()>(&FMODUnity::Settings::get_SourceBankPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "get_SourceBankPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::set_SourceBankPath
// Il2CppName: set_SourceBankPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMODUnity::Settings::*)(::StringW)>(&FMODUnity::Settings::set_SourceBankPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "set_SourceBankPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetParent
// Il2CppName: GetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMODUnity::FMODPlatform (*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetParent)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::HasSetting
// Il2CppName: HasSetting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FMODUnity::Settings::GetSetting
// Il2CppName: GetSetting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FMODUnity::Settings::SetSetting
// Il2CppName: SetSetting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FMODUnity::Settings::RemoveSetting
// Il2CppName: RemoveSetting
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FMODUnity::Settings::IsLiveUpdateEnabled
// Il2CppName: IsLiveUpdateEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::IsLiveUpdateEnabled)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "IsLiveUpdateEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::IsOverlayEnabled
// Il2CppName: IsOverlayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::IsOverlayEnabled)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "IsOverlayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetRealChannels
// Il2CppName: GetRealChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetRealChannels)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetRealChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetVirtualChannels
// Il2CppName: GetVirtualChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetVirtualChannels)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetVirtualChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetSpeakerMode
// Il2CppName: GetSpeakerMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetSpeakerMode)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetSpeakerMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetSampleRate
// Il2CppName: GetSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetSampleRate)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::GetBankPlatform
// Il2CppName: GetBankPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMODUnity::Settings::*)(::FMODUnity::FMODPlatform)>(&FMODUnity::Settings::GetBankPlatform)> {
  static const MethodInfo* get() {
    static auto* platform = &::il2cpp_utils::GetClassFromName("FMODUnity", "FMODPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetBankPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{platform});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: FMODUnity::Settings::GetPlatformSpecificPath
// Il2CppName: GetPlatformSpecificPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMODUnity::Settings::*)(::StringW)>(&FMODUnity::Settings::GetPlatformSpecificPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), "GetPlatformSpecificPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: FMODUnity::Settings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&FMODUnity::Settings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMODUnity::Settings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
