// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FMODUnity.RuntimeManager
#include "FMODUnity/RuntimeManager.hpp"
// Including type: FMOD.Studio.EventInstance
#include "FMOD/Studio/EventInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMODUnity::RuntimeManager::AttachedInstance);
DEFINE_IL2CPP_ARG_TYPE(::FMODUnity::RuntimeManager::AttachedInstance*, "FMODUnity", "RuntimeManager/AttachedInstance");
// Type namespace: FMODUnity
namespace FMODUnity {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: FMODUnity.RuntimeManager/AttachedInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeManager::AttachedInstance : public ::Il2CppObject {
    public:
    public:
    // public FMOD.Studio.EventInstance instance
    // Size: 0x8
    // Offset: 0x10
    ::FMOD::Studio::EventInstance instance;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::EventInstance) == 0x8);
    // public UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Rigidbody rigidBody
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // public UnityEngine.Rigidbody2D rigidBody2D
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rigidbody2D* rigidBody2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody2D*) == 0x8);
    public:
    // Get instance field reference: public FMOD.Studio.EventInstance instance
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::EventInstance& dyn_instance();
    // Get instance field reference: public UnityEngine.Transform transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transform();
    // Get instance field reference: public UnityEngine.Rigidbody rigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigidBody();
    // Get instance field reference: public UnityEngine.Rigidbody2D rigidBody2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& dyn_rigidBody2D();
    // public System.Void .ctor()
    // Offset: 0x15D7B60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeManager::AttachedInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMODUnity::RuntimeManager::AttachedInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeManager::AttachedInstance*, creationType>()));
    }
  }; // FMODUnity.RuntimeManager/AttachedInstance
  #pragma pack(pop)
  static check_size<sizeof(RuntimeManager::AttachedInstance), 40 + sizeof(::UnityEngine::Rigidbody2D*)> __FMODUnity_RuntimeManager_AttachedInstanceSizeCheck;
  static_assert(sizeof(RuntimeManager::AttachedInstance) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMODUnity::RuntimeManager::AttachedInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
