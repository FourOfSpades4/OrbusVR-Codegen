// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MBVersionInterface
  class MBVersionInterface;
  // Forward declaring type: MB2_LogLevel
  struct MB2_LogLevel;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MBVersion
  class MBVersion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MBVersion);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MBVersion*, "DigitalOpus.MB.Core", "MBVersion");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MBVersion
  // [TokenAttribute] Offset: FFFFFFFF
  class MBVersion : public ::Il2CppObject {
    public:
    // Get static field: static private DigitalOpus.MB.Core.MBVersionInterface _MBVersion
    static ::DigitalOpus::MB::Core::MBVersionInterface* _get__MBVersion();
    // Set static field: static private DigitalOpus.MB.Core.MBVersionInterface _MBVersion
    static void _set__MBVersion(::DigitalOpus::MB::Core::MBVersionInterface* value);
    // static private DigitalOpus.MB.Core.MBVersionInterface _CreateMBVersionConcrete()
    // Offset: 0xF357B0
    static ::DigitalOpus::MB::Core::MBVersionInterface* _CreateMBVersionConcrete();
    // static public System.String version()
    // Offset: 0xF358A8
    static ::StringW version();
    // static public System.Int32 GetMajorVersion()
    // Offset: 0xF35990
    static int GetMajorVersion();
    // static public System.Int32 GetMinorVersion()
    // Offset: 0xF35A7C
    static int GetMinorVersion();
    // static public System.Boolean GetActive(UnityEngine.GameObject go)
    // Offset: 0xF35B68
    static bool GetActive(::UnityEngine::GameObject* go);
    // static public System.Void SetActive(UnityEngine.GameObject go, System.Boolean isActive)
    // Offset: 0xF35C64
    static void SetActive(::UnityEngine::GameObject* go, bool isActive);
    // static public System.Void SetActiveRecursively(UnityEngine.GameObject go, System.Boolean isActive)
    // Offset: 0xF35D68
    static void SetActiveRecursively(::UnityEngine::GameObject* go, bool isActive);
    // static public UnityEngine.Object[] FindSceneObjectsOfType(System.Type t)
    // Offset: 0xF35E6C
    static ::ArrayW<::UnityEngine::Object*> FindSceneObjectsOfType(::System::Type* t);
    // static public System.Boolean IsRunningAndMeshNotReadWriteable(UnityEngine.Mesh m)
    // Offset: 0xF35F68
    static bool IsRunningAndMeshNotReadWriteable(::UnityEngine::Mesh* m);
    // static public UnityEngine.Vector2[] GetMeshUV3orUV4(UnityEngine.Mesh m, System.Boolean get3, DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL)
    // Offset: 0xF36064
    static ::ArrayW<::UnityEngine::Vector2> GetMeshUV3orUV4(::UnityEngine::Mesh* m, bool get3, ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL);
    // static public System.Void MeshClear(UnityEngine.Mesh m, System.Boolean t)
    // Offset: 0xF36178
    static void MeshClear(::UnityEngine::Mesh* m, bool t);
    // static public System.Void MeshAssignUV3(UnityEngine.Mesh m, UnityEngine.Vector2[] uv3s)
    // Offset: 0xF3627C
    static void MeshAssignUV3(::UnityEngine::Mesh* m, ::ArrayW<::UnityEngine::Vector2> uv3s);
    // static public System.Void MeshAssignUV4(UnityEngine.Mesh m, UnityEngine.Vector2[] uv4s)
    // Offset: 0xF36380
    static void MeshAssignUV4(::UnityEngine::Mesh* m, ::ArrayW<::UnityEngine::Vector2> uv4s);
    // static public UnityEngine.Vector4 GetLightmapTilingOffset(UnityEngine.Renderer r)
    // Offset: 0xF36484
    static ::UnityEngine::Vector4 GetLightmapTilingOffset(::UnityEngine::Renderer* r);
    // static public UnityEngine.Transform[] GetBones(UnityEngine.Renderer r)
    // Offset: 0xF36580
    static ::ArrayW<::UnityEngine::Transform*> GetBones(::UnityEngine::Renderer* r);
    // static public System.Void OptimizeMesh(UnityEngine.Mesh m)
    // Offset: 0xF3667C
    static void OptimizeMesh(::UnityEngine::Mesh* m);
    // static public System.Int32 GetBlendShapeFrameCount(UnityEngine.Mesh m, System.Int32 shapeIndex)
    // Offset: 0xF36778
    static int GetBlendShapeFrameCount(::UnityEngine::Mesh* m, int shapeIndex);
    // static public System.Single GetBlendShapeFrameWeight(UnityEngine.Mesh m, System.Int32 shapeIndex, System.Int32 frameIndex)
    // Offset: 0xF3687C
    static float GetBlendShapeFrameWeight(::UnityEngine::Mesh* m, int shapeIndex, int frameIndex);
    // static public System.Void GetBlendShapeFrameVertices(UnityEngine.Mesh m, System.Int32 shapeIndex, System.Int32 frameIndex, UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, UnityEngine.Vector3[] ts)
    // Offset: 0xF36990
    static void GetBlendShapeFrameVertices(::UnityEngine::Mesh* m, int shapeIndex, int frameIndex, ::ArrayW<::UnityEngine::Vector3> vs, ::ArrayW<::UnityEngine::Vector3> ns, ::ArrayW<::UnityEngine::Vector3> ts);
    // static public System.Void ClearBlendShapes(UnityEngine.Mesh m)
    // Offset: 0xF36AC4
    static void ClearBlendShapes(::UnityEngine::Mesh* m);
    // static public System.Void AddBlendShapeFrame(UnityEngine.Mesh m, System.String nm, System.Single wt, UnityEngine.Vector3[] vs, UnityEngine.Vector3[] ns, UnityEngine.Vector3[] ts)
    // Offset: 0xF36BC0
    static void AddBlendShapeFrame(::UnityEngine::Mesh* m, ::StringW nm, float wt, ::ArrayW<::UnityEngine::Vector3> vs, ::ArrayW<::UnityEngine::Vector3> ns, ::ArrayW<::UnityEngine::Vector3> ts);
    // static public System.Int32 MaxMeshVertexCount()
    // Offset: 0xF36CFC
    static int MaxMeshVertexCount();
    // static public System.Void SetMeshIndexFormatAndClearMesh(UnityEngine.Mesh m, System.Int32 numVerts, System.Boolean vertices, System.Boolean justClearTriangles)
    // Offset: 0xF36DE8
    static void SetMeshIndexFormatAndClearMesh(::UnityEngine::Mesh* m, int numVerts, bool vertices, bool justClearTriangles);
    // public System.Void .ctor()
    // Offset: 0xF36F04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MBVersion* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MBVersion::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MBVersion*, creationType>()));
    }
  }; // DigitalOpus.MB.Core.MBVersion
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::_CreateMBVersionConcrete
// Il2CppName: _CreateMBVersionConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MBVersionInterface* (*)()>(&DigitalOpus::MB::Core::MBVersion::_CreateMBVersionConcrete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "_CreateMBVersionConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::version
// Il2CppName: version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&DigitalOpus::MB::Core::MBVersion::version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetMajorVersion
// Il2CppName: GetMajorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DigitalOpus::MB::Core::MBVersion::GetMajorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetMajorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetMinorVersion
// Il2CppName: GetMinorVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DigitalOpus::MB::Core::MBVersion::GetMinorVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetMinorVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetActive
// Il2CppName: GetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MBVersion::GetActive)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, bool)>(&DigitalOpus::MB::Core::MBVersion::SetActive)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, isActive});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::SetActiveRecursively
// Il2CppName: SetActiveRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, bool)>(&DigitalOpus::MB::Core::MBVersion::SetActiveRecursively)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "SetActiveRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, isActive});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::FindSceneObjectsOfType
// Il2CppName: FindSceneObjectsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Object*> (*)(::System::Type*)>(&DigitalOpus::MB::Core::MBVersion::FindSceneObjectsOfType)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "FindSceneObjectsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::IsRunningAndMeshNotReadWriteable
// Il2CppName: IsRunningAndMeshNotReadWriteable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Mesh*)>(&DigitalOpus::MB::Core::MBVersion::IsRunningAndMeshNotReadWriteable)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "IsRunningAndMeshNotReadWriteable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetMeshUV3orUV4
// Il2CppName: GetMeshUV3orUV4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (*)(::UnityEngine::Mesh*, bool, ::DigitalOpus::MB::Core::MB2_LogLevel)>(&DigitalOpus::MB::Core::MBVersion::GetMeshUV3orUV4)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* get3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* LOG_LEVEL = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetMeshUV3orUV4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, get3, LOG_LEVEL});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::MeshClear
// Il2CppName: MeshClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, bool)>(&DigitalOpus::MB::Core::MBVersion::MeshClear)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "MeshClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, t});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::MeshAssignUV3
// Il2CppName: MeshAssignUV3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::ArrayW<::UnityEngine::Vector2>)>(&DigitalOpus::MB::Core::MBVersion::MeshAssignUV3)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* uv3s = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "MeshAssignUV3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, uv3s});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::MeshAssignUV4
// Il2CppName: MeshAssignUV4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::ArrayW<::UnityEngine::Vector2>)>(&DigitalOpus::MB::Core::MBVersion::MeshAssignUV4)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* uv4s = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "MeshAssignUV4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, uv4s});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetLightmapTilingOffset
// Il2CppName: GetLightmapTilingOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Renderer*)>(&DigitalOpus::MB::Core::MBVersion::GetLightmapTilingOffset)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetLightmapTilingOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetBones
// Il2CppName: GetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (*)(::UnityEngine::Renderer*)>(&DigitalOpus::MB::Core::MBVersion::GetBones)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::OptimizeMesh
// Il2CppName: OptimizeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*)>(&DigitalOpus::MB::Core::MBVersion::OptimizeMesh)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "OptimizeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameCount
// Il2CppName: GetBlendShapeFrameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Mesh*, int)>(&DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameCount)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetBlendShapeFrameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, shapeIndex});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameWeight
// Il2CppName: GetBlendShapeFrameWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Mesh*, int, int)>(&DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameWeight)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetBlendShapeFrameWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, shapeIndex, frameIndex});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameVertices
// Il2CppName: GetBlendShapeFrameVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, int, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&DigitalOpus::MB::Core::MBVersion::GetBlendShapeFrameVertices)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* shapeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* ns = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* ts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "GetBlendShapeFrameVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, shapeIndex, frameIndex, vs, ns, ts});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::ClearBlendShapes
// Il2CppName: ClearBlendShapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*)>(&DigitalOpus::MB::Core::MBVersion::ClearBlendShapes)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "ClearBlendShapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::AddBlendShapeFrame
// Il2CppName: AddBlendShapeFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, ::StringW, float, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&DigitalOpus::MB::Core::MBVersion::AddBlendShapeFrame)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* nm = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* wt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* vs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* ns = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* ts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "AddBlendShapeFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, nm, wt, vs, ns, ts});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::MaxMeshVertexCount
// Il2CppName: MaxMeshVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&DigitalOpus::MB::Core::MBVersion::MaxMeshVertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "MaxMeshVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::SetMeshIndexFormatAndClearMesh
// Il2CppName: SetMeshIndexFormatAndClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, bool, bool)>(&DigitalOpus::MB::Core::MBVersion::SetMeshIndexFormatAndClearMesh)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* numVerts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* justClearTriangles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MBVersion*), "SetMeshIndexFormatAndClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, numVerts, vertices, justClearTriangles});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MBVersion::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
