// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPoi
  class PegasusPoi;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: TriggerBase
  class TriggerBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::TriggerBase);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::TriggerBase*, "Pegasus", "TriggerBase");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x1B
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.TriggerBase
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean m_triggerAtStart
    // Size: 0x1
    // Offset: 0x18
    bool m_triggerAtStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_triggerOnUpdate
    // Size: 0x1
    // Offset: 0x19
    bool m_triggerOnUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_triggerAtEnd
    // Size: 0x1
    // Offset: 0x1A
    bool m_triggerAtEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean m_triggerAtStart
    [[deprecated("Use field access instead!")]] bool& dyn_m_triggerAtStart();
    // Get instance field reference: public System.Boolean m_triggerOnUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_triggerOnUpdate();
    // Get instance field reference: public System.Boolean m_triggerAtEnd
    [[deprecated("Use field access instead!")]] bool& dyn_m_triggerAtEnd();
    // public System.Void OnStart(Pegasus.PegasusPoi poi)
    // Offset: 0xE4E33C
    void OnStart(::Pegasus::PegasusPoi* poi);
    // public System.Void OnUpdate(Pegasus.PegasusPoi poi, System.Single progress)
    // Offset: 0xE4E474
    void OnUpdate(::Pegasus::PegasusPoi* poi, float progress);
    // public System.Void OnEnd(Pegasus.PegasusPoi poi)
    // Offset: 0xE4E5D4
    void OnEnd(::Pegasus::PegasusPoi* poi);
    // public System.Void .ctor()
    // Offset: 0xE4E70C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::TriggerBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerBase*, creationType>()));
    }
  }; // Pegasus.TriggerBase
  #pragma pack(pop)
  static check_size<sizeof(TriggerBase), 26 + sizeof(bool)> __Pegasus_TriggerBaseSizeCheck;
  static_assert(sizeof(TriggerBase) == 0x1B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::TriggerBase::OnStart
// Il2CppName: OnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerBase::*)(::Pegasus::PegasusPoi*)>(&Pegasus::TriggerBase::OnStart)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerBase*), "OnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerBase::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerBase::*)(::Pegasus::PegasusPoi*, float)>(&Pegasus::TriggerBase::OnUpdate)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerBase*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi, progress});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerBase::OnEnd
// Il2CppName: OnEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerBase::*)(::Pegasus::PegasusPoi*)>(&Pegasus::TriggerBase::OnEnd)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerBase*), "OnEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
