// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pegasus.PegasusConstants
#include "Pegasus/PegasusConstants.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusConstants::EasingType, "Pegasus", "PegasusConstants/EasingType");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusConstants/EasingType
  // [TokenAttribute] Offset: FFFFFFFF
  struct PegasusConstants::EasingType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EasingType
    constexpr EasingType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Pegasus.PegasusConstants/EasingType Linear
    static constexpr const int Linear = 0;
    // Get static field: static public Pegasus.PegasusConstants/EasingType Linear
    static ::Pegasus::PegasusConstants::EasingType _get_Linear();
    // Set static field: static public Pegasus.PegasusConstants/EasingType Linear
    static void _set_Linear(::Pegasus::PegasusConstants::EasingType value);
    // static field const value: static public Pegasus.PegasusConstants/EasingType EaseIn
    static constexpr const int EaseIn = 1;
    // Get static field: static public Pegasus.PegasusConstants/EasingType EaseIn
    static ::Pegasus::PegasusConstants::EasingType _get_EaseIn();
    // Set static field: static public Pegasus.PegasusConstants/EasingType EaseIn
    static void _set_EaseIn(::Pegasus::PegasusConstants::EasingType value);
    // static field const value: static public Pegasus.PegasusConstants/EasingType EaseOut
    static constexpr const int EaseOut = 2;
    // Get static field: static public Pegasus.PegasusConstants/EasingType EaseOut
    static ::Pegasus::PegasusConstants::EasingType _get_EaseOut();
    // Set static field: static public Pegasus.PegasusConstants/EasingType EaseOut
    static void _set_EaseOut(::Pegasus::PegasusConstants::EasingType value);
    // static field const value: static public Pegasus.PegasusConstants/EasingType EaseInOut
    static constexpr const int EaseInOut = 3;
    // Get static field: static public Pegasus.PegasusConstants/EasingType EaseInOut
    static ::Pegasus::PegasusConstants::EasingType _get_EaseInOut();
    // Set static field: static public Pegasus.PegasusConstants/EasingType EaseInOut
    static void _set_EaseInOut(::Pegasus::PegasusConstants::EasingType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Pegasus.PegasusConstants/EasingType
  #pragma pack(pop)
  static check_size<sizeof(PegasusConstants::EasingType), 0 + sizeof(int)> __Pegasus_PegasusConstants_EasingTypeSizeCheck;
  static_assert(sizeof(PegasusConstants::EasingType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
