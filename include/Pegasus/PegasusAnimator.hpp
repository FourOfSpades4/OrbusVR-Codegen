// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Pegasus.PegasusConstants/PegasusAnimationState
#include "Pegasus/PegasusConstants_PegasusAnimationState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusAnimator
  class PegasusAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusAnimator);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusAnimator*, "Pegasus", "PegasusAnimator");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0xADEEA4
    // [TooltipAttribute] Offset: 0xADEEA4
    // public UnityEngine.Transform m_character
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* m_character;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xADEF04
    // public UnityEngine.Animator m_animator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* m_animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // [TooltipAttribute] Offset: 0xADEF3C
    // public Pegasus.PegasusConstants/PegasusAnimationState m_animationState
    // Size: 0x4
    // Offset: 0x28
    ::Pegasus::PegasusConstants::PegasusAnimationState m_animationState;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PegasusAnimationState) == 0x4);
    // private Pegasus.PegasusConstants/PegasusAnimationState m_lastAnimationState
    // Size: 0x4
    // Offset: 0x2C
    ::Pegasus::PegasusConstants::PegasusAnimationState m_lastAnimationState;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PegasusAnimationState) == 0x4);
    // [TooltipAttribute] Offset: 0xADEF74
    // [HeaderAttribute] Offset: 0xADEF74
    // public UnityEngine.AnimationClip m_idleAnimation
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationClip* m_idleAnimation;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [TooltipAttribute] Offset: 0xADEFD4
    // public UnityEngine.AnimationClip m_walkAnimation
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationClip* m_walkAnimation;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [TooltipAttribute] Offset: 0xADF00C
    // public UnityEngine.AnimationClip m_runAnimation
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationClip* m_runAnimation;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // [TooltipAttribute] Offset: 0xADF044
    // [HeaderAttribute] Offset: 0xADF044
    // public System.Single m_walkSpeed
    // Size: 0x4
    // Offset: 0x48
    float m_walkSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADF0A4
    // public System.Single m_maxWalkSpeed
    // Size: 0x4
    // Offset: 0x4C
    float m_maxWalkSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADF0DC
    // public System.Single m_runSpeed
    // Size: 0x4
    // Offset: 0x50
    float m_runSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_speedDamping
    // Size: 0x4
    // Offset: 0x54
    float m_speedDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_speed
    // Size: 0x4
    // Offset: 0x58
    float m_speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_lastSpeed
    // Size: 0x4
    // Offset: 0x5C
    float m_lastSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_lastPosition
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 m_lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_animationMultiplier
    // Size: 0x4
    // Offset: 0x6C
    float m_animationMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_animationStateHash
    // Size: 0x4
    // Offset: 0x70
    int m_animationStateHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_animationMultiplierHash
    // Size: 0x4
    // Offset: 0x74
    int m_animationMultiplierHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform m_character
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_character();
    // Get instance field reference: public UnityEngine.Animator m_animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_m_animator();
    // Get instance field reference: public Pegasus.PegasusConstants/PegasusAnimationState m_animationState
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PegasusAnimationState& dyn_m_animationState();
    // Get instance field reference: private Pegasus.PegasusConstants/PegasusAnimationState m_lastAnimationState
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PegasusAnimationState& dyn_m_lastAnimationState();
    // Get instance field reference: public UnityEngine.AnimationClip m_idleAnimation
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn_m_idleAnimation();
    // Get instance field reference: public UnityEngine.AnimationClip m_walkAnimation
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn_m_walkAnimation();
    // Get instance field reference: public UnityEngine.AnimationClip m_runAnimation
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn_m_runAnimation();
    // Get instance field reference: public System.Single m_walkSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_walkSpeed();
    // Get instance field reference: public System.Single m_maxWalkSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_maxWalkSpeed();
    // Get instance field reference: public System.Single m_runSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_runSpeed();
    // Get instance field reference: private System.Single m_speedDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_speedDamping();
    // Get instance field reference: private System.Single m_speed
    [[deprecated("Use field access instead!")]] float& dyn_m_speed();
    // Get instance field reference: private System.Single m_lastSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_lastSpeed();
    // Get instance field reference: private UnityEngine.Vector3 m_lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_lastPosition();
    // Get instance field reference: private System.Single m_animationMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_m_animationMultiplier();
    // Get instance field reference: private System.Int32 m_animationStateHash
    [[deprecated("Use field access instead!")]] int& dyn_m_animationStateHash();
    // Get instance field reference: private System.Int32 m_animationMultiplierHash
    [[deprecated("Use field access instead!")]] int& dyn_m_animationMultiplierHash();
    // private System.Void Start()
    // Offset: 0xE4176C
    void Start();
    // private System.Void Update()
    // Offset: 0xE41D28
    void Update();
    // private System.Void PlayState(Pegasus.PegasusConstants/PegasusAnimationState newState, System.Boolean forceStateNow)
    // Offset: 0xE41B74
    void PlayState(::Pegasus::PegasusConstants::PegasusAnimationState newState, bool forceStateNow);
    // private System.Void ReplaceClip(UnityEngine.Animator animator, System.String clipName, UnityEngine.AnimationClip overrideClip)
    // Offset: 0xE419B4
    void ReplaceClip(::UnityEngine::Animator* animator, ::StringW clipName, ::UnityEngine::AnimationClip* overrideClip);
    // public System.Void .ctor()
    // Offset: 0xE41FD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusAnimator*, creationType>()));
    }
  }; // Pegasus.PegasusAnimator
  #pragma pack(pop)
  static check_size<sizeof(PegasusAnimator), 116 + sizeof(int)> __Pegasus_PegasusAnimatorSizeCheck;
  static_assert(sizeof(PegasusAnimator) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusAnimator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusAnimator::*)()>(&Pegasus::PegasusAnimator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusAnimator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusAnimator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusAnimator::*)()>(&Pegasus::PegasusAnimator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusAnimator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusAnimator::PlayState
// Il2CppName: PlayState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusAnimator::*)(::Pegasus::PegasusConstants::PegasusAnimationState, bool)>(&Pegasus::PegasusAnimator::PlayState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PegasusAnimationState")->byval_arg;
    static auto* forceStateNow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusAnimator*), "PlayState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState, forceStateNow});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusAnimator::ReplaceClip
// Il2CppName: ReplaceClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusAnimator::*)(::UnityEngine::Animator*, ::StringW, ::UnityEngine::AnimationClip*)>(&Pegasus::PegasusAnimator::ReplaceClip)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* clipName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overrideClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusAnimator*), "ReplaceClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, clipName, overrideClip});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
