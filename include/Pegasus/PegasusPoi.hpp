// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Pegasus.PegasusConstants/PoiType
#include "Pegasus/PegasusConstants_PoiType.hpp"
// Including type: Pegasus.PegasusConstants/PoiHeightCheckType
#include "Pegasus/PegasusConstants_PoiHeightCheckType.hpp"
// Including type: Pegasus.PegasusConstants/LookatType
#include "Pegasus/PegasusConstants_LookatType.hpp"
// Including type: Pegasus.PegasusConstants/SpeedType
#include "Pegasus/PegasusConstants_SpeedType.hpp"
// Including type: Pegasus.PegasusConstants/EasingType
#include "Pegasus/PegasusConstants_EasingType.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusManager
  class PegasusManager;
  // Forward declaring type: TriggerBase
  class TriggerBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPoi
  class PegasusPoi;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusPoi);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusPoi*, "Pegasus", "PegasusPoi");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusPoi
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusPoi : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Pegasus::PegasusPoi::Easing
    class Easing;
    public:
    // [TooltipAttribute] Offset: 0xADF808
    // public Pegasus.PegasusConstants/PoiType m_poiType
    // Size: 0x4
    // Offset: 0x18
    ::Pegasus::PegasusConstants::PoiType m_poiType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PoiType) == 0x4);
    // [TooltipAttribute] Offset: 0xADF840
    // public Pegasus.PegasusConstants/PoiHeightCheckType m_heightCheckType
    // Size: 0x4
    // Offset: 0x1C
    ::Pegasus::PegasusConstants::PoiHeightCheckType m_heightCheckType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PoiHeightCheckType) == 0x4);
    // [TooltipAttribute] Offset: 0xADF878
    // public Pegasus.PegasusConstants/LookatType m_lookatType
    // Size: 0x4
    // Offset: 0x20
    ::Pegasus::PegasusConstants::LookatType m_lookatType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::LookatType) == 0x4);
    // [TooltipAttribute] Offset: 0xADF8B0
    // public System.Single m_lookAtAngle
    // Size: 0x4
    // Offset: 0x24
    float m_lookAtAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADF8E8
    // public System.Single m_lookAtDistance
    // Size: 0x4
    // Offset: 0x28
    float m_lookAtDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADF920
    // public System.Single m_lookAtHeight
    // Size: 0x4
    // Offset: 0x2C
    float m_lookAtHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xADF958
    // public UnityEngine.Vector3 m_lookatLocation
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 m_lookatLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xADF990
    // public Pegasus.PegasusConstants/SpeedType m_startSpeedType
    // Size: 0x4
    // Offset: 0x3C
    ::Pegasus::PegasusConstants::SpeedType m_startSpeedType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::SpeedType) == 0x4);
    // [TooltipAttribute] Offset: 0xADF9C8
    // public System.Single m_startSpeed
    // Size: 0x4
    // Offset: 0x40
    float m_startSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pegasus.PegasusConstants/EasingType m_rotationEasingType
    // Size: 0x4
    // Offset: 0x44
    ::Pegasus::PegasusConstants::EasingType m_rotationEasingType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::EasingType) == 0x4);
    // public Pegasus.PegasusConstants/EasingType m_velocityEasingType
    // Size: 0x4
    // Offset: 0x48
    ::Pegasus::PegasusConstants::EasingType m_velocityEasingType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::EasingType) == 0x4);
    // public Pegasus.PegasusConstants/EasingType m_positionEasingType
    // Size: 0x4
    // Offset: 0x4C
    ::Pegasus::PegasusConstants::EasingType m_positionEasingType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::EasingType) == 0x4);
    // public Pegasus.PegasusManager m_manager
    // Size: 0x8
    // Offset: 0x50
    ::Pegasus::PegasusManager* m_manager;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusManager*) == 0x8);
    // public System.Boolean m_alwaysShowGizmos
    // Size: 0x1
    // Offset: 0x58
    bool m_alwaysShowGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_alwaysShowGizmos and: m_segmentDistance
    char __padding13[0x3] = {};
    // public System.Single m_segmentDistance
    // Size: 0x4
    // Offset: 0x5C
    float m_segmentDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.TimeSpan m_segmentStartTime
    // Size: 0x8
    // Offset: 0x60
    ::System::TimeSpan m_segmentStartTime;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // public System.TimeSpan m_segmentDuration
    // Size: 0x8
    // Offset: 0x68
    ::System::TimeSpan m_segmentDuration;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // public System.Int32 m_segmentIndex
    // Size: 0x4
    // Offset: 0x70
    int m_segmentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean m_isFirstPOI
    // Size: 0x1
    // Offset: 0x74
    bool m_isFirstPOI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_isLastPOI
    // Size: 0x1
    // Offset: 0x75
    bool m_isLastPOI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isLastPOI and: m_prevPoi
    char __padding19[0x2] = {};
    // public Pegasus.PegasusPoi m_prevPoi
    // Size: 0x8
    // Offset: 0x78
    ::Pegasus::PegasusPoi* m_prevPoi;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi*) == 0x8);
    // public Pegasus.PegasusPoi m_nextPoi
    // Size: 0x8
    // Offset: 0x80
    ::Pegasus::PegasusPoi* m_nextPoi;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> m_poiSteps
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_poiSteps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // public System.Boolean m_isSelected
    // Size: 0x1
    // Offset: 0x90
    bool m_isSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isSelected and: m_poiTriggers
    char __padding23[0x7] = {};
    // public System.Collections.Generic.List`1<Pegasus.TriggerBase> m_poiTriggers
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::Pegasus::TriggerBase*>* m_poiTriggers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pegasus::TriggerBase*>*) == 0x8);
    // public System.Boolean m_autoRollOn
    // Size: 0x1
    // Offset: 0xA0
    bool m_autoRollOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_autoRollOn and: m_lastRotation
    char __padding25[0x3] = {};
    // public UnityEngine.Vector3 m_lastRotation
    // Size: 0xC
    // Offset: 0xA4
    ::UnityEngine::Vector3 m_lastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Pegasus.PegasusPoi/Easing m_velocityEasingCalculator
    // Size: 0x8
    // Offset: 0xB0
    ::Pegasus::PegasusPoi::Easing* m_velocityEasingCalculator;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi::Easing*) == 0x8);
    // private Pegasus.PegasusPoi/Easing m_positionEasingCalculator
    // Size: 0x8
    // Offset: 0xB8
    ::Pegasus::PegasusPoi::Easing* m_positionEasingCalculator;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi::Easing*) == 0x8);
    // private Pegasus.PegasusPoi/Easing m_rotationEasingCalculator
    // Size: 0x8
    // Offset: 0xC0
    ::Pegasus::PegasusPoi::Easing* m_rotationEasingCalculator;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi::Easing*) == 0x8);
    // public UnityEngine.Quaternion m_rotationStart
    // Size: 0x10
    // Offset: 0xC8
    ::UnityEngine::Quaternion m_rotationStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion m_rotationEnd
    // Size: 0x10
    // Offset: 0xD8
    ::UnityEngine::Quaternion m_rotationEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Pegasus.PegasusConstants/PoiType m_poiType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PoiType& dyn_m_poiType();
    // Get instance field reference: public Pegasus.PegasusConstants/PoiHeightCheckType m_heightCheckType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PoiHeightCheckType& dyn_m_heightCheckType();
    // Get instance field reference: public Pegasus.PegasusConstants/LookatType m_lookatType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::LookatType& dyn_m_lookatType();
    // Get instance field reference: public System.Single m_lookAtAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_lookAtAngle();
    // Get instance field reference: public System.Single m_lookAtDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_lookAtDistance();
    // Get instance field reference: public System.Single m_lookAtHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_lookAtHeight();
    // Get instance field reference: public UnityEngine.Vector3 m_lookatLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_lookatLocation();
    // Get instance field reference: public Pegasus.PegasusConstants/SpeedType m_startSpeedType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::SpeedType& dyn_m_startSpeedType();
    // Get instance field reference: public System.Single m_startSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_startSpeed();
    // Get instance field reference: public Pegasus.PegasusConstants/EasingType m_rotationEasingType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::EasingType& dyn_m_rotationEasingType();
    // Get instance field reference: public Pegasus.PegasusConstants/EasingType m_velocityEasingType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::EasingType& dyn_m_velocityEasingType();
    // Get instance field reference: public Pegasus.PegasusConstants/EasingType m_positionEasingType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::EasingType& dyn_m_positionEasingType();
    // Get instance field reference: public Pegasus.PegasusManager m_manager
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusManager*& dyn_m_manager();
    // Get instance field reference: public System.Boolean m_alwaysShowGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_m_alwaysShowGizmos();
    // Get instance field reference: public System.Single m_segmentDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_segmentDistance();
    // Get instance field reference: public System.TimeSpan m_segmentStartTime
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_m_segmentStartTime();
    // Get instance field reference: public System.TimeSpan m_segmentDuration
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_m_segmentDuration();
    // Get instance field reference: public System.Int32 m_segmentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_segmentIndex();
    // Get instance field reference: public System.Boolean m_isFirstPOI
    [[deprecated("Use field access instead!")]] bool& dyn_m_isFirstPOI();
    // Get instance field reference: public System.Boolean m_isLastPOI
    [[deprecated("Use field access instead!")]] bool& dyn_m_isLastPOI();
    // Get instance field reference: public Pegasus.PegasusPoi m_prevPoi
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi*& dyn_m_prevPoi();
    // Get instance field reference: public Pegasus.PegasusPoi m_nextPoi
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi*& dyn_m_nextPoi();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> m_poiSteps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_m_poiSteps();
    // Get instance field reference: public System.Boolean m_isSelected
    [[deprecated("Use field access instead!")]] bool& dyn_m_isSelected();
    // Get instance field reference: public System.Collections.Generic.List`1<Pegasus.TriggerBase> m_poiTriggers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pegasus::TriggerBase*>*& dyn_m_poiTriggers();
    // Get instance field reference: public System.Boolean m_autoRollOn
    [[deprecated("Use field access instead!")]] bool& dyn_m_autoRollOn();
    // Get instance field reference: public UnityEngine.Vector3 m_lastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_lastRotation();
    // Get instance field reference: private Pegasus.PegasusPoi/Easing m_velocityEasingCalculator
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi::Easing*& dyn_m_velocityEasingCalculator();
    // Get instance field reference: private Pegasus.PegasusPoi/Easing m_positionEasingCalculator
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi::Easing*& dyn_m_positionEasingCalculator();
    // Get instance field reference: private Pegasus.PegasusPoi/Easing m_rotationEasingCalculator
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi::Easing*& dyn_m_rotationEasingCalculator();
    // Get instance field reference: public UnityEngine.Quaternion m_rotationStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_rotationStart();
    // Get instance field reference: public UnityEngine.Quaternion m_rotationEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_rotationEnd();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0xE4BC64
    void OnDrawGizmosSelected();
    // private System.Void OnDrawGizmos()
    // Offset: 0xE4C264
    void OnDrawGizmos();
    // private System.Void DrawGizmos(System.Boolean isSelected)
    // Offset: 0xE4BC6C
    void DrawGizmos(bool isSelected);
    // public System.Boolean IsSameObject(Pegasus.PegasusPoi poi)
    // Offset: 0xE4C3DC
    bool IsSameObject(::Pegasus::PegasusPoi* poi);
    // public System.Void Initialise(System.Boolean updateSegments)
    // Offset: 0xE46378
    void Initialise(bool updateSegments);
    // public System.Void OnStartTriggers()
    // Offset: 0xE47584
    void OnStartTriggers();
    // public System.Void OnUpdateTriggers(System.Single progress)
    // Offset: 0xE4A8B8
    void OnUpdateTriggers(float progress);
    // public System.Void OnEndTriggers()
    // Offset: 0xE4A7E8
    void OnEndTriggers();
    // public System.Single GetStartSpeed(Pegasus.PegasusConstants/SpeedType speedType)
    // Offset: 0xE4CD0C
    float GetStartSpeed(::Pegasus::PegasusConstants::SpeedType speedType);
    // public System.Void UpdateSegment()
    // Offset: 0xE4C4A4
    void UpdateSegment();
    // public System.Void UpdateSegmentDuration()
    // Offset: 0xE4CDC0
    void UpdateSegmentDuration();
    // public System.Void CalculateProgress(System.Single percent, out System.Single velocity, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)
    // Offset: 0xE47518
    void CalculateProgress(float percent, ByRef<float> velocity, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // public UnityEngine.Vector3 CalculatePositionSpline(System.Single percent)
    // Offset: 0xE4C26C
    ::UnityEngine::Vector3 CalculatePositionSpline(float percent);
    // public UnityEngine.Vector3 CalculatePositionLinear(System.Single percent)
    // Offset: 0xE48780
    ::UnityEngine::Vector3 CalculatePositionLinear(float percent);
    // public System.Single CalculateVelocity(System.Single percent)
    // Offset: 0xE48ACC
    float CalculateVelocity(float percent);
    // public UnityEngine.Quaternion CalculateRotation(System.Single percent)
    // Offset: 0xE489D8
    ::UnityEngine::Quaternion CalculateRotation(float percent);
    // public System.Void GetRelativeOffsets(UnityEngine.Vector3 source, UnityEngine.Vector3 target, out System.Single targetDistance, out System.Single targetHeight, out System.Single targetAngle)
    // Offset: 0xE47F70
    void GetRelativeOffsets(::UnityEngine::Vector3 source, ::UnityEngine::Vector3 target, ByRef<float> targetDistance, ByRef<float> targetHeight, ByRef<float> targetAngle);
    // static public System.Boolean ApproximatelyEqual(System.Single a, System.Single b)
    // Offset: 0xE4CD2C
    static bool ApproximatelyEqual(float a, float b);
    // static public UnityEngine.Vector3 RotatePointAroundPivot(UnityEngine.Vector3 point, UnityEngine.Vector3 pivot, UnityEngine.Vector3 angle)
    // Offset: 0xE4D4BC
    static ::UnityEngine::Vector3 RotatePointAroundPivot(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 pivot, ::UnityEngine::Vector3 angle);
    // static private System.Single EaseLinear(System.Single time, System.Single duration)
    // Offset: 0xE4D5E0
    static float EaseLinear(float time, float duration);
    // static private System.Single EaseIn(System.Single time, System.Single duration)
    // Offset: 0xE4D5E8
    static float EaseIn(float time, float duration);
    // static private System.Single EaseOut(System.Single time, System.Single duration)
    // Offset: 0xE4D5F4
    static float EaseOut(float time, float duration);
    // static private System.Single EaseInOut(System.Single time, System.Single duration)
    // Offset: 0xE4D608
    static float EaseInOut(float time, float duration);
    // static public UnityEngine.Vector3 CatmullRom(UnityEngine.Vector3 value1, UnityEngine.Vector3 value2, UnityEngine.Vector3 value3, UnityEngine.Vector3 value4, System.Single amount)
    // Offset: 0xE4CF5C
    static ::UnityEngine::Vector3 CatmullRom(::UnityEngine::Vector3 value1, ::UnityEngine::Vector3 value2, ::UnityEngine::Vector3 value3, ::UnityEngine::Vector3 value4, float amount);
    // static public System.Void CatmullRom(ref UnityEngine.Vector3 value1, ref UnityEngine.Vector3 value2, ref UnityEngine.Vector3 value3, ref UnityEngine.Vector3 value4, System.Single amount, out UnityEngine.Vector3 result)
    // Offset: 0xE4D6D8
    static void CatmullRom(ByRef<::UnityEngine::Vector3> value1, ByRef<::UnityEngine::Vector3> value2, ByRef<::UnityEngine::Vector3> value3, ByRef<::UnityEngine::Vector3> value4, float amount, ByRef<::UnityEngine::Vector3> result);
    // static public System.Single CalcCatmullRom(System.Single value1, System.Single value2, System.Single value3, System.Single value4, System.Single amount)
    // Offset: 0xE4D64C
    static float CalcCatmullRom(float value1, float value2, float value3, float value4, float amount);
    // static public UnityEngine.Vector3 Hermite(UnityEngine.Vector3 value1, UnityEngine.Vector3 tangent1, UnityEngine.Vector3 value2, UnityEngine.Vector3 tangent2, System.Single amount)
    // Offset: 0xE4D778
    static ::UnityEngine::Vector3 Hermite(::UnityEngine::Vector3 value1, ::UnityEngine::Vector3 tangent1, ::UnityEngine::Vector3 value2, ::UnityEngine::Vector3 tangent2, float amount);
    // static public System.Void Hermite(ref UnityEngine.Vector3 value1, ref UnityEngine.Vector3 tangent1, ref UnityEngine.Vector3 value2, ref UnityEngine.Vector3 tangent2, System.Single amount, out UnityEngine.Vector3 result)
    // Offset: 0xE4D8C4
    static void Hermite(ByRef<::UnityEngine::Vector3> value1, ByRef<::UnityEngine::Vector3> tangent1, ByRef<::UnityEngine::Vector3> value2, ByRef<::UnityEngine::Vector3> tangent2, float amount, ByRef<::UnityEngine::Vector3> result);
    // static public System.Single CalcHermite(System.Single value1, System.Single tangent1, System.Single value2, System.Single tangent2, System.Single amount)
    // Offset: 0xE4D83C
    static float CalcHermite(float value1, float tangent1, float value2, float tangent2, float amount);
    // public System.Void .ctor()
    // Offset: 0xE4D964
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusPoi* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusPoi::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusPoi*, creationType>()));
    }
  }; // Pegasus.PegasusPoi
  #pragma pack(pop)
  static check_size<sizeof(PegasusPoi), 216 + sizeof(::UnityEngine::Quaternion)> __Pegasus_PegasusPoiSizeCheck;
  static_assert(sizeof(PegasusPoi) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusPoi::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)(bool)>(&Pegasus::PegasusPoi::DrawGizmos)> {
  static const MethodInfo* get() {
    static auto* isSelected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSelected});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::IsSameObject
// Il2CppName: IsSameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pegasus::PegasusPoi::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusPoi::IsSameObject)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "IsSameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::Initialise
// Il2CppName: Initialise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)(bool)>(&Pegasus::PegasusPoi::Initialise)> {
  static const MethodInfo* get() {
    static auto* updateSegments = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "Initialise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateSegments});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::OnStartTriggers
// Il2CppName: OnStartTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::OnStartTriggers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "OnStartTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::OnUpdateTriggers
// Il2CppName: OnUpdateTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)(float)>(&Pegasus::PegasusPoi::OnUpdateTriggers)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "OnUpdateTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::OnEndTriggers
// Il2CppName: OnEndTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::OnEndTriggers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "OnEndTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::GetStartSpeed
// Il2CppName: GetStartSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pegasus::PegasusPoi::*)(::Pegasus::PegasusConstants::SpeedType)>(&Pegasus::PegasusPoi::GetStartSpeed)> {
  static const MethodInfo* get() {
    static auto* speedType = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/SpeedType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "GetStartSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speedType});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::UpdateSegment
// Il2CppName: UpdateSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::UpdateSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "UpdateSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::UpdateSegmentDuration
// Il2CppName: UpdateSegmentDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)()>(&Pegasus::PegasusPoi::UpdateSegmentDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "UpdateSegmentDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalculateProgress
// Il2CppName: CalculateProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)(float, ByRef<float>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Pegasus::PegasusPoi::CalculateProgress)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalculateProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent, velocity, position, rotation});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalculatePositionSpline
// Il2CppName: CalculatePositionSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusPoi::*)(float)>(&Pegasus::PegasusPoi::CalculatePositionSpline)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalculatePositionSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalculatePositionLinear
// Il2CppName: CalculatePositionLinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusPoi::*)(float)>(&Pegasus::PegasusPoi::CalculatePositionLinear)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalculatePositionLinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalculateVelocity
// Il2CppName: CalculateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pegasus::PegasusPoi::*)(float)>(&Pegasus::PegasusPoi::CalculateVelocity)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalculateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalculateRotation
// Il2CppName: CalculateRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Pegasus::PegasusPoi::*)(float)>(&Pegasus::PegasusPoi::CalculateRotation)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalculateRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::GetRelativeOffsets
// Il2CppName: GetRelativeOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPoi::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<float>, ByRef<float>, ByRef<float>)>(&Pegasus::PegasusPoi::GetRelativeOffsets)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* targetDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* targetHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* targetAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "GetRelativeOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, target, targetDistance, targetHeight, targetAngle});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::ApproximatelyEqual
// Il2CppName: ApproximatelyEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float)>(&Pegasus::PegasusPoi::ApproximatelyEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "ApproximatelyEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::RotatePointAroundPivot
// Il2CppName: RotatePointAroundPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pegasus::PegasusPoi::RotatePointAroundPivot)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "RotatePointAroundPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, pivot, angle});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::EaseLinear
// Il2CppName: EaseLinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Pegasus::PegasusPoi::EaseLinear)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "EaseLinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::EaseIn
// Il2CppName: EaseIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Pegasus::PegasusPoi::EaseIn)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "EaseIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::EaseOut
// Il2CppName: EaseOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Pegasus::PegasusPoi::EaseOut)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "EaseOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::EaseInOut
// Il2CppName: EaseInOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Pegasus::PegasusPoi::EaseInOut)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "EaseInOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, duration});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pegasus::PegasusPoi::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* value3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* value4 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2, value3, value4, amount});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, float, ByRef<::UnityEngine::Vector3>)>(&Pegasus::PegasusPoi::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* value3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* value4 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2, value3, value4, amount, result});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalcCatmullRom
// Il2CppName: CalcCatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Pegasus::PegasusPoi::CalcCatmullRom)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value3 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value4 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalcCatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2, value3, value4, amount});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::Hermite
// Il2CppName: Hermite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pegasus::PegasusPoi::Hermite)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tangent1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tangent2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "Hermite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, tangent1, value2, tangent2, amount});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::Hermite
// Il2CppName: Hermite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, float, ByRef<::UnityEngine::Vector3>)>(&Pegasus::PegasusPoi::Hermite)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* tangent1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* tangent2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "Hermite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, tangent1, value2, tangent2, amount, result});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::CalcHermite
// Il2CppName: CalcHermite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Pegasus::PegasusPoi::CalcHermite)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tangent1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tangent2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPoi*), "CalcHermite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, tangent1, value2, tangent2, amount});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPoi::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
