// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPath
  class PegasusPath;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusCapture
  class PegasusCapture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusCapture);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusCapture*, "Pegasus", "PegasusCapture");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusCapture
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusCapture : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.KeyCode m_keyCodeCapture
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::KeyCode m_keyCodeCapture;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // Padding between fields: m_keyCodeCapture and: m_mainCamera
    char __padding0[0x4] = {};
    // public UnityEngine.Camera m_mainCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* m_mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public Pegasus.PegasusPath m_path
    // Size: 0x8
    // Offset: 0x28
    ::Pegasus::PegasusPath* m_path;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPath*) == 0x8);
    // public System.Boolean m_enableOnStart
    // Size: 0x1
    // Offset: 0x30
    bool m_enableOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_clearOnStart
    // Size: 0x1
    // Offset: 0x31
    bool m_clearOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_showReticule
    // Size: 0x1
    // Offset: 0x32
    bool m_showReticule;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_showReticule and: m_reticuleGO
    char __padding5[0x5] = {};
    // public UnityEngine.GameObject m_reticuleGO
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_reticuleGO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.KeyCode m_keyCodeCapture
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyCodeCapture();
    // Get instance field reference: public UnityEngine.Camera m_mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_mainCamera();
    // Get instance field reference: public Pegasus.PegasusPath m_path
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPath*& dyn_m_path();
    // Get instance field reference: public System.Boolean m_enableOnStart
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableOnStart();
    // Get instance field reference: public System.Boolean m_clearOnStart
    [[deprecated("Use field access instead!")]] bool& dyn_m_clearOnStart();
    // Get instance field reference: public System.Boolean m_showReticule
    [[deprecated("Use field access instead!")]] bool& dyn_m_showReticule();
    // Get instance field reference: public UnityEngine.GameObject m_reticuleGO
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_reticuleGO();
    // private System.Void Start()
    // Offset: 0xE4209C
    void Start();
    // private System.Void Update()
    // Offset: 0xE42734
    void Update();
    // private System.Void ProcessCaptureEvent()
    // Offset: 0xE42850
    void ProcessCaptureEvent();
    // public System.Void UpdateReticuleVisibility()
    // Offset: 0xE42CC4
    void UpdateReticuleVisibility();
    // public System.Void UpdateReticuleText()
    // Offset: 0xE42494
    void UpdateReticuleText();
    // public System.Void .ctor()
    // Offset: 0xE42DDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusCapture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusCapture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusCapture*, creationType>()));
    }
  }; // Pegasus.PegasusCapture
  #pragma pack(pop)
  static check_size<sizeof(PegasusCapture), 56 + sizeof(::UnityEngine::GameObject*)> __Pegasus_PegasusCaptureSizeCheck;
  static_assert(sizeof(PegasusCapture) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusCapture::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusCapture::*)()>(&Pegasus::PegasusCapture::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusCapture*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusCapture::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusCapture::*)()>(&Pegasus::PegasusCapture::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusCapture*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusCapture::ProcessCaptureEvent
// Il2CppName: ProcessCaptureEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusCapture::*)()>(&Pegasus::PegasusCapture::ProcessCaptureEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusCapture*), "ProcessCaptureEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusCapture::UpdateReticuleVisibility
// Il2CppName: UpdateReticuleVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusCapture::*)()>(&Pegasus::PegasusCapture::UpdateReticuleVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusCapture*), "UpdateReticuleVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusCapture::UpdateReticuleText
// Il2CppName: UpdateReticuleText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusCapture::*)()>(&Pegasus::PegasusCapture::UpdateReticuleText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusCapture*), "UpdateReticuleText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusCapture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
