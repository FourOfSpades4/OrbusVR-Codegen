// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pegasus
namespace Pegasus {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPath
  class PegasusPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusPath);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusPath*, "Pegasus", "PegasusPath");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusPath
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusPath : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::Pegasus::PegasusPath::PegasusPoint
    class PegasusPoint;
    public:
    // public System.Single m_defaultSpeed
    // Size: 0x4
    // Offset: 0x18
    float m_defaultSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_defaultSpeed and: m_path
    char __padding0[0x4] = {};
    // public System.Collections.Generic.List`1<Pegasus.PegasusPath/PegasusPoint> m_path
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Pegasus::PegasusPath::PegasusPoint*>* m_path;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pegasus::PegasusPath::PegasusPoint*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single m_defaultSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_defaultSpeed();
    // Get instance field reference: public System.Collections.Generic.List`1<Pegasus.PegasusPath/PegasusPoint> m_path
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pegasus::PegasusPath::PegasusPoint*>*& dyn_m_path();
    // static public Pegasus.PegasusPath CreatePegasusPath()
    // Offset: 0xE4244C
    static ::Pegasus::PegasusPath* CreatePegasusPath();
    // public System.Void AddPoint(UnityEngine.GameObject go)
    // Offset: 0xE429F8
    void AddPoint(::UnityEngine::GameObject* go);
    // public System.Void ClearPath()
    // Offset: 0xE426D4
    void ClearPath();
    // public System.Void CreatePegasusFromPath()
    // Offset: 0xE4B8B8
    void CreatePegasusFromPath();
    // public System.Void .ctor()
    // Offset: 0xE4BBEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusPath*, creationType>()));
    }
  }; // Pegasus.PegasusPath
  #pragma pack(pop)
  static check_size<sizeof(PegasusPath), 32 + sizeof(::System::Collections::Generic::List_1<::Pegasus::PegasusPath::PegasusPoint*>*)> __Pegasus_PegasusPathSizeCheck;
  static_assert(sizeof(PegasusPath) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusPath::CreatePegasusPath
// Il2CppName: CreatePegasusPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPath* (*)()>(&Pegasus::PegasusPath::CreatePegasusPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPath*), "CreatePegasusPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPath::AddPoint
// Il2CppName: AddPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPath::*)(::UnityEngine::GameObject*)>(&Pegasus::PegasusPath::AddPoint)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPath*), "AddPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPath::ClearPath
// Il2CppName: ClearPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPath::*)()>(&Pegasus::PegasusPath::ClearPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPath*), "ClearPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPath::CreatePegasusFromPath
// Il2CppName: CreatePegasusFromPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusPath::*)()>(&Pegasus::PegasusPath::CreatePegasusFromPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusPath*), "CreatePegasusFromPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
