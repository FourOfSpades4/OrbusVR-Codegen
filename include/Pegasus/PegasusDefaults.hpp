// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
// Including type: Pegasus.PegasusConstants/SpeedType
#include "Pegasus/PegasusConstants_SpeedType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusDefaults
  class PegasusDefaults;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusDefaults);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusDefaults*, "Pegasus", "PegasusDefaults");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusDefaults
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusDefaults : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [HeaderAttribute] Offset: 0xADF15C
    // public UnityEngine.KeyCode m_keyPrevPoi
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::KeyCode m_keyPrevPoi;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyNextPoi
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::KeyCode m_keyNextPoi;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // [HeaderAttribute] Offset: 0xADF194
    // public UnityEngine.KeyCode m_keyUp
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::KeyCode m_keyUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyDown
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::KeyCode m_keyDown;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyLeft
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::KeyCode m_keyLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyRight
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::KeyCode m_keyRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyForward
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::KeyCode m_keyForward;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // public UnityEngine.KeyCode m_keyBackward
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::KeyCode m_keyBackward;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // [RangeAttribute] Offset: 0xADF1CC
    // [HeaderAttribute] Offset: 0xADF1CC
    // public System.Single m_poiGizmoSize
    // Size: 0x4
    // Offset: 0x38
    float m_poiGizmoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADF220
    // public System.Single m_lookatGizmoSize
    // Size: 0x4
    // Offset: 0x3C
    float m_lookatGizmoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADF238
    // public System.Boolean m_autoBankOnByDefault
    // Size: 0x1
    // Offset: 0x40
    bool m_autoBankOnByDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_autoBankOnByDefault and: m_maxAutoBankAngle
    char __padding10[0x3] = {};
    // [RangeAttribute] Offset: 0xADF270
    // public System.Single m_maxAutoBankAngle
    // Size: 0x4
    // Offset: 0x44
    float m_maxAutoBankAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADF28C
    // public System.Single m_maxAutoBankSpeed
    // Size: 0x4
    // Offset: 0x48
    float m_maxAutoBankSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADF2A8
    // public Pegasus.PegasusConstants/SpeedType m_flyThroughSpeed
    // Size: 0x4
    // Offset: 0x4C
    ::Pegasus::PegasusConstants::SpeedType m_flyThroughSpeed;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::SpeedType) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.KeyCode m_keyPrevPoi
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyPrevPoi();
    // Get instance field reference: public UnityEngine.KeyCode m_keyNextPoi
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyNextPoi();
    // Get instance field reference: public UnityEngine.KeyCode m_keyUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyUp();
    // Get instance field reference: public UnityEngine.KeyCode m_keyDown
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyDown();
    // Get instance field reference: public UnityEngine.KeyCode m_keyLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyLeft();
    // Get instance field reference: public UnityEngine.KeyCode m_keyRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyRight();
    // Get instance field reference: public UnityEngine.KeyCode m_keyForward
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyForward();
    // Get instance field reference: public UnityEngine.KeyCode m_keyBackward
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_keyBackward();
    // Get instance field reference: public System.Single m_poiGizmoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_poiGizmoSize();
    // Get instance field reference: public System.Single m_lookatGizmoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_lookatGizmoSize();
    // Get instance field reference: public System.Boolean m_autoBankOnByDefault
    [[deprecated("Use field access instead!")]] bool& dyn_m_autoBankOnByDefault();
    // Get instance field reference: public System.Single m_maxAutoBankAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_maxAutoBankAngle();
    // Get instance field reference: public System.Single m_maxAutoBankSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_maxAutoBankSpeed();
    // Get instance field reference: public Pegasus.PegasusConstants/SpeedType m_flyThroughSpeed
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::SpeedType& dyn_m_flyThroughSpeed();
    // public System.Void .ctor()
    // Offset: 0xE43014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusDefaults* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusDefaults::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusDefaults*, creationType>()));
    }
  }; // Pegasus.PegasusDefaults
  #pragma pack(pop)
  static check_size<sizeof(PegasusDefaults), 76 + sizeof(::Pegasus::PegasusConstants::SpeedType)> __Pegasus_PegasusDefaultsSizeCheck;
  static_assert(sizeof(PegasusDefaults) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusDefaults::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
