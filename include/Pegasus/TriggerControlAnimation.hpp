// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pegasus.TriggerBase
#include "Pegasus/TriggerBase.hpp"
// Including type: Pegasus.PegasusConstants/PoiAnimationTriggerAction
#include "Pegasus/PegasusConstants_PoiAnimationTriggerAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationState
  class AnimationState;
}
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPoi
  class PegasusPoi;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: TriggerControlAnimation
  class TriggerControlAnimation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::TriggerControlAnimation);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::TriggerControlAnimation*, "Pegasus", "TriggerControlAnimation");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.TriggerControlAnimation
  // [TokenAttribute] Offset: FFFFFFFF
  class TriggerControlAnimation : public ::Pegasus::TriggerBase {
    public:
    // Writing base type padding for base size: 0x1B to desired offset: 0x20
    char ___base_padding[0x5] = {};
    public:
    // public System.String animationPropertyToActivate
    // Size: 0x8
    // Offset: 0x20
    ::StringW animationPropertyToActivate;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single pauseForTime
    // Size: 0x4
    // Offset: 0x28
    float pauseForTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isPaused
    // Size: 0x1
    // Offset: 0x2C
    bool isPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPaused and: timePaused
    char __padding2[0x3] = {};
    // private System.Single timePaused
    // Size: 0x4
    // Offset: 0x30
    float timePaused;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pegasus.PegasusConstants/PoiAnimationTriggerAction m_actionOnStart
    // Size: 0x4
    // Offset: 0x34
    ::Pegasus::PegasusConstants::PoiAnimationTriggerAction m_actionOnStart;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PoiAnimationTriggerAction) == 0x4);
    // public Pegasus.PegasusConstants/PoiAnimationTriggerAction m_actionOnEnd
    // Size: 0x4
    // Offset: 0x38
    ::Pegasus::PegasusConstants::PoiAnimationTriggerAction m_actionOnEnd;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::PoiAnimationTriggerAction) == 0x4);
    // public System.Int32 m_startAnimationIdx
    // Size: 0x4
    // Offset: 0x3C
    int m_startAnimationIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 m_endAnimation
    // Size: 0x4
    // Offset: 0x40
    int m_endAnimation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_endAnimation and: m_animations
    char __padding7[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.AnimationState> m_animations
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::AnimationState*>* m_animations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::AnimationState*>*) == 0x8);
    // private Pegasus.PegasusPoi lastPoi
    // Size: 0x8
    // Offset: 0x50
    ::Pegasus::PegasusPoi* lastPoi;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi*) == 0x8);
    public:
    // Get instance field reference: public System.String animationPropertyToActivate
    [[deprecated("Use field access instead!")]] ::StringW& dyn_animationPropertyToActivate();
    // Get instance field reference: public System.Single pauseForTime
    [[deprecated("Use field access instead!")]] float& dyn_pauseForTime();
    // Get instance field reference: private System.Boolean isPaused
    [[deprecated("Use field access instead!")]] bool& dyn_isPaused();
    // Get instance field reference: private System.Single timePaused
    [[deprecated("Use field access instead!")]] float& dyn_timePaused();
    // Get instance field reference: public Pegasus.PegasusConstants/PoiAnimationTriggerAction m_actionOnStart
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PoiAnimationTriggerAction& dyn_m_actionOnStart();
    // Get instance field reference: public Pegasus.PegasusConstants/PoiAnimationTriggerAction m_actionOnEnd
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::PoiAnimationTriggerAction& dyn_m_actionOnEnd();
    // Get instance field reference: public System.Int32 m_startAnimationIdx
    [[deprecated("Use field access instead!")]] int& dyn_m_startAnimationIdx();
    // Get instance field reference: public System.Int32 m_endAnimation
    [[deprecated("Use field access instead!")]] int& dyn_m_endAnimation();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.AnimationState> m_animations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::AnimationState*>*& dyn_m_animations();
    // Get instance field reference: private Pegasus.PegasusPoi lastPoi
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi*& dyn_lastPoi();
    // private System.Void Start()
    // Offset: 0xE4E720
    void Start();
    // private System.Void FixedUpdate()
    // Offset: 0xE4E724
    void FixedUpdate();
    // public override System.Void OnStart(Pegasus.PegasusPoi poi)
    // Offset: 0xE4E838
    // Implemented from: Pegasus.TriggerBase
    // Base method: System.Void TriggerBase::OnStart(Pegasus.PegasusPoi poi)
    void OnStart(::Pegasus::PegasusPoi* poi);
    // public override System.Void OnEnd(Pegasus.PegasusPoi poi)
    // Offset: 0xE4E9B4
    // Implemented from: Pegasus.TriggerBase
    // Base method: System.Void TriggerBase::OnEnd(Pegasus.PegasusPoi poi)
    void OnEnd(::Pegasus::PegasusPoi* poi);
    // public System.Void .ctor()
    // Offset: 0xE4EAFC
    // Implemented from: Pegasus.TriggerBase
    // Base method: System.Void TriggerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TriggerControlAnimation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::TriggerControlAnimation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TriggerControlAnimation*, creationType>()));
    }
  }; // Pegasus.TriggerControlAnimation
  #pragma pack(pop)
  static check_size<sizeof(TriggerControlAnimation), 80 + sizeof(::Pegasus::PegasusPoi*)> __Pegasus_TriggerControlAnimationSizeCheck;
  static_assert(sizeof(TriggerControlAnimation) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::TriggerControlAnimation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerControlAnimation::*)()>(&Pegasus::TriggerControlAnimation::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerControlAnimation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerControlAnimation::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerControlAnimation::*)()>(&Pegasus::TriggerControlAnimation::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerControlAnimation*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerControlAnimation::OnStart
// Il2CppName: OnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerControlAnimation::*)(::Pegasus::PegasusPoi*)>(&Pegasus::TriggerControlAnimation::OnStart)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerControlAnimation*), "OnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerControlAnimation::OnEnd
// Il2CppName: OnEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TriggerControlAnimation::*)(::Pegasus::PegasusPoi*)>(&Pegasus::TriggerControlAnimation::OnEnd)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TriggerControlAnimation*), "OnEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::TriggerControlAnimation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
