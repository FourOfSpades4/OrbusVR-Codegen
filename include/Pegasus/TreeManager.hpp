// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Skipping declaration: TreeStruct because it is already included!
  // Forward declaring type: Quadtree`1<T>
  template<typename T>
  class Quadtree_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TreePrototype
  class TreePrototype;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: TreeManager
  class TreeManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::TreeManager);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::TreeManager*, "Pegasus", "TreeManager");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.TreeManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TreeManager : public ::Il2CppObject {
    public:
    // Nested type: ::Pegasus::TreeManager::TreeStruct
    struct TreeStruct;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pegasus.TreeManager/TreeStruct
    // [TokenAttribute] Offset: FFFFFFFF
    struct TreeStruct/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Int32 prototypeID
      // Size: 0x4
      // Offset: 0xC
      int prototypeID;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TreeStruct
      constexpr TreeStruct(::UnityEngine::Vector3 position_ = {}, int prototypeID_ = {}) noexcept : position{position_}, prototypeID{prototypeID_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public System.Int32 prototypeID
      [[deprecated("Use field access instead!")]] int& dyn_prototypeID();
    }; // Pegasus.TreeManager/TreeStruct
    #pragma pack(pop)
    static check_size<sizeof(TreeManager::TreeStruct), 12 + sizeof(int)> __Pegasus_TreeManager_TreeStructSizeCheck;
    static_assert(sizeof(TreeManager::TreeStruct) == 0x10);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.TreePrototype> m_terrainTrees
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::UnityEngine::TreePrototype*>* m_terrainTrees;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::TreePrototype*>*) == 0x8);
    // private Pegasus.Quadtree`1<Pegasus.TreeManager/TreeStruct> m_terrainTreeLocations
    // Size: 0x8
    // Offset: 0x18
    ::Pegasus::Quadtree_1<::Pegasus::TreeManager::TreeStruct>* m_terrainTreeLocations;
    // Field size check
    static_assert(sizeof(::Pegasus::Quadtree_1<::Pegasus::TreeManager::TreeStruct>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.TreePrototype> m_terrainTrees
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::TreePrototype*>*& dyn_m_terrainTrees();
    // Get instance field reference: private Pegasus.Quadtree`1<Pegasus.TreeManager/TreeStruct> m_terrainTreeLocations
    [[deprecated("Use field access instead!")]] ::Pegasus::Quadtree_1<::Pegasus::TreeManager::TreeStruct>*& dyn_m_terrainTreeLocations();
    // public System.Void LoadTreesFromTerrain()
    // Offset: 0xE433A8
    void LoadTreesFromTerrain();
    // public System.Void AddTree(Pegasus.TreeManager/TreeStruct tree)
    // Offset: 0xE4E178
    void AddTree(::Pegasus::TreeManager::TreeStruct tree);
    // public System.Int32 Count(UnityEngine.Vector3 position, System.Single range)
    // Offset: 0xE4E1FC
    int Count(::UnityEngine::Vector3 position, float range);
    // public System.Int32 Count()
    // Offset: 0xE4E2DC
    int Count();
    // public System.Int32 GetTrees(UnityEngine.Vector3 position, System.Single range, ref System.Collections.Generic.List`1<Pegasus.TreeManager/TreeStruct> treeList)
    // Offset: 0xE450DC
    int GetTrees(::UnityEngine::Vector3 position, float range, ByRef<::System::Collections::Generic::List_1<::Pegasus::TreeManager::TreeStruct>*> treeList);
    // public System.Void .ctor()
    // Offset: 0xE432D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TreeManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::TreeManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TreeManager*, creationType>()));
    }
  }; // Pegasus.TreeManager
  #pragma pack(pop)
  static check_size<sizeof(TreeManager), 24 + sizeof(::Pegasus::Quadtree_1<::Pegasus::TreeManager::TreeStruct>*)> __Pegasus_TreeManagerSizeCheck;
  static_assert(sizeof(TreeManager) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::TreeManager::TreeStruct, "Pegasus", "TreeManager/TreeStruct");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::TreeManager::LoadTreesFromTerrain
// Il2CppName: LoadTreesFromTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TreeManager::*)()>(&Pegasus::TreeManager::LoadTreesFromTerrain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TreeManager*), "LoadTreesFromTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::TreeManager::AddTree
// Il2CppName: AddTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::TreeManager::*)(::Pegasus::TreeManager::TreeStruct)>(&Pegasus::TreeManager::AddTree)> {
  static const MethodInfo* get() {
    static auto* tree = &::il2cpp_utils::GetClassFromName("Pegasus", "TreeManager/TreeStruct")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TreeManager*), "AddTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree});
  }
};
// Writing MetadataGetter for method: Pegasus::TreeManager::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pegasus::TreeManager::*)(::UnityEngine::Vector3, float)>(&Pegasus::TreeManager::Count)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TreeManager*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, range});
  }
};
// Writing MetadataGetter for method: Pegasus::TreeManager::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pegasus::TreeManager::*)()>(&Pegasus::TreeManager::Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TreeManager*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::TreeManager::GetTrees
// Il2CppName: GetTrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pegasus::TreeManager::*)(::UnityEngine::Vector3, float, ByRef<::System::Collections::Generic::List_1<::Pegasus::TreeManager::TreeStruct>*>)>(&Pegasus::TreeManager::GetTrees)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* treeList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pegasus", "TreeManager/TreeStruct")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::TreeManager*), "GetTrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, range, treeList});
  }
};
// Writing MetadataGetter for method: Pegasus::TreeManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
