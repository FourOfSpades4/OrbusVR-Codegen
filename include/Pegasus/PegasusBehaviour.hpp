// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusManager
  class PegasusManager;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusBehaviour
  class PegasusBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusBehaviour*, "Pegasus", "PegasusBehaviour");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusBehaviour : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // public Pegasus.PegasusManager pegasusManager
    // Size: 0x8
    // Offset: 0x10
    ::Pegasus::PegasusManager* pegasusManager;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusManager*) == 0x8);
    // public System.Single pegasusProgress
    // Size: 0x4
    // Offset: 0x18
    float pegasusProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Pegasus.PegasusManager pegasusManager
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusManager*& dyn_pegasusManager();
    // Get instance field reference: public System.Single pegasusProgress
    [[deprecated("Use field access instead!")]] float& dyn_pegasusProgress();
    // public System.Void .ctor()
    // Offset: 0xE42094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusBehaviour*, creationType>()));
    }
  }; // Pegasus.PegasusBehaviour
  #pragma pack(pop)
  static check_size<sizeof(PegasusBehaviour), 24 + sizeof(float)> __Pegasus_PegasusBehaviourSizeCheck;
  static_assert(sizeof(PegasusBehaviour) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
