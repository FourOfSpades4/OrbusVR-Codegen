// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pegasus.PegasusConstants
#include "Pegasus/PegasusConstants.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusConstants::TargetFrameRate, "Pegasus", "PegasusConstants/TargetFrameRate");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusConstants/TargetFrameRate
  // [TokenAttribute] Offset: FFFFFFFF
  struct PegasusConstants::TargetFrameRate/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TargetFrameRate
    constexpr TargetFrameRate(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate NineFps
    static constexpr const int NineFps = 0;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate NineFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_NineFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate NineFps
    static void _set_NineFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate FifteenFps
    static constexpr const int FifteenFps = 1;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate FifteenFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_FifteenFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate FifteenFps
    static void _set_FifteenFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFourFps
    static constexpr const int TwentyFourFps = 2;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFourFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_TwentyFourFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFourFps
    static void _set_TwentyFourFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFiveFps
    static constexpr const int TwentyFiveFps = 3;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFiveFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_TwentyFiveFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate TwentyFiveFps
    static void _set_TwentyFiveFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate ThirtyFps
    static constexpr const int ThirtyFps = 4;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate ThirtyFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_ThirtyFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate ThirtyFps
    static void _set_ThirtyFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate SixtyFps
    static constexpr const int SixtyFps = 5;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate SixtyFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_SixtyFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate SixtyFps
    static void _set_SixtyFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate NinetyFps
    static constexpr const int NinetyFps = 6;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate NinetyFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_NinetyFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate NinetyFps
    static void _set_NinetyFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate MaxFps
    static constexpr const int MaxFps = 7;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate MaxFps
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_MaxFps();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate MaxFps
    static void _set_MaxFps(::Pegasus::PegasusConstants::TargetFrameRate value);
    // static field const value: static public Pegasus.PegasusConstants/TargetFrameRate LeaveAlone
    static constexpr const int LeaveAlone = 8;
    // Get static field: static public Pegasus.PegasusConstants/TargetFrameRate LeaveAlone
    static ::Pegasus::PegasusConstants::TargetFrameRate _get_LeaveAlone();
    // Set static field: static public Pegasus.PegasusConstants/TargetFrameRate LeaveAlone
    static void _set_LeaveAlone(::Pegasus::PegasusConstants::TargetFrameRate value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Pegasus.PegasusConstants/TargetFrameRate
  #pragma pack(pop)
  static check_size<sizeof(PegasusConstants::TargetFrameRate), 0 + sizeof(int)> __Pegasus_PegasusConstants_TargetFrameRateSizeCheck;
  static_assert(sizeof(PegasusConstants::TargetFrameRate) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
