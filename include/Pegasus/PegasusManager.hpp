// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Pegasus.PegasusConstants/FlythroughType
#include "Pegasus/PegasusConstants_FlythroughType.hpp"
// Including type: Pegasus.PegasusConstants/FlythroughEndAction
#include "Pegasus/PegasusConstants_FlythroughEndAction.hpp"
// Including type: Pegasus.PegasusConstants/TargetFrameRate
#include "Pegasus/PegasusConstants_TargetFrameRate.hpp"
// Including type: Pegasus.PegasusConstants/HeightCheckType
#include "Pegasus/PegasusConstants_HeightCheckType.hpp"
// Including type: Pegasus.PegasusConstants/FlythroughState
#include "Pegasus/PegasusConstants_FlythroughState.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Terrain
  class Terrain;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusPoi
  class PegasusPoi;
  // Forward declaring type: PegasusDefaults
  class PegasusDefaults;
}
// Completed forward declares
// Type namespace: Pegasus
namespace Pegasus {
  // Forward declaring type: PegasusManager
  class PegasusManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pegasus::PegasusManager);
DEFINE_IL2CPP_ARG_TYPE(::Pegasus::PegasusManager*, "Pegasus", "PegasusManager");
// Type namespace: Pegasus
namespace Pegasus {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: Pegasus.PegasusManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PegasusManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject m_target
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* m_target;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public Pegasus.PegasusConstants/FlythroughType m_flythroughType
    // Size: 0x4
    // Offset: 0x20
    ::Pegasus::PegasusConstants::FlythroughType m_flythroughType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::FlythroughType) == 0x4);
    // public Pegasus.PegasusConstants/FlythroughEndAction m_flythroughEndAction
    // Size: 0x4
    // Offset: 0x24
    ::Pegasus::PegasusConstants::FlythroughEndAction m_flythroughEndAction;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::FlythroughEndAction) == 0x4);
    // public Pegasus.PegasusConstants/TargetFrameRate m_targetFramerateType
    // Size: 0x4
    // Offset: 0x28
    ::Pegasus::PegasusConstants::TargetFrameRate m_targetFramerateType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::TargetFrameRate) == 0x4);
    // public Pegasus.PegasusConstants/HeightCheckType m_heightCheckType
    // Size: 0x4
    // Offset: 0x2C
    ::Pegasus::PegasusConstants::HeightCheckType m_heightCheckType;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::HeightCheckType) == 0x4);
    // public System.Boolean m_autoStartAtRuntime
    // Size: 0x1
    // Offset: 0x30
    bool m_autoStartAtRuntime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_autoStartAtRuntime and: m_poiList
    char __padding5[0x7] = {};
    // public System.Collections.Generic.List`1<Pegasus.PegasusPoi> m_poiList
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::Pegasus::PegasusPoi*>* m_poiList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pegasus::PegasusPoi*>*) == 0x8);
    // public System.Single m_minHeightAboveTerrain
    // Size: 0x4
    // Offset: 0x40
    float m_minHeightAboveTerrain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean m_displayDebug
    // Size: 0x1
    // Offset: 0x44
    bool m_displayDebug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_alwaysShowGizmos
    // Size: 0x1
    // Offset: 0x45
    bool m_alwaysShowGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_alwaysShowGizmos and: m_currentState
    char __padding9[0x2] = {};
    // public Pegasus.PegasusConstants/FlythroughState m_currentState
    // Size: 0x4
    // Offset: 0x48
    ::Pegasus::PegasusConstants::FlythroughState m_currentState;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusConstants::FlythroughState) == 0x4);
    // public System.Int32 m_currentSegmentIdx
    // Size: 0x4
    // Offset: 0x4C
    int m_currentSegmentIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Pegasus.PegasusPoi m_currentSegment
    // Size: 0x8
    // Offset: 0x50
    ::Pegasus::PegasusPoi* m_currentSegment;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusPoi*) == 0x8);
    // public System.Single m_currentSegmentDistanceTravelled
    // Size: 0x4
    // Offset: 0x58
    float m_currentSegmentDistanceTravelled;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_totalDistanceTravelled
    // Size: 0x4
    // Offset: 0x5C
    float m_totalDistanceTravelled;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_totalDistanceTravelledPct
    // Size: 0x4
    // Offset: 0x60
    float m_totalDistanceTravelledPct;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_totalDistance
    // Size: 0x4
    // Offset: 0x64
    float m_totalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.TimeSpan m_totalDuration
    // Size: 0x8
    // Offset: 0x68
    ::System::TimeSpan m_totalDuration;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // public System.Single m_currentVelocity
    // Size: 0x4
    // Offset: 0x70
    float m_currentVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 m_currentPosition
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 m_currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion m_currentRotation
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion m_currentRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean m_canUpdateNow
    // Size: 0x1
    // Offset: 0x90
    bool m_canUpdateNow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_canUpdateNow and: m_lastUpdateTime
    char __padding21[0x7] = {};
    // public System.DateTime m_lastUpdateTime
    // Size: 0x8
    // Offset: 0x98
    ::System::DateTime m_lastUpdateTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public System.Single m_frameUpdateTime
    // Size: 0x4
    // Offset: 0xA0
    float m_frameUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_frameUpdateDistance
    // Size: 0x4
    // Offset: 0xA4
    float m_frameUpdateDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_rotationDamping
    // Size: 0x4
    // Offset: 0xA8
    float m_rotationDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_positionDamping
    // Size: 0x4
    // Offset: 0xAC
    float m_positionDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pegasus.PegasusManager m_nextPegasus
    // Size: 0x8
    // Offset: 0xB0
    ::Pegasus::PegasusManager* m_nextPegasus;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusManager*) == 0x8);
    // public System.Boolean m_alwaysShowPath
    // Size: 0x1
    // Offset: 0xB8
    bool m_alwaysShowPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_showScrubber
    // Size: 0x1
    // Offset: 0xB9
    bool m_showScrubber;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_showPOIHelpers
    // Size: 0x1
    // Offset: 0xBA
    bool m_showPOIHelpers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_showPOIHelpers and: m_poiGizmoSize
    char __padding30[0x1] = {};
    // public System.Single m_poiGizmoSize
    // Size: 0x4
    // Offset: 0xBC
    float m_poiGizmoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean m_showAdvanced
    // Size: 0x1
    // Offset: 0xC0
    bool m_showAdvanced;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_showAdvanced and: m_collisionHeightOffset
    char __padding32[0x3] = {};
    // public System.Single m_collisionHeightOffset
    // Size: 0x4
    // Offset: 0xC4
    float m_collisionHeightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_managerSpeed
    // Size: 0x4
    // Offset: 0xC8
    float m_managerSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_managerSpeed and: m_defaults
    char __padding34[0x4] = {};
    // public Pegasus.PegasusDefaults m_defaults
    // Size: 0x8
    // Offset: 0xD0
    ::Pegasus::PegasusDefaults* m_defaults;
    // Field size check
    static_assert(sizeof(::Pegasus::PegasusDefaults*) == 0x8);
    // public System.Single m_autoRollMaxSpeed
    // Size: 0x4
    // Offset: 0xD8
    float m_autoRollMaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_autoRollMaxAngle
    // Size: 0x4
    // Offset: 0xDC
    float m_autoRollMaxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject m_target
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_target();
    // Get instance field reference: public Pegasus.PegasusConstants/FlythroughType m_flythroughType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::FlythroughType& dyn_m_flythroughType();
    // Get instance field reference: public Pegasus.PegasusConstants/FlythroughEndAction m_flythroughEndAction
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::FlythroughEndAction& dyn_m_flythroughEndAction();
    // Get instance field reference: public Pegasus.PegasusConstants/TargetFrameRate m_targetFramerateType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::TargetFrameRate& dyn_m_targetFramerateType();
    // Get instance field reference: public Pegasus.PegasusConstants/HeightCheckType m_heightCheckType
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::HeightCheckType& dyn_m_heightCheckType();
    // Get instance field reference: public System.Boolean m_autoStartAtRuntime
    [[deprecated("Use field access instead!")]] bool& dyn_m_autoStartAtRuntime();
    // Get instance field reference: public System.Collections.Generic.List`1<Pegasus.PegasusPoi> m_poiList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pegasus::PegasusPoi*>*& dyn_m_poiList();
    // Get instance field reference: public System.Single m_minHeightAboveTerrain
    [[deprecated("Use field access instead!")]] float& dyn_m_minHeightAboveTerrain();
    // Get instance field reference: public System.Boolean m_displayDebug
    [[deprecated("Use field access instead!")]] bool& dyn_m_displayDebug();
    // Get instance field reference: public System.Boolean m_alwaysShowGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_m_alwaysShowGizmos();
    // Get instance field reference: public Pegasus.PegasusConstants/FlythroughState m_currentState
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusConstants::FlythroughState& dyn_m_currentState();
    // Get instance field reference: public System.Int32 m_currentSegmentIdx
    [[deprecated("Use field access instead!")]] int& dyn_m_currentSegmentIdx();
    // Get instance field reference: public Pegasus.PegasusPoi m_currentSegment
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusPoi*& dyn_m_currentSegment();
    // Get instance field reference: public System.Single m_currentSegmentDistanceTravelled
    [[deprecated("Use field access instead!")]] float& dyn_m_currentSegmentDistanceTravelled();
    // Get instance field reference: public System.Single m_totalDistanceTravelled
    [[deprecated("Use field access instead!")]] float& dyn_m_totalDistanceTravelled();
    // Get instance field reference: public System.Single m_totalDistanceTravelledPct
    [[deprecated("Use field access instead!")]] float& dyn_m_totalDistanceTravelledPct();
    // Get instance field reference: public System.Single m_totalDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_totalDistance();
    // Get instance field reference: public System.TimeSpan m_totalDuration
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_m_totalDuration();
    // Get instance field reference: public System.Single m_currentVelocity
    [[deprecated("Use field access instead!")]] float& dyn_m_currentVelocity();
    // Get instance field reference: public UnityEngine.Vector3 m_currentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_currentPosition();
    // Get instance field reference: public UnityEngine.Quaternion m_currentRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_currentRotation();
    // Get instance field reference: public System.Boolean m_canUpdateNow
    [[deprecated("Use field access instead!")]] bool& dyn_m_canUpdateNow();
    // Get instance field reference: public System.DateTime m_lastUpdateTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_m_lastUpdateTime();
    // Get instance field reference: public System.Single m_frameUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_m_frameUpdateTime();
    // Get instance field reference: public System.Single m_frameUpdateDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_frameUpdateDistance();
    // Get instance field reference: public System.Single m_rotationDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_rotationDamping();
    // Get instance field reference: public System.Single m_positionDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_positionDamping();
    // Get instance field reference: public Pegasus.PegasusManager m_nextPegasus
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusManager*& dyn_m_nextPegasus();
    // Get instance field reference: public System.Boolean m_alwaysShowPath
    [[deprecated("Use field access instead!")]] bool& dyn_m_alwaysShowPath();
    // Get instance field reference: public System.Boolean m_showScrubber
    [[deprecated("Use field access instead!")]] bool& dyn_m_showScrubber();
    // Get instance field reference: public System.Boolean m_showPOIHelpers
    [[deprecated("Use field access instead!")]] bool& dyn_m_showPOIHelpers();
    // Get instance field reference: public System.Single m_poiGizmoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_poiGizmoSize();
    // Get instance field reference: public System.Boolean m_showAdvanced
    [[deprecated("Use field access instead!")]] bool& dyn_m_showAdvanced();
    // Get instance field reference: public System.Single m_collisionHeightOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_collisionHeightOffset();
    // Get instance field reference: public System.Single m_managerSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_managerSpeed();
    // Get instance field reference: public Pegasus.PegasusDefaults m_defaults
    [[deprecated("Use field access instead!")]] ::Pegasus::PegasusDefaults*& dyn_m_defaults();
    // Get instance field reference: public System.Single m_autoRollMaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_autoRollMaxSpeed();
    // Get instance field reference: public System.Single m_autoRollMaxAngle
    [[deprecated("Use field access instead!")]] float& dyn_m_autoRollMaxAngle();
    // private System.Void Start()
    // Offset: 0xE4578C
    void Start();
    // public System.Void SetDefaults()
    // Offset: 0xE45994
    void SetDefaults();
    // public System.Void InitialiseFlythrough()
    // Offset: 0xE45B14
    void InitialiseFlythrough();
    // private System.Void RestartFlythrough()
    // Offset: 0xE46F74
    void RestartFlythrough();
    // public System.Void UpdateFlythroughMetaData()
    // Offset: 0xE470A0
    void UpdateFlythroughMetaData();
    // public System.Void UpdateSegmentWithDependencies(Pegasus.PegasusPoi segment)
    // Offset: 0xE4726C
    void UpdateSegmentWithDependencies(::Pegasus::PegasusPoi* segment);
    // private System.Void SafeInitialise(System.Int32 idx, System.Boolean wrap, System.Boolean updateSegments)
    // Offset: 0xE473E4
    void SafeInitialise(int idx, bool wrap, bool updateSegments);
    // public System.Void StartFlythrough(System.Boolean fullInitialise)
    // Offset: 0xE4615C
    void StartFlythrough(bool fullInitialise);
    // public System.Void ResumeFlythrough()
    // Offset: 0xE47654
    void ResumeFlythrough();
    // public System.Void PauseFlythrough()
    // Offset: 0xE47720
    void PauseFlythrough();
    // public System.Void StopFlythrough()
    // Offset: 0xE477A4
    void StopFlythrough();
    // public System.Void ChangeFramerate(Pegasus.PegasusConstants/TargetFrameRate newRate)
    // Offset: 0xE459EC
    void ChangeFramerate(::Pegasus::PegasusConstants::TargetFrameRate newRate);
    // public System.Void SetSpeed(System.Single speed)
    // Offset: 0xE47828
    void SetSpeed(float speed);
    // public System.Void SetAutoRoll(System.Boolean autoRoll)
    // Offset: 0xE4792C
    void SetAutoRoll(bool autoRoll);
    // public System.Void SelectPoi(Pegasus.PegasusPoi poi)
    // Offset: 0xE47AAC
    void SelectPoi(::Pegasus::PegasusPoi* poi);
    // public System.Void MovePoi(Pegasus.PegasusPoi poi, UnityEngine.Vector3 movement)
    // Offset: 0xE47BB8
    void MovePoi(::Pegasus::PegasusPoi* poi, ::UnityEngine::Vector3 movement);
    // public System.Void MovePoiLookat(Pegasus.PegasusPoi poi, UnityEngine.Vector3 movement)
    // Offset: 0xE4819C
    void MovePoiLookat(::Pegasus::PegasusPoi* poi, ::UnityEngine::Vector3 movement);
    // public System.Void MoveTargetNow()
    // Offset: 0xE484F8
    void MoveTargetNow();
    // public System.Void MoveTargetTo(System.Single percent)
    // Offset: 0xE48508
    void MoveTargetTo(float percent);
    // public System.Void CalculateTargetAtDistance(System.Single distance, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out System.Single velocity)
    // Offset: 0xE48B8C
    void CalculateTargetAtDistance(float distance, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<float> velocity);
    // public System.Void CalculateTargetAtPercent(System.Single percent, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out System.Single velocity)
    // Offset: 0xE48FE4
    void CalculateTargetAtPercent(float percent, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<float> velocity);
    // public System.Void MoveTargetToPoi(Pegasus.PegasusPoi targetPoi)
    // Offset: 0xE4909C
    void MoveTargetToPoi(::Pegasus::PegasusPoi* targetPoi);
    // public System.Void StepTargetBackward(System.Single distMeters)
    // Offset: 0xE49374
    void StepTargetBackward(float distMeters);
    // public System.Void StepTargetForward(System.Single distMeters)
    // Offset: 0xE49394
    void StepTargetForward(float distMeters);
    // public System.Void CreateDebugObjects()
    // Offset: 0xE493B4
    void CreateDebugObjects();
    // public System.Void DeleteDebugObjects()
    // Offset: 0xE4993C
    void DeleteDebugObjects();
    // public UnityEngine.Vector3 GetValidatedPoiPosition(UnityEngine.Vector3 source, Pegasus.PegasusConstants/PoiHeightCheckType heightCheckOverride)
    // Offset: 0xE47D88
    ::UnityEngine::Vector3 GetValidatedPoiPosition(::UnityEngine::Vector3 source, ::Pegasus::PegasusConstants::PoiHeightCheckType heightCheckOverride);
    // public UnityEngine.Vector3 GetLowestPoiPosition(UnityEngine.Vector3 source, Pegasus.PegasusConstants/PoiHeightCheckType heightCheckOverride)
    // Offset: 0xE49D54
    ::UnityEngine::Vector3 GetLowestPoiPosition(::UnityEngine::Vector3 source, ::Pegasus::PegasusConstants::PoiHeightCheckType heightCheckOverride);
    // public UnityEngine.Vector3 GetValidatedLookatPosition(UnityEngine.Vector3 source, Pegasus.PegasusConstants/PoiHeightCheckType heightCheckOverride)
    // Offset: 0xE48324
    ::UnityEngine::Vector3 GetValidatedLookatPosition(::UnityEngine::Vector3 source, ::Pegasus::PegasusConstants::PoiHeightCheckType heightCheckOverride);
    // public UnityEngine.Vector3 GetLowestLookatPosition(UnityEngine.Vector3 source, Pegasus.PegasusConstants/PoiHeightCheckType heightCheckOverride)
    // Offset: 0xE49F14
    ::UnityEngine::Vector3 GetLowestLookatPosition(::UnityEngine::Vector3 source, ::Pegasus::PegasusConstants::PoiHeightCheckType heightCheckOverride);
    // public System.Single GetValidatedLookatHeightRelativeToMinimum(UnityEngine.Vector3 source, Pegasus.PegasusConstants/PoiHeightCheckType heightCheckOverride)
    // Offset: 0xE4A0CC
    float GetValidatedLookatHeightRelativeToMinimum(::UnityEngine::Vector3 source, ::Pegasus::PegasusConstants::PoiHeightCheckType heightCheckOverride);
    // public UnityEngine.Terrain GetTerrain(UnityEngine.Vector3 location)
    // Offset: 0xE49AB4
    ::UnityEngine::Terrain* GetTerrain(::UnityEngine::Vector3 location);
    // private System.Void LateUpdate()
    // Offset: 0xE4A0F0
    void LateUpdate();
    // private System.Void CalculateFlythroughUpdates()
    // Offset: 0xE4A420
    void CalculateFlythroughUpdates();
    // public System.Void AddPOI(UnityEngine.Vector3 targetLocation, UnityEngine.Vector3 lookatLocation)
    // Offset: 0xE4A998
    void AddPOI(::UnityEngine::Vector3 targetLocation, ::UnityEngine::Vector3 lookatLocation);
    // public Pegasus.PegasusPoi AddPoiAfter(Pegasus.PegasusPoi currentPoi)
    // Offset: 0xE4AC00
    ::Pegasus::PegasusPoi* AddPoiAfter(::Pegasus::PegasusPoi* currentPoi);
    // public Pegasus.PegasusPoi AddPoiBefore(Pegasus.PegasusPoi currentPoi)
    // Offset: 0xE4AEA8
    ::Pegasus::PegasusPoi* AddPoiBefore(::Pegasus::PegasusPoi* currentPoi);
    // public Pegasus.PegasusPoi GetFirstPOI()
    // Offset: 0xE4B00C
    ::Pegasus::PegasusPoi* GetFirstPOI();
    // public Pegasus.PegasusPoi GetPOI(System.Int32 poiIndex)
    // Offset: 0xE4B0A8
    ::Pegasus::PegasusPoi* GetPOI(int poiIndex);
    // public Pegasus.PegasusPoi GetPrevPOI(Pegasus.PegasusPoi currentPoi, System.Boolean wrap)
    // Offset: 0xE4AED4
    ::Pegasus::PegasusPoi* GetPrevPOI(::Pegasus::PegasusPoi* currentPoi, bool wrap);
    // public Pegasus.PegasusPoi GetNextPOI(Pegasus.PegasusPoi currentPoi, System.Boolean wrap)
    // Offset: 0xE4B17C
    ::Pegasus::PegasusPoi* GetNextPOI(::Pegasus::PegasusPoi* currentPoi, bool wrap);
    // public System.Void SetPoiToMinHeight()
    // Offset: 0xE4B2AC
    void SetPoiToMinHeight();
    // public System.Void .ctor()
    // Offset: 0xE4B464
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegasusManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pegasus::PegasusManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegasusManager*, creationType>()));
    }
  }; // Pegasus.PegasusManager
  #pragma pack(pop)
  static check_size<sizeof(PegasusManager), 220 + sizeof(float)> __Pegasus_PegasusManagerSizeCheck;
  static_assert(sizeof(PegasusManager) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pegasus::PegasusManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SetDefaults
// Il2CppName: SetDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::SetDefaults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SetDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::InitialiseFlythrough
// Il2CppName: InitialiseFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::InitialiseFlythrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "InitialiseFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::RestartFlythrough
// Il2CppName: RestartFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::RestartFlythrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "RestartFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::UpdateFlythroughMetaData
// Il2CppName: UpdateFlythroughMetaData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::UpdateFlythroughMetaData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "UpdateFlythroughMetaData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::UpdateSegmentWithDependencies
// Il2CppName: UpdateSegmentWithDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusManager::UpdateSegmentWithDependencies)> {
  static const MethodInfo* get() {
    static auto* segment = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "UpdateSegmentWithDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{segment});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SafeInitialise
// Il2CppName: SafeInitialise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(int, bool, bool)>(&Pegasus::PegasusManager::SafeInitialise)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wrap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateSegments = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SafeInitialise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, wrap, updateSegments});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::StartFlythrough
// Il2CppName: StartFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(bool)>(&Pegasus::PegasusManager::StartFlythrough)> {
  static const MethodInfo* get() {
    static auto* fullInitialise = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "StartFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullInitialise});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::ResumeFlythrough
// Il2CppName: ResumeFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::ResumeFlythrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "ResumeFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::PauseFlythrough
// Il2CppName: PauseFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::PauseFlythrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "PauseFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::StopFlythrough
// Il2CppName: StopFlythrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::StopFlythrough)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "StopFlythrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::ChangeFramerate
// Il2CppName: ChangeFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusConstants::TargetFrameRate)>(&Pegasus::PegasusManager::ChangeFramerate)> {
  static const MethodInfo* get() {
    static auto* newRate = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/TargetFrameRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "ChangeFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newRate});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SetSpeed
// Il2CppName: SetSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float)>(&Pegasus::PegasusManager::SetSpeed)> {
  static const MethodInfo* get() {
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SetSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speed});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SetAutoRoll
// Il2CppName: SetAutoRoll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(bool)>(&Pegasus::PegasusManager::SetAutoRoll)> {
  static const MethodInfo* get() {
    static auto* autoRoll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SetAutoRoll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{autoRoll});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SelectPoi
// Il2CppName: SelectPoi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusManager::SelectPoi)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SelectPoi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::MovePoi
// Il2CppName: MovePoi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*, ::UnityEngine::Vector3)>(&Pegasus::PegasusManager::MovePoi)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    static auto* movement = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "MovePoi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi, movement});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::MovePoiLookat
// Il2CppName: MovePoiLookat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*, ::UnityEngine::Vector3)>(&Pegasus::PegasusManager::MovePoiLookat)> {
  static const MethodInfo* get() {
    static auto* poi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    static auto* movement = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "MovePoiLookat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poi, movement});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::MoveTargetNow
// Il2CppName: MoveTargetNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::MoveTargetNow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "MoveTargetNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::MoveTargetTo
// Il2CppName: MoveTargetTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float)>(&Pegasus::PegasusManager::MoveTargetTo)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "MoveTargetTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::CalculateTargetAtDistance
// Il2CppName: CalculateTargetAtDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<float>)>(&Pegasus::PegasusManager::CalculateTargetAtDistance)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "CalculateTargetAtDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance, position, rotation, velocity});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::CalculateTargetAtPercent
// Il2CppName: CalculateTargetAtPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<float>)>(&Pegasus::PegasusManager::CalculateTargetAtPercent)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "CalculateTargetAtPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent, position, rotation, velocity});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::MoveTargetToPoi
// Il2CppName: MoveTargetToPoi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusManager::MoveTargetToPoi)> {
  static const MethodInfo* get() {
    static auto* targetPoi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "MoveTargetToPoi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPoi});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::StepTargetBackward
// Il2CppName: StepTargetBackward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float)>(&Pegasus::PegasusManager::StepTargetBackward)> {
  static const MethodInfo* get() {
    static auto* distMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "StepTargetBackward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distMeters});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::StepTargetForward
// Il2CppName: StepTargetForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(float)>(&Pegasus::PegasusManager::StepTargetForward)> {
  static const MethodInfo* get() {
    static auto* distMeters = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "StepTargetForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distMeters});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::CreateDebugObjects
// Il2CppName: CreateDebugObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::CreateDebugObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "CreateDebugObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::DeleteDebugObjects
// Il2CppName: DeleteDebugObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::DeleteDebugObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "DeleteDebugObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetValidatedPoiPosition
// Il2CppName: GetValidatedPoiPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::Pegasus::PegasusConstants::PoiHeightCheckType)>(&Pegasus::PegasusManager::GetValidatedPoiPosition)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* heightCheckOverride = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PoiHeightCheckType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetValidatedPoiPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, heightCheckOverride});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetLowestPoiPosition
// Il2CppName: GetLowestPoiPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::Pegasus::PegasusConstants::PoiHeightCheckType)>(&Pegasus::PegasusManager::GetLowestPoiPosition)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* heightCheckOverride = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PoiHeightCheckType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetLowestPoiPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, heightCheckOverride});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetValidatedLookatPosition
// Il2CppName: GetValidatedLookatPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::Pegasus::PegasusConstants::PoiHeightCheckType)>(&Pegasus::PegasusManager::GetValidatedLookatPosition)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* heightCheckOverride = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PoiHeightCheckType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetValidatedLookatPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, heightCheckOverride});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetLowestLookatPosition
// Il2CppName: GetLowestLookatPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::Pegasus::PegasusConstants::PoiHeightCheckType)>(&Pegasus::PegasusManager::GetLowestLookatPosition)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* heightCheckOverride = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PoiHeightCheckType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetLowestLookatPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, heightCheckOverride});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetValidatedLookatHeightRelativeToMinimum
// Il2CppName: GetValidatedLookatHeightRelativeToMinimum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::Pegasus::PegasusConstants::PoiHeightCheckType)>(&Pegasus::PegasusManager::GetValidatedLookatHeightRelativeToMinimum)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* heightCheckOverride = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusConstants/PoiHeightCheckType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetValidatedLookatHeightRelativeToMinimum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, heightCheckOverride});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetTerrain
// Il2CppName: GetTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Terrain* (Pegasus::PegasusManager::*)(::UnityEngine::Vector3)>(&Pegasus::PegasusManager::GetTerrain)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::CalculateFlythroughUpdates
// Il2CppName: CalculateFlythroughUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::CalculateFlythroughUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "CalculateFlythroughUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::AddPOI
// Il2CppName: AddPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pegasus::PegasusManager::AddPOI)> {
  static const MethodInfo* get() {
    static auto* targetLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lookatLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "AddPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetLocation, lookatLocation});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::AddPoiAfter
// Il2CppName: AddPoiAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusManager::AddPoiAfter)> {
  static const MethodInfo* get() {
    static auto* currentPoi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "AddPoiAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPoi});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::AddPoiBefore
// Il2CppName: AddPoiBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*)>(&Pegasus::PegasusManager::AddPoiBefore)> {
  static const MethodInfo* get() {
    static auto* currentPoi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "AddPoiBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPoi});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetFirstPOI
// Il2CppName: GetFirstPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::GetFirstPOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetFirstPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetPOI
// Il2CppName: GetPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)(int)>(&Pegasus::PegasusManager::GetPOI)> {
  static const MethodInfo* get() {
    static auto* poiIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poiIndex});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetPrevPOI
// Il2CppName: GetPrevPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*, bool)>(&Pegasus::PegasusManager::GetPrevPOI)> {
  static const MethodInfo* get() {
    static auto* currentPoi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    static auto* wrap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetPrevPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPoi, wrap});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::GetNextPOI
// Il2CppName: GetNextPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pegasus::PegasusPoi* (Pegasus::PegasusManager::*)(::Pegasus::PegasusPoi*, bool)>(&Pegasus::PegasusManager::GetNextPOI)> {
  static const MethodInfo* get() {
    static auto* currentPoi = &::il2cpp_utils::GetClassFromName("Pegasus", "PegasusPoi")->byval_arg;
    static auto* wrap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "GetNextPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPoi, wrap});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::SetPoiToMinHeight
// Il2CppName: SetPoiToMinHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pegasus::PegasusManager::*)()>(&Pegasus::PegasusManager::SetPoiToMinHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pegasus::PegasusManager*), "SetPoiToMinHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pegasus::PegasusManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
