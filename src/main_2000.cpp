// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewSizeAnchors
#include "PlayfulSystems/ProgressBar/BarViewSizeAnchors.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.RectTransform rectTrans
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_rectTrans() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_rectTrans");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rectTrans"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType fillType
[[deprecated("Use field access instead!")]] ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_fillType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_fillType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fillType"))->offset;
  return *reinterpret_cast<::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hideOnEmpty
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_hideOnEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_hideOnEmpty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideOnEmpty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useDiscreteSteps
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_useDiscreteSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_useDiscreteSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useDiscreteSteps"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numSteps
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_numSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_numSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numSteps"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.DrivenRectTransformTracker m_Tracker
[[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_m_Tracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_m_Tracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tracker"))->offset;
  return *reinterpret_cast<::UnityEngine::DrivenRectTransformTracker*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean isDisplaySizeZero
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_isDisplaySizeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::dyn_isDisplaySizeZero");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isDisplaySizeZero"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchors.SetPivot
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::SetPivot(float startEdge, float endEdge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::SetPivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startEdge), ::il2cpp_utils::ExtractType(endEdge)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startEdge, endEdge);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchors.UpdateTracker
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateTracker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTracker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchors.OnDisable
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchors.CanUpdateView
bool PlayfulSystems::ProgressBar::BarViewSizeAnchors::CanUpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::CanUpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchors.UpdateView
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType
#include "PlayfulSystems/ProgressBar/BarViewSizeAnchors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType LeftToRight
::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_LeftToRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_LeftToRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "LeftToRight"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType LeftToRight
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_LeftToRight(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_LeftToRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "LeftToRight", value));
}
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType RightToLeft
::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_RightToLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_RightToLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "RightToLeft"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType RightToLeft
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_RightToLeft(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_RightToLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "RightToLeft", value));
}
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType TopToBottom
::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_TopToBottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_TopToBottom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "TopToBottom"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType TopToBottom
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_TopToBottom(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_TopToBottom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "TopToBottom", value));
}
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType BottomToTop
::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_BottomToTop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_get_BottomToTop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "BottomToTop"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType BottomToTop
void PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_BottomToTop(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::_set_BottomToTop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType", "BottomToTop", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow
#include "PlayfulSystems/ProgressBar/BarViewSizeAnchorsShadow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType shadowType
[[deprecated("Use field access instead!")]] ::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType& PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::dyn_shadowType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::dyn_shadowType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shadowType"))->offset;
  return *reinterpret_cast<::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow.UpdateView
void PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewSizeAnchors*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType
#include "PlayfulSystems/ProgressBar/BarViewSizeAnchorsShadow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType Gaining
::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_get_Gaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_get_Gaining");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchorsShadow/ShadowType", "Gaining"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType Gaining
void PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_set_Gaining(::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_set_Gaining");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchorsShadow/ShadowType", "Gaining", value));
}
// Autogenerated static field getter
// Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType Losing
::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_get_Losing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_get_Losing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType>("PlayfulSystems.ProgressBar", "BarViewSizeAnchorsShadow/ShadowType", "Losing"));
}
// Autogenerated static field setter
// Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchorsShadow/ShadowType Losing
void PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_set_Losing(::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::_set_Losing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PlayfulSystems.ProgressBar", "BarViewSizeAnchorsShadow/ShadowType", "Losing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchorsShadow::ShadowType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewSizeImageFill
#include "PlayfulSystems/ProgressBar/BarViewSizeImageFill.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.UI.Image image
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_image() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_image");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "image"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hideOnEmpty
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_hideOnEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_hideOnEmpty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideOnEmpty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useDiscreteSteps
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_useDiscreteSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_useDiscreteSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useDiscreteSteps"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numSteps
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_numSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_numSteps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numSteps"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isDisplaySizeZero
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_isDisplaySizeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::dyn_isDisplaySizeZero");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isDisplaySizeZero"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeImageFill.GetDisplayValue
float PlayfulSystems::ProgressBar::BarViewSizeImageFill::GetDisplayValue(float display) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::GetDisplayValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDisplayValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(display)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, display);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeImageFill.CanUpdateView
bool PlayfulSystems::ProgressBar::BarViewSizeImageFill::CanUpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::CanUpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewSizeImageFill.UpdateView
void PlayfulSystems::ProgressBar::BarViewSizeImageFill::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewValueText
#include "PlayfulSystems/ProgressBar/BarViewValueText.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text text
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& PlayfulSystems::ProgressBar::BarViewValueText::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String prefix
[[deprecated("Use field access instead!")]] ::StringW& PlayfulSystems::ProgressBar::BarViewValueText::dyn_prefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_prefix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minValue
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewValueText::dyn_minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_minValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxValue
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewValueText::dyn_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_maxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numDecimals
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewValueText::dyn_numDecimals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_numDecimals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numDecimals"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean showMaxValue
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewValueText::dyn_showMaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_showMaxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showMaxValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String numberUnit
[[deprecated("Use field access instead!")]] ::StringW& PlayfulSystems::ProgressBar::BarViewValueText::dyn_numberUnit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_numberUnit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numberUnit"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String suffix
[[deprecated("Use field access instead!")]] ::StringW& PlayfulSystems::ProgressBar::BarViewValueText::dyn_suffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_suffix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suffix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastDisplayValue
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewValueText::dyn_lastDisplayValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::dyn_lastDisplayValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastDisplayValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewValueText.GetDisplayValue
float PlayfulSystems::ProgressBar::BarViewValueText::GetDisplayValue(float num) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::GetDisplayValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDisplayValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, num);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewValueText.GetRoundedDisplayValue
float PlayfulSystems::ProgressBar::BarViewValueText::GetRoundedDisplayValue(float num) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::GetRoundedDisplayValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRoundedDisplayValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, num);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewValueText.FormatNumber
::StringW PlayfulSystems::ProgressBar::BarViewValueText::FormatNumber(float num) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::FormatNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, num);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewValueText.CanUpdateView
bool PlayfulSystems::ProgressBar::BarViewValueText::CanUpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::CanUpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewValueText.UpdateView
void PlayfulSystems::ProgressBar::BarViewValueText::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayfulSystems.ProgressBar.ProgressBarProView.NewChangeStarted
void PlayfulSystems::ProgressBar::ProgressBarProView::NewChangeStarted(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::NewChangeStarted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.ProgressBarProView.SetBarColor
void PlayfulSystems::ProgressBar::ProgressBarProView::SetBarColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::SetBarColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: PlayfulSystems.ProgressBar.ProgressBarProView.UpdateColor
void PlayfulSystems::ProgressBar::ProgressBarProView::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.ProgressBarProView.CanUpdateView
bool PlayfulSystems::ProgressBar::ProgressBarProView::CanUpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::CanUpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.ProgressBarProView.UpdateView
void PlayfulSystems::ProgressBar::ProgressBarProView::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.Utils
#include "PlayfulSystems/ProgressBar/Utils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayfulSystems.ProgressBar.Utils.EaseSinInOut
float PlayfulSystems::ProgressBar::Utils::EaseSinInOut(float lerp, float start, float change) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::Utils::EaseSinInOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PlayfulSystems.ProgressBar", "Utils", "EaseSinInOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lerp), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(change)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lerp, start, change);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Assemblies
#include "Nitro/Assemblies.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.Assemblies.get_Current
::System::Reflection::Assembly* Nitro::Assemblies::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Assemblies::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Assemblies", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Assembly*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.Assemblies.GetAll
::ArrayW<::System::Reflection::Assembly*> Nitro::Assemblies::GetAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Assemblies::GetAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Assemblies", "GetAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::Assembly*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CodeAssembly
#include "Nitro/CodeAssembly.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Nitro::CodeAssembly::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Current
[[deprecated("Use field access instead!")]] bool& Nitro::CodeAssembly::dyn_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::dyn_Current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Current"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean NitroAOT
[[deprecated("Use field access instead!")]] bool& Nitro::CodeAssembly::dyn_NitroAOT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::dyn_NitroAOT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NitroAOT"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Assembly Assembly
[[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& Nitro::CodeAssembly::dyn_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::dyn_Assembly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Assembly"))->offset;
  return *reinterpret_cast<::System::Reflection::Assembly**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CodeAssembly.GetType
::System::Type* Nitro::CodeAssembly::GetType(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeAssembly::GetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean Literal
[[deprecated("Use field access instead!")]] bool& Nitro::CodeLexer::dyn_Literal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::dyn_Literal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Literal"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 LineNumber
[[deprecated("Use field access instead!")]] int& Nitro::CodeLexer::dyn_LineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::dyn_LineNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean DidReadJunk
[[deprecated("Use field access instead!")]] bool& Nitro::CodeLexer::dyn_DidReadJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::dyn_DidReadJunk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DidReadJunk"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CodeLexer.LineCheck
void Nitro::CodeLexer::LineCheck(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::LineCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LineCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: Nitro.CodeLexer.PeekJunk
bool Nitro::CodeLexer::PeekJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::PeekJunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekJunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeLexer.ReadJunk
bool Nitro::CodeLexer::ReadJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::ReadJunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadJunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeLexer.Read
::Il2CppChar Nitro::CodeLexer::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeLexer::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::StringReader*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CodeReference
#include "Nitro/CodeReference.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Nitro.CodeAssembly
#include "Nitro/CodeAssembly.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Reflection.Assembly CurrentAssembly
::System::Reflection::Assembly* Nitro::CodeReference::_get_CurrentAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::_get_CurrentAssembly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Reflection::Assembly*>("Nitro", "CodeReference", "CurrentAssembly"));
}
// Autogenerated static field setter
// Set static field: static public System.Reflection.Assembly CurrentAssembly
void Nitro::CodeReference::_set_CurrentAssembly(::System::Reflection::Assembly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::_set_CurrentAssembly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "CodeReference", "CurrentAssembly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.CodeAssembly> Assemblies
::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CodeAssembly*>* Nitro::CodeReference::_get_Assemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::_get_Assemblies");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CodeAssembly*>*>("Nitro", "CodeReference", "Assemblies")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.CodeAssembly> Assemblies
void Nitro::CodeReference::_set_Assemblies(::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CodeAssembly*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::_set_Assemblies");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "CodeReference", "Assemblies", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String Reference
[[deprecated("Use field access instead!")]] ::StringW& Nitro::CodeReference::dyn_Reference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::dyn_Reference");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Reference"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Assembly InAssembly
[[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& Nitro::CodeReference::dyn_InAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::dyn_InAssembly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InAssembly"))->offset;
  return *reinterpret_cast<::System::Reflection::Assembly**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CodeReference.GetFirstType
::System::Type* Nitro::CodeReference::GetFirstType(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::GetFirstType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CodeReference", "GetFirstType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name);
}
// Autogenerated method: Nitro.CodeReference.GetAssembly
::System::Reflection::Assembly* Nitro::CodeReference::GetAssembly(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::GetAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CodeReference", "GetAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Assembly*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name);
}
// Autogenerated method: Nitro.CodeReference.Setup
void Nitro::CodeReference::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CodeReference", "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.CodeReference.AddAssembly
void Nitro::CodeReference::AddAssembly(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::AddAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CodeReference", "AddAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, assembly);
}
// Autogenerated method: Nitro.CodeReference.GetType
::System::Type* Nitro::CodeReference::GetType(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeReference::GetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Nitro.AddResult Ok
::Nitro::AddResult Nitro::AddResult::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::AddResult>("Nitro", "AddResult", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.AddResult Ok
void Nitro::AddResult::_set_Ok(::Nitro::AddResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "AddResult", "Ok", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.AddResult Stop
::Nitro::AddResult Nitro::AddResult::_get_Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_get_Stop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::AddResult>("Nitro", "AddResult", "Stop"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.AddResult Stop
void Nitro::AddResult::_set_Stop(::Nitro::AddResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_set_Stop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "AddResult", "Stop", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.AddResult Local
::Nitro::AddResult Nitro::AddResult::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::AddResult>("Nitro", "AddResult", "Local"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.AddResult Local
void Nitro::AddResult::_set_Local(::Nitro::AddResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "AddResult", "Local", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Nitro::AddResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BreakPoint
#include "Nitro/BreakPoint.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.Label End
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::Label& Nitro::BreakPoint::dyn_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakPoint::dyn_End");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "End"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::Label*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.Label ContinuePoint
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::Label& Nitro::BreakPoint::dyn_ContinuePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakPoint::dyn_ContinuePoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ContinuePoint"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::Label*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.BreakPoint.Break
void Nitro::BreakPoint::Break(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakPoint::Break");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Break", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(into)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.BreakPoint.Continue
void Nitro::BreakPoint::Continue(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakPoint::Continue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Continue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(into)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.TypeFragment GivenType
[[deprecated("Use field access instead!")]] ::Nitro::TypeFragment*& Nitro::CodeFragment::dyn_GivenType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_GivenType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GivenType"))->offset;
  return *reinterpret_cast<::Nitro::TypeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment NextChild
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CodeFragment::dyn_NextChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_NextChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextChild"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment LastChild
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CodeFragment::dyn_LastChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_LastChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LastChild"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment FirstChild
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CodeFragment::dyn_FirstChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_FirstChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FirstChild"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment PreviousChild
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CodeFragment::dyn_PreviousChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_PreviousChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousChild"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment ParentFragment
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CodeFragment::dyn_ParentFragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::dyn_ParentFragment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParentFragment"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CodeFragment.IsOfType
int Nitro::CodeFragment::IsOfType(::ArrayW<::Il2CppChar> arrayToSearch, ::Il2CppChar charToFind) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::IsOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CodeFragment", "IsOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arrayToSearch), ::il2cpp_utils::ExtractType(charToFind)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arrayToSearch, charToFind);
}
// Autogenerated method: Nitro.CodeFragment.Error
void Nitro::CodeFragment::Error(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: Nitro.CodeFragment.GetLineNumber
int Nitro::CodeFragment::GetLineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::GetLineNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.IsMemberAccessor
bool Nitro::CodeFragment::IsMemberAccessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::IsMemberAccessor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.Compile
::Nitro::CompiledFragment* Nitro::CodeFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.CodeFragment.AddToStart
void Nitro::CodeFragment::AddToStart(::Nitro::CodeFragment* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::AddToStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.CodeFragment.AddBefore
void Nitro::CodeFragment::AddBefore(::Nitro::CodeFragment* frag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::AddBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frag)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frag);
}
// Autogenerated method: Nitro.CodeFragment.AddAfter
void Nitro::CodeFragment::AddAfter(::Nitro::CodeFragment* frag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::AddAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frag)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frag);
}
// Autogenerated method: Nitro.CodeFragment.Remove
void Nitro::CodeFragment::Remove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.AddChild
void Nitro::CodeFragment::AddChild(::Nitro::CodeFragment* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::AddChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, child);
}
// Autogenerated method: Nitro.CodeFragment.Typeable
bool Nitro::CodeFragment::Typeable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::Typeable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.get_IsParent
bool Nitro::CodeFragment::get_IsParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::get_IsParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.ChildCount
int Nitro::CodeFragment::ChildCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::ChildCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChildCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CodeFragment.AddTo
::Nitro::AddResult Nitro::CodeFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.CodeFragment.ToString
::StringW Nitro::CodeFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CodeFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ArrayFragment
#include "Nitro/ArrayFragment.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.TypeFragment ArrayType
[[deprecated("Use field access instead!")]] ::Nitro::TypeFragment*& Nitro::ArrayFragment::dyn_ArrayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayFragment::dyn_ArrayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ArrayType"))->offset;
  return *reinterpret_cast<::Nitro::TypeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Defaults
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ArrayFragment::dyn_Defaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayFragment::dyn_Defaults");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Defaults"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ArrayFragment.Compile
::Nitro::CompiledFragment* Nitro::ArrayFragment::Compile(::Nitro::CompiledMethod* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.ArrayFragment.ToString
::StringW Nitro::ArrayFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BaseFragment
#include "Nitro/BaseFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Char[] Brackets
::ArrayW<::Il2CppChar> Nitro::BracketFragment::_get_Brackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::_get_Brackets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("Nitro", "BracketFragment", "Brackets"));
}
// Autogenerated static field setter
// Set static field: static public System.Char[] Brackets
void Nitro::BracketFragment::_set_Brackets(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::_set_Brackets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "BracketFragment", "Brackets", value));
}
// Autogenerated static field getter
// Get static field: static public System.Char[] EndBrackets
::ArrayW<::Il2CppChar> Nitro::BracketFragment::_get_EndBrackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::_get_EndBrackets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("Nitro", "BracketFragment", "EndBrackets"));
}
// Autogenerated static field setter
// Set static field: static public System.Char[] EndBrackets
void Nitro::BracketFragment::_set_EndBrackets(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::_set_EndBrackets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "BracketFragment", "EndBrackets", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Char Bracket
[[deprecated("Use field access instead!")]] ::Il2CppChar& Nitro::BracketFragment::dyn_Bracket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::dyn_Bracket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Bracket"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Char CloseBracket
[[deprecated("Use field access instead!")]] ::Il2CppChar& Nitro::BracketFragment::dyn_CloseBracket() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::dyn_CloseBracket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CloseBracket"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.BracketFragment.WillHandle
bool Nitro::BracketFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "BracketFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.BracketFragment.IsBracket
int Nitro::BracketFragment::IsBracket(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::IsBracket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "BracketFragment", "IsBracket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.BracketFragment.IsEndBracket
int Nitro::BracketFragment::IsEndBracket(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::IsEndBracket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "BracketFragment", "IsEndBracket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.BracketFragment.AnyBracket
bool Nitro::BracketFragment::AnyBracket(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::AnyBracket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "BracketFragment", "AnyBracket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.BracketFragment.CompileBody
bool Nitro::BracketFragment::CompileBody(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::CompileBody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileBody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.BracketFragment..cctor
void Nitro::BracketFragment::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "BracketFragment", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.BracketFragment.Typeable
bool Nitro::BracketFragment::Typeable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::Typeable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.BracketFragment.Compile
::Nitro::CompiledFragment* Nitro::BracketFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.BracketFragment.AddTo
::Nitro::AddResult Nitro::BracketFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.BracketFragment.ToString
::StringW Nitro::BracketFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BracketFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ConstructorFragment
#include "Nitro/ConstructorFragment.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.TypeFragment NewType
[[deprecated("Use field access instead!")]] ::Nitro::TypeFragment*& Nitro::ConstructorFragment::dyn_NewType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructorFragment::dyn_NewType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NewType"))->offset;
  return *reinterpret_cast<::Nitro::TypeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Brackets
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ConstructorFragment::dyn_Brackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructorFragment::dyn_Brackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Brackets"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ConstructorFragment.Compile
::Nitro::CompiledFragment* Nitro::ConstructorFragment::Compile(::Nitro::CompiledMethod* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructorFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.ConstructorFragment.ToString
::StringW Nitro::ConstructorFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructorFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ForFragment
#include "Nitro/ForFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::ForFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Body
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ForFragment::dyn_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::dyn_Body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Body"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Parameters
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ForFragment::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ForFragment.AddTo
::Nitro::AddResult Nitro::ForFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.ForFragment.Compile
::Nitro::CompiledFragment* Nitro::ForFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.ForFragment.ToString
::StringW Nitro::ForFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.IfFragment
#include "Nitro/IfFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.IfFragment ApplyElseTo
[[deprecated("Use field access instead!")]] ::Nitro::IfFragment*& Nitro::IfFragment::dyn_ApplyElseTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::dyn_ApplyElseTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ApplyElseTo"))->offset;
  return *reinterpret_cast<::Nitro::IfFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment IfTrue
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::IfFragment::dyn_IfTrue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::dyn_IfTrue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IfTrue"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment IfFalse
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::IfFragment::dyn_IfFalse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::dyn_IfFalse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IfFalse"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Condition
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::IfFragment::dyn_Condition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::dyn_Condition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Condition"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.IfFragment.SetIfFalse
void Nitro::IfFragment::SetIfFalse(::Nitro::BracketFragment* ifFalse) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::SetIfFalse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIfFalse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ifFalse)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ifFalse);
}
// Autogenerated method: Nitro.IfFragment.AddTo
::Nitro::AddResult Nitro::IfFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.IfFragment.Compile
::Nitro::CompiledFragment* Nitro::IfFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.IfFragment.ToString
::StringW Nitro::IfFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.IndexFragment
#include "Nitro/IndexFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment Brackets
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::IndexFragment::dyn_Brackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexFragment::dyn_Brackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Brackets"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment Variable
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::IndexFragment::dyn_Variable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexFragment::dyn_Variable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Variable"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.IndexFragment.Compile
::Nitro::CompiledFragment* Nitro::IndexFragment::Compile(::Nitro::CompiledMethod* parentBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parentBlock);
}
// Autogenerated method: Nitro.IndexFragment.ToString
::StringW Nitro::IndexFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.MethodFragment
#include "Nitro/MethodFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment MethodName
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::MethodFragment::dyn_MethodName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::dyn_MethodName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MethodName"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Brackets
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::MethodFragment::dyn_Brackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::dyn_Brackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Brackets"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.MethodFragment.Typeable
bool Nitro::MethodFragment::Typeable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::Typeable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodFragment.AddTo
::Nitro::AddResult Nitro::MethodFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.MethodFragment.Compile
::Nitro::CompiledFragment* Nitro::MethodFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.MethodFragment.ToString
::StringW Nitro::MethodFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.NumberFragment
#include "Nitro/NumberFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Char[] Number
::ArrayW<::Il2CppChar> Nitro::NumberFragment::_get_Number() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::_get_Number");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("Nitro", "NumberFragment", "Number"));
}
// Autogenerated static field setter
// Set static field: static public System.Char[] Number
void Nitro::NumberFragment::_set_Number(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::_set_Number");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NumberFragment", "Number", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Float
[[deprecated("Use field access instead!")]] bool& Nitro::NumberFragment::dyn_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::dyn_Float");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Float"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::NumberFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.NumberFragment.WillHandle
bool Nitro::NumberFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NumberFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.NumberFragment..cctor
void Nitro::NumberFragment::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NumberFragment", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.NumberFragment.Compile
::Nitro::CompiledFragment* Nitro::NumberFragment::Compile(::Nitro::CompiledMethod* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.NumberFragment.ToString
::StringW Nitro::NumberFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NumberFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ObjectFragment
#include "Nitro/ObjectFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Contents
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ObjectFragment::dyn_Contents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ObjectFragment::dyn_Contents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Contents"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ObjectFragment.Compile
::Nitro::CompiledFragment* Nitro::ObjectFragment::Compile(::Nitro::CompiledMethod* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ObjectFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.ObjectFragment.ToString
::StringW Nitro::ObjectFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ObjectFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperationFragment
#include "Nitro/OperationFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 LineNumber
[[deprecated("Use field access instead!")]] int& Nitro::OperationFragment::dyn_LineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperationFragment::dyn_LineNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.OperationFragment.GetLineNumber
int Nitro::OperationFragment::GetLineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperationFragment::GetLineNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.OperationFragment.Compile
::Nitro::CompiledFragment* Nitro::OperationFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperationFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.OperationFragment.ToString
::StringW Nitro::OperationFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperationFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorFragment
#include "Nitro/OperatorFragment.hpp"
// Including type: Nitro.Operator
#include "Nitro/Operator.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.Operator Value
[[deprecated("Use field access instead!")]] ::Nitro::Operator*& Nitro::OperatorFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::Nitro::Operator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.OperatorFragment.WillHandle
bool Nitro::OperatorFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "OperatorFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.OperatorFragment.get_IsSetOperator
bool Nitro::OperatorFragment::get_IsSetOperator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::get_IsSetOperator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSetOperator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.OperatorFragment.Set
bool Nitro::OperatorFragment::Set(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: Nitro.OperatorFragment.ToString
::StringW Nitro::OperatorFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.PropertyFragment
#include "Nitro/PropertyFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::PropertyFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment of
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::PropertyFragment::dyn_of() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::dyn_of");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "of"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.PropertyFragment.WillHandle
bool Nitro::PropertyFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "PropertyFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.PropertyFragment.AddTo
::Nitro::AddResult Nitro::PropertyFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.PropertyFragment.Compile
::Nitro::CompiledFragment* Nitro::PropertyFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.PropertyFragment.ToString
::StringW Nitro::PropertyFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.StringFragment
#include "Nitro/StringFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Char Delimiter
::Il2CppChar Nitro::StringFragment::_get_Delimiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::_get_Delimiter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppChar>("Nitro", "StringFragment", "Delimiter"));
}
// Autogenerated static field setter
// Set static field: static public System.Char Delimiter
void Nitro::StringFragment::_set_Delimiter(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::_set_Delimiter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "StringFragment", "Delimiter", value));
}
// Autogenerated static field getter
// Get static field: static public System.Char[] Quotes
::ArrayW<::Il2CppChar> Nitro::StringFragment::_get_Quotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::_get_Quotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("Nitro", "StringFragment", "Quotes"));
}
// Autogenerated static field setter
// Set static field: static public System.Char[] Quotes
void Nitro::StringFragment::_set_Quotes(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::_set_Quotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "StringFragment", "Quotes", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::StringFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.StringFragment.WillHandle
bool Nitro::StringFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "StringFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.StringFragment.IsQuote
int Nitro::StringFragment::IsQuote(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::IsQuote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "StringFragment", "IsQuote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.StringFragment..cctor
void Nitro::StringFragment::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "StringFragment", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.StringFragment.Compile
::Nitro::CompiledFragment* Nitro::StringFragment::Compile(::Nitro::CompiledMethod* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, parent);
}
// Autogenerated method: Nitro.StringFragment.ToString
::StringW Nitro::StringFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::StringFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.SwitchFragment
#include "Nitro/SwitchFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Body
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::SwitchFragment::dyn_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchFragment::dyn_Body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Body"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Parameters
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::SwitchFragment::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchFragment::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.SwitchFragment.AddTo
::Nitro::AddResult Nitro::SwitchFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.SwitchFragment.Compile
::Nitro::CompiledFragment* Nitro::SwitchFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.SwitchFragment.ToString
::StringW Nitro::SwitchFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroCode
#include "Nitro/NitroCode.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsArray
[[deprecated("Use field access instead!")]] bool& Nitro::TypeFragment::dyn_IsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::dyn_IsArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsArray"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean HasColon
[[deprecated("Use field access instead!")]] bool& Nitro::TypeFragment::dyn_HasColon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::dyn_HasColon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HasColon"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::TypeFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Dimensions
[[deprecated("Use field access instead!")]] int& Nitro::TypeFragment::dyn_Dimensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::dyn_Dimensions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Dimensions"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.TypeFragment[] GenericSet
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::TypeFragment*>& Nitro::TypeFragment::dyn_GenericSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::dyn_GenericSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GenericSet"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::TypeFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.TypeFragment.WillHandle
bool Nitro::TypeFragment::WillHandle(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::WillHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeFragment", "WillHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.TypeFragment.SetArray
void Nitro::TypeFragment::SetArray(::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::SetArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sr);
}
// Autogenerated method: Nitro.TypeFragment.FindType
::System::Type* Nitro::TypeFragment::FindType(::Nitro::NitroCode* script) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::FindType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(script)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, script);
}
// Autogenerated method: Nitro.TypeFragment.AddTo
::Nitro::AddResult Nitro::TypeFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.TypeFragment.ToString
::StringW Nitro::TypeFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.VariableFragment
#include "Nitro/VariableFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
// Including type: Nitro.AddResult
#include "Nitro/AddResult.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String[] Keywords
::ArrayW<::StringW> Nitro::VariableFragment::_get_Keywords() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::_get_Keywords");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("Nitro", "VariableFragment", "Keywords"));
}
// Autogenerated static field setter
// Set static field: static public System.String[] Keywords
void Nitro::VariableFragment::_set_Keywords(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::_set_Keywords");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableFragment", "Keywords", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean AfterVar
[[deprecated("Use field access instead!")]] bool& Nitro::VariableFragment::dyn_AfterVar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::dyn_AfterVar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AfterVar"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Value
[[deprecated("Use field access instead!")]] ::StringW& Nitro::VariableFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.VariableFragment.IsKeyword
bool Nitro::VariableFragment::IsKeyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::IsKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.VariableFragment..cctor
void Nitro::VariableFragment::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "VariableFragment", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.VariableFragment.Typeable
bool Nitro::VariableFragment::Typeable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::Typeable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.VariableFragment.AddTo
::Nitro::AddResult Nitro::VariableFragment::AddTo(::Nitro::CodeFragment* to, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::AddTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::AddResult, false>(this, ___internal__method, to, sr);
}
// Autogenerated method: Nitro.VariableFragment.Compile
::Nitro::CompiledFragment* Nitro::VariableFragment::Compile(::Nitro::CompiledMethod* function) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, function);
}
// Autogenerated method: Nitro.VariableFragment.ToString
::StringW Nitro::VariableFragment::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableFragment::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CompilationException
#include "Nitro/CompilationException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 LineNumber
[[deprecated("Use field access instead!")]] int& Nitro::CompilationException::dyn_LineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationException::dyn_LineNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CompilationException.ToString
::StringW Nitro::CompilationException::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationException::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Exception*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CompilationServices
#include "Nitro/CompilationServices.hpp"
// Including type: Nitro.OperationFragment
#include "Nitro/OperationFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.CompilationServices.CompileOperators
void Nitro::CompilationServices::CompileOperators(::Nitro::OperationFragment* fragment, ::Nitro::CompiledMethod* parentBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationServices::CompileOperators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CompilationServices", "CompileOperators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment), ::il2cpp_utils::ExtractType(parentBlock)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fragment, parentBlock);
}
// Autogenerated method: Nitro.CompilationServices.CompileOperations
bool Nitro::CompilationServices::CompileOperations(::Nitro::CodeFragment* fragment, ::Nitro::CompiledMethod* block) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationServices::CompileOperations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CompilationServices", "CompileOperations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment), ::il2cpp_utils::ExtractType(block)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fragment, block);
}
// Autogenerated method: Nitro.CompilationServices.CompileParameters
::ArrayW<::Nitro::CompiledFragment*> Nitro::CompilationServices::CompileParameters(::Nitro::CodeFragment* brackets, ::Nitro::CompiledMethod* parentBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompilationServices::CompileParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "CompilationServices", "CompileParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brackets), ::il2cpp_utils::ExtractType(parentBlock)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Nitro::CompiledFragment*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, brackets, parentBlock);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CompiledClass
#include "Nitro/CompiledClass.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroCode
#include "Nitro/NitroCode.hpp"
// Including type: System.Reflection.Emit.TypeBuilder
#include "System/Reflection/Emit/TypeBuilder.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: Nitro.MethodOverloads
#include "Nitro/MethodOverloads.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type BaseType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::CompiledClass::dyn_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_BaseType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BaseType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type compiledType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::CompiledClass::dyn_compiledType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_compiledType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compiledType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.NitroCode Script
[[deprecated("Use field access instead!")]] ::Nitro::NitroCode*& Nitro::CompiledClass::dyn_Script() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_Script");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Script"))->offset;
  return *reinterpret_cast<::Nitro::NitroCode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsPublic
[[deprecated("Use field access instead!")]] bool& Nitro::CompiledClass::dyn_IsPublic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_IsPublic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsPublic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 AnonymousCount
[[deprecated("Use field access instead!")]] int& Nitro::CompiledClass::dyn_AnonymousCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_AnonymousCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AnonymousCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.TypeBuilder Builder
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::TypeBuilder*& Nitro::CompiledClass::dyn_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_Builder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Builder"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::TypeBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CodeFragment ClassFragment
[[deprecated("Use field access instead!")]] ::Nitro::CodeFragment*& Nitro::CompiledClass::dyn_ClassFragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_ClassFragment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ClassFragment"))->offset;
  return *reinterpret_cast<::Nitro::CodeFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,System.Reflection.FieldInfo> Fields
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Reflection::FieldInfo*>*& Nitro::CompiledClass::dyn_Fields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_Fields");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Fields"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::System::Reflection::FieldInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,Nitro.MethodOverloads> Methods
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::MethodOverloads*>*& Nitro::CompiledClass::dyn_Methods() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::dyn_Methods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Methods"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::MethodOverloads*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CompiledClass.StartType
void Nitro::CompiledClass::StartType(::StringW name, ::Nitro::NitroCode* script, ::System::Type* baseType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::StartType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(script), ::il2cpp_utils::ExtractType(baseType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name, script, baseType);
}
// Autogenerated method: Nitro.CompiledClass.GetAsType
::System::Type* Nitro::CompiledClass::GetAsType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GetAsType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAsType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledClass.Compile
void Nitro::CompiledClass::Compile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::Compile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledClass.MakeOrFind
::Nitro::MethodOverloads* Nitro::CompiledClass::MakeOrFind(::StringW name, ::System::Type* returnType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::MakeOrFind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeOrFind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(returnType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::MethodOverloads*, false>(this, ___internal__method, name, returnType);
}
// Autogenerated method: Nitro.CompiledClass.ContainsMethod
bool Nitro::CompiledClass::ContainsMethod(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::ContainsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledClass.ContainsField
bool Nitro::CompiledClass::ContainsField(::StringW field) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::ContainsField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(field)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, field);
}
// Autogenerated method: Nitro.CompiledClass.MethodReturnType
::System::Type* Nitro::CompiledClass::MethodReturnType(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::MethodReturnType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MethodReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledClass.FindMethodOverload
::System::Reflection::MethodInfo* Nitro::CompiledClass::FindMethodOverload(::StringW name, ::ArrayW<::Nitro::CompiledFragment*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::FindMethodOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMethodOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(arguments)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, name, arguments);
}
// Autogenerated method: Nitro.CompiledClass.FindMethodOverload
::System::Reflection::MethodInfo* Nitro::CompiledClass::FindMethodOverload(::StringW name, ::ArrayW<::System::Type*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::FindMethodOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMethodOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(arguments)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, name, arguments);
}
// Autogenerated method: Nitro.CompiledClass.FindMethodSet
::Nitro::MethodOverloads* Nitro::CompiledClass::FindMethodSet(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::FindMethodSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMethodSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::MethodOverloads*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledClass.GetProperty
::System::Reflection::PropertyInfo* Nitro::CompiledClass::GetProperty(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GetProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::PropertyInfo*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledClass.GetField
::System::Reflection::FieldInfo* Nitro::CompiledClass::GetField(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GetField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::FieldInfo*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledClass.FindOperations
void Nitro::CompiledClass::FindOperations(::Nitro::CodeFragment* fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::FindOperations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOperations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fragment);
}
// Autogenerated method: Nitro.CompiledClass.GloballyScope
void Nitro::CompiledClass::GloballyScope(::Nitro::CodeFragment* fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GloballyScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GloballyScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fragment);
}
// Autogenerated method: Nitro.CompiledClass.DefineField
::System::Reflection::FieldInfo* Nitro::CompiledClass::DefineField(::StringW name, bool isPublic, ::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::DefineField");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledClass*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::FieldInfo*, false>(this, ___internal__method, name, isPublic, type);
}
// Autogenerated method: Nitro.CompiledClass.GetStartMethod
::Nitro::CompiledMethod* Nitro::CompiledClass::GetStartMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GetStartMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledMethod*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledClass.GetInit
::Nitro::CompiledMethod* Nitro::CompiledClass::GetInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::GetInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledMethod*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledClass.FindMethods
void Nitro::CompiledClass::FindMethods(::Nitro::CodeFragment* fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::FindMethods");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fragment);
}
// Autogenerated method: Nitro.CompiledClass.AddFoundMethod
::Nitro::CodeFragment* Nitro::CompiledClass::AddFoundMethod(::Nitro::CodeFragment* fragment, ::Nitro::CodeFragment* body, ::StringW name, bool anonymous, ::Nitro::BracketFragment* parameters, ::Nitro::TypeFragment* returnType, bool isPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledClass::AddFoundMethod");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledClass*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CodeFragment*, false>(this, ___internal__method, fragment, body, name, anonymous, parameters, returnType, isPublic);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Object Value
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Nitro::CompiledFragment::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CompiledFragment.ActiveValue
::Il2CppObject* Nitro::CompiledFragment::ActiveValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::ActiveValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActiveValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledFragment.IsConstant
bool Nitro::CompiledFragment::IsConstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::IsConstant");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledFragment.IsLogical
bool Nitro::CompiledFragment::IsLogical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::IsLogical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsLogical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledFragment.OutputType
::System::Type* Nitro::CompiledFragment::OutputType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::OutputType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OutputType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledFragment.OutputType
::System::Type* Nitro::CompiledFragment::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.CompiledFragment.OutputIL
void Nitro::CompiledFragment::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.CompiledFragment.EmitValue
void Nitro::CompiledFragment::EmitValue(::System::Type* type, ::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::EmitValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(into)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type, into);
}
// Autogenerated method: Nitro.CompiledFragment.get_EmitsAddress
bool Nitro::CompiledFragment::get_EmitsAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::get_EmitsAddress");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledFragment.Compile
::Nitro::CompiledFragment* Nitro::CompiledFragment::Compile(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledFragment::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(this, ___internal__method, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroCode
#include "Nitro/NitroCode.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.CompiledClass
#include "Nitro/CompiledClass.hpp"
// Including type: System.Reflection.Emit.MethodBuilder
#include "System/Reflection/Emit/MethodBuilder.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Emit.LocalBuilder
#include "System/Reflection/Emit/LocalBuilder.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Nitro.BreakPoint
#include "Nitro/BreakPoint.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Nitro.LocalVariable
#include "Nitro/LocalVariable.hpp"
// Including type: Nitro.ParameterVariable
#include "Nitro/ParameterVariable.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: Nitro.Variable
#include "Nitro/Variable.hpp"
// Including type: Nitro.VariableType
#include "Nitro/VariableType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Nitro::CompiledMethod::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CurrentLine
[[deprecated("Use field access instead!")]] int& Nitro::CompiledMethod::dyn_CurrentLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_CurrentLine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CurrentLine"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.NitroCode Script
[[deprecated("Use field access instead!")]] ::Nitro::NitroCode*& Nitro::CompiledMethod::dyn_Script() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_Script");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Script"))->offset;
  return *reinterpret_cast<::Nitro::NitroCode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.NitroIL ILStream
[[deprecated("Use field access instead!")]] ::Nitro::NitroIL*& Nitro::CompiledMethod::dyn_ILStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ILStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ILStream"))->offset;
  return *reinterpret_cast<::Nitro::NitroIL**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.Label EndOfMethod
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::Label& Nitro::CompiledMethod::dyn_EndOfMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_EndOfMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EndOfMethod"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::Label*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean GloballyScoped
[[deprecated("Use field access instead!")]] bool& Nitro::CompiledMethod::dyn_GloballyScoped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_GloballyScoped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GloballyScoped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledClass Parent
[[deprecated("Use field access instead!")]] ::Nitro::CompiledClass*& Nitro::CompiledMethod::dyn_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_Parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parent"))->offset;
  return *reinterpret_cast<::Nitro::CompiledClass**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ParametersLoaded
[[deprecated("Use field access instead!")]] bool& Nitro::CompiledMethod::dyn_ParametersLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ParametersLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParametersLoaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.MethodBuilder Builder
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::MethodBuilder*& Nitro::CompiledMethod::dyn_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_Builder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Builder"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::MethodBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type[] ParameterTypes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& Nitro::CompiledMethod::dyn_ParameterTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ParameterTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParameterTypes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.LocalBuilder ReturnBay
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::LocalBuilder*& Nitro::CompiledMethod::dyn_ReturnBay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ReturnBay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReturnBay"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::LocalBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment CodeBlock
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::CompiledMethod::dyn_CodeBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_CodeBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CodeBlock"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment ParameterBlock
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::CompiledMethod::dyn_ParameterBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ParameterBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParameterBlock"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] DefaultParameterValues
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::CompiledMethod::dyn_DefaultParameterValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_DefaultParameterValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultParameterValues"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Nitro.BreakPoint> BreakPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::BreakPoint*>*& Nitro::CompiledMethod::dyn_BreakPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_BreakPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BreakPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::BreakPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,Nitro.LocalVariable> LocalSet
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::LocalVariable*>*& Nitro::CompiledMethod::dyn_LocalSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_LocalSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LocalSet"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::LocalVariable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,Nitro.ParameterVariable> ParameterSet
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::ParameterVariable*>*& Nitro::CompiledMethod::dyn_ParameterSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::dyn_ParameterSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParameterSet"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::ParameterVariable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CompiledMethod.AddBreakPoint
void Nitro::CompiledMethod::AddBreakPoint(::Nitro::BreakPoint* bp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::AddBreakPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBreakPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bp);
}
// Autogenerated method: Nitro.CompiledMethod.PopBreakPoint
void Nitro::CompiledMethod::PopBreakPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::PopBreakPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBreakPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.Break
bool Nitro::CompiledMethod::Break(::Nitro::NitroIL* into, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::Break");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Break", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(into), ::il2cpp_utils::ExtractType(depth)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into, depth);
}
// Autogenerated method: Nitro.CompiledMethod.Continue
bool Nitro::CompiledMethod::Continue(::Nitro::NitroIL* into, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::Continue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Continue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(into), ::il2cpp_utils::ExtractType(depth)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into, depth);
}
// Autogenerated method: Nitro.CompiledMethod.Done
void Nitro::CompiledMethod::Done() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::Done");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Done", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.Error
void Nitro::CompiledMethod::Error(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: Nitro.CompiledMethod.ReturnType
::System::Type* Nitro::CompiledMethod::ReturnType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::ReturnType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.getMethodInfo
::System::Reflection::MethodInfo* Nitro::CompiledMethod::getMethodInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::getMethodInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "getMethodInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.GetParameter
::Nitro::ParameterVariable* Nitro::CompiledMethod::GetParameter(::StringW variableName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetParameter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(variableName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::ParameterVariable*, false>(this, ___internal__method, variableName);
}
// Autogenerated method: Nitro.CompiledMethod.GetLocal
::Nitro::LocalVariable* Nitro::CompiledMethod::GetLocal(::StringW variableName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(variableName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::LocalVariable*, false>(this, ___internal__method, variableName);
}
// Autogenerated method: Nitro.CompiledMethod.GetLocal
::Nitro::LocalVariable* Nitro::CompiledMethod::GetLocal(::StringW variableName, bool create, ::System::Type* createType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(variableName), ::il2cpp_utils::ExtractType(create), ::il2cpp_utils::ExtractType(createType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::LocalVariable*, false>(this, ___internal__method, variableName, create, createType);
}
// Autogenerated method: Nitro.CompiledMethod.GetVariable
::Nitro::Variable* Nitro::CompiledMethod::GetVariable(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetVariable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVariable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Variable*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.CompiledMethod.GetVariable
::Nitro::Variable* Nitro::CompiledMethod::GetVariable(::StringW name, bool create, ::System::Type* createType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetVariable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVariable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(create), ::il2cpp_utils::ExtractType(createType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Variable*, false>(this, ___internal__method, name, create, createType);
}
// Autogenerated method: Nitro.CompiledMethod.GetVariable
::Nitro::Variable* Nitro::CompiledMethod::GetVariable(::StringW name, ::Nitro::VariableType type, bool create, ::System::Type* createType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::GetVariable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVariable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(create), ::il2cpp_utils::ExtractType(createType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Variable*, false>(this, ___internal__method, name, type, create, createType);
}
// Autogenerated method: Nitro.CompiledMethod.ParametersOk
void Nitro::CompiledMethod::ParametersOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::ParametersOk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParametersOk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.ParseParameters
void Nitro::CompiledMethod::ParseParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::ParseParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParseParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.CompiledMethod.ApplyParameters
void Nitro::CompiledMethod::ApplyParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CompiledMethod::ApplyParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.DynamicMethodCompiler
#include "Nitro/DynamicMethodCompiler.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.DynamicMethodCompiler.TypeFor
::System::Type* Nitro::DynamicMethodCompiler::TypeFor(::System::Type* methodReturnType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethodCompiler::TypeFor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "DynamicMethodCompiler", "TypeFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodReturnType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, methodReturnType);
}
// Autogenerated method: Nitro.DynamicMethodCompiler.Compile
::Nitro::CompiledFragment* Nitro::DynamicMethodCompiler::Compile(::Nitro::CompiledMethod* function, ::StringW methodName, ::System::Type* methodReturnType, ::Nitro::CompiledFragment* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DynamicMethodCompiler::Compile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "DynamicMethodCompiler", "Compile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function), ::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(methodReturnType), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function, methodName, methodReturnType, target);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Handler
#include "Nitro/Handler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Stop
::Nitro::Handler Nitro::Handler::_get_Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Stop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Stop"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Stop
void Nitro::Handler::_set_Stop(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Stop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Stop", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Brackets
::Nitro::Handler Nitro::Handler::_get_Brackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Brackets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Brackets"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Brackets
void Nitro::Handler::_set_Brackets(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Brackets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Brackets", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler String
::Nitro::Handler Nitro::Handler::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "String"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler String
void Nitro::Handler::_set_String(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "String", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Type
::Nitro::Handler Nitro::Handler::_get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Type");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Type"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Type
void Nitro::Handler::_set_Type(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Type");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Type", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Operator
::Nitro::Handler Nitro::Handler::_get_Operator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Operator");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Operator"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Operator
void Nitro::Handler::_set_Operator(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Operator");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Operator", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Number
::Nitro::Handler Nitro::Handler::_get_Number() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Number");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Number"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Number
void Nitro::Handler::_set_Number(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Number");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Number", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Variable
::Nitro::Handler Nitro::Handler::_get_Variable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Variable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Variable"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Variable
void Nitro::Handler::_set_Variable(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Variable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Variable", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.Handler Property
::Nitro::Handler Nitro::Handler::_get_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_get_Property");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::Handler>("Nitro", "Handler", "Property"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.Handler Property
void Nitro::Handler::_set_Property(::Nitro::Handler value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::_set_Property");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Handler", "Property", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Nitro::Handler::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handler::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Handlers
#include "Nitro/Handlers.hpp"
// Including type: Nitro.Handler
#include "Nitro/Handler.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
// Including type: Nitro.CodeLexer
#include "Nitro/CodeLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.Handlers.Find
::Nitro::Handler Nitro::Handlers::Find(::Il2CppChar peek) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handlers::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Handlers", "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peek)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Handler, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, peek);
}
// Autogenerated method: Nitro.Handlers.Handle
::Nitro::CodeFragment* Nitro::Handlers::Handle(::Nitro::Handler handle, ::Nitro::CodeLexer* sr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Handlers::Handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Handlers", "Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(sr)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CodeFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle, sr);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.KeyWords
#include "Nitro/KeyWords.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.VariableFragment
#include "Nitro/VariableFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.KeyWords.Compile
::Nitro::CompiledFragment* Nitro::KeyWords::Compile(::Nitro::VariableFragment* kwd, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::KeyWords::Compile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "KeyWords", "Compile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(kwd), ::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, kwd, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.MethodOverloads
#include "Nitro/MethodOverloads.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ReturnType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::MethodOverloads::dyn_ReturnType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::dyn_ReturnType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReturnType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Nitro.CompiledMethod> Methods
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::CompiledMethod*>*& Nitro::MethodOverloads::dyn_Methods() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::dyn_Methods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Methods"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::CompiledMethod*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.MethodOverloads.AddMethod
void Nitro::MethodOverloads::AddMethod(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::AddMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.MethodOverloads.ParametersOk
void Nitro::MethodOverloads::ParametersOk(::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::ParametersOk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParametersOk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method);
}
// Autogenerated method: Nitro.MethodOverloads.GetOverload
::System::Reflection::MethodInfo* Nitro::MethodOverloads::GetOverload(::ArrayW<::System::Type*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arguments)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, arguments);
}
// Autogenerated method: Nitro.MethodOverloads.CompileParameters
void Nitro::MethodOverloads::CompileParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::CompileParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOverloads.CompileBody
void Nitro::MethodOverloads::CompileBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::CompileBody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileBody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOverloads.NewBaseCall
bool Nitro::MethodOverloads::NewBaseCall(::Nitro::CodeFragment* fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOverloads::NewBaseCall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewBaseCall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fragment);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Modifiers
#include "Nitro/Modifiers.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.Modifiers.Check
bool Nitro::Modifiers::Check(::Nitro::CodeFragment* fragment, ::StringW modifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Modifiers::Check");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Modifiers", "Check", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment), ::il2cpp_utils::ExtractType(modifier)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fragment, modifier);
}
// Autogenerated method: Nitro.Modifiers.Handle
void Nitro::Modifiers::Handle(::Nitro::CodeFragment* fragment, ByRef<bool> isPublic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Modifiers::Handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Modifiers", "Handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fragment, byref(isPublic));
}
// Autogenerated method: Nitro.Modifiers.Skip
::Nitro::CodeFragment* Nitro::Modifiers::Skip(::Nitro::CodeFragment* fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Modifiers::Skip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Modifiers", "Skip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fragment)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CodeFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fragment);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.AotFileEvent
#include "Nitro/AotFileEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.AotFileEvent.Invoke
void Nitro::AotFileEvent::Invoke(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AotFileEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::AotFileEvent*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: Nitro.AotFileEvent.BeginInvoke
::System::IAsyncResult* Nitro::AotFileEvent::BeginInvoke(::StringW path, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AotFileEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::AotFileEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, path, callback, object);
}
// Autogenerated method: Nitro.AotFileEvent.EndInvoke
void Nitro::AotFileEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AotFileEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::AotFileEvent*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.NitroCode
#include "Nitro/NitroCode.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Emit.ModuleBuilder
#include "System/Reflection/Emit/ModuleBuilder.hpp"
// Including type: Nitro.CompiledClass
#include "Nitro/CompiledClass.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Nitro.CodeReference
#include "Nitro/CodeReference.hpp"
// Including type: Nitro.NitroDomainManager
#include "Nitro/NitroDomainManager.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Nitro.AotFileEvent
#include "Nitro/AotFileEvent.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean AotMode
bool Nitro::NitroCode::_get_AotMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_get_AotMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Nitro", "NitroCode", "AotMode"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean AotMode
void Nitro::NitroCode::_set_AotMode(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_set_AotMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NitroCode", "AotMode", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean Started
bool Nitro::NitroCode::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_get_Started");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Nitro", "NitroCode", "Started"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean Started
void Nitro::NitroCode::_set_Started(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_set_Started");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NitroCode", "Started", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ModuleCounter
int Nitro::NitroCode::_get_ModuleCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_get_ModuleCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Nitro", "NitroCode", "ModuleCounter"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ModuleCounter
void Nitro::NitroCode::_set_ModuleCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_set_ModuleCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NitroCode", "ModuleCounter", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.AotFileEvent OnAotFileExists
::Nitro::AotFileEvent* Nitro::NitroCode::_get_OnAotFileExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_get_OnAotFileExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::AotFileEvent*>("Nitro", "NitroCode", "OnAotFileExists"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.AotFileEvent OnAotFileExists
void Nitro::NitroCode::_set_OnAotFileExists(::Nitro::AotFileEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::_set_OnAotFileExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NitroCode", "OnAotFileExists", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String Code
[[deprecated("Use field access instead!")]] ::StringW& Nitro::NitroCode::dyn_Code() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_Code");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Code"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type CompiledType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::NitroCode::dyn_CompiledType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_CompiledType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CompiledType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.ModuleBuilder Builder
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::ModuleBuilder*& Nitro::NitroCode::dyn_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_Builder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Builder"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::ModuleBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Nitro.CompiledClass BaseClass
[[deprecated("Use field access instead!")]] ::Nitro::CompiledClass*& Nitro::NitroCode::dyn_BaseClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_BaseClass");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BaseClass"))->offset;
  return *reinterpret_cast<::Nitro::CompiledClass**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Nitro.CodeReference> References
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::CodeReference*>*& Nitro::NitroCode::dyn_References() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_References");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "References"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::CodeReference*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Nitro.NitroDomainManager ScriptDomainManager
[[deprecated("Use field access instead!")]] ::Nitro::NitroDomainManager*& Nitro::NitroCode::dyn_ScriptDomainManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_ScriptDomainManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScriptDomainManager"))->offset;
  return *reinterpret_cast<::Nitro::NitroDomainManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,Nitro.CompiledClass> Types
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CompiledClass*>*& Nitro::NitroCode::dyn_Types() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::dyn_Types");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Types"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::CompiledClass*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.NitroCode.Setup
void Nitro::NitroCode::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NitroCode", "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.NitroCode.Compile
void Nitro::NitroCode::Compile(::StringW code, ::System::Type* baseType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::Compile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(baseType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, baseType);
}
// Autogenerated method: Nitro.NitroCode.Compile
void Nitro::NitroCode::Compile(::StringW code, ::System::Type* baseType, ::StringW aotFile, ::StringW aotAssemblyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::Compile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(baseType), ::il2cpp_utils::ExtractType(aotFile), ::il2cpp_utils::ExtractType(aotAssemblyName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, baseType, aotFile, aotAssemblyName);
}
// Autogenerated method: Nitro.NitroCode.AddReference
void Nitro::NitroCode::AddReference(::Nitro::CodeFragment* usingName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::AddReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(usingName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, usingName);
}
// Autogenerated method: Nitro.NitroCode.ParseReference
::StringW Nitro::NitroCode::ParseReference(::Nitro::CodeFragment* usingName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::ParseReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParseReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(usingName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, usingName);
}
// Autogenerated method: Nitro.NitroCode.FindClasses
void Nitro::NitroCode::FindClasses(::Nitro::CodeFragment* frag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::FindClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frag)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frag);
}
// Autogenerated method: Nitro.NitroCode.AllowUse
bool Nitro::NitroCode::AllowUse(::System::Type* ofType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::AllowUse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllowUse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ofType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ofType);
}
// Autogenerated method: Nitro.NitroCode.ContainsMethod
bool Nitro::NitroCode::ContainsMethod(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::ContainsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroCode.ContainsField
bool Nitro::NitroCode::ContainsField(::StringW field) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::ContainsField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(field)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, field);
}
// Autogenerated method: Nitro.NitroCode.GetType
::System::Type* Nitro::NitroCode::GetType(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::GetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroCode.GetTypes
::System::Collections::Generic::List_1<::System::Type*>* Nitro::NitroCode::GetTypes(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::GetTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Type*>*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroCode.GetClass
::Nitro::CompiledClass* Nitro::NitroCode::GetClass(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::GetClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledClass*, false>(this, ___internal__method, type);
}
// Autogenerated method: Nitro.NitroCode.get_MainClass
::Nitro::CompiledClass* Nitro::NitroCode::get_MainClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::get_MainClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MainClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledClass*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroCode.GetClass
::Nitro::CompiledClass* Nitro::NitroCode::GetClass(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::GetClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledClass*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroCode.Instance
::Il2CppObject* Nitro::NitroCode::Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroCode.get_OutputType
::System::Type* Nitro::NitroCode::get_OutputType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::get_OutputType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutputType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroCode..cctor
void Nitro::NitroCode::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroCode::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NitroCode", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: System.Reflection.Emit.ILGenerator
#include "System/Reflection/Emit/ILGenerator.hpp"
// Including type: System.Reflection.Emit.Label
#include "System/Reflection/Emit/Label.hpp"
// Including type: System.Reflection.Emit.OpCode
#include "System/Reflection/Emit/OpCode.hpp"
// Including type: System.Reflection.Emit.LocalBuilder
#include "System/Reflection/Emit/LocalBuilder.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 ILLine
[[deprecated("Use field access instead!")]] int& Nitro::NitroIL::dyn_ILLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::dyn_ILLine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ILLine"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String DebugOutput
[[deprecated("Use field access instead!")]] ::StringW& Nitro::NitroIL::dyn_DebugOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::dyn_DebugOutput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DebugOutput"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.ILGenerator Generator
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::ILGenerator*& Nitro::NitroIL::dyn_Generator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::dyn_Generator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Generator"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::ILGenerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.NitroIL.Output
void Nitro::NitroIL::Output(::StringW line) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Output");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Output", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(line)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, line);
}
// Autogenerated method: Nitro.NitroIL.DefineLabel
::System::Reflection::Emit::Label Nitro::NitroIL::DefineLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::DefineLabel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefineLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Emit::Label, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroIL.MarkLabel
void Nitro::NitroIL::MarkLabel(::System::Reflection::Emit::Label label) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::MarkLabel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(label)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, label);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::Emit::LocalBuilder* builder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(builder)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, builder);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::ConstructorInfo* constructor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(constructor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, constructor);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::MethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, method);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::FieldInfo* field) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(field)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, field);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, int8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, value);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, type);
}
// Autogenerated method: Nitro.NitroIL.Emit
void Nitro::NitroIL::Emit(::System::Reflection::Emit::OpCode opcode, ::System::Reflection::Emit::Label label) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(opcode), ::il2cpp_utils::ExtractType(label)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, opcode, label);
}
// Autogenerated method: Nitro.NitroIL.DeclareLocal
::System::Reflection::Emit::LocalBuilder* Nitro::NitroIL::DeclareLocal(::System::Type* localType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::DeclareLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeclareLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Emit::LocalBuilder*, false>(this, ___internal__method, localType);
}
// Autogenerated method: Nitro.NitroIL.Done
void Nitro::NitroIL::Done(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroIL::Done");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Done", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 LineNumber
[[deprecated("Use field access instead!")]] int& Nitro::Operation::dyn_LineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::dyn_LineNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledMethod Method
[[deprecated("Use field access instead!")]] ::Nitro::CompiledMethod*& Nitro::Operation::dyn_Method() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::dyn_Method");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Method"))->offset;
  return *reinterpret_cast<::Nitro::CompiledMethod**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment Input0
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::Operation::dyn_Input0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::dyn_Input0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Input0"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment Input1
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::Operation::dyn_Input1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::dyn_Input1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Input1"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.Operation.get_RequiresStoring
bool Nitro::Operation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.Operation.IsSet
bool Nitro::Operation::IsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::IsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.Operation.EnforceType
::System::Type* Nitro::Operation::EnforceType(ByRef<::Nitro::CompiledFragment*> input, ::System::Type* inputType, ::System::Type* newType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::EnforceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnforceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(inputType), ::il2cpp_utils::ExtractType(newType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(input), inputType, newType);
}
// Autogenerated method: Nitro.Operation.Numerical
::System::Type* Nitro::Operation::Numerical(ByRef<::Nitro::CompiledFragment*> input, ::System::Type* inputType, ::System::Type* defaultType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::Numerical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Numerical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(inputType), ::il2cpp_utils::ExtractType(defaultType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(input), inputType, defaultType);
}
// Autogenerated method: Nitro.Operation.Numerical
::System::Type* Nitro::Operation::Numerical(::System::Type* typeA, ::System::Type* typeB, ::StringW overloadMethod, ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::Numerical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Numerical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeA), ::il2cpp_utils::ExtractType(typeB), ::il2cpp_utils::ExtractType(overloadMethod), ::il2cpp_utils::ExtractType(newOperation)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, typeA, typeB, overloadMethod, byref(newOperation));
}
// Autogenerated method: Nitro.Operation.MapNumerical
::System::Type* Nitro::Operation::MapNumerical(::System::Type* typeA, ::System::Type* typeB) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::MapNumerical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapNumerical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeA), ::il2cpp_utils::ExtractType(typeB)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, typeA, typeB);
}
// Autogenerated method: Nitro.Operation.FindOverload
::System::Type* Nitro::Operation::FindOverload(::StringW methodName, ::System::Type* typeA, ::System::Type* typeB, ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::FindOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(typeA), ::il2cpp_utils::ExtractType(typeB), ::il2cpp_utils::ExtractType(newOperation)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, methodName, typeA, typeB, byref(newOperation));
}
// Autogenerated method: Nitro.Operation.GetLineNumber
int Nitro::Operation::GetLineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::GetLineNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.Operation.IsConstant
bool Nitro::Operation::IsConstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operation::IsConstant");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.AddOperation
#include "Nitro/AddOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.AddOperation.OutputType
::System::Type* Nitro::AddOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.AddOperation.OutputIL
void Nitro::AddOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AddOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.AndOperation
#include "Nitro/AndOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.AndOperation.OutputType
::System::Type* Nitro::AndOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AndOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.AndOperation.OutputIL
void Nitro::AndOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::AndOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ArrayOperation
#include "Nitro/ArrayOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ArrayType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::ArrayOperation::dyn_ArrayType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::dyn_ArrayType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ArrayType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 DirectSize
[[deprecated("Use field access instead!")]] int& Nitro::ArrayOperation::dyn_DirectSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::dyn_DirectSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DirectSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment Size
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::ArrayOperation::dyn_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::dyn_Size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Size"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] DefaultValues
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::ArrayOperation::dyn_DefaultValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::dyn_DefaultValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultValues"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ArrayOperation.SetDefaults
void Nitro::ArrayOperation::SetDefaults(::ArrayW<::Nitro::CompiledFragment*> defaultValues) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::SetDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultValues)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, defaultValues);
}
// Autogenerated method: Nitro.ArrayOperation.OutputType
::System::Type* Nitro::ArrayOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.ArrayOperation.OutputIL
void Nitro::ArrayOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ArrayOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BaseOperation
#include "Nitro/BaseOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.BaseOperation.OutputType
::System::Type* Nitro::BaseOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BaseOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.BaseOperation.OutputIL
void Nitro::BaseOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BaseOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BitwiseXOrOperation
#include "Nitro/BitwiseXOrOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.BitwiseXOrOperation.OutputType
::System::Type* Nitro::BitwiseXOrOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BitwiseXOrOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.BitwiseXOrOperation.OutputIL
void Nitro::BitwiseXOrOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BitwiseXOrOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BoxOperation
#include "Nitro/BoxOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type FromType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::BoxOperation::dyn_FromType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BoxOperation::dyn_FromType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FromType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment ToBox
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::BoxOperation::dyn_ToBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BoxOperation::dyn_ToBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToBox"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.BoxOperation.OutputType
::System::Type* Nitro::BoxOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BoxOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.BoxOperation.OutputIL
void Nitro::BoxOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BoxOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.BreakOperation
#include "Nitro/BreakOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Depth
[[deprecated("Use field access instead!")]] int& Nitro::BreakOperation::dyn_Depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakOperation::dyn_Depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Depth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.BreakOperation.get_RequiresStoring
bool Nitro::BreakOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.BreakOperation.OutputType
::System::Type* Nitro::BreakOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.BreakOperation.OutputIL
void Nitro::BreakOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::BreakOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.CastOperation
#include "Nitro/CastOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ToType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::CastOperation::dyn_ToType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CastOperation::dyn_ToType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment ToCast
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::CastOperation::dyn_ToCast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CastOperation::dyn_ToCast");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToCast"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.CastOperation.OutputType
::System::Type* Nitro::CastOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CastOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.CastOperation.OutputIL
void Nitro::CastOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::CastOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ConstructOperation
#include "Nitro/ConstructOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: Nitro.TypeFragment
#include "Nitro/TypeFragment.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ObjectType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::ConstructOperation::dyn_ObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::dyn_ObjectType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ObjectType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.ConstructorInfo Constructor
[[deprecated("Use field access instead!")]] ::System::Reflection::ConstructorInfo*& Nitro::ConstructOperation::dyn_Constructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::dyn_Constructor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Constructor"))->offset;
  return *reinterpret_cast<::System::Reflection::ConstructorInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] Parameters
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::ConstructOperation::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ConstructOperation.SetConstructor
void Nitro::ConstructOperation::SetConstructor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::SetConstructor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.ConstructOperation.OutputType
::System::Type* Nitro::ConstructOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ConstructOperation.OutputIL
void Nitro::ConstructOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ConstructOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ContinueOperation
#include "Nitro/ContinueOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Depth
[[deprecated("Use field access instead!")]] int& Nitro::ContinueOperation::dyn_Depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ContinueOperation::dyn_Depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Depth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ContinueOperation.get_RequiresStoring
bool Nitro::ContinueOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ContinueOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.ContinueOperation.OutputType
::System::Type* Nitro::ContinueOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ContinueOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ContinueOperation.OutputIL
void Nitro::ContinueOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ContinueOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.DelegateOperation
#include "Nitro/DelegateOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type DelegateType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::DelegateOperation::dyn_DelegateType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DelegateOperation::dyn_DelegateType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DelegateType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.MethodInfo ToDelegate
[[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& Nitro::DelegateOperation::dyn_ToDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DelegateOperation::dyn_ToDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToDelegate"))->offset;
  return *reinterpret_cast<::System::Reflection::MethodInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.DelegateOperation.OutputType
::System::Type* Nitro::DelegateOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DelegateOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.DelegateOperation.OutputIL
void Nitro::DelegateOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DelegateOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.DivideOperation
#include "Nitro/DivideOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.DivideOperation.OutputType
::System::Type* Nitro::DivideOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DivideOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.DivideOperation.OutputIL
void Nitro::DivideOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::DivideOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.EqualsOperation
#include "Nitro/EqualsOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.EqualsOperation.OutputType
::System::Type* Nitro::EqualsOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::EqualsOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.EqualsOperation.OutputIL
void Nitro::EqualsOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::EqualsOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ForOperation
#include "Nitro/ForOperation.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Body
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::ForOperation::dyn_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForOperation::dyn_Body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Body"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] Parameters
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::ForOperation::dyn_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForOperation::dyn_Parameters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parameters"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ForOperation.get_RequiresStoring
bool Nitro::ForOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.ForOperation.OutputType
::System::Type* Nitro::ForOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ForOperation.OutputIL
void Nitro::ForOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ForOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.GreaterThanOperation
#include "Nitro/GreaterThanOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.GreaterThanOperation.OutputType
::System::Type* Nitro::GreaterThanOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::GreaterThanOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.GreaterThanOperation.OutputIL
void Nitro::GreaterThanOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::GreaterThanOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.GreaterThanOrEqualOperation
#include "Nitro/GreaterThanOrEqualOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.GreaterThanOrEqualOperation.OutputType
::System::Type* Nitro::GreaterThanOrEqualOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::GreaterThanOrEqualOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.GreaterThanOrEqualOperation.OutputIL
void Nitro::GreaterThanOrEqualOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::GreaterThanOrEqualOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.IfOperation
#include "Nitro/IfOperation.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean AllRoutesReturn
[[deprecated("Use field access instead!")]] bool& Nitro::IfOperation::dyn_AllRoutesReturn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::dyn_AllRoutesReturn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AllRoutesReturn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment IfTrue
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::IfOperation::dyn_IfTrue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::dyn_IfTrue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IfTrue"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment IfFalse
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::IfOperation::dyn_IfFalse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::dyn_IfFalse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IfFalse"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] Conditions
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::IfOperation::dyn_Conditions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::dyn_Conditions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Conditions"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.IfOperation.get_RequiresStoring
bool Nitro::IfOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.IfOperation.OutputType
::System::Type* Nitro::IfOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.IfOperation.OutputIL
void Nitro::IfOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IfOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.IndexOperation
#include "Nitro/IndexOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ElementType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::IndexOperation::dyn_ElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::dyn_ElementType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ElementType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment Index
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::IndexOperation::dyn_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::dyn_Index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Index"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment AppliedTo
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::IndexOperation::dyn_AppliedTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::dyn_AppliedTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AppliedTo"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.IndexOperation.OutputTarget
bool Nitro::IndexOperation::OutputTarget(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::OutputTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::IndexOperation*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.IndexOperation.OutputSet
void Nitro::IndexOperation::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::IndexOperation*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.IndexOperation.OutputType
::System::Type* Nitro::IndexOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.IndexOperation.OutputIL
void Nitro::IndexOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::IndexOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.LessThanOperation
#include "Nitro/LessThanOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.LessThanOperation.OutputType
::System::Type* Nitro::LessThanOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LessThanOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.LessThanOperation.OutputIL
void Nitro::LessThanOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LessThanOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.LessThanOrEqualOperation
#include "Nitro/LessThanOrEqualOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.LessThanOrEqualOperation.OutputType
::System::Type* Nitro::LessThanOrEqualOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LessThanOrEqualOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.LessThanOrEqualOperation.OutputIL
void Nitro::LessThanOrEqualOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LessThanOrEqualOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.MethodOperation
#include "Nitro/MethodOperation.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Reflection.MethodInfo MethodToCall
[[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& Nitro::MethodOperation::dyn_MethodToCall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::dyn_MethodToCall");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MethodToCall"))->offset;
  return *reinterpret_cast<::System::Reflection::MethodInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment CalledOn
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::MethodOperation::dyn_CalledOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::dyn_CalledOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CalledOn"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment[] Arguments
[[deprecated("Use field access instead!")]] ::ArrayW<::Nitro::CompiledFragment*>& Nitro::MethodOperation::dyn_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::dyn_Arguments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Arguments"))->offset;
  return *reinterpret_cast<::ArrayW<::Nitro::CompiledFragment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.MethodOperation.GetMethodInfo
void Nitro::MethodOperation::GetMethodInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::GetMethodInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethodInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOperation.get_Name
::StringW Nitro::MethodOperation::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOperation.get_MethodName
::StringW Nitro::MethodOperation::get_MethodName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::get_MethodName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOperation.get_RequiresStoring
bool Nitro::MethodOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOperation.IsMemberAccessor
bool Nitro::MethodOperation::IsMemberAccessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::IsMemberAccessor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.MethodOperation.OutputType
::System::Type* Nitro::MethodOperation::OutputType(ByRef<::Nitro::CompiledFragment*> nv) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(nv));
}
// Autogenerated method: Nitro.MethodOperation.OutputIL
void Nitro::MethodOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MethodOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ModuloOperation
#include "Nitro/ModuloOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ModuloOperation.OutputType
::System::Type* Nitro::ModuloOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ModuloOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ModuloOperation.OutputIL
void Nitro::ModuloOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ModuloOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.MultiplyOperation
#include "Nitro/MultiplyOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.MultiplyOperation.OutputType
::System::Type* Nitro::MultiplyOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MultiplyOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.MultiplyOperation.OutputIL
void Nitro::MultiplyOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::MultiplyOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.NotEqualOperation
#include "Nitro/NotEqualOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.NotEqualOperation.OutputType
::System::Type* Nitro::NotEqualOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NotEqualOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.NotEqualOperation.OutputIL
void Nitro::NotEqualOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NotEqualOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OrOperation
#include "Nitro/OrOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OrOperation.OutputType
::System::Type* Nitro::OrOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OrOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.OrOperation.OutputIL
void Nitro::OrOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OrOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.PropertyOperation
#include "Nitro/PropertyOperation.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Nitro::PropertyOperation::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsStatic
[[deprecated("Use field access instead!")]] bool& Nitro::PropertyOperation::dyn_IsStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_IsStatic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsStatic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.FieldInfo Field
[[deprecated("Use field access instead!")]] ::System::Reflection::FieldInfo*& Nitro::PropertyOperation::dyn_Field() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_Field");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Field"))->offset;
  return *reinterpret_cast<::System::Reflection::FieldInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.CompiledFragment Of
[[deprecated("Use field access instead!")]] ::Nitro::CompiledFragment*& Nitro::PropertyOperation::dyn_Of() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_Of");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Of"))->offset;
  return *reinterpret_cast<::Nitro::CompiledFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.PropertyInfo Property
[[deprecated("Use field access instead!")]] ::System::Reflection::PropertyInfo*& Nitro::PropertyOperation::dyn_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_Property");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Property"))->offset;
  return *reinterpret_cast<::System::Reflection::PropertyInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type MethodReturnType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::PropertyOperation::dyn_MethodReturnType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_MethodReturnType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MethodReturnType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Reflection.MethodInfo> Methods
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>*& Nitro::PropertyOperation::dyn_Methods() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::dyn_Methods");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Methods"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.PropertyOperation.OfType
::System::Type* Nitro::PropertyOperation::OfType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::OfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.PropertyOperation.FindExtensionMethod
::System::Reflection::MethodInfo* Nitro::PropertyOperation::FindExtensionMethod(::System::Type* type, ::StringW alternative) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::FindExtensionMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindExtensionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(alternative)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, type, alternative);
}
// Autogenerated method: Nitro.PropertyOperation.Equals
bool Nitro::PropertyOperation::Equals(::Nitro::PropertyOperation* prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, prop);
}
// Autogenerated method: Nitro.PropertyOperation.GetOverload
::System::Reflection::MethodInfo* Nitro::PropertyOperation::GetOverload(::ArrayW<::Nitro::CompiledFragment*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arguments)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, arguments);
}
// Autogenerated method: Nitro.PropertyOperation.GetOverload
::System::Reflection::MethodInfo* Nitro::PropertyOperation::GetOverload(::ArrayW<::System::Type*> paramTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(paramTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, paramTypes);
}
// Autogenerated method: Nitro.PropertyOperation.OutputTarget
bool Nitro::PropertyOperation::OutputTarget(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::OutputTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::PropertyOperation*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.PropertyOperation.OutputSet
void Nitro::PropertyOperation::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::PropertyOperation*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.PropertyOperation.IsMemberAccessor
bool Nitro::PropertyOperation::IsMemberAccessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::IsMemberAccessor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.PropertyOperation.OutputType
::System::Type* Nitro::PropertyOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.PropertyOperation.OutputIL
void Nitro::PropertyOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.PropertyOperation.get_EmitsAddress
bool Nitro::PropertyOperation::get_EmitsAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::get_EmitsAddress");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.PropertyOperation.ToString
::StringW Nitro::PropertyOperation::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::PropertyOperation::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CodeFragment*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ReturnOperation
#include "Nitro/ReturnOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ReturnOperation.get_RequiresStoring
bool Nitro::ReturnOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ReturnOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.ReturnOperation.OutputType
::System::Type* Nitro::ReturnOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ReturnOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ReturnOperation.OutputIL
void Nitro::ReturnOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ReturnOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.SetOperation
#include "Nitro/SetOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.PropertyOperation
#include "Nitro/PropertyOperation.hpp"
// Including type: Nitro.Variable
#include "Nitro/Variable.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean Output
[[deprecated("Use field access instead!")]] bool& Nitro::SetOperation::dyn_Output() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::dyn_Output");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Output"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.SetOperation.LookFor
bool Nitro::SetOperation::LookFor(::Nitro::CompiledFragment* cfrag, ::Nitro::PropertyOperation* findingProp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::LookFor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cfrag), ::il2cpp_utils::ExtractType(findingProp)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cfrag, findingProp);
}
// Autogenerated method: Nitro.SetOperation.LookFor
bool Nitro::SetOperation::LookFor(::Nitro::CompiledFragment* cfrag, ::Nitro::Variable* findingVar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::LookFor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cfrag), ::il2cpp_utils::ExtractType(findingVar)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cfrag, findingVar);
}
// Autogenerated method: Nitro.SetOperation.SelfReferencing
bool Nitro::SetOperation::SelfReferencing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::SelfReferencing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelfReferencing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.SetOperation.get_RequiresStoring
bool Nitro::SetOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.SetOperation.OutputType
::System::Type* Nitro::SetOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.SetOperation.OutputIL
void Nitro::SetOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SetOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ShiftLeftOperation
#include "Nitro/ShiftLeftOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ShiftLeftOperation.OutputType
::System::Type* Nitro::ShiftLeftOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ShiftLeftOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ShiftLeftOperation.OutputIL
void Nitro::ShiftLeftOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ShiftLeftOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ShiftRightOperation
#include "Nitro/ShiftRightOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ShiftRightOperation.OutputType
::System::Type* Nitro::ShiftRightOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ShiftRightOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.ShiftRightOperation.OutputIL
void Nitro::ShiftRightOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ShiftRightOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.SubtractOperation
#include "Nitro/SubtractOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.SubtractOperation.OutputType
::System::Type* Nitro::SubtractOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SubtractOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.SubtractOperation.OutputIL
void Nitro::SubtractOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SubtractOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.SwitchOperation
#include "Nitro/SwitchOperation.hpp"
// Including type: Nitro.Variable
#include "Nitro/Variable.hpp"
// Including type: Nitro.BracketFragment
#include "Nitro/BracketFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Nitro.Variable Switching
[[deprecated("Use field access instead!")]] ::Nitro::Variable*& Nitro::SwitchOperation::dyn_Switching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::dyn_Switching");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Switching"))->offset;
  return *reinterpret_cast<::Nitro::Variable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Nitro.BracketFragment Body
[[deprecated("Use field access instead!")]] ::Nitro::BracketFragment*& Nitro::SwitchOperation::dyn_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::dyn_Body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Body"))->offset;
  return *reinterpret_cast<::Nitro::BracketFragment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.SwitchOperation.get_RequiresStoring
bool Nitro::SwitchOperation::get_RequiresStoring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::get_RequiresStoring");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operation*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.SwitchOperation.OutputType
::System::Type* Nitro::SwitchOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.SwitchOperation.OutputIL
void Nitro::SwitchOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SwitchOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ThisOperation
#include "Nitro/ThisOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ThisOperation.OutputType
::System::Type* Nitro::ThisOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ThisOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.ThisOperation.OutputIL
void Nitro::ThisOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ThisOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.TypeofOperation
#include "Nitro/TypeofOperation.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.TypeofOperation.GetObjectType
::StringW Nitro::TypeofOperation::GetObjectType(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeofOperation::GetObjectType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeofOperation", "GetObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Nitro.TypeofOperation.OutputType
::System::Type* Nitro::TypeofOperation::OutputType(ByRef<::Nitro::CompiledFragment*> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeofOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(v));
}
// Autogenerated method: Nitro.TypeofOperation.OutputIL
void Nitro::TypeofOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeofOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.TypeOperation
#include "Nitro/TypeOperation.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type TypeObject
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::TypeOperation::dyn_TypeObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeOperation::dyn_TypeObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TypeObject"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.TypeOperation.OutputType
::System::Type* Nitro::TypeOperation::OutputType(ByRef<::Nitro::CompiledFragment*> newOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeOperation::OutputType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, byref(newOperation));
}
// Autogenerated method: Nitro.TypeOperation.OutputIL
void Nitro::TypeOperation::OutputIL(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeOperation::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::CompiledFragment*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Operator
#include "Nitro/Operator.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.Char,System.Int32> Starts
::System::Collections::Generic::Dictionary_2<::Il2CppChar, int>* Nitro::Operator::_get_Starts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::_get_Starts");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::Il2CppChar, int>*>("Nitro", "Operator", "Starts")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.Char,System.Int32> Starts
void Nitro::Operator::_set_Starts(::System::Collections::Generic::Dictionary_2<::Il2CppChar, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::_set_Starts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Operator", "Starts", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.Operator> FullOperators
::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::Operator*>* Nitro::Operator::_get_FullOperators() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::_get_FullOperators");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::Operator*>*>("Nitro", "Operator", "FullOperators")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Nitro.Operator> FullOperators
void Nitro::Operator::_set_FullOperators(::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::Operator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::_set_FullOperators");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "Operator", "FullOperators", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Nitro::Operator::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean LeftOnly
[[deprecated("Use field access instead!")]] bool& Nitro::Operator::dyn_LeftOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::dyn_LeftOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LeftOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RightOnly
[[deprecated("Use field access instead!")]] bool& Nitro::Operator::dyn_RightOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::dyn_RightOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RightOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Pattern
[[deprecated("Use field access instead!")]] ::StringW& Nitro::Operator::dyn_Pattern() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::dyn_Pattern");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Pattern"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean LeftAndRight
[[deprecated("Use field access instead!")]] bool& Nitro::Operator::dyn_LeftAndRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::dyn_LeftAndRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LeftAndRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.Operator.Add
void Nitro::Operator::Add(::Nitro::Operator* newOperator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Operator", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newOperator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, newOperator);
}
// Autogenerated method: Nitro.Operator.IsOperator
bool Nitro::Operator::IsOperator(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::IsOperator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Operator", "IsOperator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated method: Nitro.Operator.ToOperation
::Nitro::Operation* Nitro::Operator::ToOperation(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::ToOperation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated method: Nitro.Operator.Compile
::Nitro::Operation* Nitro::Operator::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated method: Nitro.Operator..cctor
void Nitro::Operator::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Operator::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Operator", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorAdd
#include "Nitro/OperatorAdd.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorAdd.Compile
::Nitro::Operation* Nitro::OperatorAdd::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorAdd::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorAddTo
#include "Nitro/OperatorAddTo.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorAddTo.Compile
::Nitro::Operation* Nitro::OperatorAddTo::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorAddTo::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorBitwiseAnd
#include "Nitro/OperatorBitwiseAnd.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorBitwiseAnd.Compile
::Nitro::Operation* Nitro::OperatorBitwiseAnd::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorBitwiseAnd::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorBitwiseOr
#include "Nitro/OperatorBitwiseOr.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorBitwiseOr.Compile
::Nitro::Operation* Nitro::OperatorBitwiseOr::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorBitwiseOr::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorBitwiseXOr
#include "Nitro/OperatorBitwiseXOr.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorBitwiseXOr.Compile
::Nitro::Operation* Nitro::OperatorBitwiseXOr::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorBitwiseXOr::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorDecrement
#include "Nitro/OperatorDecrement.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorDecrement.Compile
::Nitro::Operation* Nitro::OperatorDecrement::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorDecrement::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorDivide
#include "Nitro/OperatorDivide.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorDivide.Compile
::Nitro::Operation* Nitro::OperatorDivide::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorDivide::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorDivideInTo
#include "Nitro/OperatorDivideInTo.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorDivideInTo.Compile
::Nitro::Operation* Nitro::OperatorDivideInTo::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorDivideInTo::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorGreaterThan
#include "Nitro/OperatorGreaterThan.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorGreaterThan.Compile
::Nitro::Operation* Nitro::OperatorGreaterThan::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorGreaterThan::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorGreaterThanOrEql
#include "Nitro/OperatorGreaterThanOrEql.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorGreaterThanOrEql.Compile
::Nitro::Operation* Nitro::OperatorGreaterThanOrEql::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorGreaterThanOrEql::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorIncrement
#include "Nitro/OperatorIncrement.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorIncrement.Compile
::Nitro::Operation* Nitro::OperatorIncrement::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorIncrement::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLessThan
#include "Nitro/OperatorLessThan.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLessThan.Compile
::Nitro::Operation* Nitro::OperatorLessThan::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLessThan::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLessThanOrEql
#include "Nitro/OperatorLessThanOrEql.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLessThanOrEql.Compile
::Nitro::Operation* Nitro::OperatorLessThanOrEql::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLessThanOrEql::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLogicAnd
#include "Nitro/OperatorLogicAnd.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLogicAnd.Compile
::Nitro::Operation* Nitro::OperatorLogicAnd::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLogicAnd::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLogicEql
#include "Nitro/OperatorLogicEql.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLogicEql.Compile
::Nitro::Operation* Nitro::OperatorLogicEql::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLogicEql::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLogicNotEql
#include "Nitro/OperatorLogicNotEql.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLogicNotEql.Compile
::Nitro::Operation* Nitro::OperatorLogicNotEql::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLogicNotEql::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLogicOr
#include "Nitro/OperatorLogicOr.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLogicOr.Compile
::Nitro::Operation* Nitro::OperatorLogicOr::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLogicOr::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
