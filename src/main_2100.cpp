// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorLShift
#include "Nitro/OperatorLShift.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorLShift.Compile
::Nitro::Operation* Nitro::OperatorLShift::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorLShift::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorModulo
#include "Nitro/OperatorModulo.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorModulo.Compile
::Nitro::Operation* Nitro::OperatorModulo::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorModulo::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorModuloInTo
#include "Nitro/OperatorModuloInTo.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorModuloInTo.Compile
::Nitro::Operation* Nitro::OperatorModuloInTo::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorModuloInTo::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorMultiply
#include "Nitro/OperatorMultiply.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorMultiply.Compile
::Nitro::Operation* Nitro::OperatorMultiply::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorMultiply::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorMultiplyInTo
#include "Nitro/OperatorMultiplyInTo.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorMultiplyInTo.Compile
::Nitro::Operation* Nitro::OperatorMultiplyInTo::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorMultiplyInTo::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorNot
#include "Nitro/OperatorNot.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorNot.Compile
::Nitro::Operation* Nitro::OperatorNot::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorNot::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorRShift
#include "Nitro/OperatorRShift.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorRShift.Compile
::Nitro::Operation* Nitro::OperatorRShift::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorRShift::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorSet
#include "Nitro/OperatorSet.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorSet.Compile
::Nitro::Operation* Nitro::OperatorSet::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorSet::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorSubtract
#include "Nitro/OperatorSubtract.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorSubtract.Compile
::Nitro::Operation* Nitro::OperatorSubtract::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorSubtract::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.OperatorSubtractFrom
#include "Nitro/OperatorSubtractFrom.hpp"
// Including type: Nitro.Operation
#include "Nitro/Operation.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.OperatorSubtractFrom.Compile
::Nitro::Operation* Nitro::OperatorSubtractFrom::Compile(::Nitro::CompiledFragment* left, ::Nitro::CompiledFragment* right, ::Nitro::CompiledMethod* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::OperatorSubtractFrom::Compile");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Operator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::Operation*, false>(this, ___internal__method, left, right, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ReferenceError
#include "Nitro/ReferenceError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ISettable
#include "Nitro/ISettable.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.ISettable.OutputSet
void Nitro::ISettable::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ISettable::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::ISettable*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.ISettable.OutputTarget
bool Nitro::ISettable::OutputTarget(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ISettable::OutputTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::ISettable*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.Types
#include "Nitro/Types.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: Nitro.CompiledFragment
#include "Nitro/CompiledFragment.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: Nitro.CompiledMethod
#include "Nitro/CompiledMethod.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Nitro.MethodOperation
#include "Nitro/MethodOperation.hpp"
// Including type: Nitro.CodeFragment
#include "Nitro/CodeFragment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.Types.IsNumeric
bool Nitro::Types::IsNumeric(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsNumeric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsNumeric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Nitro.Types.GetCallable
::System::Reflection::MethodInfo* Nitro::Types::GetCallable(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetCallable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetCallable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Nitro.Types.GetConstructor
::System::Reflection::ConstructorInfo* Nitro::Types::GetConstructor(::System::Type* type, ::ArrayW<::Nitro::CompiledFragment*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetConstructor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::ConstructorInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type, args);
}
// Autogenerated method: Nitro.Types.GetConstructor
::System::Reflection::ConstructorInfo* Nitro::Types::GetConstructor(::ArrayW<::System::Reflection::ConstructorInfo*> constructors, ::ArrayW<::System::Type*> paramSet, bool withCasting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetConstructor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(constructors), ::il2cpp_utils::ExtractType(paramSet), ::il2cpp_utils::ExtractType(withCasting)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::ConstructorInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, constructors, paramSet, withCasting);
}
// Autogenerated method: Nitro.Types.SetToString
::StringW Nitro::Types::SetToString(::ArrayW<::System::Reflection::ParameterInfo*> set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::SetToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "SetToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, set);
}
// Autogenerated method: Nitro.Types.SetToTypes
::ArrayW<::System::Type*> Nitro::Types::SetToTypes(::ArrayW<::System::Reflection::ParameterInfo*> set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::SetToTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "SetToTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, set);
}
// Autogenerated method: Nitro.Types.IsParams
bool Nitro::Types::IsParams(::System::Reflection::ParameterInfo* param) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(param)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, param);
}
// Autogenerated method: Nitro.Types.IsDynamic
bool Nitro::Types::IsDynamic(::System::Reflection::MemberInfo* member) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsDynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsDynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(member)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, member);
}
// Autogenerated method: Nitro.Types.WillAccept
int Nitro::Types::WillAccept(::ArrayW<::System::Type*> args, ::ArrayW<::System::Reflection::ParameterInfo*> parameters, bool withCasting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::WillAccept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "WillAccept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parameters), ::il2cpp_utils::ExtractType(withCasting)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, args, parameters, withCasting);
}
// Autogenerated method: Nitro.Types.NoReturn
bool Nitro::Types::NoReturn(::System::Reflection::MethodInfo* methodInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::NoReturn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "NoReturn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, methodInfo);
}
// Autogenerated method: Nitro.Types.IsVoid
bool Nitro::Types::IsVoid(::System::Type* T) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsVoid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsVoid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(T)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, T);
}
// Autogenerated method: Nitro.Types.OutputParameters
void Nitro::Types::OutputParameters(::ArrayW<::Nitro::CompiledFragment*> args, ::Nitro::CompiledMethod* method, ::Nitro::NitroIL* into, ::ArrayW<::System::Reflection::ParameterInfo*> parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::OutputParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "OutputParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(into), ::il2cpp_utils::ExtractType(parameters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, args, method, into, parameters);
}
// Autogenerated method: Nitro.Types.MethodReturnType
::System::Type* Nitro::Types::MethodReturnType(::System::Type* type, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::MethodReturnType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "MethodReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type, name);
}
// Autogenerated method: Nitro.Types.GetOverload
::System::Reflection::MethodInfo* Nitro::Types::GetOverload(::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>* overloads, ::ArrayW<::System::Type*> argSet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overloads), ::il2cpp_utils::ExtractType(argSet)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, overloads, argSet);
}
// Autogenerated method: Nitro.Types.GetOverload
::System::Reflection::MethodInfo* Nitro::Types::GetOverload(::System::Collections::Generic::List_1<::System::Reflection::MethodInfo*>* overloads, ::ArrayW<::System::Type*> argSet, bool cast) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overloads), ::il2cpp_utils::ExtractType(argSet), ::il2cpp_utils::ExtractType(cast)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, overloads, argSet, cast);
}
// Autogenerated method: Nitro.Types.GetOverload
::System::Reflection::MethodInfo* Nitro::Types::GetOverload(::ArrayW<::System::Reflection::MethodInfo*> overloads, ::StringW name, ::ArrayW<::System::Type*> argSet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overloads), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(argSet)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, overloads, name, argSet);
}
// Autogenerated method: Nitro.Types.GetOverload
::System::Reflection::MethodInfo* Nitro::Types::GetOverload(::ArrayW<::System::Reflection::MethodInfo*> overloads, ::StringW name, ::ArrayW<::System::Type*> argSet, bool ignoreCase) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overloads), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(argSet), ::il2cpp_utils::ExtractType(ignoreCase)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, overloads, name, argSet, ignoreCase);
}
// Autogenerated method: Nitro.Types.GetOverload
::System::Reflection::MethodInfo* Nitro::Types::GetOverload(::ArrayW<::System::Reflection::MethodInfo*> overloads, ::StringW name, ::ArrayW<::System::Type*> argSet, bool ignoreCase, bool cast) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetOverload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetOverload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overloads), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(argSet), ::il2cpp_utils::ExtractType(ignoreCase), ::il2cpp_utils::ExtractType(cast)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, overloads, name, argSet, ignoreCase, cast);
}
// Autogenerated method: Nitro.Types.TypeSetsMatch
bool Nitro::Types::TypeSetsMatch(::ArrayW<::System::Type*> a, ::ArrayW<::System::Type*> b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::TypeSetsMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "TypeSetsMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Nitro.Types.TypeSetsMatchExactly
bool Nitro::Types::TypeSetsMatchExactly(::ArrayW<::System::Type*> a, ::ArrayW<::System::Type*> b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::TypeSetsMatchExactly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "TypeSetsMatchExactly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Nitro.Types.ToStringMethod
::Nitro::MethodOperation* Nitro::Types::ToStringMethod(::Nitro::CompiledMethod* method, ::Nitro::CompiledFragment* frag, ::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::ToStringMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "ToStringMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(frag), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::MethodOperation*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method, frag, type);
}
// Autogenerated method: Nitro.Types.TryCast
::Nitro::CompiledFragment* Nitro::Types::TryCast(::Nitro::CompiledMethod* method, ::Nitro::CompiledFragment* frag, ::System::Type* to, ::System::Type* from) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::TryCast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "TryCast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(frag), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(from)})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method, frag, to, from);
}
// Autogenerated method: Nitro.Types.TryCast
::Nitro::CompiledFragment* Nitro::Types::TryCast(::Nitro::CompiledMethod* method, ::Nitro::CompiledFragment* frag, ::System::Type* to, ::System::Type* from, ByRef<bool> isExplicit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::TryCast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "TryCast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(frag), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::CompiledFragment*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method, frag, to, from, byref(isExplicit));
}
// Autogenerated method: Nitro.Types.NameWithoutNamespace
::StringW Nitro::Types::NameWithoutNamespace(::StringW typeName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::NameWithoutNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "NameWithoutNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, typeName);
}
// Autogenerated method: Nitro.Types.IsCastableTo
::System::Reflection::MethodInfo* Nitro::Types::IsCastableTo(::System::Type* from, ::System::Type* to, ByRef<bool> isExplicit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsCastableTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsCastableTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, from, to, byref(isExplicit));
}
// Autogenerated method: Nitro.Types.GetTypes
::ArrayW<::System::Type*> Nitro::Types::GetTypes(::System::Type* first, ::ArrayW<::Nitro::CompiledFragment*> frags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(frags)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, first, frags);
}
// Autogenerated method: Nitro.Types.GetTypes
::ArrayW<::System::Type*> Nitro::Types::GetTypes(::ArrayW<::Nitro::CompiledFragment*> frags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::GetTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "GetTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frags)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frags);
}
// Autogenerated method: Nitro.Types.IsSubclass
bool Nitro::Types::IsSubclass(::Il2CppObject* obj, ::System::Type* super) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsSubclass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsSubclass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(super)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, super);
}
// Autogenerated method: Nitro.Types.IsTypeOf
bool Nitro::Types::IsTypeOf(::Il2CppObject* obj, ::System::Type* super) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsTypeOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsTypeOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(super)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, super);
}
// Autogenerated method: Nitro.Types.IsCompiled
bool Nitro::Types::IsCompiled(::Nitro::CodeFragment* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Types::IsCompiled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "Types", "IsCompiled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.Variable
#include "Nitro/Variable.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Nitro::Variable::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.Variable.Type
::System::Type* Nitro::Variable::Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::Type");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.Variable.OutputIL
void Nitro::Variable::OutputIL(::Nitro::NitroIL* into, bool accessingMember) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, accessingMember);
}
// Autogenerated method: Nitro.Variable.OutputSet
void Nitro::Variable::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.Variable.OutputTarget
bool Nitro::Variable::OutputTarget(::Nitro::NitroIL* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::OutputTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, into);
}
// Autogenerated method: Nitro.Variable.Equals
bool Nitro::Variable::Equals(::Nitro::Variable* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Variable::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.LocalVariable
#include "Nitro/LocalVariable.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Emit.LocalBuilder
#include "System/Reflection/Emit/LocalBuilder.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type VariableType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::LocalVariable::dyn_VariableType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::dyn_VariableType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VariableType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.LocalBuilder Builder
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::LocalBuilder*& Nitro::LocalVariable::dyn_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::dyn_Builder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Builder"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::LocalBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.LocalVariable.Type
::System::Type* Nitro::LocalVariable::Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::Type");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.LocalVariable.OutputSet
void Nitro::LocalVariable::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.LocalVariable.OutputIL
void Nitro::LocalVariable::OutputIL(::Nitro::NitroIL* into, bool accessingMember) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::LocalVariable::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, accessingMember);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.ParameterVariable
#include "Nitro/ParameterVariable.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Emit.ParameterBuilder
#include "System/Reflection/Emit/ParameterBuilder.hpp"
// Including type: Nitro.NitroIL
#include "Nitro/NitroIL.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type ParameterType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::ParameterVariable::dyn_ParameterType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ParameterVariable::dyn_ParameterType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParameterType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Emit.ParameterBuilder Builder
[[deprecated("Use field access instead!")]] ::System::Reflection::Emit::ParameterBuilder*& Nitro::ParameterVariable::dyn_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ParameterVariable::dyn_Builder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Builder"))->offset;
  return *reinterpret_cast<::System::Reflection::Emit::ParameterBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.ParameterVariable.Type
::System::Type* Nitro::ParameterVariable::Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ParameterVariable::Type");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.ParameterVariable.OutputSet
void Nitro::ParameterVariable::OutputSet(::Nitro::NitroIL* into, ::System::Type* setting) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ParameterVariable::OutputSet");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, setting);
}
// Autogenerated method: Nitro.ParameterVariable.OutputIL
void Nitro::ParameterVariable::OutputIL(::Nitro::NitroIL* into, bool accessingMember) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::ParameterVariable::OutputIL");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Variable*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into, accessingMember);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.VariableType
#include "Nitro/VariableType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Nitro.VariableType Local
::Nitro::VariableType Nitro::VariableType::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::VariableType>("Nitro", "VariableType", "Local"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.VariableType Local
void Nitro::VariableType::_set_Local(::Nitro::VariableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableType", "Local", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.VariableType Global
::Nitro::VariableType Nitro::VariableType::_get_Global() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_get_Global");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::VariableType>("Nitro", "VariableType", "Global"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.VariableType Global
void Nitro::VariableType::_set_Global(::Nitro::VariableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_set_Global");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableType", "Global", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.VariableType Field
::Nitro::VariableType Nitro::VariableType::_get_Field() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_get_Field");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::VariableType>("Nitro", "VariableType", "Field"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.VariableType Field
void Nitro::VariableType::_set_Field(::Nitro::VariableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_set_Field");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableType", "Field", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.VariableType Parameter
::Nitro::VariableType Nitro::VariableType::_get_Parameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_get_Parameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::VariableType>("Nitro", "VariableType", "Parameter"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.VariableType Parameter
void Nitro::VariableType::_set_Parameter(::Nitro::VariableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_set_Parameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableType", "Parameter", value));
}
// Autogenerated static field getter
// Get static field: static public Nitro.VariableType Any
::Nitro::VariableType Nitro::VariableType::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::VariableType>("Nitro", "VariableType", "Any"));
}
// Autogenerated static field setter
// Set static field: static public Nitro.VariableType Any
void Nitro::VariableType::_set_Any(::Nitro::VariableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "VariableType", "Any", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Nitro::VariableType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::VariableType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.NitroBaseMethod
#include "Nitro/NitroBaseMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.NitroBaseMethod.RunBoxed
::Il2CppObject* Nitro::NitroBaseMethod::RunBoxed(::ArrayW<::Il2CppObject*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroBaseMethod::RunBoxed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::NitroBaseMethod*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, arguments);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.NitroDomainManager
#include "Nitro/NitroDomainManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Nitro.SecureName
#include "Nitro/SecureName.hpp"
// Including type: Nitro.CodeReference
#include "Nitro/CodeReference.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Nitro.NitroDomainManager DefaultManager
::Nitro::NitroDomainManager* Nitro::NitroDomainManager::_get_DefaultManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::_get_DefaultManager");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Nitro::NitroDomainManager*>("Nitro", "NitroDomainManager", "DefaultManager"));
}
// Autogenerated static field setter
// Set static field: static private Nitro.NitroDomainManager DefaultManager
void Nitro::NitroDomainManager::_set_DefaultManager(::Nitro::NitroDomainManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::_set_DefaultManager");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "NitroDomainManager", "DefaultManager", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean AllowAll
[[deprecated("Use field access instead!")]] bool& Nitro::NitroDomainManager::dyn_AllowAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::dyn_AllowAll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AllowAll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Nitro.SecureName> BlockedNames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::SecureName*>*& Nitro::NitroDomainManager::dyn_BlockedNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::dyn_BlockedNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlockedNames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::SecureName*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Nitro.CodeReference> DefaultReferences
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::CodeReference*>*& Nitro::NitroDomainManager::dyn_DefaultReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::dyn_DefaultReferences");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultReferences"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::CodeReference*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Nitro.SecureName> AllowedNames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Nitro::SecureName*>*& Nitro::NitroDomainManager::dyn_AllowedNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::dyn_AllowedNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AllowedNames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Nitro::SecureName*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.NitroDomainManager.GetDefaultManager
::Nitro::NitroDomainManager* Nitro::NitroDomainManager::GetDefaultManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::GetDefaultManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NitroDomainManager", "GetDefaultManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Nitro::NitroDomainManager*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.NitroDomainManager.ClearDefaultReferences
void Nitro::NitroDomainManager::ClearDefaultReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::ClearDefaultReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDefaultReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroDomainManager.GetDefaultReferences
::System::Collections::Generic::List_1<::Nitro::CodeReference*>* Nitro::NitroDomainManager::GetDefaultReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::GetDefaultReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Nitro::CodeReference*>*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroDomainManager.AddReference
void Nitro::NitroDomainManager::AddReference(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::AddReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: Nitro.NitroDomainManager.AllowsEverything
bool Nitro::NitroDomainManager::AllowsEverything() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::AllowsEverything");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllowsEverything", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroDomainManager.IsAllowed
bool Nitro::NitroDomainManager::IsAllowed(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::IsAllowed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAllowed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Nitro.NitroDomainManager.AllowEverything
void Nitro::NitroDomainManager::AllowEverything() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::AllowEverything");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllowEverything", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroDomainManager.Allow
void Nitro::NitroDomainManager::Allow(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::Allow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Allow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroDomainManager.Block
void Nitro::NitroDomainManager::Block(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::Block");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroDomainManager.Blocked
bool Nitro::NitroDomainManager::Blocked(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::Blocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Blocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Nitro.NitroDomainManager.AllowAccess
bool Nitro::NitroDomainManager::AllowAccess(::StringW protocol, ::StringW host, ::StringW fullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::AllowAccess");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::NitroDomainManager*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, protocol, host, fullPath);
}
// Autogenerated method: Nitro.NitroDomainManager..cctor
void Nitro::NitroDomainManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroDomainManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "NitroDomainManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.NitroObject
#include "Nitro/NitroObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type ObjectType
[[deprecated("Use field access instead!")]] ::System::Type*& Nitro::NitroObject::dyn_ObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::dyn_ObjectType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ObjectType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Reflection.MemberInfo Member
[[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& Nitro::NitroObject::dyn_Member() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::dyn_Member");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Member"))->offset;
  return *reinterpret_cast<::System::Reflection::MemberInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object UnderlayObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Nitro::NitroObject::dyn_UnderlayObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::dyn_UnderlayObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnderlayObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,Nitro.NitroObject> PrototypeMap
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::NitroObject*>*& Nitro::NitroObject::dyn_PrototypeMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::dyn_PrototypeMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PrototypeMap"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Nitro::NitroObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.NitroObject.GetValue
::Il2CppObject* Nitro::NitroObject::GetValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.NitroObject.SetValue
void Nitro::NitroObject::SetValue(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::SetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Nitro.NitroObject.Run
::Il2CppObject* Nitro::NitroObject::Run(::ArrayW<::Il2CppObject*> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::NitroObject*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, arguments);
}
// Autogenerated method: Nitro.NitroObject.get_Item
::Il2CppObject* Nitro::NitroObject::get_Item(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, name);
}
// Autogenerated method: Nitro.NitroObject.set_Item
void Nitro::NitroObject::set_Item(::StringW name, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::NitroObject::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Nitro.Script
#include "Nitro/Script.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Nitro.Script.Run
::Il2CppObject* Nitro::Script::Run(::StringW functionName, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, args);
}
// Autogenerated method: Nitro.Script.Run
::Il2CppObject* Nitro::Script::Run(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(typeSet), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, typeSet, args);
}
// Autogenerated method: Nitro.Script.OnScriptReady
void Nitro::Script::OnScriptReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::OnScriptReady");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Nitro::Script*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Nitro.Script.RunLiteral
::Il2CppObject* Nitro::Script::RunLiteral(::StringW functionName, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::RunLiteral");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, args);
}
// Autogenerated method: Nitro.Script.RunLiteral
::Il2CppObject* Nitro::Script::RunLiteral(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::RunLiteral");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(typeSet), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, typeSet, args);
}
// Autogenerated method: Nitro.Script.RunLiteral
::Il2CppObject* Nitro::Script::RunLiteral(::StringW functionName, ::ArrayW<::Il2CppObject*> args, bool optional) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::RunLiteral");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(optional)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, args, optional);
}
// Autogenerated method: Nitro.Script.RunLiteral
::Il2CppObject* Nitro::Script::RunLiteral(::StringW functionName, ::ArrayW<::System::Type*> typeSet, ::ArrayW<::Il2CppObject*> args, bool optional) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::RunLiteral");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(functionName), ::il2cpp_utils::ExtractType(typeSet), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(optional)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, functionName, typeSet, args, optional);
}
// Autogenerated method: Nitro.Script.get_Item
::Il2CppObject* Nitro::Script::get_Item(::StringW property) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, property);
}
// Autogenerated method: Nitro.Script.set_Item
void Nitro::Script::set_Item(::StringW property, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::Script::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, property, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.SecureName
#include "Nitro/SecureName.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Nitro::SecureName::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SecureName::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Nitro.SecureName.Matches
bool Nitro::SecureName::Matches(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::SecureName::Matches");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Matches", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Nitro.TypeAliases
#include "Nitro/TypeAliases.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Type> AliasMap
::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>* Nitro::TypeAliases::_get_AliasMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::_get_AliasMap");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>*>("Nitro", "TypeAliases", "AliasMap")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Type> AliasMap
void Nitro::TypeAliases::_set_AliasMap(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::_set_AliasMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Nitro", "TypeAliases", "AliasMap", value));
}
// Autogenerated method: Nitro.TypeAliases.Add
void Nitro::TypeAliases::Add(::StringW alias, ::System::Type* forType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeAliases", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alias), ::il2cpp_utils::ExtractType(forType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, alias, forType);
}
// Autogenerated method: Nitro.TypeAliases.Find
::System::Type* Nitro::TypeAliases::Find(::StringW alias) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeAliases", "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alias)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, alias);
}
// Autogenerated method: Nitro.TypeAliases.Setup
void Nitro::TypeAliases::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeAliases", "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Nitro.TypeAliases..cctor
void Nitro::TypeAliases::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Nitro::TypeAliases::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Nitro", "TypeAliases", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.UnityLanguageLoader
#include "Wrench/UnityLanguageLoader.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Wrench.LanguageSet[] Languages
[[deprecated("Use field access instead!")]] ::ArrayW<::Wrench::LanguageSet*>& Wrench::UnityLanguageLoader::dyn_Languages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::UnityLanguageLoader::dyn_Languages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Languages"))->offset;
  return *reinterpret_cast<::ArrayW<::Wrench::LanguageSet*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.UnityLanguageLoader.GetLanguage
::Wrench::LanguageSet* Wrench::UnityLanguageLoader::GetLanguage(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::UnityLanguageLoader::GetLanguage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageLoader*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.UnityLanguageLoader.GetAllLanguages
::ArrayW<::Wrench::LanguageSet*> Wrench::UnityLanguageLoader::GetAllLanguages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::UnityLanguageLoader::GetAllLanguages");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageLoader*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Wrench::LanguageSet*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.OnLogEvent
#include "Wrench/OnLogEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.OnLogEvent.Invoke
void Wrench::OnLogEvent::Invoke(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnLogEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnLogEvent*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: Wrench.OnLogEvent.BeginInvoke
::System::IAsyncResult* Wrench::OnLogEvent::BeginInvoke(::StringW text, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnLogEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnLogEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, text, callback, object);
}
// Autogenerated method: Wrench.OnLogEvent.EndInvoke
void Wrench::OnLogEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnLogEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnLogEvent*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.Log
#include "Wrench/Log.hpp"
// Including type: Wrench.OnLogEvent
#include "Wrench/OnLogEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean Active
bool Wrench::Log::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Wrench", "Log", "Active"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean Active
void Wrench::Log::_set_Active(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Log", "Active", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADEC94
// Autogenerated static field getter
// Get static field: static private Wrench.OnLogEvent OnLog
::Wrench::OnLogEvent* Wrench::Log::_get_OnLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::_get_OnLog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::OnLogEvent*>("Wrench", "Log", "OnLog"));
}
// Autogenerated static field setter
// Set static field: static private Wrench.OnLogEvent OnLog
void Wrench::Log::_set_OnLog(::Wrench::OnLogEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::_set_OnLog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Log", "OnLog", value));
}
// Autogenerated method: Wrench.Log.add_OnLog
void Wrench::Log::add_OnLog(::Wrench::OnLogEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::add_OnLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Log", "add_OnLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Log.remove_OnLog
void Wrench::Log::remove_OnLog(::Wrench::OnLogEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::remove_OnLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Log", "remove_OnLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Log.Add
void Wrench::Log::Add(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Log", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text);
}
// Autogenerated method: Wrench.Log.Add
void Wrench::Log::Add(::Il2CppObject* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Log", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e);
}
// Autogenerated method: Wrench.Log..cctor
void Wrench::Log::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Log::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Log", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.MLElement
#include "Wrench/MLElement.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Wrench.TagHandler
#include "Wrench/TagHandler.hpp"
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
// Including type: Wrench.MLVariableElement
#include "Wrench/MLVariableElement.hpp"
// Including type: Wrench.MLTextElement
#include "Wrench/MLTextElement.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Tag
[[deprecated("Use field access instead!")]] ::StringW& Wrench::MLElement::dyn_Tag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::dyn_Tag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean SelfClosing
[[deprecated("Use field access instead!")]] bool& Wrench::MLElement::dyn_SelfClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::dyn_SelfClosing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SelfClosing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.Dictionary`2<System.String,System.String> Properties
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& Wrench::MLElement::dyn_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::dyn_Properties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Properties"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.MLElement.SetTag
void Wrench::MLElement::SetTag(::StringW tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::SetTag");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tag);
}
// Autogenerated method: Wrench.MLElement.GetHandler
::Wrench::TagHandler* Wrench::MLElement::GetHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::GetHandler");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLElement.ReadTag
void Wrench::MLElement::ReadTag(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ReadTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lexer);
}
// Autogenerated method: Wrench.MLElement.get_Item
::StringW Wrench::MLElement::get_Item(::StringW property) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, property);
}
// Autogenerated method: Wrench.MLElement.set_Item
void Wrench::MLElement::set_Item(::StringW property, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, property, value);
}
// Autogenerated method: Wrench.MLElement.ResetVariable
void Wrench::MLElement::ResetVariable(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ResetVariable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: Wrench.MLElement.ResetAllVariables
void Wrench::MLElement::ResetAllVariables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ResetAllVariables");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLElement.ReadContent
void Wrench::MLElement::ReadContent(::Wrench::MLLexer* lexer, bool innerElement, bool literal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ReadContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractType(innerElement), ::il2cpp_utils::ExtractType(literal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lexer, innerElement, literal);
}
// Autogenerated method: Wrench.MLElement.CreateVariableElement
::Wrench::MLVariableElement* Wrench::MLElement::CreateVariableElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::CreateVariableElement");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::MLVariableElement*, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLElement.CreateTextElement
::Wrench::MLTextElement* Wrench::MLElement::CreateTextElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::CreateTextElement");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::MLTextElement*, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLElement.CreateTagElement
::Wrench::MLElement* Wrench::MLElement::CreateTagElement(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::CreateTagElement");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::MLElement*, false>(this, ___internal__method, lexer);
}
// Autogenerated method: Wrench.MLElement.OnChildrenLoaded
void Wrench::MLElement::OnChildrenLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::OnChildrenLoaded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLElement.GetVariableValue
::StringW Wrench::MLElement::GetVariableValue(::StringW variable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::GetVariableValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, variable);
}
// Autogenerated method: Wrench.MLElement.ToString
void Wrench::MLElement::ToString(::System::Text::StringBuilder* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: Wrench.MLElement.ToString
::StringW Wrench::MLElement::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean Literal
[[deprecated("Use field access instead!")]] bool& Wrench::MLLexer::dyn_Literal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::dyn_Literal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Literal"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 LineNumber
[[deprecated("Use field access instead!")]] int& Wrench::MLLexer::dyn_LineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::dyn_LineNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean DidReadJunk
[[deprecated("Use field access instead!")]] bool& Wrench::MLLexer::dyn_DidReadJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::dyn_DidReadJunk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DidReadJunk"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.MLLexer.ExitLiteral
void Wrench::MLLexer::ExitLiteral() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::ExitLiteral");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExitLiteral", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLLexer.PeekJunk
bool Wrench::MLLexer::PeekJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::PeekJunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekJunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLLexer.ReadJunk
bool Wrench::MLLexer::ReadJunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::ReadJunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadJunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLLexer.SkipSpaces
void Wrench::MLLexer::SkipSpaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::SkipSpaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SkipSpaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLLexer.Read
::Il2CppChar Wrench::MLLexer::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::StringReader*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.MLLexer.GetLineNumber
int Wrench::MLLexer::GetLineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::GetLineNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::StringReader*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.MLTextElement
#include "Wrench/MLTextElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.MLTextElement.DoneWord
void Wrench::MLTextElement::DoneWord(bool lastOne) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLTextElement::DoneWord");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLTextElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lastOne);
}
// Autogenerated method: Wrench.MLTextElement.AddCharacter
void Wrench::MLTextElement::AddCharacter(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLTextElement::AddCharacter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLTextElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, character);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.MLVariableElement
#include "Wrench/MLVariableElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.MLVariableElement.GetArgument
::StringW Wrench::MLVariableElement::GetArgument(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLVariableElement::GetArgument");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLVariableElement*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, id);
}
// Autogenerated method: Wrench.MLVariableElement.LoadNow
void Wrench::MLVariableElement::LoadNow(bool innerElement) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLVariableElement::LoadNow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLVariableElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, innerElement);
}
// Autogenerated method: Wrench.MLVariableElement.SetVariableName
void Wrench::MLVariableElement::SetVariableName(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLVariableElement::SetVariableName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLVariableElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: Wrench.MLVariableElement.SetArguments
void Wrench::MLVariableElement::SetArguments(::ArrayW<::StringW> arguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLVariableElement::SetArguments");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLVariableElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arguments);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.PropertyTextReader
#include "Wrench/PropertyTextReader.hpp"
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.PropertyTextReader.Read
void Wrench::PropertyTextReader::Read(::Wrench::MLLexer* lexer, bool selfClosing, ByRef<::StringW> property, ByRef<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::PropertyTextReader::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "PropertyTextReader", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractType(selfClosing), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractIndependentType<::StringW&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lexer, selfClosing, byref(property), byref(value));
}
// Autogenerated method: Wrench.PropertyTextReader.ReadString
void Wrench::PropertyTextReader::ReadString(::Wrench::MLLexer* lexer, ::System::Text::StringBuilder* builder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::PropertyTextReader::ReadString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "PropertyTextReader", "ReadString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractType(builder)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lexer, builder);
}
// Autogenerated method: Wrench.PropertyTextReader.SkipSpaces
void Wrench::PropertyTextReader::SkipSpaces(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::PropertyTextReader::SkipSpaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "PropertyTextReader", "SkipSpaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lexer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.StringReader
#include "Wrench/StringReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Char NULL
::Il2CppChar Wrench::StringReader::_get_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::_get_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppChar>("Wrench", "StringReader", "NULL"));
}
// Autogenerated static field setter
// Set static field: static public System.Char NULL
void Wrench::StringReader::_set_NULL(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::_set_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "StringReader", "NULL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String Input
[[deprecated("Use field access instead!")]] ::StringW& Wrench::StringReader::dyn_Input() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::dyn_Input");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Input"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Position
[[deprecated("Use field access instead!")]] int& Wrench::StringReader::dyn_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::dyn_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Position"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 InputLength
[[deprecated("Use field access instead!")]] int& Wrench::StringReader::dyn_InputLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::dyn_InputLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InputLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.StringReader.More
bool Wrench::StringReader::More() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::More");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "More", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.Peek
::Il2CppChar Wrench::StringReader::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Peek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.Peek
::Il2CppChar Wrench::StringReader::Peek(int delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Peek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Peek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, delta);
}
// Autogenerated method: Wrench.StringReader.StepBack
void Wrench::StringReader::StepBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::StepBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StepBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.Advance
void Wrench::StringReader::Advance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Advance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Advance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.Advance
void Wrench::StringReader::Advance(int places) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Advance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Advance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(places)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, places);
}
// Autogenerated method: Wrench.StringReader.Length
int Wrench::StringReader::Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.Read
::Il2CppChar Wrench::StringReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::StringReader*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.ReadUntil
void Wrench::StringReader::ReadUntil(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::ReadUntil");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUntil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, character);
}
// Autogenerated method: Wrench.StringReader.ReadOff
void Wrench::StringReader::ReadOff(::ArrayW<::Il2CppChar> chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::ReadOff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadOff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars);
}
// Autogenerated method: Wrench.StringReader.ReadOff
void Wrench::StringReader::ReadOff(::ArrayW<::Il2CppChar> chars, ByRef<int> count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::ReadOff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadOff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars, byref(count));
}
// Autogenerated method: Wrench.StringReader.GetLineNumber
int Wrench::StringReader::GetLineNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::GetLineNumber");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::StringReader*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.StringReader.GetLineNumber
int Wrench::StringReader::GetLineNumber(ByRef<int> charOnLine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::GetLineNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLineNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byref(charOnLine));
}
// Autogenerated method: Wrench.StringReader.ReadLine
::StringW Wrench::StringReader::ReadLine(int lineNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::ReadLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, lineNumber);
}
// Autogenerated method: Wrench.StringReader..cctor
void Wrench::StringReader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "StringReader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.TagHandler
#include "Wrench/TagHandler.hpp"
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Wrench::TagHandler::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String TagExtension
[[deprecated("Use field access instead!")]] ::StringW& Wrench::TagHandler::dyn_TagExtension() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::dyn_TagExtension");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TagExtension"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.TagHandler.GetTags
::ArrayW<::StringW> Wrench::TagHandler::GetTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::GetTags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.TagHandler.SelfClosing
bool Wrench::TagHandler::SelfClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::SelfClosing");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.TagHandler.GetInstance
::Wrench::TagHandler* Wrench::TagHandler::GetInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::GetInstance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.TagHandler.OnTagLoaded
void Wrench::TagHandler::OnTagLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::OnTagLoaded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.TagHandler.OnParseContent
void Wrench::TagHandler::OnParseContent(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::OnParseContent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lexer);
}
// Autogenerated method: Wrench.TagHandler.OnAttributeChange
bool Wrench::TagHandler::OnAttributeChange(::StringW attribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::OnAttributeChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, attribute);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.TagHandlers
#include "Wrench/TagHandlers.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Wrench.TagHandler
#include "Wrench/TagHandler.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Wrench.TagHandler> Handlers
::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::TagHandler*>* Wrench::TagHandlers::_get_Handlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::_get_Handlers");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::TagHandler*>*>("Wrench", "TagHandlers", "Handlers")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Wrench.TagHandler> Handlers
void Wrench::TagHandlers::_set_Handlers(::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::TagHandler*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::_set_Handlers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "TagHandlers", "Handlers", value));
}
// Autogenerated method: Wrench.TagHandlers.Setup
void Wrench::TagHandlers::Setup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wrench.TagHandlers.AddHandlers
void Wrench::TagHandlers::AddHandlers(::System::Reflection::Assembly* _asm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::AddHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "AddHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_asm)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, _asm);
}
// Autogenerated method: Wrench.TagHandlers.Default
::Wrench::TagHandler* Wrench::TagHandlers::Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wrench.TagHandlers.AddHandler
bool Wrench::TagHandlers::AddHandler(::Wrench::TagHandler* handler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::AddHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "AddHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handler)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handler);
}
// Autogenerated method: Wrench.TagHandlers.GetHandler
::Wrench::TagHandler* Wrench::TagHandlers::GetHandler(::StringW tag, ::StringW defaultTag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::GetHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "GetHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(defaultTag)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tag, defaultTag);
}
// Autogenerated method: Wrench.TagHandlers.GetHandler
::Wrench::TagHandler* Wrench::TagHandlers::GetHandler(::StringW tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandlers::GetHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TagHandlers", "GetHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tag);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.LanguageTag
#include "Wrench/LanguageTag.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
// Including type: Wrench.LanguageElement
#include "Wrench/LanguageElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.LanguageTag.Apply
void Wrench::LanguageTag::Apply(::Wrench::LanguageSet* language, ::Wrench::LanguageElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageTag::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(language), ::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, language, element);
}
// Autogenerated method: Wrench.LanguageTag.GetTags
::ArrayW<::StringW> Wrench::LanguageTag::GetTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageTag::GetTags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.LanguageTag.SelfClosing
bool Wrench::LanguageTag::SelfClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageTag::SelfClosing");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.LanguageTag.GetInstance
::Wrench::TagHandler* Wrench::LanguageTag::GetInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageTag::GetInstance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.LanguageTagHandler
#include "Wrench/LanguageTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.VariableTag
#include "Wrench/VariableTag.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
// Including type: Wrench.LanguageElement
#include "Wrench/LanguageElement.hpp"
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Gender
[[deprecated("Use field access instead!")]] ::StringW& Wrench::VariableTag::dyn_Gender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::dyn_Gender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Gender"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.LanguageSet Parent
[[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& Wrench::VariableTag::dyn_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::dyn_Parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parent"))->offset;
  return *reinterpret_cast<::Wrench::LanguageSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.LanguageElement Element
[[deprecated("Use field access instead!")]] ::Wrench::LanguageElement*& Wrench::VariableTag::dyn_Element() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::dyn_Element");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Element"))->offset;
  return *reinterpret_cast<::Wrench::LanguageElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.VariableTag.AtEnd
bool Wrench::VariableTag::AtEnd(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::AtEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, lexer);
}
// Autogenerated method: Wrench.VariableTag.GetTags
::ArrayW<::StringW> Wrench::VariableTag::GetTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::GetTags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.VariableTag.GetInstance
::Wrench::TagHandler* Wrench::VariableTag::GetInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::GetInstance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.VariableTag.OnAttributeChange
bool Wrench::VariableTag::OnAttributeChange(::StringW property) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::OnAttributeChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, property);
}
// Autogenerated method: Wrench.VariableTag.OnParseContent
void Wrench::VariableTag::OnParseContent(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::OnParseContent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TagHandler*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lexer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.OnVariableFind
#include "Wrench/OnVariableFind.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.OnVariableFind.Invoke
::StringW Wrench::OnVariableFind::Invoke(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableFind::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableFind*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.OnVariableFind.BeginInvoke
::System::IAsyncResult* Wrench::OnVariableFind::BeginInvoke(::StringW code, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableFind::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableFind*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, code, callback, object);
}
// Autogenerated method: Wrench.OnVariableFind.EndInvoke
::StringW Wrench::OnVariableFind::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableFind::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableFind*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.OnVariableChange
#include "Wrench/OnVariableChange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.OnVariableChange.Invoke
void Wrench::OnVariableChange::Invoke(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableChange::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableChange*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.OnVariableChange.BeginInvoke
::System::IAsyncResult* Wrench::OnVariableChange::BeginInvoke(::StringW code, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableChange::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableChange*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, code, callback, object);
}
// Autogenerated method: Wrench.OnVariableChange.EndInvoke
void Wrench::OnVariableChange::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::OnVariableChange::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::OnVariableChange*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.FullVariableSet
#include "Wrench/FullVariableSet.hpp"
// Including type: Wrench.VariableSet
#include "Wrench/VariableSet.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
// Including type: Wrench.OnVariableFind
#include "Wrench/OnVariableFind.hpp"
// Including type: Wrench.OnVariableChange
#include "Wrench/OnVariableChange.hpp"
// Including type: Wrench.GroupResolve
#include "Wrench/GroupResolve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Wrench.VariableSet Custom
[[deprecated("Use field access instead!")]] ::Wrench::VariableSet*& Wrench::FullVariableSet::dyn_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::dyn_Custom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Custom"))->offset;
  return *reinterpret_cast<::Wrench::VariableSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.LanguageSet Language
[[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& Wrench::FullVariableSet::dyn_Language() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::dyn_Language");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Language"))->offset;
  return *reinterpret_cast<::Wrench::LanguageSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Wrench.OnVariableFind OnFind
[[deprecated("Use field access instead!")]] ::Wrench::OnVariableFind*& Wrench::FullVariableSet::dyn_OnFind() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::dyn_OnFind");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnFind"))->offset;
  return *reinterpret_cast<::Wrench::OnVariableFind**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Wrench.OnVariableChange OnChange
[[deprecated("Use field access instead!")]] ::Wrench::OnVariableChange*& Wrench::FullVariableSet::dyn_OnChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::dyn_OnChange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnChange"))->offset;
  return *reinterpret_cast<::Wrench::OnVariableChange**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.FullVariableSet.add_OnFind
void Wrench::FullVariableSet::add_OnFind(::Wrench::OnVariableFind* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::add_OnFind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnFind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Wrench.FullVariableSet.remove_OnFind
void Wrench::FullVariableSet::remove_OnFind(::Wrench::OnVariableFind* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::remove_OnFind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnFind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Wrench.FullVariableSet.add_OnChange
void Wrench::FullVariableSet::add_OnChange(::Wrench::OnVariableChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::add_OnChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Wrench.FullVariableSet.remove_OnChange
void Wrench::FullVariableSet::remove_OnChange(::Wrench::OnVariableChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::remove_OnChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Wrench.FullVariableSet.ChangeLanguageSet
void Wrench::FullVariableSet::ChangeLanguageSet(::Wrench::LanguageSet* language) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::ChangeLanguageSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeLanguageSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(language)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, language);
}
// Autogenerated method: Wrench.FullVariableSet.GetValue
::StringW Wrench::FullVariableSet::GetValue(::StringW variableString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(variableString)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, variableString);
}
// Autogenerated method: Wrench.FullVariableSet.SetGroupResolver
void Wrench::FullVariableSet::SetGroupResolver(::Wrench::GroupResolve* resolver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::SetGroupResolver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGroupResolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resolver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, resolver);
}
// Autogenerated method: Wrench.FullVariableSet.SetValue
void Wrench::FullVariableSet::SetValue(::StringW code, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::SetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, value);
}
// Autogenerated method: Wrench.FullVariableSet.get_Item
::StringW Wrench::FullVariableSet::get_Item(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.FullVariableSet.set_Item
void Wrench::FullVariableSet::set_Item(::StringW code, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.Gender
#include "Wrench/Gender.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Wrench.Gender Boy
::Wrench::Gender Wrench::Gender::_get_Boy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_get_Boy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::Gender>("Wrench", "Gender", "Boy"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.Gender Boy
void Wrench::Gender::_set_Boy(::Wrench::Gender value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_set_Boy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Gender", "Boy", value));
}
// Autogenerated static field getter
// Get static field: static public Wrench.Gender Girl
::Wrench::Gender Wrench::Gender::_get_Girl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_get_Girl");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::Gender>("Wrench", "Gender", "Girl"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.Gender Girl
void Wrench::Gender::_set_Girl(::Wrench::Gender value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_set_Girl");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Gender", "Girl", value));
}
// Autogenerated static field getter
// Get static field: static public Wrench.Gender Either
::Wrench::Gender Wrench::Gender::_get_Either() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_get_Either");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::Gender>("Wrench", "Gender", "Either"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.Gender Either
void Wrench::Gender::_set_Either(::Wrench::Gender value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::_set_Either");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Gender", "Either", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Wrench::Gender::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Gender::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.LanguageElement
#include "Wrench/LanguageElement.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
// Including type: Wrench.TagHandler
#include "Wrench/TagHandler.hpp"
// Including type: Wrench.MLLexer
#include "Wrench/MLLexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Wrench.LanguageSet Parent
[[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& Wrench::LanguageElement::dyn_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::dyn_Parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parent"))->offset;
  return *reinterpret_cast<::Wrench::LanguageSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.TagHandler Handler
[[deprecated("Use field access instead!")]] ::Wrench::TagHandler*& Wrench::LanguageElement::dyn_Handler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::dyn_Handler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Handler"))->offset;
  return *reinterpret_cast<::Wrench::TagHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.LanguageElement.CreateTagElement
::Wrench::MLElement* Wrench::LanguageElement::CreateTagElement(::Wrench::MLLexer* lexer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::CreateTagElement");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::MLElement*, false>(this, ___internal__method, lexer);
}
// Autogenerated method: Wrench.LanguageElement.SetTag
void Wrench::LanguageElement::SetTag(::StringW tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::SetTag");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tag);
}
// Autogenerated method: Wrench.LanguageElement.GetHandler
::Wrench::TagHandler* Wrench::LanguageElement::GetHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::GetHandler");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::MLElement*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::TagHandler*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.LanguageLoader
#include "Wrench/LanguageLoader.hpp"
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Path
[[deprecated("Use field access instead!")]] ::StringW& Wrench::LanguageLoader::dyn_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::dyn_Path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Wrench.LanguageSet[] AllLanguagesLoaded
[[deprecated("Use field access instead!")]] ::ArrayW<::Wrench::LanguageSet*>& Wrench::LanguageLoader::dyn_AllLanguagesLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::dyn_AllLanguagesLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AllLanguagesLoaded"))->offset;
  return *reinterpret_cast<::ArrayW<::Wrench::LanguageSet*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.LanguageLoader.GetGroup
::Wrench::LanguageSet* Wrench::LanguageLoader::GetGroup(::StringW groupName, ::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::GetGroup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageLoader*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, groupName, code);
}
// Autogenerated method: Wrench.LanguageLoader.Get
::Wrench::LanguageSet* Wrench::LanguageLoader::Get(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.LanguageLoader.AllLanguages
::ArrayW<::Wrench::LanguageSet*> Wrench::LanguageLoader::AllLanguages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::AllLanguages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllLanguages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Wrench::LanguageSet*>, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.LanguageLoader.GetAllLanguages
::ArrayW<::Wrench::LanguageSet*> Wrench::LanguageLoader::GetAllLanguages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::GetAllLanguages");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageLoader*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Wrench::LanguageSet*>, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.LanguageLoader.GetLanguage
::Wrench::LanguageSet* Wrench::LanguageLoader::GetLanguage(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::GetLanguage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageLoader*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, code);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.GroupResolve
#include "Wrench/GroupResolve.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.GroupResolve.Invoke
::StringW Wrench::GroupResolve::Invoke(::ArrayW<::StringW> pieces, ::StringW fullText) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::GroupResolve::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::GroupResolve*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, pieces, fullText);
}
// Autogenerated method: Wrench.GroupResolve.BeginInvoke
::System::IAsyncResult* Wrench::GroupResolve::BeginInvoke(::ArrayW<::StringW> pieces, ::StringW fullText, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::GroupResolve::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::GroupResolve*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pieces, fullText, callback, object);
}
// Autogenerated method: Wrench.GroupResolve.EndInvoke
::StringW Wrench::GroupResolve::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::GroupResolve::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::GroupResolve*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.LanguageSet
#include "Wrench/LanguageSet.hpp"
// Including type: Wrench.LanguageLoader
#include "Wrench/LanguageLoader.hpp"
// Including type: Wrench.GroupResolve
#include "Wrench/GroupResolve.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& Wrench::LanguageSet::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Code
[[deprecated("Use field access instead!")]] ::StringW& Wrench::LanguageSet::dyn_Code() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_Code");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Code"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Group
[[deprecated("Use field access instead!")]] ::StringW& Wrench::LanguageSet::dyn_Group() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_Group");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Group"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean GoesLeftwards
[[deprecated("Use field access instead!")]] bool& Wrench::LanguageSet::dyn_GoesLeftwards() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_GoesLeftwards");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GoesLeftwards"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.LanguageLoader Loader
[[deprecated("Use field access instead!")]] ::Wrench::LanguageLoader*& Wrench::LanguageSet::dyn_Loader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_Loader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Loader"))->offset;
  return *reinterpret_cast<::Wrench::LanguageLoader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Wrench.GroupResolve OnGroupResolve
[[deprecated("Use field access instead!")]] ::Wrench::GroupResolve*& Wrench::LanguageSet::dyn_OnGroupResolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_OnGroupResolve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnGroupResolve"))->offset;
  return *reinterpret_cast<::Wrench::GroupResolve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,Wrench.LanguageSet> ExtraGroups
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>*& Wrench::LanguageSet::dyn_ExtraGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::dyn_ExtraGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ExtraGroups"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.LanguageSet.SetContent
void Wrench::LanguageSet::SetContent(::StringW content) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::SetContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(content)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, content);
}
// Autogenerated method: Wrench.LanguageSet.ContainsGroup
bool Wrench::LanguageSet::ContainsGroup(::StringW group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::ContainsGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, group);
}
// Autogenerated method: Wrench.LanguageSet.LoadGroup
::Wrench::LanguageSet* Wrench::LanguageSet::LoadGroup(::StringW groupName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::LoadGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(groupName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, groupName);
}
// Autogenerated method: Wrench.LanguageSet.AddGroup
::Wrench::LanguageSet* Wrench::LanguageSet::AddGroup(::StringW content) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::AddGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(content)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, content);
}
// Autogenerated method: Wrench.LanguageSet.AddGroup
::Wrench::LanguageSet* Wrench::LanguageSet::AddGroup(::StringW content, ::StringW group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::AddGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(content), ::il2cpp_utils::ExtractType(group)})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::LanguageSet*, false>(this, ___internal__method, content, group);
}
// Autogenerated method: Wrench.LanguageSet.AddGroup
void Wrench::LanguageSet::AddGroup(::Wrench::LanguageSet* group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::AddGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, group);
}
// Autogenerated method: Wrench.LanguageSet.RemoveGroup
void Wrench::LanguageSet::RemoveGroup(::StringW group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::RemoveGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, group);
}
// Autogenerated method: Wrench.LanguageSet.GetValue
::StringW Wrench::LanguageSet::GetValue(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::GetValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::VariableSet*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, code);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.TextModifierChange
#include "Wrench/TextModifierChange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.TextModifierChange.Invoke
void Wrench::TextModifierChange::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TextModifierChange::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TextModifierChange*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.TextModifierChange.BeginInvoke
::System::IAsyncResult* Wrench::TextModifierChange::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TextModifierChange::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TextModifierChange*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Wrench.TextModifierChange.EndInvoke
void Wrench::TextModifierChange::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TextModifierChange::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::TextModifierChange*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Wrench.LanguageChange
#include "Wrench/LanguageChange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.LanguageChange.Invoke
void Wrench::LanguageChange::Invoke(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageChange::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageChange*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.LanguageChange.BeginInvoke
::System::IAsyncResult* Wrench::LanguageChange::BeginInvoke(::StringW code, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageChange::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageChange*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, code, callback, object);
}
// Autogenerated method: Wrench.LanguageChange.EndInvoke
void Wrench::LanguageChange::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageChange::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::LanguageChange*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.Text
#include "Wrench/Text.hpp"
// Including type: Wrench.LanguageChange
#include "Wrench/LanguageChange.hpp"
// Including type: Wrench.TextModifierChange
#include "Wrench/TextModifierChange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String _Language
::StringW Wrench::Text::_get__Language() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get__Language");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Wrench", "Text", "_Language"));
}
// Autogenerated static field setter
// Set static field: static private System.String _Language
void Wrench::Text::_set__Language(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set__Language");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "_Language", value));
}
// Autogenerated static field getter
// Get static field: static public System.String VariableModifiers
::StringW Wrench::Text::_get_VariableModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get_VariableModifiers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Wrench", "Text", "VariableModifiers"));
}
// Autogenerated static field setter
// Set static field: static public System.String VariableModifiers
void Wrench::Text::_set_VariableModifiers(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set_VariableModifiers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "VariableModifiers", value));
}
// Autogenerated static field getter
// Get static field: static private Wrench.Gender _Gender
::Wrench::Gender Wrench::Text::_get__Gender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get__Gender");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::Gender>("Wrench", "Text", "_Gender"));
}
// Autogenerated static field setter
// Set static field: static private Wrench.Gender _Gender
void Wrench::Text::_set__Gender(::Wrench::Gender value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set__Gender");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "_Gender", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADECC4
// Autogenerated static field getter
// Get static field: static private Wrench.LanguageChange OnLanguageChanged
::Wrench::LanguageChange* Wrench::Text::_get_OnLanguageChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get_OnLanguageChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::LanguageChange*>("Wrench", "Text", "OnLanguageChanged"));
}
// Autogenerated static field setter
// Set static field: static private Wrench.LanguageChange OnLanguageChanged
void Wrench::Text::_set_OnLanguageChanged(::Wrench::LanguageChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set_OnLanguageChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "OnLanguageChanged", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADECD4
// Autogenerated static field getter
// Get static field: static private Wrench.TextModifierChange OnGenderChanged
::Wrench::TextModifierChange* Wrench::Text::_get_OnGenderChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get_OnGenderChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::TextModifierChange*>("Wrench", "Text", "OnGenderChanged"));
}
// Autogenerated static field setter
// Set static field: static private Wrench.TextModifierChange OnGenderChanged
void Wrench::Text::_set_OnGenderChanged(::Wrench::TextModifierChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set_OnGenderChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "OnGenderChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Wrench.WhitespaceMode Whitespace
::Wrench::WhitespaceMode Wrench::Text::_get_Whitespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_get_Whitespace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::WhitespaceMode>("Wrench", "Text", "Whitespace"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.WhitespaceMode Whitespace
void Wrench::Text::_set_Whitespace(::Wrench::WhitespaceMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::_set_Whitespace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "Text", "Whitespace", value));
}
// Autogenerated method: Wrench.Text.add_OnLanguageChanged
void Wrench::Text::add_OnLanguageChanged(::Wrench::LanguageChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::add_OnLanguageChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "add_OnLanguageChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.remove_OnLanguageChanged
void Wrench::Text::remove_OnLanguageChanged(::Wrench::LanguageChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::remove_OnLanguageChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "remove_OnLanguageChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.add_OnGenderChanged
void Wrench::Text::add_OnGenderChanged(::Wrench::TextModifierChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::add_OnGenderChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "add_OnGenderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.remove_OnGenderChanged
void Wrench::Text::remove_OnGenderChanged(::Wrench::TextModifierChange* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::remove_OnGenderChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "remove_OnGenderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.Setup
void Wrench::Text::Setup(::StringW defaultLanguage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultLanguage)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, defaultLanguage);
}
// Autogenerated method: Wrench.Text.get_Gender
::Wrench::Gender Wrench::Text::get_Gender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::get_Gender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "get_Gender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Wrench::Gender, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wrench.Text.set_Gender
void Wrench::Text::set_Gender(::Wrench::Gender value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::set_Gender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "set_Gender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.get_Language
::StringW Wrench::Text::get_Language() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::get_Language");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "get_Language", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wrench.Text.set_Language
void Wrench::Text::set_Language(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::set_Language");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "set_Language", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Wrench.Text.LanguageChanged
void Wrench::Text::LanguageChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::LanguageChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "LanguageChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wrench.Text.Escape
::StringW Wrench::Text::Escape(::StringW xml) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::Escape");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", "Escape", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xml)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, xml);
}
// Autogenerated method: Wrench.Text..cctor
void Wrench::Text::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::Text::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "Text", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.VariableSet
#include "Wrench/VariableSet.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,System.String> Map
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& Wrench::VariableSet::dyn_Map() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::dyn_Map");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Map"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wrench.VariableSet.Clear
void Wrench::VariableSet::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wrench.VariableSet.Add
void Wrench::VariableSet::Add(::StringW code, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, value);
}
// Autogenerated method: Wrench.VariableSet.Remove
void Wrench::VariableSet::Remove(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.VariableSet.Contains
bool Wrench::VariableSet::Contains(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.VariableSet.GetValue
::StringW Wrench::VariableSet::GetValue(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::GetValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::VariableSet*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.VariableSet.SetValue
void Wrench::VariableSet::SetValue(::StringW code, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::SetValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wrench::VariableSet*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, value);
}
// Autogenerated method: Wrench.VariableSet.get_Item
::StringW Wrench::VariableSet::get_Item(::StringW code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, code);
}
// Autogenerated method: Wrench.VariableSet.set_Item
void Wrench::VariableSet::set_Item(::StringW code, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, code, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.WhitespaceMode
#include "Wrench/WhitespaceMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Wrench.WhitespaceMode Preserve
::Wrench::WhitespaceMode Wrench::WhitespaceMode::_get_Preserve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::WhitespaceMode::_get_Preserve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::WhitespaceMode>("Wrench", "WhitespaceMode", "Preserve"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.WhitespaceMode Preserve
void Wrench::WhitespaceMode::_set_Preserve(::Wrench::WhitespaceMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::WhitespaceMode::_set_Preserve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "WhitespaceMode", "Preserve", value));
}
// Autogenerated static field getter
// Get static field: static public Wrench.WhitespaceMode Normal
::Wrench::WhitespaceMode Wrench::WhitespaceMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::WhitespaceMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wrench::WhitespaceMode>("Wrench", "WhitespaceMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public Wrench.WhitespaceMode Normal
void Wrench::WhitespaceMode::_set_Normal(::Wrench::WhitespaceMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::WhitespaceMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wrench", "WhitespaceMode", "Normal", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Wrench::WhitespaceMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::WhitespaceMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wrench.TypeData
#include "Wrench/TypeData.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Wrench.TypeData.IsSubclassOf
bool Wrench::TypeData::IsSubclassOf(::System::Type* toCheck, ::System::Type* classOf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TypeData::IsSubclassOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TypeData", "IsSubclassOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toCheck), ::il2cpp_utils::ExtractType(classOf)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, toCheck, classOf);
}
// Autogenerated method: Wrench.TypeData.GenericArguments
::ArrayW<::System::Type*> Wrench::TypeData::GenericArguments(::System::Type* forType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TypeData::GenericArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wrench", "TypeData", "GenericArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forType)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, forType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
// Including type: PowerUI.ImagePackage
#include "PowerUI/ImagePackage.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Blaze.TextureAtlas
#include "Blaze/TextureAtlas.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Color32 Fill
::UnityEngine::Color32 InfiniText::Glyph::_get_Fill() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::_get_Fill");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color32>("InfiniText", "Glyph", "Fill"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Color32 Fill
void InfiniText::Glyph::_set_Fill(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::_set_Fill");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Glyph", "Fill", value));
}
// Autogenerated instance field getter
// Get instance field: public PowerUI.ImagePackage Image
[[deprecated("Use field access instead!")]] ::PowerUI::ImagePackage*& InfiniText::Glyph::dyn_Image() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_Image");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Image"))->offset;
  return *reinterpret_cast<::PowerUI::ImagePackage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasLocation Location
[[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& InfiniText::Glyph::dyn_Location() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_Location");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Location"))->offset;
  return *reinterpret_cast<::Blaze::AtlasLocation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UniqueID
[[deprecated("Use field access instead!")]] int& InfiniText::Glyph::dyn_UniqueID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_UniqueID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UniqueID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFace Font
[[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& InfiniText::Glyph::dyn_Font() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_Font");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Font"))->offset;
  return *reinterpret_cast<::InfiniText::FontFace**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 RawCharcode
[[deprecated("Use field access instead!")]] int& InfiniText::Glyph::dyn_RawCharcode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_RawCharcode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RawCharcode"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single AdvanceWidth
[[deprecated("Use field access instead!")]] float& InfiniText::Glyph::dyn_AdvanceWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_AdvanceWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AdvanceWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LeftSideBearing
[[deprecated("Use field access instead!")]] float& InfiniText::Glyph::dyn_LeftSideBearing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_LeftSideBearing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LeftSideBearing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<InfiniText.Glyph,System.Single> Kerning
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>*& InfiniText::Glyph::dyn_Kerning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::dyn_Kerning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Kerning"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.Glyph.OnScreen
void InfiniText::Glyph::OnScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::OnScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.OffScreen
void InfiniText::Glyph::OffScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::OffScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_Rightwards
bool InfiniText::Glyph::get_Rightwards() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_Rightwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Rightwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_Space
bool InfiniText::Glyph::get_Space() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_Space");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Space", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.SetupImage
void InfiniText::Glyph::SetupImage(::PowerUI::ImagePackage* package) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::SetupImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(package)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, package);
}
// Autogenerated method: InfiniText.Glyph.get_RequiresLoad
bool InfiniText::Glyph::get_RequiresLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_RequiresLoad");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.AddToFont
bool InfiniText::Glyph::AddToFont(::StringW name, int charcode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::AddToFont");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToFont", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(charcode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name, charcode);
}
// Autogenerated method: InfiniText.Glyph.AddToFont
bool InfiniText::Glyph::AddToFont(::StringW name, ::StringW charcode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::AddToFont");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToFont", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(charcode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name, charcode);
}
// Autogenerated method: InfiniText.Glyph.LoadNow
void InfiniText::Glyph::LoadNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::LoadNow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.MultiThreadDraw
bool InfiniText::Glyph::MultiThreadDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::MultiThreadDraw");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.GetDimensionsOnAtlas
void InfiniText::Glyph::GetDimensionsOnAtlas(ByRef<int> width, ByRef<int> height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::GetDimensionsOnAtlas");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(width), byref(height));
}
// Autogenerated method: InfiniText.Glyph.DrawToAtlas
bool InfiniText::Glyph::DrawToAtlas(::Blaze::TextureAtlas* atlas, ::Blaze::AtlasLocation* location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::DrawToAtlas");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, atlas, location);
}
// Autogenerated method: InfiniText.Glyph.GetAtlasID
int InfiniText::Glyph::GetAtlasID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::GetAtlasID");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_RasterHeight
int InfiniText::Glyph::get_RasterHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_RasterHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RasterHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_RasterWidth
int InfiniText::Glyph::get_RasterWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_RasterWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RasterWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.Rasterise
bool InfiniText::Glyph::Rasterise(::ArrayW<::UnityEngine::Color32> atlasPixels, int atlasWidth, int baseIndex, bool clear) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::Rasterise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rasterise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atlasPixels), ::il2cpp_utils::ExtractType(atlasWidth), ::il2cpp_utils::ExtractType(baseIndex), ::il2cpp_utils::ExtractType(clear)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, atlasPixels, atlasWidth, baseIndex, clear);
}
// Autogenerated method: InfiniText.Glyph.Rasterise
bool InfiniText::Glyph::Rasterise(::ArrayW<::UnityEngine::Color32> atlasPixels, int atlasWidth, int baseIndex, bool clear, ::UnityEngine::Color32 colour) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::Rasterise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rasterise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atlasPixels), ::il2cpp_utils::ExtractType(atlasWidth), ::il2cpp_utils::ExtractType(baseIndex), ::il2cpp_utils::ExtractType(clear), ::il2cpp_utils::ExtractType(colour)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, atlasPixels, atlasWidth, baseIndex, clear, colour);
}
// Autogenerated method: InfiniText.Glyph.Copy
::InfiniText::Glyph* InfiniText::Glyph::Copy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::Copy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Copy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.Copy
void InfiniText::Glyph::Copy(::InfiniText::Glyph* into) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::Copy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Copy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(into)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, into);
}
// Autogenerated method: InfiniText.Glyph.AddKerningPair
void InfiniText::Glyph::AddKerningPair(::InfiniText::Glyph* beforeThis, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::AddKerningPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKerningPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beforeThis), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, beforeThis, value);
}
// Autogenerated method: InfiniText.Glyph.AddCharcode
void InfiniText::Glyph::AddCharcode(int charCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::AddCharcode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCharcode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, charCode);
}
// Autogenerated method: InfiniText.Glyph.get_DescendorOffset
float InfiniText::Glyph::get_DescendorOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_DescendorOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DescendorOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_TextString
::StringW InfiniText::Glyph::get_TextString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_TextString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TextString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_Charcode
int InfiniText::Glyph::get_Charcode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_Charcode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Charcode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.get_IsComposite
bool InfiniText::Glyph::get_IsComposite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::get_IsComposite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.Glyph.LoadFully
void InfiniText::Glyph::LoadFully(::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::LoadFully");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glyphs);
}
// Autogenerated method: InfiniText.Glyph..cctor
void InfiniText::Glyph::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Glyph", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
// Including type: InfiniText.FontFamily
#include "InfiniText/FontFamily.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: InfiniText.CffGlyphParser
#include "InfiniText/CffGlyphParser.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: PowerUI.SPA
#include "PowerUI/SPA.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Weight
[[deprecated("Use field access instead!")]] int& InfiniText::FontFace::dyn_Weight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Weight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Weight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& InfiniText::FontFace::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Clockness
[[deprecated("Use field access instead!")]] bool& InfiniText::FontFace::dyn_Clockness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Clockness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Clockness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.Glyph NotDefined
[[deprecated("Use field access instead!")]] ::InfiniText::Glyph*& InfiniText::FontFace::dyn_NotDefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_NotDefined");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NotDefined"))->offset;
  return *reinterpret_cast<::InfiniText::Glyph**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean WindingUnknown
[[deprecated("Use field access instead!")]] bool& InfiniText::FontFace::dyn_WindingUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_WindingUnknown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WindingUnknown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RequiresLoad
[[deprecated("Use field access instead!")]] bool& InfiniText::FontFace::dyn_RequiresLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_RequiresLoad");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequiresLoad"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LineGap
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_LineGap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_LineGap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LineGap"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ItalicAngle
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_ItalicAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_ItalicAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ItalicAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Ascender
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_Ascender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Ascender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ascender"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Descender
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_Descender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Descender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Descender"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFamily Family
[[deprecated("Use field access instead!")]] ::InfiniText::FontFamily*& InfiniText::FontFace::dyn_Family() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Family");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Family"))->offset;
  return *reinterpret_cast<::InfiniText::FontFamily**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CharacterCount
[[deprecated("Use field access instead!")]] int& InfiniText::FontFace::dyn_CharacterCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_CharacterCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CharacterCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single MaxAdvanceWidth
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_MaxAdvanceWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_MaxAdvanceWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxAdvanceWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single MinLeftSideBearing
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_MinLeftSideBearing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_MinLeftSideBearing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MinLeftSideBearing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single MinRightSideBearing
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_MinRightSideBearing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_MinRightSideBearing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MinRightSideBearing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single MaxXExtent
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_MaxXExtent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_MaxXExtent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxXExtent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CaretAngle
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_CaretAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_CaretAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CaretAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single CaretOffset
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_CaretOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_CaretOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CaretOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 NumberOfHMetrics
[[deprecated("Use field access instead!")]] int& InfiniText::FontFace::dyn_NumberOfHMetrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_NumberOfHMetrics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NumberOfHMetrics"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UnitsPerEm
[[deprecated("Use field access instead!")]] int& InfiniText::FontFace::dyn_UnitsPerEm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_UnitsPerEm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnitsPerEm"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single UnitsPerEmF
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_UnitsPerEmF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_UnitsPerEmF");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnitsPerEmF"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single StrikeSize
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_StrikeSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_StrikeSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StrikeSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single StrikeOffset
[[deprecated("Use field access instead!")]] float& InfiniText::FontFace::dyn_StrikeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_StrikeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StrikeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFace SyntheticDerivative
[[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& InfiniText::FontFace::dyn_SyntheticDerivative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_SyntheticDerivative");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SyntheticDerivative"))->offset;
  return *reinterpret_cast<::InfiniText::FontFace**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFaceFlags StyleFlags
[[deprecated("Use field access instead!")]] ::InfiniText::FontFaceFlags& InfiniText::FontFace::dyn_StyleFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_StyleFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StyleFlags"))->offset;
  return *reinterpret_cast<::InfiniText::FontFaceFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.Int32,InfiniText.Glyph> Glyphs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::InfiniText::Glyph*>*& InfiniText::FontFace::dyn_Glyphs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Glyphs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Glyphs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::InfiniText::Glyph*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffGlyphParser CffParser
[[deprecated("Use field access instead!")]] ::InfiniText::CffGlyphParser*& InfiniText::FontFace::dyn_CffParser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_CffParser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CffParser"))->offset;
  return *reinterpret_cast<::InfiniText::CffGlyphParser**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontParser Parser
[[deprecated("Use field access instead!")]] ::InfiniText::FontParser*& InfiniText::FontFace::dyn_Parser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_Parser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parser"))->offset;
  return *reinterpret_cast<::InfiniText::FontParser**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: InfiniText.Glyph[] ParserGlyphs
[[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::Glyph*>& InfiniText::FontFace::dyn_ParserGlyphs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_ParserGlyphs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParserGlyphs"))->offset;
  return *reinterpret_cast<::ArrayW<::InfiniText::Glyph*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UnloadedGlyphs
[[deprecated("Use field access instead!")]] int& InfiniText::FontFace::dyn_UnloadedGlyphs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_UnloadedGlyphs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnloadedGlyphs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PowerUI.SPA BitmapFontData
[[deprecated("Use field access instead!")]] ::PowerUI::SPA*& InfiniText::FontFace::dyn_BitmapFontData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::dyn_BitmapFontData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BitmapFontData"))->offset;
  return *reinterpret_cast<::PowerUI::SPA**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.FontFace.SetupBitmapFont
void InfiniText::FontFace::SetupBitmapFont(::PowerUI::SPA* spa) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::SetupBitmapFont");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupBitmapFont", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spa)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, spa);
}
// Autogenerated method: InfiniText.FontFace.AllGlyphsLoaded
void InfiniText::FontFace::AllGlyphsLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::AllGlyphsLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllGlyphsLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.FindWinding
void InfiniText::FontFace::FindWinding(::InfiniText::Glyph* glyph) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::FindWinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindWinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyph)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glyph);
}
// Autogenerated method: InfiniText.FontFace.Load
void InfiniText::FontFace::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.Derive
void InfiniText::FontFace::Derive(::InfiniText::FontFace* from, bool italic, int weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::Derive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Derive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(italic), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, from, italic, weight);
}
// Autogenerated method: InfiniText.FontFace.SetItalicAngle
void InfiniText::FontFace::SetItalicAngle(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::SetItalicAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetItalicAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, angle);
}
// Autogenerated method: InfiniText.FontFace.SetFlags
void InfiniText::FontFace::SetFlags(bool italic, int weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::SetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(italic), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, italic, weight);
}
// Autogenerated method: InfiniText.FontFace.get_Synthetic
bool InfiniText::FontFace::get_Synthetic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_Synthetic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Synthetic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.get_Regular
bool InfiniText::FontFace::get_Regular() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_Regular");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Regular", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.get_Italic
bool InfiniText::FontFace::get_Italic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_Italic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Italic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.get_Bold
bool InfiniText::FontFace::get_Bold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_Bold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Bold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.CreateSynthetic
::InfiniText::FontFace* InfiniText::FontFace::CreateSynthetic(bool italic, int weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::CreateSynthetic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSynthetic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(italic), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(this, ___internal__method, italic, weight);
}
// Autogenerated method: InfiniText.FontFace.Synthesize
::InfiniText::Glyph* InfiniText::FontFace::Synthesize(int charCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::Synthesize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Synthesize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charCode);
}
// Autogenerated method: InfiniText.FontFace.get_Item
::InfiniText::Glyph* InfiniText::FontFace::get_Item(int charCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charCode);
}
// Autogenerated method: InfiniText.FontFace.set_Item
void InfiniText::FontFace::set_Item(int charCode, ::InfiniText::Glyph* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, charCode, value);
}
// Autogenerated method: InfiniText.FontFace.GetGlyphDirect
::InfiniText::Glyph* InfiniText::FontFace::GetGlyphDirect(int charCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::GetGlyphDirect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyphDirect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charCode);
}
// Autogenerated method: InfiniText.FontFace.GetGlyph
::InfiniText::Glyph* InfiniText::FontFace::GetGlyph(int charCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::GetGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charCode);
}
// Autogenerated method: InfiniText.FontFace.GetGlyph
::InfiniText::Glyph* InfiniText::FontFace::GetGlyph(int charCode, ByRef<bool> firstTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::GetGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charCode), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charCode, byref(firstTime));
}
// Autogenerated method: InfiniText.FontFace.get_FamilyName
::StringW InfiniText::FontFace::get_FamilyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::get_FamilyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FamilyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontFace.set_FamilyName
void InfiniText::FontFace::set_FamilyName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFace::set_FamilyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FamilyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.FontFaceFlags
#include "InfiniText/FontFaceFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Italic
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Italic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Italic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Italic"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Italic
void InfiniText::FontFaceFlags::_set_Italic(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Italic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Italic", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold100
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold100() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold100");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold100"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold100
void InfiniText::FontFaceFlags::_set_Bold100(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold100");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold100", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold200
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold200() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold200");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold200"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold200
void InfiniText::FontFaceFlags::_set_Bold200(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold200");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold200", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold300
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold300() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold300");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold300"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold300
void InfiniText::FontFaceFlags::_set_Bold300(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold300");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold300", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Regular
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Regular() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Regular");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Regular"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Regular
void InfiniText::FontFaceFlags::_set_Regular(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Regular");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Regular", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold500
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold500() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold500");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold500"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold500
void InfiniText::FontFaceFlags::_set_Bold500(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold500");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold500", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold600
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold600() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold600");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold600"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold600
void InfiniText::FontFaceFlags::_set_Bold600(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold600");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold600", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold700
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold700() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold700");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold700"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold700
void InfiniText::FontFaceFlags::_set_Bold700(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold700");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold700", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold800
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold800() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold800");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold800"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold800
void InfiniText::FontFaceFlags::_set_Bold800(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold800");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold800", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.FontFaceFlags Bold900
::InfiniText::FontFaceFlags InfiniText::FontFaceFlags::_get_Bold900() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_get_Bold900");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::FontFaceFlags>("InfiniText", "FontFaceFlags", "Bold900"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.FontFaceFlags Bold900
void InfiniText::FontFaceFlags::_set_Bold900(::InfiniText::FontFaceFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::_set_Bold900");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "FontFaceFlags", "Bold900", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& InfiniText::FontFaceFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFaceFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.FontFamily
#include "InfiniText/FontFamily.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
[[deprecated("Use field access instead!")]] ::StringW& InfiniText::FontFamily::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFace Regular
[[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& InfiniText::FontFamily::dyn_Regular() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_Regular");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Regular"))->offset;
  return *reinterpret_cast<::InfiniText::FontFace**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<InfiniText.FontFace> Bold
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::InfiniText::FontFace*>*& InfiniText::FontFamily::dyn_Bold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_Bold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Bold"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::InfiniText::FontFace*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<InfiniText.FontFace> Italics
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::InfiniText::FontFace*>*& InfiniText::FontFamily::dyn_Italics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_Italics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Italics"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::InfiniText::FontFace*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean InvertedNormals
[[deprecated("Use field access instead!")]] bool& InfiniText::FontFamily::dyn_InvertedNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_InvertedNormals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InvertedNormals"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<InfiniText.FontFaceFlags,InfiniText.FontFace> FontFaces
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>*& InfiniText::FontFamily::dyn_FontFaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::dyn_FontFaces");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FontFaces"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.FontFamily.Add
void InfiniText::FontFamily::Add(::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(font)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, font);
}
// Autogenerated method: InfiniText.FontFamily.GetNotDefined
::InfiniText::Glyph* InfiniText::FontFamily::GetNotDefined(::InfiniText::FontFaceFlags style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::GetNotDefined");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNotDefined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, style);
}
// Autogenerated method: InfiniText.FontFamily.GetGlyph
::InfiniText::Glyph* InfiniText::FontFamily::GetGlyph(int charcode, ::InfiniText::FontFaceFlags style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::GetGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charcode), ::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charcode, style);
}
// Autogenerated method: InfiniText.FontFamily.GetFace
::InfiniText::FontFace* InfiniText::FontFamily::GetFace(::InfiniText::FontFaceFlags style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::GetFace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(this, ___internal__method, style);
}
// Autogenerated method: InfiniText.FontFamily.GetGlyph
::InfiniText::Glyph* InfiniText::FontFamily::GetGlyph(int charcode, ::InfiniText::FontFaceFlags style, ByRef<bool> firstTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::GetGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charcode), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, charcode, style, byref(firstTime));
}
// Autogenerated method: InfiniText.FontFamily.BestWeight
::InfiniText::FontFace* InfiniText::FontFamily::BestWeight(::System::Collections::Generic::List_1<::InfiniText::FontFace*>* faces, int weight, ByRef<int> bestWeightDiff) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::BestWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BestWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(faces), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(this, ___internal__method, faces, weight, byref(bestWeightDiff));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.FontLoader
#include "InfiniText/FontLoader.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.FontLoader.DeferredLoad
::InfiniText::FontFace* InfiniText::FontLoader::DeferredLoad(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontLoader::DeferredLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "FontLoader", "DeferredLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: InfiniText.FontLoader.Load
::InfiniText::FontFace* InfiniText::FontLoader::Load(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontLoader::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "FontLoader", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: InfiniText.FontLoader.Load
::InfiniText::FontFace* InfiniText::FontLoader::Load(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontLoader::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "FontLoader", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser);
}
// Autogenerated method: InfiniText.FontLoader.Load
bool InfiniText::FontLoader::Load(::InfiniText::FontParser* parser, ::InfiniText::FontFace* font, bool full) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontLoader::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "FontLoader", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(full)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, font, full);
}
// Autogenerated method: InfiniText.FontLoader.ReadTables
bool InfiniText::FontLoader::ReadTables(::InfiniText::FontParser* parser, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontLoader::ReadTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "FontLoader", "ReadTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(font)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, font);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 GlyfOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_GlyfOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_GlyfOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GlyfOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 LocaOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_LocaOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_LocaOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LocaOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CffOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_CffOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_CffOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CffOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 HmtxOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_HmtxOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_HmtxOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HmtxOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 KernOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_KernOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_KernOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "KernOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 GposOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_GposOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_GposOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GposOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 GlyphCount
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_GlyphCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_GlyphCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GlyphCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CmapOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_CmapOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_CmapOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CmapOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 PostOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_PostOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_PostOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PostOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 HheaOffset
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_HheaOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_HheaOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HheaOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ReadOS2
[[deprecated("Use field access instead!")]] bool& InfiniText::FontParser::dyn_ReadOS2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_ReadOS2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReadOS2"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 IndexToLocFormat
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_IndexToLocFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_IndexToLocFormat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IndexToLocFormat"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] Data
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& InfiniText::FontParser::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Position
[[deprecated("Use field access instead!")]] int& InfiniText::FontParser::dyn_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::dyn_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Position"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.FontParser.ReadByte
uint8_t InfiniText::FontParser::ReadByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadOffset
int InfiniText::FontParser::ReadOffset(int offSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offSize)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, offSize);
}
// Autogenerated method: InfiniText.FontParser.ReadInt16
int16_t InfiniText::FontParser::ReadInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadInt16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadUInt16
uint16_t InfiniText::FontParser::ReadUInt16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadUInt16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadUInt16
uint16_t InfiniText::FontParser::ReadUInt16(ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadUInt16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method, byref(index));
}
// Autogenerated method: InfiniText.FontParser.ReadInt16
int16_t InfiniText::FontParser::ReadInt16(ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadInt16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method, byref(index));
}
// Autogenerated method: InfiniText.FontParser.ReadInt32
int InfiniText::FontParser::ReadInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadUInt32
uint InfiniText::FontParser::ReadUInt32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadUInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadInt24
int InfiniText::FontParser::ReadInt24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadInt24");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInt24", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadUInt24
uint InfiniText::FontParser::ReadUInt24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadUInt24");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadUInt24", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadRevision
float InfiniText::FontParser::ReadRevision() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadRevision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadRevision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadVersion
float InfiniText::FontParser::ReadVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadTime
uint64_t InfiniText::FontParser::ReadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadString
::StringW InfiniText::FontParser::ReadString(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, length);
}
// Autogenerated method: InfiniText.FontParser.ReadTag
::StringW InfiniText::FontParser::ReadTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadF2Dot14
float InfiniText::FontParser::ReadF2Dot14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadF2Dot14");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadF2Dot14", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.FontParser.ReadFixed
int InfiniText::FontParser::ReadFixed(ByRef<int> frac) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontParser::ReadFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byref(frac));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: InfiniText.OnLogEvent
#include "InfiniText/OnLogEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.OnLogEvent.Invoke
void InfiniText::OnLogEvent::Invoke(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnLogEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnLogEvent*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: InfiniText.OnLogEvent.BeginInvoke
::System::IAsyncResult* InfiniText::OnLogEvent::BeginInvoke(::StringW text, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnLogEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnLogEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, text, callback, object);
}
// Autogenerated method: InfiniText.OnLogEvent.EndInvoke
void InfiniText::OnLogEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnLogEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnLogEvent*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.Fonts
#include "InfiniText/Fonts.hpp"
// Including type: Blaze.Scanner
#include "Blaze/Scanner.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: InfiniText.FontFamily
#include "InfiniText/FontFamily.hpp"
// Including type: InfiniText.OnLogEvent
#include "InfiniText/OnLogEvent.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean UseOS2Metrics
bool InfiniText::Fonts::_get_UseOS2Metrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_UseOS2Metrics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "Fonts", "UseOS2Metrics"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean UseOS2Metrics
void InfiniText::Fonts::_set_UseOS2Metrics(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_UseOS2Metrics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "UseOS2Metrics", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 GlyphID
int InfiniText::Fonts::_get_GlyphID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_GlyphID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "Fonts", "GlyphID"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 GlyphID
void InfiniText::Fonts::_set_GlyphID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_GlyphID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "GlyphID", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean UseGPU
bool InfiniText::Fonts::_get_UseGPU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_UseGPU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "Fonts", "UseGPU"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean UseGPU
void InfiniText::Fonts::_set_UseGPU(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_UseGPU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "UseGPU", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Single[] AutoAliasHints
::ArrayW<float> InfiniText::Fonts::_get_AutoAliasHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_AutoAliasHints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<float>>("InfiniText", "Fonts", "AutoAliasHints"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single[] AutoAliasHints
void InfiniText::Fonts::_set_AutoAliasHints(::ArrayW<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_AutoAliasHints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "AutoAliasHints", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single Aliasing
float InfiniText::Fonts::_get_Aliasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_Aliasing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "Fonts", "Aliasing"));
}
// Autogenerated static field setter
// Set static field: static public System.Single Aliasing
void InfiniText::Fonts::_set_Aliasing(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_Aliasing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "Aliasing", value));
}
// Autogenerated static field getter
// Get static field: static public Blaze.Scanner Rasteriser
::Blaze::Scanner* InfiniText::Fonts::_get_Rasteriser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_Rasteriser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Blaze::Scanner*>("InfiniText", "Fonts", "Rasteriser"));
}
// Autogenerated static field setter
// Set static field: static public Blaze.Scanner Rasteriser
void InfiniText::Fonts::_set_Rasteriser(::Blaze::Scanner* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_Rasteriser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "Rasteriser", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean Preload
bool InfiniText::Fonts::_get_Preload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_Preload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "Fonts", "Preload"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean Preload
void InfiniText::Fonts::_set_Preload(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_Preload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "Preload", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean DeferLoad
bool InfiniText::Fonts::_get_DeferLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_DeferLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "Fonts", "DeferLoad"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean DeferLoad
void InfiniText::Fonts::_set_DeferLoad(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_DeferLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "DeferLoad", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean InvertedNormals
bool InfiniText::Fonts::_get_InvertedNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_InvertedNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "Fonts", "InvertedNormals"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean InvertedNormals
void InfiniText::Fonts::_set_InvertedNormals(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_InvertedNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "InvertedNormals", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single SdfPixelHeight
float InfiniText::Fonts::_get_SdfPixelHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_SdfPixelHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "Fonts", "SdfPixelHeight"));
}
// Autogenerated static field setter
// Set static field: static public System.Single SdfPixelHeight
void InfiniText::Fonts::_set_SdfPixelHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_SdfPixelHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "SdfPixelHeight", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single SdfOffset
float InfiniText::Fonts::_get_SdfOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_SdfOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "Fonts", "SdfOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single SdfOffset
void InfiniText::Fonts::_set_SdfOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_SdfOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "SdfOffset", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SdfSize
int InfiniText::Fonts::_get_SdfSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_SdfSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "Fonts", "SdfSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SdfSize
void InfiniText::Fonts::_set_SdfSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_SdfSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "SdfSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 DoubleSdfSize
int InfiniText::Fonts::_get_DoubleSdfSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_DoubleSdfSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "Fonts", "DoubleSdfSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DoubleSdfSize
void InfiniText::Fonts::_set_DoubleSdfSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_DoubleSdfSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "DoubleSdfSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single OutlineLocation
float InfiniText::Fonts::_get_OutlineLocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_OutlineLocation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "Fonts", "OutlineLocation"));
}
// Autogenerated static field setter
// Set static field: static public System.Single OutlineLocation
void InfiniText::Fonts::_set_OutlineLocation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_OutlineLocation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "OutlineLocation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.String,InfiniText.FontFamily> All
::System::Collections::Generic::Dictionary_2<::StringW, ::InfiniText::FontFamily*>* InfiniText::Fonts::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_All");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::InfiniText::FontFamily*>*>("InfiniText", "Fonts", "All")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.String,InfiniText.FontFamily> All
void InfiniText::Fonts::_set_All(::System::Collections::Generic::Dictionary_2<::StringW, ::InfiniText::FontFamily*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "All", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.OnLogEvent OnLog
::InfiniText::OnLogEvent* InfiniText::Fonts::_get_OnLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_get_OnLog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::OnLogEvent*>("InfiniText", "Fonts", "OnLog"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.OnLogEvent OnLog
void InfiniText::Fonts::_set_OnLog(::InfiniText::OnLogEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::_set_OnLog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "Fonts", "OnLog", value));
}
// Autogenerated method: InfiniText.Fonts.OnLogMessage
void InfiniText::Fonts::OnLogMessage(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::OnLogMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "OnLogMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated method: InfiniText.Fonts.Load
::InfiniText::FontFace* InfiniText::Fonts::Load(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFace*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: InfiniText.Fonts.UpdateAliasValues
void InfiniText::Fonts::UpdateAliasValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::UpdateAliasValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "UpdateAliasValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.Fonts.get_SDFSpread
int InfiniText::Fonts::get_SDFSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::get_SDFSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "get_SDFSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.Fonts.set_SDFSpread
void InfiniText::Fonts::set_SDFSpread(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::set_SDFSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "set_SDFSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: InfiniText.Fonts.get_PixelHeight
float InfiniText::Fonts::get_PixelHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::get_PixelHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "get_PixelHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.Fonts.set_PixelHeight
void InfiniText::Fonts::set_PixelHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::set_PixelHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "set_PixelHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: InfiniText.Fonts.Clear
void InfiniText::Fonts::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.Fonts.Start
void InfiniText::Fonts::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.Fonts.GetOrCreate
::InfiniText::FontFamily* InfiniText::Fonts::GetOrCreate(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::GetOrCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "GetOrCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFamily*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name);
}
// Autogenerated method: InfiniText.Fonts.AddToCache
void InfiniText::Fonts::AddToCache(::StringW name, ::InfiniText::FontFamily* family) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::AddToCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "AddToCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(family)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, family);
}
// Autogenerated method: InfiniText.Fonts.Get
::InfiniText::FontFamily* InfiniText::Fonts::Get(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::FontFamily*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name);
}
// Autogenerated method: InfiniText.Fonts..cctor
void InfiniText::Fonts::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Fonts::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "Fonts", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CompositeGlyph
#include "InfiniText/CompositeGlyph.hpp"
// Including type: Blaze.VectorTransform
#include "Blaze/VectorTransform.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Blaze.VectorTransform LastComponent
[[deprecated("Use field access instead!")]] ::Blaze::VectorTransform*& InfiniText::CompositeGlyph::dyn_LastComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::dyn_LastComponent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LastComponent"))->offset;
  return *reinterpret_cast<::Blaze::VectorTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.VectorTransform FirstComponent
[[deprecated("Use field access instead!")]] ::Blaze::VectorTransform*& InfiniText::CompositeGlyph::dyn_FirstComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::dyn_FirstComponent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FirstComponent"))->offset;
  return *reinterpret_cast<::Blaze::VectorTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.CompositeGlyph.AddComponent
void InfiniText::CompositeGlyph::AddComponent(::Blaze::VectorTransform* component) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::AddComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, component);
}
// Autogenerated method: InfiniText.CompositeGlyph.TransformPoints
void InfiniText::CompositeGlyph::TransformPoints(::InfiniText::Glyph* fromGlyph, ::Blaze::VectorTransform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::TransformPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromGlyph), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromGlyph, transform);
}
// Autogenerated method: InfiniText.CompositeGlyph.get_RequiresLoad
bool InfiniText::CompositeGlyph::get_RequiresLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::get_RequiresLoad");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CompositeGlyph.LoadNow
void InfiniText::CompositeGlyph::LoadNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::LoadNow");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CompositeGlyph.get_IsComposite
bool InfiniText::CompositeGlyph::get_IsComposite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::get_IsComposite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CompositeGlyph.LoadFully
void InfiniText::CompositeGlyph::LoadFully(::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CompositeGlyph::LoadFully");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::Glyph*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glyphs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.GlyphPoint
#include "InfiniText/GlyphPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single X
[[deprecated("Use field access instead!")]] float& InfiniText::GlyphPoint::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Y
[[deprecated("Use field access instead!")]] float& InfiniText::GlyphPoint::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Active
[[deprecated("Use field access instead!")]] bool& InfiniText::GlyphPoint::dyn_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_Active");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean OnCurve
[[deprecated("Use field access instead!")]] bool& InfiniText::GlyphPoint::dyn_OnCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_OnCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnCurve"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] Flags
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& InfiniText::GlyphPoint::dyn_Flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_Flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Flags"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] Coords
[[deprecated("Use field access instead!")]] ::ArrayW<float>& InfiniText::GlyphPoint::dyn_Coords() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::dyn_Coords");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Coords"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.GlyphPoint.Set
void InfiniText::GlyphPoint::Set(::InfiniText::GlyphPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, point);
}
// Autogenerated method: InfiniText.GlyphPoint.Set
void InfiniText::GlyphPoint::Set(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: InfiniText.OnGetDistance
#include "InfiniText/OnGetDistance.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.OnGetDistance.Invoke
float InfiniText::OnGetDistance::Invoke(float x, float y, int vertexIndex, int totalVertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnGetDistance::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnGetDistance*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, x, y, vertexIndex, totalVertices);
}
// Autogenerated method: InfiniText.OnGetDistance.BeginInvoke
::System::IAsyncResult* InfiniText::OnGetDistance::BeginInvoke(float x, float y, int vertexIndex, int totalVertices, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnGetDistance::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnGetDistance*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, x, y, vertexIndex, totalVertices, callback, object);
}
// Autogenerated method: InfiniText.OnGetDistance.EndInvoke
float InfiniText::OnGetDistance::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OnGetDistance::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::OnGetDistance*), 14));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.DistanceSpread
#include "InfiniText/DistanceSpread.hpp"
// Including type: InfiniText.OnGetDistance
#include "InfiniText/OnGetDistance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean Custom
bool InfiniText::DistanceSpread::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "DistanceSpread", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean Custom
void InfiniText::DistanceSpread::_set_Custom(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "Custom", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.OnGetDistance GetInner
::InfiniText::OnGetDistance* InfiniText::DistanceSpread::_get_GetInner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_GetInner");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::OnGetDistance*>("InfiniText", "DistanceSpread", "GetInner"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.OnGetDistance GetInner
void InfiniText::DistanceSpread::_set_GetInner(::InfiniText::OnGetDistance* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_GetInner");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "GetInner", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.OnGetDistance GetOuter
::InfiniText::OnGetDistance* InfiniText::DistanceSpread::_get_GetOuter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_GetOuter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::OnGetDistance*>("InfiniText", "DistanceSpread", "GetOuter"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.OnGetDistance GetOuter
void InfiniText::DistanceSpread::_set_GetOuter(::InfiniText::OnGetDistance* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_GetOuter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "GetOuter", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean InnerOuterDiff
bool InfiniText::DistanceSpread::_get_InnerOuterDiff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_InnerOuterDiff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "DistanceSpread", "InnerOuterDiff"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean InnerOuterDiff
void InfiniText::DistanceSpread::_set_InnerOuterDiff(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_InnerOuterDiff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "InnerOuterDiff", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single DefaultInner
float InfiniText::DistanceSpread::_get_DefaultInner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_DefaultInner");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "DistanceSpread", "DefaultInner"));
}
// Autogenerated static field setter
// Set static field: static public System.Single DefaultInner
void InfiniText::DistanceSpread::_set_DefaultInner(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_DefaultInner");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "DefaultInner", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single DefaultOuter
float InfiniText::DistanceSpread::_get_DefaultOuter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_get_DefaultOuter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "DistanceSpread", "DefaultOuter"));
}
// Autogenerated static field setter
// Set static field: static public System.Single DefaultOuter
void InfiniText::DistanceSpread::_set_DefaultOuter(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::_set_DefaultOuter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "DistanceSpread", "DefaultOuter", value));
}
// Autogenerated method: InfiniText.DistanceSpread.SetFunction
void InfiniText::DistanceSpread::SetFunction(::InfiniText::OnGetDistance* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::SetFunction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "DistanceSpread", "SetFunction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method);
}
// Autogenerated method: InfiniText.DistanceSpread.SetFunctions
void InfiniText::DistanceSpread::SetFunctions(::InfiniText::OnGetDistance* inner, ::InfiniText::OnGetDistance* outer, bool hd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::SetFunctions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "DistanceSpread", "SetFunctions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inner), ::il2cpp_utils::ExtractType(outer), ::il2cpp_utils::ExtractType(hd)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, inner, outer, hd);
}
// Autogenerated method: InfiniText.DistanceSpread..cctor
void InfiniText::DistanceSpread::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DistanceSpread::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "DistanceSpread", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.DrawingTexture
#include "InfiniText/DrawingTexture.hpp"
// Including type: Blaze.VectorPath
#include "Blaze/VectorPath.hpp"
// Including type: InfiniText.MeshBuffer
#include "InfiniText/MeshBuffer.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
// Including type: InfiniText.TextureCamera
#include "InfiniText/TextureCamera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 X
[[deprecated("Use field access instead!")]] int& InfiniText::DrawingTexture::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Y
[[deprecated("Use field access instead!")]] int& InfiniText::DrawingTexture::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single OffsetY
[[deprecated("Use field access instead!")]] float& InfiniText::DrawingTexture::dyn_OffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_OffsetY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OffsetY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single OffsetX
[[deprecated("Use field access instead!")]] float& InfiniText::DrawingTexture::dyn_OffsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_OffsetX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OffsetX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.VectorPath Path
[[deprecated("Use field access instead!")]] ::Blaze::VectorPath*& InfiniText::DrawingTexture::dyn_Path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_Path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Path"))->offset;
  return *reinterpret_cast<::Blaze::VectorPath**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.MeshBuffer Mesh
[[deprecated("Use field access instead!")]] ::InfiniText::MeshBuffer*& InfiniText::DrawingTexture::dyn_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_Mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Mesh"))->offset;
  return *reinterpret_cast<::InfiniText::MeshBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasLocation Location
[[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& InfiniText::DrawingTexture::dyn_Location() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_Location");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Location"))->offset;
  return *reinterpret_cast<::Blaze::AtlasLocation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.DrawingTexture NextDrawing
[[deprecated("Use field access instead!")]] ::InfiniText::DrawingTexture*& InfiniText::DrawingTexture::dyn_NextDrawing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::dyn_NextDrawing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextDrawing"))->offset;
  return *reinterpret_cast<::InfiniText::DrawingTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.DrawingTexture.BuildMesh
void InfiniText::DrawingTexture::BuildMesh(float xOffset, float yOffset, ::InfiniText::TextureCamera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::BuildMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xOffset), ::il2cpp_utils::ExtractType(yOffset), ::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, xOffset, yOffset, camera);
}
// Autogenerated method: InfiniText.DrawingTexture.get_Active
bool InfiniText::DrawingTexture::get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::get_Active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.MeshBuffer
#include "InfiniText/MeshBuffer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: InfiniText.MoveFromPoint
#include "InfiniText/MoveFromPoint.hpp"
// Including type: Blaze.Triangulator
#include "Blaze/Triangulator.hpp"
// Including type: Blaze.TriangulationVertex
#include "Blaze/TriangulationVertex.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: Blaze.VectorPath
#include "Blaze/VectorPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color32 MidGrey
::UnityEngine::Color32 InfiniText::MeshBuffer::_get_MidGrey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_get_MidGrey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color32>("InfiniText", "MeshBuffer", "MidGrey"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color32 MidGrey
void InfiniText::MeshBuffer::_set_MidGrey(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_set_MidGrey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "MeshBuffer", "MidGrey", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color32 White
::UnityEngine::Color32 InfiniText::MeshBuffer::_get_White() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_get_White");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color32>("InfiniText", "MeshBuffer", "White"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color32 White
void InfiniText::MeshBuffer::_set_White(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_set_White");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "MeshBuffer", "White", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color32 Black
::UnityEngine::Color32 InfiniText::MeshBuffer::_get_Black() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_get_Black");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color32>("InfiniText", "MeshBuffer", "Black"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color32 Black
void InfiniText::MeshBuffer::_set_Black(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_set_Black");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "MeshBuffer", "Black", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Material SharedMaterial
::UnityEngine::Material* InfiniText::MeshBuffer::_get_SharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_get_SharedMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Material*>("InfiniText", "MeshBuffer", "SharedMaterial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Material SharedMaterial
void InfiniText::MeshBuffer::_set_SharedMaterial(::UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::_set_SharedMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "MeshBuffer", "SharedMaterial", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single XScaleFactor
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_XScaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_XScaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "XScaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single YScaleFactor
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_YScaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_YScaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "YScaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single XOffset
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_XOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_XOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "XOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single YOffset
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_YOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_YOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "YOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean CloseBeforeThis
[[deprecated("Use field access instead!")]] bool& InfiniText::MeshBuffer::dyn_CloseBeforeThis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CloseBeforeThis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CloseBeforeThis"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Mesh Mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& InfiniText::MeshBuffer::dyn_Mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean IsClosing
[[deprecated("Use field access instead!")]] bool& InfiniText::MeshBuffer::dyn_IsClosing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_IsClosing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsClosing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single CloseX
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_CloseX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CloseX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CloseX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single CloseY
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_CloseY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CloseY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CloseY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single PreviousX
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_PreviousX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_PreviousX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single PreviousY
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_PreviousY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_PreviousY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 TotalVertices
[[deprecated("Use field access instead!")]] int& InfiniText::MeshBuffer::dyn_TotalVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_TotalVertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TotalVertices"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3[] Vertices
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& InfiniText::MeshBuffer::dyn_Vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Vertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Vertices"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color32[] Colours
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& InfiniText::MeshBuffer::dyn_Colours() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Colours");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Colours"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] Triangles
[[deprecated("Use field access instead!")]] ::ArrayW<int>& InfiniText::MeshBuffer::dyn_Triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Triangles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Triangles"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single PreviousInnerSpread
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_PreviousInnerSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_PreviousInnerSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousInnerSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single PreviousOuterSpread
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_PreviousOuterSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_PreviousOuterSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PreviousOuterSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CurrentVertex
[[deprecated("Use field access instead!")]] int& InfiniText::MeshBuffer::dyn_CurrentVertex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CurrentVertex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CurrentVertex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 CurrentTriangle
[[deprecated("Use field access instead!")]] int& InfiniText::MeshBuffer::dyn_CurrentTriangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CurrentTriangle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CurrentTriangle"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 StartIndex
[[deprecated("Use field access instead!")]] int& InfiniText::MeshBuffer::dyn_StartIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_StartIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StartIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.MeshBuffer NextInPool
[[deprecated("Use field access instead!")]] ::InfiniText::MeshBuffer*& InfiniText::MeshBuffer::dyn_NextInPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_NextInPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextInPool"))->offset;
  return *reinterpret_cast<::InfiniText::MeshBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.GameObject Gameobject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& InfiniText::MeshBuffer::dyn_Gameobject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Gameobject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Gameobject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean Moved
[[deprecated("Use field access instead!")]] bool& InfiniText::MeshBuffer::dyn_Moved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Moved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Moved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private InfiniText.MoveFromPoint LatestMoveFrom
[[deprecated("Use field access instead!")]] ::InfiniText::MoveFromPoint*& InfiniText::MeshBuffer::dyn_LatestMoveFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_LatestMoveFrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LatestMoveFrom"))->offset;
  return *reinterpret_cast<::InfiniText::MoveFromPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single CurrentAccuracy
[[deprecated("Use field access instead!")]] float& InfiniText::MeshBuffer::dyn_CurrentAccuracy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_CurrentAccuracy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CurrentAccuracy"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean Winding
[[deprecated("Use field access instead!")]] bool& InfiniText::MeshBuffer::dyn_Winding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Winding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Winding"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Blaze.Triangulator Triangulator
[[deprecated("Use field access instead!")]] ::Blaze::Triangulator*& InfiniText::MeshBuffer::dyn_Triangulator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_Triangulator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Triangulator"))->offset;
  return *reinterpret_cast<::Blaze::Triangulator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Blaze.TriangulationVertex FirstInContour
[[deprecated("Use field access instead!")]] ::Blaze::TriangulationVertex*& InfiniText::MeshBuffer::dyn_FirstInContour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_FirstInContour");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FirstInContour"))->offset;
  return *reinterpret_cast<::Blaze::TriangulationVertex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Blaze.TriangulationVertex LastInContour
[[deprecated("Use field access instead!")]] ::Blaze::TriangulationVertex*& InfiniText::MeshBuffer::dyn_LastInContour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::dyn_LastInContour");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LastInContour"))->offset;
  return *reinterpret_cast<::Blaze::TriangulationVertex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.MeshBuffer.CreateGameObject
void InfiniText::MeshBuffer::CreateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::CreateGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.MeshBuffer.AddMesh
void InfiniText::MeshBuffer::AddMesh(::Blaze::VectorPath* path, float xOffset, float yOffset, ::Blaze::Triangulator* triangulator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::AddMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(xOffset), ::il2cpp_utils::ExtractType(yOffset), ::il2cpp_utils::ExtractType(triangulator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path, xOffset, yOffset, triangulator);
}
// Autogenerated method: InfiniText.MeshBuffer.AddPoint
void InfiniText::MeshBuffer::AddPoint(float x, float y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::AddPoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y);
}
// Autogenerated method: InfiniText.MeshBuffer.MoveTo
void InfiniText::MeshBuffer::MoveTo(float x, float y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::MoveTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y);
}
// Autogenerated method: InfiniText.MeshBuffer.get_SampleDistance
float InfiniText::MeshBuffer::get_SampleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::get_SampleDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.MeshBuffer.set_SampleDistance
void InfiniText::MeshBuffer::set_SampleDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::set_SampleDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InfiniText.MeshBuffer.get_ExtrudeBy
float InfiniText::MeshBuffer::get_ExtrudeBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::get_ExtrudeBy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.MeshBuffer.set_ExtrudeBy
void InfiniText::MeshBuffer::set_ExtrudeBy(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::set_ExtrudeBy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::InfiniText::MeshBuffer*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InfiniText.MeshBuffer.SetActive
void InfiniText::MeshBuffer::SetActive(bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, active);
}
// Autogenerated method: InfiniText.MeshBuffer.RequireSize
void InfiniText::MeshBuffer::RequireSize(int verts, int tris) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::RequireSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequireSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(verts), ::il2cpp_utils::ExtractType(tris)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, verts, tris);
}
// Autogenerated method: InfiniText.MeshBuffer.Flush
void InfiniText::MeshBuffer::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.MeshBuffer..cctor
void InfiniText::MeshBuffer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MeshBuffer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "MeshBuffer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.MoveFromPoint
#include "InfiniText/MoveFromPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Single X
[[deprecated("Use field access instead!")]] float& InfiniText::MoveFromPoint::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MoveFromPoint::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Single Y
[[deprecated("Use field access instead!")]] float& InfiniText::MoveFromPoint::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MoveFromPoint::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 Index
[[deprecated("Use field access instead!")]] int& InfiniText::MoveFromPoint::dyn_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MoveFromPoint::dyn_Index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: InfiniText.MoveFromPoint Previous
[[deprecated("Use field access instead!")]] ::InfiniText::MoveFromPoint*& InfiniText::MoveFromPoint::dyn_Previous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MoveFromPoint::dyn_Previous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Previous"))->offset;
  return *reinterpret_cast<::InfiniText::MoveFromPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.TextureCamera
#include "InfiniText/TextureCamera.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: Blaze.Triangulator
#include "Blaze/Triangulator.hpp"
// Including type: InfiniText.DrawingTexture
#include "InfiniText/DrawingTexture.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single MaxTime
float InfiniText::TextureCamera::_get_MaxTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_get_MaxTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "TextureCamera", "MaxTime"));
}
// Autogenerated static field setter
// Set static field: static public System.Single MaxTime
void InfiniText::TextureCamera::_set_MaxTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_set_MaxTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCamera", "MaxTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 DefaultSize
int InfiniText::TextureCamera::_get_DefaultSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_get_DefaultSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "TextureCamera", "DefaultSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 DefaultSize
void InfiniText::TextureCamera::_set_DefaultSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_set_DefaultSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCamera", "DefaultSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single GlobalOffset
float InfiniText::TextureCamera::_get_GlobalOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_get_GlobalOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "TextureCamera", "GlobalOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single GlobalOffset
void InfiniText::TextureCamera::_set_GlobalOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::_set_GlobalOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCamera", "GlobalOffset", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single Timer
[[deprecated("Use field access instead!")]] float& InfiniText::TextureCamera::dyn_Timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Timer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single XOffset
[[deprecated("Use field access instead!")]] float& InfiniText::TextureCamera::dyn_XOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_XOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "XOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single YOffset
[[deprecated("Use field access instead!")]] float& InfiniText::TextureCamera::dyn_YOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_YOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "YOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera SourceCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& InfiniText::TextureCamera::dyn_SourceCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_SourceCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SourceCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject Gameobject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& InfiniText::TextureCamera::dyn_Gameobject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Gameobject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Gameobject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject CameraObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& InfiniText::TextureCamera::dyn_CameraObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_CameraObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CameraObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 WorldPerPixel
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& InfiniText::TextureCamera::dyn_WorldPerPixel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_WorldPerPixel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WorldPerPixel"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Size
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RequiresRender
[[deprecated("Use field access instead!")]] bool& InfiniText::TextureCamera::dyn_RequiresRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_RequiresRender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequiresRender"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 pixelWidth
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_pixelWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_pixelWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pixelWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 FillX
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_FillX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_FillX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FillX"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 FillY
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_FillY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_FillY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FillY"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean CPUAccess
[[deprecated("Use field access instead!")]] bool& InfiniText::TextureCamera::dyn_CPUAccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_CPUAccess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CPUAccess"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color32[] CPUPixels
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& InfiniText::TextureCamera::dyn_CPUPixels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_CPUPixels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CPUPixels"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Texture2D CPUBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& InfiniText::TextureCamera::dyn_CPUBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_CPUBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CPUBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 MaxWidth
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_MaxWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_MaxWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxWidth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Available
[[deprecated("Use field access instead!")]] bool& InfiniText::TextureCamera::dyn_Available() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Available");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Available"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsDrawing
[[deprecated("Use field access instead!")]] bool& InfiniText::TextureCamera::dyn_IsDrawing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_IsDrawing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsDrawing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 pixelHeight
[[deprecated("Use field access instead!")]] int& InfiniText::TextureCamera::dyn_pixelHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_pixelHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pixelHeight"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HalfSizeByWorld
[[deprecated("Use field access instead!")]] float& InfiniText::TextureCamera::dyn_HalfSizeByWorld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_HalfSizeByWorld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HalfSizeByWorld"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.Triangulator Triangulator
[[deprecated("Use field access instead!")]] ::Blaze::Triangulator*& InfiniText::TextureCamera::dyn_Triangulator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Triangulator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Triangulator"))->offset;
  return *reinterpret_cast<::Blaze::Triangulator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.DrawingTexture FirstDrawing
[[deprecated("Use field access instead!")]] ::InfiniText::DrawingTexture*& InfiniText::TextureCamera::dyn_FirstDrawing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_FirstDrawing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FirstDrawing"))->offset;
  return *reinterpret_cast<::InfiniText::DrawingTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture Texture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& InfiniText::TextureCamera::dyn_Texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::dyn_Texture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Texture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.TextureCamera.CreateGameObject
::UnityEngine::GameObject* InfiniText::TextureCamera::CreateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::CreateGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.TextureCamera.Clear
void InfiniText::TextureCamera::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.TextureCamera.TryFit
bool InfiniText::TextureCamera::TryFit(::InfiniText::DrawingTexture* drawing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::TryFit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(drawing)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, drawing);
}
// Autogenerated method: InfiniText.TextureCamera.DrawNow
void InfiniText::TextureCamera::DrawNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::DrawNow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawNow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.TextureCamera.ReadInto
void InfiniText::TextureCamera::ReadInto(::Blaze::AtlasLocation* atlas, int targetX, int targetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::ReadInto");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadInto", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atlas), ::il2cpp_utils::ExtractType(targetX), ::il2cpp_utils::ExtractType(targetY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, atlas, targetX, targetY);
}
// Autogenerated method: InfiniText.TextureCamera.SetOrthographicSize
void InfiniText::TextureCamera::SetOrthographicSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::SetOrthographicSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOrthographicSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.TextureCamera.Destroy
void InfiniText::TextureCamera::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.TextureCamera..cctor
void InfiniText::TextureCamera::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCamera", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.TextureCameras
#include "InfiniText/TextureCameras.hpp"
// Including type: InfiniText.DrawingTexture
#include "InfiniText/DrawingTexture.hpp"
// Including type: InfiniText.TextureCamera
#include "InfiniText/TextureCamera.hpp"
// Including type: InfiniText.MeshBuffer
#include "InfiniText/MeshBuffer.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
// Including type: Blaze.VectorPath
#include "Blaze/VectorPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Boolean CPUCopyMode
bool InfiniText::TextureCameras::_get_CPUCopyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_CPUCopyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "TextureCameras", "CPUCopyMode"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean CPUCopyMode
void InfiniText::TextureCameras::_set_CPUCopyMode(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_CPUCopyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "CPUCopyMode", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean SD
bool InfiniText::TextureCameras::_get_SD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_SD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("InfiniText", "TextureCameras", "SD"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean SD
void InfiniText::TextureCameras::_set_SD(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_SD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "SD", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single Scale
float InfiniText::TextureCameras::_get_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_Scale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "TextureCameras", "Scale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single Scale
void InfiniText::TextureCameras::_set_Scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_Scale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "Scale", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single Accuracy
float InfiniText::TextureCameras::_get_Accuracy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_Accuracy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "TextureCameras", "Accuracy"));
}
// Autogenerated static field setter
// Set static field: static public System.Single Accuracy
void InfiniText::TextureCameras::_set_Accuracy(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_Accuracy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "Accuracy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single TriangulationAccuracy
float InfiniText::TextureCameras::_get_TriangulationAccuracy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_TriangulationAccuracy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("InfiniText", "TextureCameras", "TriangulationAccuracy"));
}
// Autogenerated static field setter
// Set static field: static public System.Single TriangulationAccuracy
void InfiniText::TextureCameras::_set_TriangulationAccuracy(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_TriangulationAccuracy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "TriangulationAccuracy", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 Layer
int InfiniText::TextureCameras::_get_Layer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_Layer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "TextureCameras", "Layer"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 Layer
void InfiniText::TextureCameras::_set_Layer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_Layer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "Layer", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.DrawingTexture Pending
::InfiniText::DrawingTexture* InfiniText::TextureCameras::_get_Pending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_Pending");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::DrawingTexture*>("InfiniText", "TextureCameras", "Pending"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.DrawingTexture Pending
void InfiniText::TextureCameras::_set_Pending(::InfiniText::DrawingTexture* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_Pending");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "Pending", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.TextureCamera Camera
::InfiniText::TextureCamera* InfiniText::TextureCameras::_get_Camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_Camera");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::TextureCamera*>("InfiniText", "TextureCameras", "Camera"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.TextureCamera Camera
void InfiniText::TextureCameras::_set_Camera(::InfiniText::TextureCamera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_Camera");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "Camera", value));
}
// Autogenerated static field getter
// Get static field: static public InfiniText.MeshBuffer BufferPool
::InfiniText::MeshBuffer* InfiniText::TextureCameras::_get_BufferPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_get_BufferPool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::InfiniText::MeshBuffer*>("InfiniText", "TextureCameras", "BufferPool"));
}
// Autogenerated static field setter
// Set static field: static public InfiniText.MeshBuffer BufferPool
void InfiniText::TextureCameras::_set_BufferPool(::InfiniText::MeshBuffer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::_set_BufferPool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "TextureCameras", "BufferPool", value));
}
// Autogenerated method: InfiniText.TextureCameras.RequestDraw
void InfiniText::TextureCameras::RequestDraw(::Blaze::AtlasLocation* location, ::Blaze::VectorPath* path, float offsetX, float offsetY, float drawHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::RequestDraw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCameras", "RequestDraw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(offsetX), ::il2cpp_utils::ExtractType(offsetY), ::il2cpp_utils::ExtractType(drawHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, location, path, offsetX, offsetY, drawHeight);
}
// Autogenerated method: InfiniText.TextureCameras.Update
void InfiniText::TextureCameras::Update(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCameras", "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deltaTime);
}
// Autogenerated method: InfiniText.TextureCameras.PoolBuffer
void InfiniText::TextureCameras::PoolBuffer(::InfiniText::MeshBuffer* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::PoolBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCameras", "PoolBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer);
}
// Autogenerated method: InfiniText.TextureCameras.GetBuffer
::InfiniText::MeshBuffer* InfiniText::TextureCameras::GetBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::GetBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCameras", "GetBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::MeshBuffer*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InfiniText.TextureCameras..cctor
void InfiniText::TextureCameras::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCameras::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "TextureCameras", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.LoadMetaPoint
#include "InfiniText/LoadMetaPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Start
[[deprecated("Use field access instead!")]] int& InfiniText::LoadMetaPoint::dyn_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LoadMetaPoint::dyn_Start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Start"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Length
[[deprecated("Use field access instead!")]] int& InfiniText::LoadMetaPoint::dyn_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LoadMetaPoint::dyn_Length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.LoadMetaPoint.get_Unloaded
bool InfiniText::LoadMetaPoint::get_Unloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LoadMetaPoint::get_Unloaded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::VectorPoint*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.LoadMetaPoint.ToString
::StringW InfiniText::LoadMetaPoint::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LoadMetaPoint::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::VectorPoint*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.RightToLeft
#include "InfiniText/RightToLeft.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MinimumA
int InfiniText::RightToLeft::_get_MinimumA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MinimumA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MinimumA"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MinimumA
void InfiniText::RightToLeft::_set_MinimumA(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MinimumA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MinimumA", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaximumA
int InfiniText::RightToLeft::_get_MaximumA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MaximumA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MaximumA"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaximumA
void InfiniText::RightToLeft::_set_MaximumA(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MaximumA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MaximumA", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MinimumB
int InfiniText::RightToLeft::_get_MinimumB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MinimumB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MinimumB"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MinimumB
void InfiniText::RightToLeft::_set_MinimumB(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MinimumB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MinimumB", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaximumB
int InfiniText::RightToLeft::_get_MaximumB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MaximumB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MaximumB"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaximumB
void InfiniText::RightToLeft::_set_MaximumB(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MaximumB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MaximumB", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MinimumC
int InfiniText::RightToLeft::_get_MinimumC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MinimumC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MinimumC"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MinimumC
void InfiniText::RightToLeft::_set_MinimumC(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MinimumC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MinimumC", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaximumC
int InfiniText::RightToLeft::_get_MaximumC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MaximumC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MaximumC"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaximumC
void InfiniText::RightToLeft::_set_MaximumC(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MaximumC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MaximumC", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MinimumD
int InfiniText::RightToLeft::_get_MinimumD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MinimumD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MinimumD"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MinimumD
void InfiniText::RightToLeft::_set_MinimumD(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MinimumD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MinimumD", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaximumD
int InfiniText::RightToLeft::_get_MaximumD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_get_MaximumD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("InfiniText", "RightToLeft", "MaximumD"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaximumD
void InfiniText::RightToLeft::_set_MaximumD(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::_set_MaximumD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "RightToLeft", "MaximumD", value));
}
// Autogenerated method: InfiniText.RightToLeft.Rightwards
bool InfiniText::RightToLeft::Rightwards(int character) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::RightToLeft::Rightwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "RightToLeft", "Rightwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, character);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CffGlyphParser
#include "InfiniText/CffGlyphParser.hpp"
// Including type: InfiniText.CffStack
#include "InfiniText/CffStack.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.CffSubPosition
#include "InfiniText/CffSubPosition.hpp"
// Including type: InfiniText.LoadMetaPoint
#include "InfiniText/LoadMetaPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single X
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Y
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 NStems
[[deprecated("Use field access instead!")]] int& InfiniText::CffGlyphParser::dyn_NStems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_NStems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NStems"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Width
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_Width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean HasWidth
[[deprecated("Use field access instead!")]] bool& InfiniText::CffGlyphParser::dyn_HasWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_HasWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HasWidth"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SubrsBias
[[deprecated("Use field access instead!")]] int& InfiniText::CffGlyphParser::dyn_SubrsBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_SubrsBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SubrsBias"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 GsubrsBias
[[deprecated("Use field access instead!")]] int& InfiniText::CffGlyphParser::dyn_GsubrsBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_GsubrsBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GsubrsBias"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffStack Stack
[[deprecated("Use field access instead!")]] ::InfiniText::CffStack*& InfiniText::CffGlyphParser::dyn_Stack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Stack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Stack"))->offset;
  return *reinterpret_cast<::InfiniText::CffStack**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single NominalWidthX
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_NominalWidthX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_NominalWidthX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NominalWidthX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontParser Parser
[[deprecated("Use field access instead!")]] ::InfiniText::FontParser*& InfiniText::CffGlyphParser::dyn_Parser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Parser");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Parser"))->offset;
  return *reinterpret_cast<::InfiniText::FontParser**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.Glyph Glyph
[[deprecated("Use field access instead!")]] ::InfiniText::Glyph*& InfiniText::CffGlyphParser::dyn_Glyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Glyph");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Glyph"))->offset;
  return *reinterpret_cast<::InfiniText::Glyph**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.FontFace Font
[[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& InfiniText::CffGlyphParser::dyn_Font() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Font");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Font"))->offset;
  return *reinterpret_cast<::InfiniText::FontFace**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffSubPosition[] GSubrs
[[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::CffSubPosition*>& InfiniText::CffGlyphParser::dyn_GSubrs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_GSubrs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GSubrs"))->offset;
  return *reinterpret_cast<::ArrayW<::InfiniText::CffSubPosition*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffSubPosition[] Subrs
[[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::CffSubPosition*>& InfiniText::CffGlyphParser::dyn_Subrs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_Subrs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Subrs"))->offset;
  return *reinterpret_cast<::ArrayW<::InfiniText::CffSubPosition*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single DefaultWidthX
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_DefaultWidthX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_DefaultWidthX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DefaultWidthX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ScaleRatio
[[deprecated("Use field access instead!")]] float& InfiniText::CffGlyphParser::dyn_ScaleRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_ScaleRatio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScaleRatio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean FullLoad
[[deprecated("Use field access instead!")]] bool& InfiniText::CffGlyphParser::dyn_FullLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::dyn_FullLoad");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FullLoad"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.CffGlyphParser.Reset
void InfiniText::CffGlyphParser::Reset(::InfiniText::Glyph* glyph) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyph)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glyph);
}
// Autogenerated method: InfiniText.CffGlyphParser.LoadFully
void InfiniText::CffGlyphParser::LoadFully(::InfiniText::Glyph* glyph, ::InfiniText::LoadMetaPoint* meta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::LoadFully");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyph), ::il2cpp_utils::ExtractType(meta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glyph, meta);
}
// Autogenerated method: InfiniText.CffGlyphParser.LoadGlyph
::InfiniText::Glyph* InfiniText::CffGlyphParser::LoadGlyph(int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::LoadGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(this, ___internal__method, start, length);
}
// Autogenerated method: InfiniText.CffGlyphParser.ParseStems
void InfiniText::CffGlyphParser::ParseStems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::ParseStems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParseStems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CffGlyphParser.Parse
void InfiniText::CffGlyphParser::Parse(int start, int codeLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(codeLength)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, codeLength);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CffStack
#include "InfiniText/CffStack.hpp"
// Including type: InfiniText.CffStackEntry
#include "InfiniText/CffStackEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Length
[[deprecated("Use field access instead!")]] int& InfiniText::CffStack::dyn_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::dyn_Length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffStackEntry Last
[[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& InfiniText::CffStack::dyn_Last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::dyn_Last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Last"))->offset;
  return *reinterpret_cast<::InfiniText::CffStackEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffStackEntry First
[[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& InfiniText::CffStack::dyn_First() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::dyn_First");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "First"))->offset;
  return *reinterpret_cast<::InfiniText::CffStackEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.CffStack.Push
void InfiniText::CffStack::Push(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InfiniText.CffStack.get_IsOdd
bool InfiniText::CffStack::get_IsOdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::get_IsOdd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CffStack.get_Empty
bool InfiniText::CffStack::get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::get_Empty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CffStack.Push
void InfiniText::CffStack::Push(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InfiniText.CffStack.Clear
void InfiniText::CffStack::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CffStack.Shift
float InfiniText::CffStack::Shift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::Shift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: InfiniText.CffStack.Pop
float InfiniText::CffStack::Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::Pop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CffStackEntry
#include "InfiniText/CffStackEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffStackEntry Next
[[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& InfiniText::CffStackEntry::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStackEntry::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::InfiniText::CffStackEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InfiniText.CffStackEntry Previous
[[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& InfiniText::CffStackEntry::dyn_Previous() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStackEntry::dyn_Previous");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Previous"))->offset;
  return *reinterpret_cast<::InfiniText::CffStackEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Value
[[deprecated("Use field access instead!")]] float& InfiniText::CffStackEntry::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStackEntry::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CffSubPosition
#include "InfiniText/CffSubPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Length
[[deprecated("Use field access instead!")]] int& InfiniText::CffSubPosition::dyn_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffSubPosition::dyn_Length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Position
[[deprecated("Use field access instead!")]] int& InfiniText::CffSubPosition::dyn_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffSubPosition::dyn_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Position"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CffTables
#include "InfiniText/CffTables.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.CffGlyphParser
#include "InfiniText/CffGlyphParser.hpp"
// Including type: InfiniText.CffSubPosition
#include "InfiniText/CffSubPosition.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.CffTables.LoadIndex
::ArrayW<::InfiniText::Glyph*> InfiniText::CffTables::LoadIndex(::InfiniText::FontParser* parser, ::InfiniText::CffGlyphParser* cffParser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::LoadIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "LoadIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(cffParser)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::InfiniText::Glyph*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, cffParser);
}
// Autogenerated method: InfiniText.CffTables.LoadSubIndex
::ArrayW<::InfiniText::CffSubPosition*> InfiniText::CffTables::LoadSubIndex(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::LoadSubIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "LoadSubIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::InfiniText::CffSubPosition*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser);
}
// Autogenerated method: InfiniText.CffTables.SkipIndex
void InfiniText::CffTables::SkipIndex(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::SkipIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "SkipIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser);
}
// Autogenerated method: InfiniText.CffTables.GetBias
int InfiniText::CffTables::GetBias(::ArrayW<::InfiniText::CffSubPosition*> set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::GetBias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "GetBias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, set);
}
// Autogenerated method: InfiniText.CffTables.LoadDict
::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>* InfiniText::CffTables::LoadDict(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::LoadDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "LoadDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser);
}
// Autogenerated method: InfiniText.CffTables.ParseOperand
int InfiniText::CffTables::ParseOperand(::InfiniText::FontParser* parser, int b0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::ParseOperand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "ParseOperand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(b0)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, b0);
}
// Autogenerated method: InfiniText.CffTables.ParseCFFDict
::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>* InfiniText::CffTables::ParseCFFDict(::InfiniText::FontParser* parser, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::ParseCFFDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "ParseCFFDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, length);
}
// Autogenerated method: InfiniText.CffTables.ReadDict
int InfiniText::CffTables::ReadDict(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<int>*>* dict, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::ReadDict");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "ReadDict", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dict), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dict, index);
}
// Autogenerated method: InfiniText.CffTables.Load
::ArrayW<::InfiniText::Glyph*> InfiniText::CffTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CffTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::InfiniText::Glyph*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.CharMapTables
#include "InfiniText/CharMapTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.CharMapTables.Load
bool InfiniText::CharMapTables::Load(::InfiniText::FontParser* parser, int start, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CharMapTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CharMapTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(glyphs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, start, font, glyphs);
}
// Autogenerated method: InfiniText.CharMapTables.LoadSubTable
int InfiniText::CharMapTables::LoadSubTable(::InfiniText::FontParser* parser, int start, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CharMapTables::LoadSubTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "CharMapTables", "LoadSubTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(glyphs)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, start, font, glyphs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.GlyfTables
#include "InfiniText/GlyfTables.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.LoadMetaPoint
#include "InfiniText/LoadMetaPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.GlyfTables.Load
::ArrayW<::InfiniText::Glyph*> InfiniText::GlyfTables::Load(::InfiniText::FontParser* parser, int start, ::ArrayW<uint> locations, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyfTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GlyfTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(locations), ::il2cpp_utils::ExtractType(font)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::InfiniText::Glyph*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, start, locations, font);
}
// Autogenerated method: InfiniText.GlyfTables.LoadFully
void InfiniText::GlyfTables::LoadFully(::InfiniText::Glyph* glyph, ::InfiniText::FontParser* parser, ::InfiniText::LoadMetaPoint* meta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyfTables::LoadFully");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GlyfTables", "LoadFully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyph), ::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(meta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, glyph, parser, meta);
}
// Autogenerated method: InfiniText.GlyfTables.LoadGlyph
void InfiniText::GlyfTables::LoadGlyph(::InfiniText::Glyph* glyph, int contourCount, ::InfiniText::FontParser* parser, float range) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyfTables::LoadGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GlyfTables", "LoadGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyph), ::il2cpp_utils::ExtractType(contourCount), ::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(range)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, glyph, contourCount, parser, range);
}
// Autogenerated method: InfiniText.GlyfTables.ParseGlyph
::InfiniText::Glyph* InfiniText::GlyfTables::ParseGlyph(::InfiniText::FontParser* parser, ::InfiniText::FontFace* font, float range) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyfTables::ParseGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GlyfTables", "ParseGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(range)})));
  return ::il2cpp_utils::RunMethodRethrow<::InfiniText::Glyph*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, font, range);
}
// Autogenerated method: InfiniText.GlyfTables.LoadGlyphCoordinate
int InfiniText::GlyfTables::LoadGlyphCoordinate(::InfiniText::FontParser* parser, uint8_t flag, int previousValue, int shortVectorBitMask, int sameBitMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyfTables::LoadGlyphCoordinate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GlyfTables", "LoadGlyphCoordinate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(flag), ::il2cpp_utils::ExtractType(previousValue), ::il2cpp_utils::ExtractType(shortVectorBitMask), ::il2cpp_utils::ExtractType(sameBitMask)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, flag, previousValue, shortVectorBitMask, sameBitMask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.HeaderTables
#include "InfiniText/HeaderTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.HeaderTables.Load
bool InfiniText::HeaderTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ByRef<int> locFormatIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::HeaderTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "HeaderTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, byref(locFormatIndex));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.HheaTables
#include "InfiniText/HheaTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.HheaTables.Load
void InfiniText::HheaTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ByRef<int> hmMetricCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::HheaTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "HheaTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, byref(hmMetricCount));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.HmtxTables
#include "InfiniText/HmtxTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.HmtxTables.Load
void InfiniText::HmtxTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::Glyph*> glyphs, int numMetrics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::HmtxTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "HmtxTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(glyphs), ::il2cpp_utils::ExtractType(numMetrics)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, glyphs, numMetrics);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.KerningTables
#include "InfiniText/KerningTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.KerningTables.Load
void InfiniText::KerningTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::KerningTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "KerningTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(glyphs)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, glyphs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.LigatureLookupTable
#include "InfiniText/LigatureLookupTable.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: InfiniText.LigatureSubstitution
#include "InfiniText/LigatureSubstitution.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<InfiniText.LigatureSubstitution>> Substitutions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*& InfiniText::LigatureLookupTable::dyn_Substitutions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LigatureLookupTable::dyn_Substitutions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Substitutions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InfiniText.LigatureLookupTable.Load
void InfiniText::LigatureLookupTable::Load(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LigatureLookupTable::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parser);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.LigatureSubstitution
#include "InfiniText/LigatureSubstitution.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.LigatureSubstitution.Load
void InfiniText::LigatureSubstitution::Load(::InfiniText::FontParser* parser) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LigatureSubstitution::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parser);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.LocaTables
#include "InfiniText/LocaTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.LocaTables.Load
::ArrayW<uint> InfiniText::LocaTables::Load(::InfiniText::FontParser* parser, int offset, int numGlyphs, bool shortVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LocaTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "LocaTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(numGlyphs), ::il2cpp_utils::ExtractType(shortVersion)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, numGlyphs, shortVersion);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.MaxpTables
#include "InfiniText/MaxpTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.MaxpTables.Load
void InfiniText::MaxpTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ByRef<int> glyphCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::MaxpTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "MaxpTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, byref(glyphCount));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.NameTables
#include "InfiniText/NameTables.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String[] PropertyMap
::ArrayW<::StringW> InfiniText::NameTables::_get_PropertyMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::NameTables::_get_PropertyMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("InfiniText", "NameTables", "PropertyMap"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] PropertyMap
void InfiniText::NameTables::_set_PropertyMap(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::NameTables::_set_PropertyMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("InfiniText", "NameTables", "PropertyMap", value));
}
// Autogenerated method: InfiniText.NameTables.Load
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* InfiniText::NameTables::Load(::InfiniText::FontParser* parser, int start, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::NameTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "NameTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(font)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, start, font);
}
// Autogenerated method: InfiniText.NameTables..cctor
void InfiniText::NameTables::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::NameTables::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "NameTables", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.OS2Tables
#include "InfiniText/OS2Tables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.OS2Tables.Load
void InfiniText::OS2Tables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::OS2Tables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "OS2Tables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.PostTables
#include "InfiniText/PostTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.PostTables.Load
void InfiniText::PostTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ByRef<int> numberOfGlyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::PostTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "PostTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, byref(numberOfGlyphs));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.GposTables
#include "InfiniText/GposTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.Glyph
#include "InfiniText/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.GposTables.Load
void InfiniText::GposTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::Glyph*> glyphs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GposTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GposTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(glyphs)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font, glyphs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InfiniText.GsubTables
#include "InfiniText/GsubTables.hpp"
// Including type: InfiniText.FontParser
#include "InfiniText/FontParser.hpp"
// Including type: InfiniText.FontFace
#include "InfiniText/FontFace.hpp"
// Including type: InfiniText.LigatureLookupTable
#include "InfiniText/LigatureLookupTable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InfiniText.GsubTables.Load
void InfiniText::GsubTables::Load(::InfiniText::FontParser* parser, int offset, ::InfiniText::FontFace* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GsubTables::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GsubTables", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(font)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parser, offset, font);
}
// Autogenerated method: InfiniText.GsubTables.AddToFont
void InfiniText::GsubTables::AddToFont(::StringW name, ::InfiniText::FontParser* parser, int tableOffset, ::InfiniText::FontFace* font, ::ArrayW<::InfiniText::LigatureLookupTable*> tables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GsubTables::AddToFont");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("InfiniText", "GsubTables", "AddToFont", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(tableOffset), ::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(tables)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, parser, tableOffset, font, tables);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityHttp.HttpRequest
#include "UnityHttp/HttpRequest.hpp"
// Including type: UnityHttp.HttpRequest/<Loader>d__33
#include "UnityHttp/HttpRequest_-Loader-d__33.hpp"
// Including type: UnityEngine.WWW
#include "UnityEngine/WWW.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityHttp.OnHttpEvent
#include "UnityHttp/OnHttpEvent.hpp"
// Including type: UnityEngine.WWWForm
#include "UnityEngine/WWWForm.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean Ready
[[deprecated("Use field access instead!")]] bool& UnityHttp::HttpRequest::dyn_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_Ready");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ready"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Url
[[deprecated("Use field access instead!")]] ::StringW& UnityHttp::HttpRequest::dyn_Url() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_Url");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Url"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Started
[[deprecated("Use field access instead!")]] bool& UnityHttp::HttpRequest::dyn_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_Started");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Started"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.WWW WWWRequest
[[deprecated("Use field access instead!")]] ::UnityEngine::WWW*& UnityHttp::HttpRequest::dyn_WWWRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_WWWRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WWWRequest"))->offset;
  return *reinterpret_cast<::UnityEngine::WWW**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] PostData
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& UnityHttp::HttpRequest::dyn_PostData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_PostData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PostData"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object ExtraData
[[deprecated("Use field access instead!")]] ::Il2CppObject*& UnityHttp::HttpRequest::dyn_ExtraData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_ExtraData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ExtraData"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Hashtable Headers
[[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& UnityHttp::HttpRequest::dyn_Headers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_Headers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Headers"))->offset;
  return *reinterpret_cast<::System::Collections::Hashtable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityHttp.HttpRequest RequestAfter
[[deprecated("Use field access instead!")]] ::UnityHttp::HttpRequest*& UnityHttp::HttpRequest::dyn_RequestAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_RequestAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequestAfter"))->offset;
  return *reinterpret_cast<::UnityHttp::HttpRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityHttp.HttpRequest RequestBefore
[[deprecated("Use field access instead!")]] ::UnityHttp::HttpRequest*& UnityHttp::HttpRequest::dyn_RequestBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_RequestBefore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequestBefore"))->offset;
  return *reinterpret_cast<::UnityHttp::HttpRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.IEnumerator LoadingEnumerator
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& UnityHttp::HttpRequest::dyn_LoadingEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_LoadingEnumerator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LoadingEnumerator"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityHttp.OnHttpEvent OnRequestDone
[[deprecated("Use field access instead!")]] ::UnityHttp::OnHttpEvent*& UnityHttp::HttpRequest::dyn_OnRequestDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_OnRequestDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnRequestDone"))->offset;
  return *reinterpret_cast<::UnityHttp::OnHttpEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityHttp.OnHttpEvent OnRequestReady
[[deprecated("Use field access instead!")]] ::UnityHttp::OnHttpEvent*& UnityHttp::HttpRequest::dyn_OnRequestReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::dyn_OnRequestReady");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnRequestReady"))->offset;
  return *reinterpret_cast<::UnityHttp::OnHttpEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityHttp.HttpRequest.CacheImage
void UnityHttp::HttpRequest::CacheImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::CacheImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CacheImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.add_OnRequestDone
void UnityHttp::HttpRequest::add_OnRequestDone(::UnityHttp::OnHttpEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::add_OnRequestDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnRequestDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityHttp.HttpRequest.remove_OnRequestDone
void UnityHttp::HttpRequest::remove_OnRequestDone(::UnityHttp::OnHttpEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::remove_OnRequestDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnRequestDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityHttp.HttpRequest.add_OnRequestReady
void UnityHttp::HttpRequest::add_OnRequestReady(::UnityHttp::OnHttpEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::add_OnRequestReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnRequestReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityHttp.HttpRequest.remove_OnRequestReady
void UnityHttp::HttpRequest::remove_OnRequestReady(::UnityHttp::OnHttpEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::remove_OnRequestReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnRequestReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityHttp.HttpRequest.AttachForm
void UnityHttp::HttpRequest::AttachForm(::UnityEngine::WWWForm* form) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::AttachForm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachForm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(form)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, form);
}
// Autogenerated method: UnityHttp.HttpRequest.SetHeaders
void UnityHttp::HttpRequest::SetHeaders(::System::Collections::Hashtable* headers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::SetHeaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHeaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, headers);
}
// Autogenerated method: UnityHttp.HttpRequest.ToDictionary
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* UnityHttp::HttpRequest::ToDictionary(::System::Collections::Hashtable* headers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::ToDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headers)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(this, ___internal__method, headers);
}
// Autogenerated method: UnityHttp.HttpRequest.SetHeaders
void UnityHttp::HttpRequest::SetHeaders(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* headers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::SetHeaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHeaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, headers);
}
// Autogenerated method: UnityHttp.HttpRequest.SetPost
void UnityHttp::HttpRequest::SetPost(::StringW toPost) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::SetPost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPost)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPost);
}
// Autogenerated method: UnityHttp.HttpRequest.Send
void UnityHttp::HttpRequest::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.Remove
void UnityHttp::HttpRequest::Remove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.Remove
void UnityHttp::HttpRequest::Remove(bool waitingList) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitingList)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, waitingList);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Errored
bool UnityHttp::HttpRequest::get_Errored() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Errored");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Errored", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Ok
bool UnityHttp::HttpRequest::get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Ok");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ok", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Error
::StringW UnityHttp::HttpRequest::get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.Loader
::System::Collections::IEnumerator* UnityHttp::HttpRequest::Loader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::Loader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Loader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Text
::StringW UnityHttp::HttpRequest::get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Bytes
::ArrayW<uint8_t> UnityHttp::HttpRequest::get_Bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Image
::UnityEngine::Texture2D* UnityHttp::HttpRequest::get_Image() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Image");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Image", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.get_Progress
float UnityHttp::HttpRequest::get_Progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::get_Progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest.Update
void UnityHttp::HttpRequest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityHttp.HttpRequest/<Loader>d__33
#include "UnityHttp/HttpRequest_-Loader-d__33.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityHttp::HttpRequest::$Loader$d__33::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& UnityHttp::HttpRequest::$Loader$d__33::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityHttp.HttpRequest <>4__this
[[deprecated("Use field access instead!")]] ::UnityHttp::HttpRequest*& UnityHttp::HttpRequest::$Loader$d__33::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityHttp::HttpRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityHttp.HttpRequest/<Loader>d__33.System.IDisposable.Dispose
void UnityHttp::HttpRequest::$Loader$d__33::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::HttpRequest::$Loader$d__33*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest/<Loader>d__33.MoveNext
bool UnityHttp::HttpRequest::$Loader$d__33::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::HttpRequest::$Loader$d__33*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest/<Loader>d__33.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* UnityHttp::HttpRequest::$Loader$d__33::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::HttpRequest::$Loader$d__33*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest/<Loader>d__33.System.Collections.IEnumerator.Reset
void UnityHttp::HttpRequest::$Loader$d__33::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::HttpRequest::$Loader$d__33*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityHttp.HttpRequest/<Loader>d__33.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityHttp::HttpRequest::$Loader$d__33::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::HttpRequest::$Loader$d__33::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::HttpRequest::$Loader$d__33*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityHttp.Http
#include "UnityHttp/Http.hpp"
// Including type: UnityHttp.HttpRequest
#include "UnityHttp/HttpRequest.hpp"
// Including type: UnityHttp.OnHttpEvent
#include "UnityHttp/OnHttpEvent.hpp"
// Including type: UnityEngine.WWWForm
#include "UnityEngine/WWWForm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single UpdateTimer
float UnityHttp::Http::_get_UpdateTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_UpdateTimer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityHttp", "Http", "UpdateTimer"));
}
// Autogenerated static field setter
// Set static field: static public System.Single UpdateTimer
void UnityHttp::Http::_set_UpdateTimer(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_UpdateTimer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "UpdateTimer", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single TimerLimit
float UnityHttp::Http::_get_TimerLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_TimerLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityHttp", "Http", "TimerLimit"));
}
// Autogenerated static field setter
// Set static field: static private System.Single TimerLimit
void UnityHttp::Http::_set_TimerLimit(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_TimerLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "TimerLimit", value));
}
// Autogenerated static field getter
// Get static field: static public UnityHttp.HttpRequest LastRequest
::UnityHttp::HttpRequest* UnityHttp::Http::_get_LastRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_LastRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityHttp::HttpRequest*>("UnityHttp", "Http", "LastRequest"));
}
// Autogenerated static field setter
// Set static field: static public UnityHttp.HttpRequest LastRequest
void UnityHttp::Http::_set_LastRequest(::UnityHttp::HttpRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_LastRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "LastRequest", value));
}
// Autogenerated static field getter
// Get static field: static public UnityHttp.HttpRequest FirstRequest
::UnityHttp::HttpRequest* UnityHttp::Http::_get_FirstRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_FirstRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityHttp::HttpRequest*>("UnityHttp", "Http", "FirstRequest"));
}
// Autogenerated static field setter
// Set static field: static public UnityHttp.HttpRequest FirstRequest
void UnityHttp::Http::_set_FirstRequest(::UnityHttp::HttpRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_FirstRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "FirstRequest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 CurrentActiveRequests
int UnityHttp::Http::_get_CurrentActiveRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_CurrentActiveRequests");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityHttp", "Http", "CurrentActiveRequests"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 CurrentActiveRequests
void UnityHttp::Http::_set_CurrentActiveRequests(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_CurrentActiveRequests");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "CurrentActiveRequests", value));
}
// Autogenerated static field getter
// Get static field: static public UnityHttp.HttpRequest LastWaitingRequest
::UnityHttp::HttpRequest* UnityHttp::Http::_get_LastWaitingRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_LastWaitingRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityHttp::HttpRequest*>("UnityHttp", "Http", "LastWaitingRequest"));
}
// Autogenerated static field setter
// Set static field: static public UnityHttp.HttpRequest LastWaitingRequest
void UnityHttp::Http::_set_LastWaitingRequest(::UnityHttp::HttpRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_LastWaitingRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "LastWaitingRequest", value));
}
// Autogenerated static field getter
// Get static field: static public UnityHttp.HttpRequest FirstWaitingRequest
::UnityHttp::HttpRequest* UnityHttp::Http::_get_FirstWaitingRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_FirstWaitingRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityHttp::HttpRequest*>("UnityHttp", "Http", "FirstWaitingRequest"));
}
// Autogenerated static field setter
// Set static field: static public UnityHttp.HttpRequest FirstWaitingRequest
void UnityHttp::Http::_set_FirstWaitingRequest(::UnityHttp::HttpRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_FirstWaitingRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "FirstWaitingRequest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxSimultaneousRequests
int UnityHttp::Http::_get_MaxSimultaneousRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_get_MaxSimultaneousRequests");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityHttp", "Http", "MaxSimultaneousRequests"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxSimultaneousRequests
void UnityHttp::Http::_set_MaxSimultaneousRequests(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::_set_MaxSimultaneousRequests");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityHttp", "Http", "MaxSimultaneousRequests", value));
}
// Autogenerated method: UnityHttp.Http.SetRate
void UnityHttp::Http::SetRate(int fps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::SetRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "SetRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fps);
}
// Autogenerated method: UnityHttp.Http.Clear
void UnityHttp::Http::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityHttp.Http.Request
void UnityHttp::Http::Request(::StringW url) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url);
}
// Autogenerated method: UnityHttp.Http.Request
void UnityHttp::Http::Request(::StringW url, ::UnityHttp::OnHttpEvent* onDone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(onDone)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, onDone);
}
// Autogenerated method: UnityHttp.Http.Request
void UnityHttp::Http::Request(::StringW url, ::UnityHttp::OnHttpEvent* onDone, ::Il2CppObject* extraData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(onDone), ::il2cpp_utils::ExtractType(extraData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, onDone, extraData);
}
// Autogenerated method: UnityHttp.Http.Request
void UnityHttp::Http::Request(::StringW url, ::UnityHttp::OnHttpEvent* onDone, ::UnityEngine::WWWForm* form) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(onDone), ::il2cpp_utils::ExtractType(form)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, onDone, form);
}
// Autogenerated method: UnityHttp.Http.UrlEncode
::StringW UnityHttp::Http::UrlEncode(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::UrlEncode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "UrlEncode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text);
}
// Autogenerated method: UnityHttp.Http.UrlDecode
::StringW UnityHttp::Http::UrlDecode(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::UrlDecode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "UrlDecode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text);
}
// Autogenerated method: UnityHttp.Http.Update
void UnityHttp::Http::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityHttp.Http.Flush
void UnityHttp::Http::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityHttp.Http.UpdateWaitingList
void UnityHttp::Http::UpdateWaitingList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::UpdateWaitingList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "UpdateWaitingList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityHttp.Http.Queue
void UnityHttp::Http::Queue(::UnityHttp::HttpRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::Queue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", "Queue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, request);
}
// Autogenerated method: UnityHttp.Http..cctor
void UnityHttp::Http::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::Http::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityHttp", "Http", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityHttp.OnHttpEvent
#include "UnityHttp/OnHttpEvent.hpp"
// Including type: UnityHttp.HttpRequest
#include "UnityHttp/HttpRequest.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityHttp.OnHttpEvent.Invoke
void UnityHttp::OnHttpEvent::Invoke(::UnityHttp::HttpRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::OnHttpEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::OnHttpEvent*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: UnityHttp.OnHttpEvent.BeginInvoke
::System::IAsyncResult* UnityHttp::OnHttpEvent::BeginInvoke(::UnityHttp::HttpRequest* request, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::OnHttpEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::OnHttpEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: UnityHttp.OnHttpEvent.EndInvoke
void UnityHttp::OnHttpEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityHttp::OnHttpEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityHttp::OnHttpEvent*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Blaze.AtlasEntity
#include "Blaze/AtlasEntity.hpp"
// Including type: Blaze.TextureAtlas
#include "Blaze/TextureAtlas.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Blaze.AtlasEntity.MultiThreadDraw
bool Blaze::AtlasEntity::MultiThreadDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasEntity::MultiThreadDraw");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::AtlasEntity*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasEntity.GetDimensionsOnAtlas
void Blaze::AtlasEntity::GetDimensionsOnAtlas(ByRef<int> width, ByRef<int> height) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasEntity::GetDimensionsOnAtlas");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::AtlasEntity*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(width), byref(height));
}
// Autogenerated method: Blaze.AtlasEntity.DrawToAtlas
bool Blaze::AtlasEntity::DrawToAtlas(::Blaze::TextureAtlas* atlas, ::Blaze::AtlasLocation* location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasEntity::DrawToAtlas");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::AtlasEntity*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, atlas, location);
}
// Autogenerated method: Blaze.AtlasEntity.GetAtlasID
int Blaze::AtlasEntity::GetAtlasID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasEntity::GetAtlasID");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::AtlasEntity*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Blaze.AtlasingMode
#include "Blaze/AtlasingMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Blaze.AtlasingMode SmallestSpace
::Blaze::AtlasingMode Blaze::AtlasingMode::_get_SmallestSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasingMode::_get_SmallestSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Blaze::AtlasingMode>("Blaze", "AtlasingMode", "SmallestSpace"));
}
// Autogenerated static field setter
// Set static field: static public Blaze.AtlasingMode SmallestSpace
void Blaze::AtlasingMode::_set_SmallestSpace(::Blaze::AtlasingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasingMode::_set_SmallestSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Blaze", "AtlasingMode", "SmallestSpace", value));
}
// Autogenerated static field getter
// Get static field: static public Blaze.AtlasingMode Columns
::Blaze::AtlasingMode Blaze::AtlasingMode::_get_Columns() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasingMode::_get_Columns");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Blaze::AtlasingMode>("Blaze", "AtlasingMode", "Columns"));
}
// Autogenerated static field setter
// Set static field: static public Blaze.AtlasingMode Columns
void Blaze::AtlasingMode::_set_Columns(::Blaze::AtlasingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasingMode::_set_Columns");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Blaze", "AtlasingMode", "Columns", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Blaze::AtlasingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
// Including type: Blaze.AtlasEntity
#include "Blaze/AtlasEntity.hpp"
// Including type: Blaze.TextureAtlas
#include "Blaze/TextureAtlas.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 UsageCount
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_UsageCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_UsageCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UsageCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasLocation EmptyAfter
[[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& Blaze::AtlasLocation::dyn_EmptyAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_EmptyAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EmptyAfter"))->offset;
  return *reinterpret_cast<::Blaze::AtlasLocation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasLocation EmptyBefore
[[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& Blaze::AtlasLocation::dyn_EmptyBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_EmptyBefore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EmptyBefore"))->offset;
  return *reinterpret_cast<::Blaze::AtlasLocation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 X
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Y
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Area
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_Area() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Area");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Area"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Width
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_Width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Width"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Height
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_Height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Height"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Empty
[[deprecated("Use field access instead!")]] bool& Blaze::AtlasLocation::dyn_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Empty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Empty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasEntity Image
[[deprecated("Use field access instead!")]] ::Blaze::AtlasEntity*& Blaze::AtlasLocation::dyn_Image() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Image");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Image"))->offset;
  return *reinterpret_cast<::Blaze::AtlasEntity**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 AtlasID
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_AtlasID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_AtlasID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AtlasID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.TextureAtlas Atlas
[[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& Blaze::AtlasLocation::dyn_Atlas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Atlas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Atlas"))->offset;
  return *reinterpret_cast<::Blaze::TextureAtlas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single InvertedSizeX
[[deprecated("Use field access instead!")]] float& Blaze::AtlasLocation::dyn_InvertedSizeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_InvertedSizeX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InvertedSizeX"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single InvertedSizeY
[[deprecated("Use field access instead!")]] float& Blaze::AtlasLocation::dyn_InvertedSizeY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_InvertedSizeY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InvertedSizeY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Spacing
[[deprecated("Use field access instead!")]] int& Blaze::AtlasLocation::dyn_Spacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::dyn_Spacing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Spacing"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Blaze.AtlasLocation.PreventDeallocation
void Blaze::AtlasLocation::PreventDeallocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::PreventDeallocation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreventDeallocation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.DecreaseUsage
bool Blaze::AtlasLocation::DecreaseUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::DecreaseUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecreaseUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.Deselect
void Blaze::AtlasLocation::Deselect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::Deselect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deselect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.AddToEmptySet
void Blaze::AtlasLocation::AddToEmptySet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::AddToEmptySet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToEmptySet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.FitFactor
int Blaze::AtlasLocation::FitFactor(int width, int height, int area) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::FitFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FitFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(area)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, width, height, area);
}
// Autogenerated method: Blaze.AtlasLocation.Select
void Blaze::AtlasLocation::Select(::Blaze::AtlasEntity* image, int width, int height, int spacing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::Select");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Select", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(image), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(spacing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, image, width, height, spacing);
}
// Autogenerated method: Blaze.AtlasLocation.OptimiseSelect
void Blaze::AtlasLocation::OptimiseSelect(::Blaze::AtlasLocation* location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::OptimiseSelect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OptimiseSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, location);
}
// Autogenerated method: Blaze.AtlasLocation.BakeUV
void Blaze::AtlasLocation::BakeUV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::BakeUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BakeUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.GetU
float Blaze::AtlasLocation::GetU(float atPixel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::GetU");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetU", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atPixel)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, atPixel);
}
// Autogenerated method: Blaze.AtlasLocation.GetV
float Blaze::AtlasLocation::GetV(float atPixel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::GetV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atPixel)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, atPixel);
}
// Autogenerated method: Blaze.AtlasLocation.BottomLeftPixel
int Blaze::AtlasLocation::BottomLeftPixel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::BottomLeftPixel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BottomLeftPixel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.RowPixelDelta
int Blaze::AtlasLocation::RowPixelDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::RowPixelDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RowPixelDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.AtlasIndex
int Blaze::AtlasLocation::AtlasIndex(int x, int y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::AtlasIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtlasIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x, y);
}
// Autogenerated method: Blaze.AtlasLocation.Flush
void Blaze::AtlasLocation::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.AtlasChanged
void Blaze::AtlasLocation::AtlasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::AtlasChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtlasChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasLocation.get_Shared
bool Blaze::AtlasLocation::get_Shared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasLocation::get_Shared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Blaze::UVBlock*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Blaze.AtlasStack
#include "Blaze/AtlasStack.hpp"
// Including type: Blaze.TextureAtlas
#include "Blaze/TextureAtlas.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Blaze.AtlasLocation
#include "Blaze/AtlasLocation.hpp"
// Including type: Blaze.AtlasEntity
#include "Blaze/AtlasEntity.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Spacing
[[deprecated("Use field access instead!")]] int& Blaze::AtlasStack::dyn_Spacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_Spacing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Spacing"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.AtlasingMode Mode
[[deprecated("Use field access instead!")]] ::Blaze::AtlasingMode& Blaze::AtlasStack::dyn_Mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_Mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Mode"))->offset;
  return *reinterpret_cast<::Blaze::AtlasingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean FilterLocked
[[deprecated("Use field access instead!")]] bool& Blaze::AtlasStack::dyn_FilterLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_FilterLocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FilterLocked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean PixelChange
[[deprecated("Use field access instead!")]] bool& Blaze::AtlasStack::dyn_PixelChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_PixelChange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PixelChange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.TextureAtlas Last
[[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& Blaze::AtlasStack::dyn_Last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_Last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Last"))->offset;
  return *reinterpret_cast<::Blaze::TextureAtlas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Blaze.TextureAtlas First
[[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& Blaze::AtlasStack::dyn_First() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_First");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "First"))->offset;
  return *reinterpret_cast<::Blaze::TextureAtlas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 InitialSize
[[deprecated("Use field access instead!")]] int& Blaze::AtlasStack::dyn_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_InitialSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InitialSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean CPUAccess
[[deprecated("Use field access instead!")]] bool& Blaze::AtlasStack::dyn_CPUAccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_CPUAccess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CPUAccess"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean OptimizeRequested
[[deprecated("Use field access instead!")]] bool& Blaze::AtlasStack::dyn_OptimizeRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_OptimizeRequested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OptimizeRequested"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.FilterMode FilteringMode
[[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& Blaze::AtlasStack::dyn_FilteringMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_FilteringMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FilteringMode"))->offset;
  return *reinterpret_cast<::UnityEngine::FilterMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TextureFormat Format
[[deprecated("Use field access instead!")]] ::UnityEngine::TextureFormat& Blaze::AtlasStack::dyn_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_Format");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Format"))->offset;
  return *reinterpret_cast<::UnityEngine::TextureFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.Int32,Blaze.AtlasLocation> ActiveImages
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>*& Blaze::AtlasStack::dyn_ActiveImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::dyn_ActiveImages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ActiveImages"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Blaze.AtlasStack.RequireImage
::Blaze::AtlasLocation* Blaze::AtlasStack::RequireImage(::Blaze::AtlasEntity* image) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::RequireImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequireImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(image)})));
  return ::il2cpp_utils::RunMethodRethrow<::Blaze::AtlasLocation*, false>(this, ___internal__method, image);
}
// Autogenerated method: Blaze.AtlasStack.OptimiseIfNeeded
bool Blaze::AtlasStack::OptimiseIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::OptimiseIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OptimiseIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.get_Count
int Blaze::AtlasStack::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.LockFilterMode
void Blaze::AtlasStack::LockFilterMode(::UnityEngine::FilterMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::LockFilterMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LockFilterMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode);
}
// Autogenerated method: Blaze.AtlasStack.Clear
void Blaze::AtlasStack::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.Flush
void Blaze::AtlasStack::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.Remove
void Blaze::AtlasStack::Remove(::Blaze::AtlasEntity* texture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, texture);
}
// Autogenerated method: Blaze.AtlasStack.Get
::Blaze::AtlasLocation* Blaze::AtlasStack::Get(int entityID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entityID)})));
  return ::il2cpp_utils::RunMethodRethrow<::Blaze::AtlasLocation*, false>(this, ___internal__method, entityID);
}
// Autogenerated method: Blaze.AtlasStack.Add
void Blaze::AtlasStack::Add(::Blaze::TextureAtlas* atlas) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(atlas)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, atlas);
}
// Autogenerated method: Blaze.AtlasStack.get_FilterMode
::UnityEngine::FilterMode Blaze::AtlasStack::get_FilterMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::get_FilterMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FilterMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::FilterMode, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.set_FilterMode
void Blaze::AtlasStack::set_FilterMode(::UnityEngine::FilterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::set_FilterMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FilterMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Blaze.AtlasStack.Create
::Blaze::TextureAtlas* Blaze::AtlasStack::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Blaze::TextureAtlas*, false>(this, ___internal__method);
}
// Autogenerated method: Blaze.AtlasStack.get_Top
::Blaze::TextureAtlas* Blaze::AtlasStack::get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::get_Top");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Top", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Blaze::TextureAtlas*, false>(this, ___internal__method);
}
