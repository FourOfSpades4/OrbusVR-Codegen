// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TestThrow
#include "GlobalNamespace/SteamVR_TestThrow.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.FixedJoint
#include "UnityEngine/FixedJoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject prefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_TestThrow::dyn_prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::dyn_prefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody attachPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::SteamVR_TestThrow::dyn_attachPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::dyn_attachPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_TrackedObject trackedObj
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject*& GlobalNamespace::SteamVR_TestThrow::dyn_trackedObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::dyn_trackedObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackedObj"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.FixedJoint joint
[[deprecated("Use field access instead!")]] ::UnityEngine::FixedJoint*& GlobalNamespace::SteamVR_TestThrow::dyn_joint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::dyn_joint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joint"))->offset;
  return *reinterpret_cast<::UnityEngine::FixedJoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TestThrow.Awake
void GlobalNamespace::SteamVR_TestThrow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestThrow.FixedUpdate
void GlobalNamespace::SteamVR_TestThrow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TestTrackedCamera
#include "GlobalNamespace/SteamVR_TestTrackedCamera.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SteamVR_TestTrackedCamera::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::dyn_material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_TestTrackedCamera::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean undistorted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TestTrackedCamera::dyn_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::dyn_undistorted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "undistorted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean cropped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TestTrackedCamera::dyn_cropped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::dyn_cropped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cropped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TestTrackedCamera.OnEnable
void GlobalNamespace::SteamVR_TestTrackedCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestTrackedCamera.OnDisable
void GlobalNamespace::SteamVR_TestTrackedCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestTrackedCamera.Update
void GlobalNamespace::SteamVR_TestTrackedCamera::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClickedEventHandler
#include "GlobalNamespace/ClickedEventHandler.hpp"
// Including type: ClickedEventArgs
#include "GlobalNamespace/ClickedEventArgs.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClickedEventHandler.Invoke
void GlobalNamespace::ClickedEventHandler::Invoke(::Il2CppObject* sender, ::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickedEventHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ClickedEventHandler*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, e);
}
// Autogenerated method: ClickedEventHandler.BeginInvoke
::System::IAsyncResult* GlobalNamespace::ClickedEventHandler::BeginInvoke(::Il2CppObject* sender, ::GlobalNamespace::ClickedEventArgs e, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickedEventHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ClickedEventHandler*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, sender, e, callback, object);
}
// Autogenerated method: ClickedEventHandler.EndInvoke
void GlobalNamespace::ClickedEventHandler::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ClickedEventHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ClickedEventHandler*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedController
#include "GlobalNamespace/SteamVR_TrackedController.hpp"
// Including type: ClickedEventHandler
#include "GlobalNamespace/ClickedEventHandler.hpp"
// Including type: ClickedEventArgs
#include "GlobalNamespace/ClickedEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt32 controllerIndex
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_TrackedController::dyn_controllerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_controllerIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerState_t controllerState
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerState_t& GlobalNamespace::SteamVR_TrackedController::dyn_controllerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_controllerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerState"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerState_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean triggerPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_triggerPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_triggerPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean steamPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_steamPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_steamPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "steamPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean menuPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_menuPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_menuPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "menuPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean padPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_padPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_padPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "padPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean padTouched
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_padTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_padTouched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "padTouched"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean gripped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedController::dyn_gripped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_gripped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler MenuButtonClicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_MenuButtonClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_MenuButtonClicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MenuButtonClicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler MenuButtonUnclicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_MenuButtonUnclicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_MenuButtonUnclicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MenuButtonUnclicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler TriggerClicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_TriggerClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_TriggerClicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerClicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler TriggerUnclicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_TriggerUnclicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_TriggerUnclicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerUnclicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler SteamClicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_SteamClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_SteamClicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SteamClicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler PadClicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_PadClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_PadClicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PadClicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler PadUnclicked
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_PadUnclicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_PadUnclicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PadUnclicked"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler PadTouched
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_PadTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_PadTouched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PadTouched"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler PadUntouched
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_PadUntouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_PadUntouched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PadUntouched"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler Gripped
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_Gripped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_Gripped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Gripped"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ClickedEventHandler Ungripped
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& GlobalNamespace::SteamVR_TrackedController::dyn_Ungripped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::dyn_Ungripped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ungripped"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ClickedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TrackedController.add_MenuButtonClicked
void GlobalNamespace::SteamVR_TrackedController::add_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_MenuButtonClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_MenuButtonClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_MenuButtonClicked
void GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_MenuButtonClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_MenuButtonUnclicked
void GlobalNamespace::SteamVR_TrackedController::add_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_MenuButtonUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_MenuButtonUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_MenuButtonUnclicked
void GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_MenuButtonUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_TriggerClicked
void GlobalNamespace::SteamVR_TrackedController::add_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_TriggerClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_TriggerClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_TriggerClicked
void GlobalNamespace::SteamVR_TrackedController::remove_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_TriggerClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_TriggerClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_TriggerUnclicked
void GlobalNamespace::SteamVR_TrackedController::add_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_TriggerUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_TriggerUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_TriggerUnclicked
void GlobalNamespace::SteamVR_TrackedController::remove_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_TriggerUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_TriggerUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_SteamClicked
void GlobalNamespace::SteamVR_TrackedController::add_SteamClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_SteamClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_SteamClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_SteamClicked
void GlobalNamespace::SteamVR_TrackedController::remove_SteamClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_SteamClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_SteamClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_PadClicked
void GlobalNamespace::SteamVR_TrackedController::add_PadClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_PadClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PadClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_PadClicked
void GlobalNamespace::SteamVR_TrackedController::remove_PadClicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_PadClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PadClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_PadUnclicked
void GlobalNamespace::SteamVR_TrackedController::add_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_PadUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PadUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_PadUnclicked
void GlobalNamespace::SteamVR_TrackedController::remove_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_PadUnclicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PadUnclicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_PadTouched
void GlobalNamespace::SteamVR_TrackedController::add_PadTouched(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_PadTouched");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PadTouched", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_PadTouched
void GlobalNamespace::SteamVR_TrackedController::remove_PadTouched(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_PadTouched");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PadTouched", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_PadUntouched
void GlobalNamespace::SteamVR_TrackedController::add_PadUntouched(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_PadUntouched");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PadUntouched", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_PadUntouched
void GlobalNamespace::SteamVR_TrackedController::remove_PadUntouched(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_PadUntouched");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PadUntouched", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_Gripped
void GlobalNamespace::SteamVR_TrackedController::add_Gripped(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_Gripped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_Gripped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_Gripped
void GlobalNamespace::SteamVR_TrackedController::remove_Gripped(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_Gripped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_Gripped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.add_Ungripped
void GlobalNamespace::SteamVR_TrackedController::add_Ungripped(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::add_Ungripped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_Ungripped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.remove_Ungripped
void GlobalNamespace::SteamVR_TrackedController::remove_Ungripped(::GlobalNamespace::ClickedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::remove_Ungripped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_Ungripped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedController.Start
void GlobalNamespace::SteamVR_TrackedController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedController.SetDeviceIndex
void GlobalNamespace::SteamVR_TrackedController::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_TrackedController.OnTriggerClicked
void GlobalNamespace::SteamVR_TrackedController::OnTriggerClicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnTriggerClicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnTriggerUnclicked
void GlobalNamespace::SteamVR_TrackedController::OnTriggerUnclicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnTriggerUnclicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnMenuClicked
void GlobalNamespace::SteamVR_TrackedController::OnMenuClicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnMenuClicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnMenuUnclicked
void GlobalNamespace::SteamVR_TrackedController::OnMenuUnclicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnMenuUnclicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnSteamClicked
void GlobalNamespace::SteamVR_TrackedController::OnSteamClicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnSteamClicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnPadClicked
void GlobalNamespace::SteamVR_TrackedController::OnPadClicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnPadClicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnPadUnclicked
void GlobalNamespace::SteamVR_TrackedController::OnPadUnclicked(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnPadUnclicked");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnPadTouched
void GlobalNamespace::SteamVR_TrackedController::OnPadTouched(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnPadTouched");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnPadUntouched
void GlobalNamespace::SteamVR_TrackedController::OnPadUntouched(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnPadUntouched");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnGripped
void GlobalNamespace::SteamVR_TrackedController::OnGripped(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnGripped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.OnUngripped
void GlobalNamespace::SteamVR_TrackedController::OnUngripped(::GlobalNamespace::ClickedEventArgs e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::OnUngripped");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: SteamVR_TrackedController.Update
void GlobalNamespace::SteamVR_TrackedController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::Update");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_TrackedController*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR
#include "GlobalNamespace/SteamVR.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _enabled
bool GlobalNamespace::SteamVR::_get__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get__enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "_enabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _enabled
void GlobalNamespace::SteamVR::_set__enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set__enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_enabled", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR _instance
::GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR*>("", "SteamVR", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR _instance
void GlobalNamespace::SteamVR::_set__instance(::GlobalNamespace::SteamVR* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "_instance", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADC88C
// Autogenerated static field getter
// Get static field: static private System.Boolean <initializing>k__BackingField
bool GlobalNamespace::SteamVR::_get_$initializing$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get_$initializing$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<initializing>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <initializing>k__BackingField
void GlobalNamespace::SteamVR::_set_$initializing$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set_$initializing$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<initializing>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADC89C
// Autogenerated static field getter
// Get static field: static private System.Boolean <calibrating>k__BackingField
bool GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get_$calibrating$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<calibrating>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <calibrating>k__BackingField
void GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set_$calibrating$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<calibrating>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADC8AC
// Autogenerated static field getter
// Get static field: static private System.Boolean <outOfRange>k__BackingField
bool GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get_$outOfRange$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "SteamVR", "<outOfRange>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <outOfRange>k__BackingField
void GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set_$outOfRange$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "<outOfRange>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean[] connected
::ArrayW<bool> GlobalNamespace::SteamVR::_get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_get_connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<bool>>("", "SteamVR", "connected"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean[] connected
void GlobalNamespace::SteamVR::_set_connected(::ArrayW<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::_set_connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR", "connected", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSystem <hmd>k__BackingField
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRSystem*& GlobalNamespace::SteamVR::dyn_$hmd$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$hmd$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hmd>k__BackingField"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRCompositor <compositor>k__BackingField
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRCompositor*& GlobalNamespace::SteamVR::dyn_$compositor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$compositor$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<compositor>k__BackingField"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRCompositor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVROverlay <overlay>k__BackingField
[[deprecated("Use field access instead!")]] ::Valve::VR::CVROverlay*& GlobalNamespace::SteamVR::dyn_$overlay$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$overlay$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<overlay>k__BackingField"))->offset;
  return *reinterpret_cast<::Valve::VR::CVROverlay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <sceneWidth>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR::dyn_$sceneWidth$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$sceneWidth$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneWidth>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <sceneHeight>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR::dyn_$sceneHeight$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$sceneHeight$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneHeight>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <aspect>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR::dyn_$aspect$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$aspect$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<aspect>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <fieldOfView>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR::dyn_$fieldOfView$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$fieldOfView$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<fieldOfView>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 <tanHalfFov>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::SteamVR::dyn_$tanHalfFov$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$tanHalfFov$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<tanHalfFov>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.VRTextureBounds_t[] <textureBounds>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::VRTextureBounds_t>& GlobalNamespace::SteamVR::dyn_$textureBounds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$textureBounds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<textureBounds>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::VRTextureBounds_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Utils/RigidTransform[] <eyes>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>& GlobalNamespace::SteamVR::dyn_$eyes$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_$eyes$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<eyes>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.ETextureType textureType
[[deprecated("Use field access instead!")]] ::Valve::VR::ETextureType& GlobalNamespace::SteamVR::dyn_textureType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::dyn_textureType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textureType"))->offset;
  return *reinterpret_cast<::Valve::VR::ETextureType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR.get_active
bool GlobalNamespace::SteamVR::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_enabled
bool GlobalNamespace::SteamVR::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_enabled
void GlobalNamespace::SteamVR::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_instance
::GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.get_usingNativeSupport
bool GlobalNamespace::SteamVR::get_usingNativeSupport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_usingNativeSupport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_usingNativeSupport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.CreateInstance
::GlobalNamespace::SteamVR* GlobalNamespace::SteamVR::CreateInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::CreateInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "CreateInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.ReportError
void GlobalNamespace::SteamVR::ReportError(::Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::ReportError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "ReportError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, error);
}
// Autogenerated method: SteamVR.get_hmd
::Valve::VR::CVRSystem* GlobalNamespace::SteamVR::get_hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_hmd
void GlobalNamespace::SteamVR::set_hmd(::Valve::VR::CVRSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_hmd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hmd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_compositor
::Valve::VR::CVRCompositor* GlobalNamespace::SteamVR::get_compositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_compositor
void GlobalNamespace::SteamVR::set_compositor(::Valve::VR::CVRCompositor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_overlay
::Valve::VR::CVROverlay* GlobalNamespace::SteamVR::get_overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_overlay
void GlobalNamespace::SteamVR::set_overlay(::Valve::VR::CVROverlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_initializing
bool GlobalNamespace::SteamVR::get_initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_initializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_initializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_initializing
void GlobalNamespace::SteamVR::set_initializing(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_initializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_initializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_calibrating
bool GlobalNamespace::SteamVR::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_calibrating
void GlobalNamespace::SteamVR::set_calibrating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_outOfRange
bool GlobalNamespace::SteamVR::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "get_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.set_outOfRange
void GlobalNamespace::SteamVR::set_outOfRange(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "set_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneWidth
float GlobalNamespace::SteamVR::get_sceneWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneWidth
void GlobalNamespace::SteamVR::set_sceneWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_sceneWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_sceneHeight
float GlobalNamespace::SteamVR::get_sceneHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_sceneHeight
void GlobalNamespace::SteamVR::set_sceneHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_sceneHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_aspect
float GlobalNamespace::SteamVR::get_aspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_aspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_aspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_aspect
void GlobalNamespace::SteamVR::set_aspect(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_aspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_aspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_fieldOfView
float GlobalNamespace::SteamVR::get_fieldOfView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fieldOfView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_fieldOfView
void GlobalNamespace::SteamVR::set_fieldOfView(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_fieldOfView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fieldOfView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_tanHalfFov
::UnityEngine::Vector2 GlobalNamespace::SteamVR::get_tanHalfFov() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tanHalfFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_tanHalfFov
void GlobalNamespace::SteamVR::set_tanHalfFov(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_tanHalfFov");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tanHalfFov", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_textureBounds
::ArrayW<::Valve::VR::VRTextureBounds_t> GlobalNamespace::SteamVR::get_textureBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_textureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Valve::VR::VRTextureBounds_t>, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_textureBounds
void GlobalNamespace::SteamVR::set_textureBounds(::ArrayW<::Valve::VR::VRTextureBounds_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_textureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_textureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_eyes
::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> GlobalNamespace::SteamVR::get_eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.set_eyes
void GlobalNamespace::SteamVR::set_eyes(::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::set_eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR.get_hmd_TrackingSystemName
::StringW GlobalNamespace::SteamVR::get_hmd_TrackingSystemName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd_TrackingSystemName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_TrackingSystemName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_ModelNumber
::StringW GlobalNamespace::SteamVR::get_hmd_ModelNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd_ModelNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_ModelNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SerialNumber
::StringW GlobalNamespace::SteamVR::get_hmd_SerialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd_SerialNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_SerialNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_SecondsFromVsyncToPhotons
float GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_SecondsFromVsyncToPhotons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.get_hmd_DisplayFrequency
float GlobalNamespace::SteamVR::get_hmd_DisplayFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::get_hmd_DisplayFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmd_DisplayFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.GetTrackedDeviceString
::StringW GlobalNamespace::SteamVR::GetTrackedDeviceString(uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::GetTrackedDeviceString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, deviceId);
}
// Autogenerated method: SteamVR.GetStringProperty
::StringW GlobalNamespace::SteamVR::GetStringProperty(::Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::GetStringProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.GetFloatProperty
float GlobalNamespace::SteamVR::GetFloatProperty(::Valve::VR::ETrackedDeviceProperty prop, uint deviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::GetFloatProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(deviceId)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, prop, deviceId);
}
// Autogenerated method: SteamVR.OnInitializing
void GlobalNamespace::SteamVR::OnInitializing(bool initializing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::OnInitializing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initializing);
}
// Autogenerated method: SteamVR.OnCalibrating
void GlobalNamespace::SteamVR::OnCalibrating(bool calibrating) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::OnCalibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCalibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calibrating)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, calibrating);
}
// Autogenerated method: SteamVR.OnOutOfRange
void GlobalNamespace::SteamVR::OnOutOfRange(bool outOfRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::OnOutOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnOutOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outOfRange)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outOfRange);
}
// Autogenerated method: SteamVR.OnDeviceConnected
void GlobalNamespace::SteamVR::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR.OnNewPoses
void GlobalNamespace::SteamVR::OnNewPoses(::ArrayW<::Valve::VR::TrackedDevicePose_t> poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR.Dispose
void GlobalNamespace::SteamVR::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: SteamVR.SafeDispose
void GlobalNamespace::SteamVR::SafeDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::SafeDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", "SafeDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR..cctor
void GlobalNamespace::SteamVR::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR.Finalize
void GlobalNamespace::SteamVR::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Hashtable values
::System::Collections::Hashtable* GlobalNamespace::SteamVR_Camera::_get_values() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_get_values");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Hashtable*>("", "SteamVR_Camera", "values"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Hashtable values
void GlobalNamespace::SteamVR_Camera::_set_values(::System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_set_values");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "values", value));
}
// Autogenerated static field getter
// Get static field: static private System.String eyeSuffix
::StringW GlobalNamespace::SteamVR_Camera::_get_eyeSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_get_eyeSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_Camera", "eyeSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String eyeSuffix
void GlobalNamespace::SteamVR_Camera::_set_eyeSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_set_eyeSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "eyeSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String earsSuffix
::StringW GlobalNamespace::SteamVR_Camera::_get_earsSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_get_earsSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_Camera", "earsSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String earsSuffix
void GlobalNamespace::SteamVR_Camera::_set_earsSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_set_earsSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "earsSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String headSuffix
::StringW GlobalNamespace::SteamVR_Camera::_get_headSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_get_headSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_Camera", "headSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String headSuffix
void GlobalNamespace::SteamVR_Camera::_set_headSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_set_headSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "headSuffix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String originSuffix
::StringW GlobalNamespace::SteamVR_Camera::_get_originSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_get_originSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_Camera", "originSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String originSuffix
void GlobalNamespace::SteamVR_Camera::_set_originSuffix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::_set_originSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Camera", "originSuffix", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_Camera::dyn__head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::dyn__head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera <camera>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::SteamVR_Camera::dyn_$camera$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::dyn_$camera$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<camera>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _ears
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_Camera::dyn__ears() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::dyn__ears");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ears"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean wireframe
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Camera::dyn_wireframe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::dyn_wireframe");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wireframe"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Camera.get_head
::UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_offset
::UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_offset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_origin
::UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_origin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_origin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_origin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_camera
::UnityEngine::Camera* GlobalNamespace::SteamVR_Camera::get_camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_camera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_camera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.set_camera
void GlobalNamespace::SteamVR_Camera::set_camera(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::set_camera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_camera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Camera.get_ears
::UnityEngine::Transform* GlobalNamespace::SteamVR_Camera::get_ears() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_ears");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ears", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.GetRay
::UnityEngine::Ray GlobalNamespace::SteamVR_Camera::GetRay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::GetRay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Ray, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_sceneResolutionScale
float GlobalNamespace::SteamVR_Camera::get_sceneResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_sceneResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Camera", "get_sceneResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Camera.set_sceneResolutionScale
void GlobalNamespace::SteamVR_Camera::set_sceneResolutionScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::set_sceneResolutionScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Camera", "set_sceneResolutionScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Camera.OnDisable
void GlobalNamespace::SteamVR_Camera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.OnEnable
void GlobalNamespace::SteamVR_Camera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Awake
void GlobalNamespace::SteamVR_Camera::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.ForceLast
void GlobalNamespace::SteamVR_Camera::ForceLast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::ForceLast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.get_baseName
::StringW GlobalNamespace::SteamVR_Camera::get_baseName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::get_baseName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_baseName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Expand
void GlobalNamespace::SteamVR_Camera::Expand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::Expand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Expand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Camera.Collapse
void GlobalNamespace::SteamVR_Camera::Collapse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Camera::Collapse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Collapse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_CameraFlip
#include "GlobalNamespace/SteamVR_CameraFlip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_CameraFlip.Awake
void GlobalNamespace::SteamVR_CameraFlip::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_CameraFlip::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_CameraMask
#include "GlobalNamespace/SteamVR_CameraMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_CameraMask.Awake
void GlobalNamespace::SteamVR_CameraMask::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_CameraMask::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller
#include "GlobalNamespace/SteamVR_Controller.hpp"
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_Controller/Device[] devices
::ArrayW<::GlobalNamespace::SteamVR_Controller::Device*> GlobalNamespace::SteamVR_Controller::_get_devices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::_get_devices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::SteamVR_Controller::Device*>>("", "SteamVR_Controller", "devices"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Controller/Device[] devices
void GlobalNamespace::SteamVR_Controller::_set_devices(::ArrayW<::GlobalNamespace::SteamVR_Controller::Device*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::_set_devices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller", "devices", value));
}
// Autogenerated method: SteamVR_Controller.Input
::GlobalNamespace::SteamVR_Controller::Device* GlobalNamespace::SteamVR_Controller::Input(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Input");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Input", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Controller::Device*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_Controller.Update
void GlobalNamespace::SteamVR_Controller::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Controller.GetDeviceIndex
int GlobalNamespace::SteamVR_Controller::GetDeviceIndex(::GlobalNamespace::SteamVR_Controller::DeviceRelation relation, ::Valve::VR::ETrackedDeviceClass deviceClass, int relativeTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::GetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Controller", "GetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relation), ::il2cpp_utils::ExtractType(deviceClass), ::il2cpp_utils::ExtractType(relativeTo)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, relation, deviceClass, relativeTo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt64 System
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "System"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 System
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "System", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 ApplicationMenu
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 ApplicationMenu
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Grip
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Grip"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Grip
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Grip", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis0
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis0"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis0
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis1
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis1"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis1
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis2
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis2"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis2
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis3
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis3"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis3
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis4
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis4"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis4
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Touchpad
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Touchpad
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Trigger
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Trigger"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Trigger
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Trigger", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt32 <index>k__BackingField
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_Controller::Device::dyn_$index$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_$index$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<index>k__BackingField"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <valid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Controller::Device::dyn_$valid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_$valid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<valid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.VRControllerState_t state
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerState_t& GlobalNamespace::SteamVR_Controller::Device::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerState_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.VRControllerState_t prevState
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerState_t& GlobalNamespace::SteamVR_Controller::Device::dyn_prevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_prevState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevState"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerState_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.TrackedDevicePose_t pose
[[deprecated("Use field access instead!")]] ::Valve::VR::TrackedDevicePose_t& GlobalNamespace::SteamVR_Controller::Device::dyn_pose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_pose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pose"))->offset;
  return *reinterpret_cast<::Valve::VR::TrackedDevicePose_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 prevFrameCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_Controller::Device::dyn_prevFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_prevFrameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevFrameCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hairTriggerDelta
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerDelta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hairTriggerDelta"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hairTriggerLimit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hairTriggerLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hairTriggerState
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hairTriggerState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hairTriggerPrevState
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerPrevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::dyn_hairTriggerPrevState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hairTriggerPrevState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Controller/Device.get_index
uint GlobalNamespace::SteamVR_Controller::Device::get_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_index");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_index
void GlobalNamespace::SteamVR_Controller::Device::set_index(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::set_index");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_valid
bool GlobalNamespace::SteamVR_Controller::Device::get_valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_valid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_valid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_valid
void GlobalNamespace::SteamVR_Controller::Device::set_valid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::set_valid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_connected
bool GlobalNamespace::SteamVR_Controller::Device::get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_connected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_hasTracking
bool GlobalNamespace::SteamVR_Controller::Device::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_outOfRange
bool GlobalNamespace::SteamVR_Controller::Device::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outOfRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_calibrating
bool GlobalNamespace::SteamVR_Controller::Device::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_calibrating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_calibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_uninitialized
bool GlobalNamespace::SteamVR_Controller::Device::get_uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_uninitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uninitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_transform
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Controller::Device::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_velocity
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_angularVelocity
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetState
::Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPrevState
::Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetPrevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPrevState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrevState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPose
::Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_Controller::Device::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.Update
void GlobalNamespace::SteamVR_Controller::Device::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonMask)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetAxis
::UnityEngine::Vector2 GlobalNamespace::SteamVR_Controller::Device::GetAxis(::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonId)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.TriggerHapticPulse
void GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse(uint16_t durationMicroSec, ::Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(durationMicroSec), ::il2cpp_utils::ExtractType(buttonId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, durationMicroSec, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.UpdateHairTrigger
void GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHairTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTrigger
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerDown
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTriggerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerUp
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHairTriggerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation First
::GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "First"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation First
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First(::GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "First", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Leftmost
::GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Leftmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Leftmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost(::GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Leftmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Rightmost
::GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Rightmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Rightmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost(::GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Rightmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
::GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestLeft"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft(::GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestLeft", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestRight
::GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestRight"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestRight
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight(::GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_Controller::DeviceRelation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Controller::DeviceRelation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_ControllerManager
#include "GlobalNamespace/SteamVR_ControllerManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String hiddenPrefix
::StringW GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_ControllerManager", "hiddenPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPrefix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String hiddenPostfix
::StringW GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_ControllerManager", "hiddenPostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPostfix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPostfix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String[] labels
::ArrayW<::StringW> GlobalNamespace::SteamVR_ControllerManager::_get_labels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_get_labels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "SteamVR_ControllerManager", "labels"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] labels
void GlobalNamespace::SteamVR_ControllerManager::_set_labels(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::_set_labels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "labels", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject left
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_ControllerManager::dyn_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_left");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "left"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject right
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_ControllerManager::dyn_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_right");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "right"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] objects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::SteamVR_ControllerManager::dyn_objects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_objects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean assignAllBeforeIdentified
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_ControllerManager::dyn_assignAllBeforeIdentified() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_assignAllBeforeIdentified");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assignAllBeforeIdentified"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32[] indices
[[deprecated("Use field access instead!")]] ::ArrayW<uint>& GlobalNamespace::SteamVR_ControllerManager::dyn_indices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_indices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indices"))->offset;
  return *reinterpret_cast<::ArrayW<uint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] connected
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::SteamVR_ControllerManager::dyn_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_connected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connected"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 leftIndex
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_ControllerManager::dyn_leftIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_leftIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 rightIndex
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_ControllerManager::dyn_rightIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_rightIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action inputFocusAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_ControllerManager::dyn_inputFocusAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_inputFocusAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action deviceConnectedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_ControllerManager::dyn_deviceConnectedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_deviceConnectedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceConnectedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action trackedDeviceRoleChangedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_ControllerManager::dyn_trackedDeviceRoleChangedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::dyn_trackedDeviceRoleChangedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackedDeviceRoleChangedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_ControllerManager.SetUniqueObject
void GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject(::UnityEngine::GameObject* o, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUniqueObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, o, index);
}
// Autogenerated method: SteamVR_ControllerManager.UpdateTargets
void GlobalNamespace::SteamVR_ControllerManager::UpdateTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::UpdateTargets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTargets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.Awake
void GlobalNamespace::SteamVR_ControllerManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnEnable
void GlobalNamespace::SteamVR_ControllerManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnDisable
void GlobalNamespace::SteamVR_ControllerManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnInputFocus
void GlobalNamespace::SteamVR_ControllerManager::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_ControllerManager.HideObject
void GlobalNamespace::SteamVR_ControllerManager::HideObject(::UnityEngine::Transform* t, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::HideObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.ShowObject
void GlobalNamespace::SteamVR_ControllerManager::ShowObject(::UnityEngine::Transform* t, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::ShowObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.SetTrackedDeviceIndex
void GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectIndex), ::il2cpp_utils::ExtractType(trackedDeviceIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, objectIndex, trackedDeviceIndex);
}
// Autogenerated method: SteamVR_ControllerManager.OnTrackedDeviceRoleChanged
void GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged(::Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTrackedDeviceRoleChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_ControllerManager.OnDeviceConnected
void GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_ControllerManager.Refresh
void GlobalNamespace::SteamVR_ControllerManager::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager..cctor
void GlobalNamespace::SteamVR_ControllerManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ControllerManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_ControllerManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Ears
#include "GlobalNamespace/SteamVR_Ears.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SteamVR_Camera vrcam
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Camera*& GlobalNamespace::SteamVR_Ears::dyn_vrcam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::dyn_vrcam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrcam"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean usingSpeakers
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Ears::dyn_usingSpeakers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::dyn_usingSpeakers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "usingSpeakers"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion offset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SteamVR_Ears::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Ears.OnNewPosesApplied
void GlobalNamespace::SteamVR_Ears::OnNewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::OnNewPosesApplied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPosesApplied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnEnable
void GlobalNamespace::SteamVR_Ears::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnDisable
void GlobalNamespace::SteamVR_Ears::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Ears::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: SteamVR_Events/Action`1
#include "GlobalNamespace/SteamVR_Events_Action_1.hpp"
// Including type: SteamVR_Events/Action`2
#include "GlobalNamespace/SteamVR_Events_Action_2.hpp"
// Including type: SteamVR_Events/Action`3
#include "GlobalNamespace/SteamVR_Events_Action_3.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: SteamVR_Events/Event`1
#include "GlobalNamespace/SteamVR_Events_Event_1.hpp"
// Including type: SteamVR_Events/Event`2
#include "GlobalNamespace/SteamVR_Events_Event_2.hpp"
// Including type: SteamVR_Events/Event`3
#include "GlobalNamespace/SteamVR_Events_Event_3.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: UnityEngine.Events.UnityAction`2
#include "UnityEngine/Events/UnityAction_2.hpp"
// Including type: UnityEngine.Events.UnityAction`3
#include "UnityEngine/Events/UnityAction_3.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_Calibrating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Calibrating"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
void GlobalNamespace::SteamVR_Events::_set_Calibrating(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_Calibrating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Calibrating", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
::GlobalNamespace::SteamVR_Events::Event_2<int, bool>* GlobalNamespace::SteamVR_Events::_get_DeviceConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_DeviceConnected");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_2<int, bool>*>("", "SteamVR_Events", "DeviceConnected")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
void GlobalNamespace::SteamVR_Events::_set_DeviceConnected(::GlobalNamespace::SteamVR_Events::Event_2<int, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_DeviceConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "DeviceConnected", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
::GlobalNamespace::SteamVR_Events::Event_3<::UnityEngine::Color, float, bool>* GlobalNamespace::SteamVR_Events::_get_Fade() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_Fade");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_3<::UnityEngine::Color, float, bool>*>("", "SteamVR_Events", "Fade")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
void GlobalNamespace::SteamVR_Events::_set_Fade(::GlobalNamespace::SteamVR_Events::Event_3<::UnityEngine::Color, float, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_Fade");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Fade", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event FadeReady
::GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_FadeReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_FadeReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "FadeReady"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event FadeReady
void GlobalNamespace::SteamVR_Events::_set_FadeReady(::GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_FadeReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "FadeReady", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
void GlobalNamespace::SteamVR_Events::_set_HideRenderModels(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_Initializing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Initializing"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
void GlobalNamespace::SteamVR_Events::_set_Initializing(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_Initializing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Initializing", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_InputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_InputFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "InputFocus"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
void GlobalNamespace::SteamVR_Events::_set_InputFocus(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_InputFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "InputFocus", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
void GlobalNamespace::SteamVR_Events::_set_Loading(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
::GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeIn"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn(::GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeIn", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
::GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeOut"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut(::GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeOut", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
::GlobalNamespace::SteamVR_Events::Event_1<::ArrayW<::Valve::VR::TrackedDevicePose_t>>* GlobalNamespace::SteamVR_Events::_get_NewPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_NewPoses");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<::ArrayW<::Valve::VR::TrackedDevicePose_t>>*>("", "SteamVR_Events", "NewPoses"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
void GlobalNamespace::SteamVR_Events::_set_NewPoses(::GlobalNamespace::SteamVR_Events::Event_1<::ArrayW<::Valve::VR::TrackedDevicePose_t>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_NewPoses");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPoses", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event NewPosesApplied
::GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_NewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_NewPosesApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "NewPosesApplied"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event NewPosesApplied
void GlobalNamespace::SteamVR_Events::_set_NewPosesApplied(::GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_NewPosesApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPosesApplied", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
::GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
void GlobalNamespace::SteamVR_Events::_set_OutOfRange(::GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
::GlobalNamespace::SteamVR_Events::Event_2<::GlobalNamespace::SteamVR_RenderModel*, bool>* GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_2<::GlobalNamespace::SteamVR_RenderModel*, bool>*>("", "SteamVR_Events", "RenderModelLoaded")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
void GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded(::GlobalNamespace::SteamVR_Events::Event_2<::GlobalNamespace::SteamVR_RenderModel*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "RenderModelLoaded", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
::System::Collections::Generic::Dictionary_2<::Valve::VR::EVREventType, ::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::VREvent_t>*>* GlobalNamespace::SteamVR_Events::_get_systemEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_get_systemEvents");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::Valve::VR::EVREventType, ::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::VREvent_t>*>*>("", "SteamVR_Events", "systemEvents")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
void GlobalNamespace::SteamVR_Events::_set_systemEvents(::System::Collections::Generic::Dictionary_2<::Valve::VR::EVREventType, ::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::VREvent_t>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::_set_systemEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "systemEvents", value));
}
// Autogenerated method: SteamVR_Events.CalibratingAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::CalibratingAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::CalibratingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "CalibratingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.DeviceConnectedAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::DeviceConnectedAction(::UnityEngine::Events::UnityAction_2<int, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::DeviceConnectedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "DeviceConnectedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeAction(::UnityEngine::Events::UnityAction_3<::UnityEngine::Color, float, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::FadeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeReadyAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeReadyAction(::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::FadeReadyAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeReadyAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.HideRenderModelsAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::HideRenderModelsAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::HideRenderModelsAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "HideRenderModelsAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InitializingAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InitializingAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::InitializingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "InitializingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InputFocusAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InputFocusAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::InputFocusAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "InputFocusAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::LoadingAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeInAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeInAction(::UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::LoadingFadeInAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeInAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeOutAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeOutAction(::UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::LoadingFadeOutAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeOutAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAction(::UnityEngine::Events::UnityAction_1<::ArrayW<::Valve::VR::TrackedDevicePose_t>>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::NewPosesAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAppliedAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAppliedAction(::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::NewPosesAppliedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAppliedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.OutOfRangeAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::OutOfRangeAction(::UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::OutOfRangeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "OutOfRangeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.RenderModelLoadedAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::RenderModelLoadedAction(::UnityEngine::Events::UnityAction_2<::GlobalNamespace::SteamVR_RenderModel*, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::RenderModelLoadedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "RenderModelLoadedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.System
::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::VREvent_t>* GlobalNamespace::SteamVR_Events::System(::Valve::VR::EVREventType eventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::System");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "System", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::VREvent_t>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, eventType);
}
// Autogenerated method: SteamVR_Events.SystemAction
::GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::SystemAction(::Valve::VR::EVREventType eventType, ::UnityEngine::Events::UnityAction_1<::Valve::VR::VREvent_t>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::SystemAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", "SystemAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, eventType, action);
}
// Autogenerated method: SteamVR_Events..cctor
void GlobalNamespace::SteamVR_Events::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Events", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Action.Enable
void GlobalNamespace::SteamVR_Events::Action::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::Action::Enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Events::Action*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: SteamVR_Events/Action.set_enabled
void GlobalNamespace::SteamVR_Events::Action::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::Action::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Event _event
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Event*& GlobalNamespace::SteamVR_Events::ActionNoArgs::dyn__event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::ActionNoArgs::dyn__event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_event"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Event**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityAction action
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityAction*& GlobalNamespace::SteamVR_Events::ActionNoArgs::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::ActionNoArgs::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityAction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Events/ActionNoArgs.Enable
void GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Events::Action*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Event.Listen
void GlobalNamespace::SteamVR_Events::Event::Listen(::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::Event::Listen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Listen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Remove
void GlobalNamespace::SteamVR_Events::Event::Remove(::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::Event::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Send
void GlobalNamespace::SteamVR_Events::Event::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Events::Event::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: System.IO.FileSystemWatcher
#include "System/IO/FileSystemWatcher.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.IO.FileSystemEventArgs
#include "System/IO/FileSystemEventArgs.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SteamVR_ExternalCamera/Config config
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_ExternalCamera::Config& GlobalNamespace::SteamVR_ExternalCamera::dyn_config() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_config");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "config"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_ExternalCamera::Config*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String configPath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_ExternalCamera::dyn_configPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_configPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "configPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.FileSystemWatcher watcher
[[deprecated("Use field access instead!")]] ::System::IO::FileSystemWatcher*& GlobalNamespace::SteamVR_ExternalCamera::dyn_watcher() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_watcher");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "watcher"))->offset;
  return *reinterpret_cast<::System::IO::FileSystemWatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera cam
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::SteamVR_ExternalCamera::dyn_cam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_cam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cam"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_ExternalCamera::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject clipQuad
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_ExternalCamera::dyn_clipQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_clipQuad");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clipQuad"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material clipMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SteamVR_ExternalCamera::dyn_clipMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_clipMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clipMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material colorMat
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SteamVR_ExternalCamera::dyn_colorMat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_colorMat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorMat"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material alphaMat
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SteamVR_ExternalCamera::dyn_alphaMat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_alphaMat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alphaMat"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera[] cameras
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Camera*>& GlobalNamespace::SteamVR_ExternalCamera::dyn_cameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_cameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cameras"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Camera*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rect[] cameraRects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rect>& GlobalNamespace::SteamVR_ExternalCamera::dyn_cameraRects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_cameraRects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cameraRects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Rect>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sceneResolutionScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_ExternalCamera::dyn_sceneResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::dyn_sceneResolutionScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneResolutionScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_ExternalCamera.ReadConfig
void GlobalNamespace::SteamVR_ExternalCamera::ReadConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::ReadConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnChanged
void GlobalNamespace::SteamVR_ExternalCamera::OnChanged(::Il2CppObject* source, ::System::IO::FileSystemEventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::OnChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, e);
}
// Autogenerated method: SteamVR_ExternalCamera.AttachToCamera
void GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera(::GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachToCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_ExternalCamera.GetTargetDistance
float GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderNear
void GlobalNamespace::SteamVR_ExternalCamera::RenderNear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::RenderNear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderNear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderFar
void GlobalNamespace::SteamVR_ExternalCamera::RenderFar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::RenderFar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderFar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnGUI
void GlobalNamespace::SteamVR_ExternalCamera::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnEnable
void GlobalNamespace::SteamVR_ExternalCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnDisable
void GlobalNamespace::SteamVR_ExternalCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_ExternalCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Fade
#include "GlobalNamespace/SteamVR_Fade.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material fadeMaterial
::UnityEngine::Material* GlobalNamespace::SteamVR_Fade::_get_fadeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::_get_fadeMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Material*>("", "SteamVR_Fade", "fadeMaterial"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material fadeMaterial
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterial(::UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::_set_fadeMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterial", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 fadeMaterialColorID
int GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SteamVR_Fade", "fadeMaterialColorID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 fadeMaterialColorID
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterialColorID", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color currentColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_Fade::dyn_currentColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::dyn_currentColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color targetColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_Fade::dyn_targetColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::dyn_targetColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color deltaColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_Fade::dyn_deltaColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::dyn_deltaColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deltaColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fadeOverlay
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Fade::dyn_fadeOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::dyn_fadeOverlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOverlay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Fade.Start
void GlobalNamespace::SteamVR_Fade::Start(::UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOverlay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.View
void GlobalNamespace::SteamVR_Fade::View(::UnityEngine::Color newColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::View");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", "View", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, newColor, duration);
}
// Autogenerated method: SteamVR_Fade.OnStartFade
void GlobalNamespace::SteamVR_Fade::OnStartFade(::UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::OnStartFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOverlay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.OnEnable
void GlobalNamespace::SteamVR_Fade::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnDisable
void GlobalNamespace::SteamVR_Fade::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnPostRender
void GlobalNamespace::SteamVR_Fade::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade..cctor
void GlobalNamespace::SteamVR_Fade::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Fade::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Fade", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Frustum
#include "GlobalNamespace/SteamVR_Frustum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SteamVR_TrackedObject/EIndex index
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject::EIndex& GlobalNamespace::SteamVR_Frustum::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedObject::EIndex*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fovLeft
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_fovLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_fovLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fovLeft"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fovRight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_fovRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_fovRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fovRight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fovTop
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_fovTop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_fovTop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fovTop"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fovBottom
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_fovBottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_fovBottom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fovBottom"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single nearZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_nearZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_nearZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nearZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single farZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Frustum::dyn_farZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::dyn_farZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "farZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Frustum.UpdateModel
void GlobalNamespace::SteamVR_Frustum::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDeviceConnected
void GlobalNamespace::SteamVR_Frustum::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_Frustum.OnEnable
void GlobalNamespace::SteamVR_Frustum::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDisable
void GlobalNamespace::SteamVR_Frustum::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Frustum::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_GameView
#include "GlobalNamespace/SteamVR_GameView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_GameView.Awake
void GlobalNamespace::SteamVR_GameView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_GameView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_IK
#include "GlobalNamespace/SteamVR_IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform start
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "start"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform joint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_joint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_joint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform end
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_end");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "end"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform poleVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_poleVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_poleVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poleVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform upVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_upVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_upVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "upVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single blendPct
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_IK::dyn_blendPct() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_blendPct");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendPct"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform startXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_startXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_startXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform jointXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_jointXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_jointXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jointXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform endXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_IK::dyn_endXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::dyn_endXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_IK.LateUpdate
void GlobalNamespace::SteamVR_IK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_IK.Solve
bool GlobalNamespace::SteamVR_IK::Solve(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Vector3 poleVector, float jointDist, float targetDist, ByRef<::UnityEngine::Vector3> result, ByRef<::UnityEngine::Vector3> forward, ByRef<::UnityEngine::Vector3> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_IK::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_IK", "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(poleVector), ::il2cpp_utils::ExtractType(jointDist), ::il2cpp_utils::ExtractType(targetDist), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, start, end, poleVector, jointDist, targetDist, byref(result), byref(forward), byref(up));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_LoadLevel
#include "GlobalNamespace/SteamVR_LoadLevel.hpp"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__46
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__46.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_LoadLevel _active
::GlobalNamespace::SteamVR_LoadLevel* GlobalNamespace::SteamVR_LoadLevel::_get__active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::_get__active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_LoadLevel*>("", "SteamVR_LoadLevel", "_active"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_LoadLevel _active
void GlobalNamespace::SteamVR_LoadLevel::_set__active(::GlobalNamespace::SteamVR_LoadLevel* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::_set__active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_LoadLevel", "_active", value));
}
// Autogenerated instance field getter
// Get instance field: public System.String levelName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_LoadLevel::dyn_levelName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_levelName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String internalProcessPath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_LoadLevel::dyn_internalProcessPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_internalProcessPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internalProcessPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String internalProcessArgs
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_LoadLevel::dyn_internalProcessArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_internalProcessArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internalProcessArgs"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean loadAdditive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_LoadLevel::dyn_loadAdditive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadAdditive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadAdditive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean loadAsync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_LoadLevel::dyn_loadAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadAsync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadAsync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject oculusLoadingOverlay
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_LoadLevel::dyn_oculusLoadingOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_oculusLoadingOverlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oculusLoadingOverlay"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject oculusLoadingOverlayTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_LoadLevel::dyn_oculusLoadingOverlayTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_oculusLoadingOverlayTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oculusLoadingOverlayTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture loadingScreen
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreen"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture progressBarEmpty
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarEmpty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressBarEmpty"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture progressBarFull
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarFull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarFull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressBarFull"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single loadingScreenWidthInMeters
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenWidthInMeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenWidthInMeters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenWidthInMeters"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single progressBarWidthInMeters
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarWidthInMeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarWidthInMeters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressBarWidthInMeters"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single loadingScreenDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform loadingScreenTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform progressBarTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressBarTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture front
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_front() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_front");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "front"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture back
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_back() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_back");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "back"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture left
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_left");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "left"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture right
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_right");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "right"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture top
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_top");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "top"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture bottom
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_LoadLevel::dyn_bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_bottom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bottom"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color backgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_LoadLevel::dyn_backgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_backgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "backgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showGrid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_LoadLevel::dyn_showGrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_showGrid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showGrid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeOutTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_fadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_fadeOutTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeInTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_fadeInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_fadeInTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single postLoadSettleTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_postLoadSettleTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_postLoadSettleTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "postLoadSettleTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single loadingScreenFadeInTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenFadeInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenFadeInTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenFadeInTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single loadingScreenFadeOutTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenFadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenFadeOutTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenFadeOutTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fadeRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_fadeRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_fadeRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_LoadLevel::dyn_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AsyncOperation async
[[deprecated("Use field access instead!")]] ::UnityEngine::AsyncOperation*& GlobalNamespace::SteamVR_LoadLevel::dyn_async() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_async");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "async"))->offset;
  return *reinterpret_cast<::UnityEngine::AsyncOperation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RenderTexture renderTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::SteamVR_LoadLevel::dyn_renderTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_renderTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 loadingScreenOverlayHandle
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenOverlayHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_loadingScreenOverlayHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadingScreenOverlayHandle"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 progressBarOverlayHandle
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarOverlayHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_progressBarOverlayHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressBarOverlayHandle"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoTriggerOnEnable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_LoadLevel::dyn_autoTriggerOnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::dyn_autoTriggerOnEnable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoTriggerOnEnable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_LoadLevel.get_loading
bool GlobalNamespace::SteamVR_LoadLevel::get_loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::get_loading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_loading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progress
float GlobalNamespace::SteamVR_LoadLevel::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progressTexture
::UnityEngine::Texture* GlobalNamespace::SteamVR_LoadLevel::get_progressTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::get_progressTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progressTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.OnEnable
void GlobalNamespace::SteamVR_LoadLevel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Trigger
void GlobalNamespace::SteamVR_LoadLevel::Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::Trigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Trigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Begin
void GlobalNamespace::SteamVR_LoadLevel::Begin(::StringW levelName, bool showGrid, float fadeOutTime, float r, float g, float b, float a) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::Begin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelName), ::il2cpp_utils::ExtractType(showGrid), ::il2cpp_utils::ExtractType(fadeOutTime), ::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(g), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(a)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, levelName, showGrid, fadeOutTime, r, g, b, a);
}
// Autogenerated method: SteamVR_LoadLevel.Update
void GlobalNamespace::SteamVR_LoadLevel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.LoadLevel
::System::Collections::IEnumerator* GlobalNamespace::SteamVR_LoadLevel::LoadLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::LoadLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.GetOverlayHandle
uint64_t GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle(::StringW overlayName, ::UnityEngine::Transform* transform, float widthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overlayName), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(widthInMeters)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, overlayName, transform, widthInMeters);
}
// Autogenerated method: SteamVR_LoadLevel..cctor
void GlobalNamespace::SteamVR_LoadLevel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__46
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__46.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_LoadLevel <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_LoadLevel*& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_LoadLevel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject <currentOculusOverlay>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$currentOculusOverlay$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$currentOculusOverlay$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<currentOculusOverlay>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.SceneManagement.Scene> <unloadScenes>5__3
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::SceneManagement::Scene>*& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$unloadScenes$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$unloadScenes$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<unloadScenes>5__3"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::SceneManagement::Scene>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <sceneIdx>5__4
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$sceneIdx$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::dyn_$sceneIdx$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sceneIdx>5__4"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__46.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__46.MoveNext
bool GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__46.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__46.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__46.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__46*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Menu
#include "GlobalNamespace/SteamVR_Menu.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture cursor
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Menu::dyn_cursor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_cursor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cursor"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture background
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Menu::dyn_background() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_background");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "background"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture logo
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Menu::dyn_logo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_logo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logo"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single logoHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Menu::dyn_logoHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_logoHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logoHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single menuOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Menu::dyn_menuOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_menuOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "menuOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 scaleLimits
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::SteamVR_Menu::dyn_scaleLimits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_scaleLimits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleLimits"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scaleRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Menu::dyn_scaleRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_scaleRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Overlay overlay
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Overlay*& GlobalNamespace::SteamVR_Menu::dyn_overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_overlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlay"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Overlay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera overlayCam
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::SteamVR_Menu::dyn_overlayCam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_overlayCam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlayCam"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector4 uvOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::SteamVR_Menu::dyn_uvOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_uvOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uvOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single distance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Menu::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <scale>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Menu::dyn_$scale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_$scale$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<scale>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String scaleLimitX
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_Menu::dyn_scaleLimitX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_scaleLimitX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleLimitX"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String scaleLimitY
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_Menu::dyn_scaleLimitY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_scaleLimitY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleLimitY"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String scaleRateText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_Menu::dyn_scaleRateText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_scaleRateText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleRateText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CursorLockMode savedCursorLockState
[[deprecated("Use field access instead!")]] ::UnityEngine::CursorLockMode& GlobalNamespace::SteamVR_Menu::dyn_savedCursorLockState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_savedCursorLockState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "savedCursorLockState"))->offset;
  return *reinterpret_cast<::UnityEngine::CursorLockMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean savedCursorVisible
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Menu::dyn_savedCursorVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::dyn_savedCursorVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "savedCursorVisible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Menu.get_texture
::UnityEngine::RenderTexture* GlobalNamespace::SteamVR_Menu::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RenderTexture*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.get_scale
float GlobalNamespace::SteamVR_Menu::get_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::get_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.set_scale
void GlobalNamespace::SteamVR_Menu::set_scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::set_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Menu.Awake
void GlobalNamespace::SteamVR_Menu::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.OnGUI
void GlobalNamespace::SteamVR_Menu::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.ShowMenu
void GlobalNamespace::SteamVR_Menu::ShowMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::ShowMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.HideMenu
void GlobalNamespace::SteamVR_Menu::HideMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::HideMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.Update
void GlobalNamespace::SteamVR_Menu::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.SetScale
void GlobalNamespace::SteamVR_Menu::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: SteamVR_Menu.SaveCursorState
void GlobalNamespace::SteamVR_Menu::SaveCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::SaveCursorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveCursorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.RestoreCursorState
void GlobalNamespace::SteamVR_Menu::RestoreCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Menu::RestoreCursorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestoreCursorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: SteamVR_Overlay/IntersectionResults
#include "GlobalNamespace/SteamVR_Overlay_IntersectionResults.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xADCAF0
// Autogenerated static field getter
// Get static field: static private SteamVR_Overlay <instance>k__BackingField
::GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Overlay*>("", "SteamVR_Overlay", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Overlay <instance>k__BackingField
void GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField(::GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Overlay", "<instance>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture texture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Overlay::dyn_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_texture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "texture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean curved
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Overlay::dyn_curved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_curved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean antialias
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Overlay::dyn_antialias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_antialias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "antialias"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean highquality
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Overlay::dyn_highquality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_highquality");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highquality"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Overlay::dyn_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single distance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Overlay::dyn_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_distance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single alpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Overlay::dyn_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_alpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "alpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 uvOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::SteamVR_Overlay::dyn_uvOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_uvOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uvOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 mouseScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::SteamVR_Overlay::dyn_mouseScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_mouseScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouseScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 curvedRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::SteamVR_Overlay::dyn_curvedRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_curvedRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curvedRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VROverlayInputMethod inputMethod
[[deprecated("Use field access instead!")]] ::Valve::VR::VROverlayInputMethod& GlobalNamespace::SteamVR_Overlay::dyn_inputMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_inputMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputMethod"))->offset;
  return *reinterpret_cast<::Valve::VR::VROverlayInputMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 handle
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SteamVR_Overlay::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Overlay.get_instance
::GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Overlay*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.set_instance
void GlobalNamespace::SteamVR_Overlay::set_instance(::GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::set_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "set_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Overlay.get_key
::StringW GlobalNamespace::SteamVR_Overlay::get_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::get_key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnEnable
void GlobalNamespace::SteamVR_Overlay::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnDisable
void GlobalNamespace::SteamVR_Overlay::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.UpdateOverlay
void GlobalNamespace::SteamVR_Overlay::UpdateOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::UpdateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.PollNextEvent
bool GlobalNamespace::SteamVR_Overlay::PollNextEvent(ByRef<::Valve::VR::VREvent_t> pEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent));
}
// Autogenerated method: SteamVR_Overlay.ComputeIntersection
bool GlobalNamespace::SteamVR_Overlay::ComputeIntersection(::UnityEngine::Vector3 source, ::UnityEngine::Vector3 direction, ByRef<::GlobalNamespace::SteamVR_Overlay::IntersectionResults> results) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Overlay::ComputeIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(results)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, source, direction, byref(results));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_PlayArea
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single borderThickness
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_PlayArea::dyn_borderThickness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_borderThickness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "borderThickness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single wireframeHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_PlayArea::dyn_wireframeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_wireframeHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wireframeHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean drawWireframeWhenSelectedOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_PlayArea::dyn_drawWireframeWhenSelectedOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_drawWireframeWhenSelectedOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawWireframeWhenSelectedOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean drawInGame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_PlayArea::dyn_drawInGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_drawInGame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawInGame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_PlayArea/Size size
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_PlayArea::Size& GlobalNamespace::SteamVR_PlayArea::dyn_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "size"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_PlayArea::Size*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_PlayArea::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3[] vertices
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::SteamVR_PlayArea::dyn_vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::dyn_vertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vertices"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_PlayArea.GetBounds
bool GlobalNamespace::SteamVR_PlayArea::GetBounds(::GlobalNamespace::SteamVR_PlayArea::Size size, ByRef<::Valve::VR::HmdQuad_t> pRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::GetBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_PlayArea", "GetBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(pRect)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, size, byref(pRect));
}
// Autogenerated method: SteamVR_PlayArea.BuildMesh
void GlobalNamespace::SteamVR_PlayArea::BuildMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::BuildMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmos
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmosSelected
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.DrawWireframe
void GlobalNamespace::SteamVR_PlayArea::DrawWireframe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::DrawWireframe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawWireframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnEnable
void GlobalNamespace::SteamVR_PlayArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.UpdateBounds
::System::Collections::IEnumerator* GlobalNamespace::SteamVR_PlayArea::UpdateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::UpdateBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_PlayArea/Size
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size Calibrated
::GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "Calibrated"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size Calibrated
void GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated(::GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "Calibrated", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _400x300
::GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_400x300"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _400x300
void GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300(::GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_400x300", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _300x225
::GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_300x225"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _300x225
void GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225(::GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_300x225", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _200x150
::GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_200x150"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _200x150
void GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150(::GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_200x150", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_PlayArea::Size::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::Size::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_PlayArea <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_PlayArea*& GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_PlayArea**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperone <chaperone>5__2
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperone*& GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$chaperone$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::dyn_$chaperone$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chaperone>5__2"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRChaperone**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.MoveNext
bool GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Render
#include "GlobalNamespace/SteamVR_Render.hpp"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xADCB10
// Autogenerated static field getter
// Get static field: static private Valve.VR.EVREye <eye>k__BackingField
::Valve::VR::EVREye GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Valve::VR::EVREye>("", "SteamVR_Render", "<eye>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.EVREye <eye>k__BackingField
void GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField(::Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "<eye>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_Render _instance
::GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Render _instance
void GlobalNamespace::SteamVR_Render::_set__instance(::GlobalNamespace::SteamVR_Render* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isQuitting
bool GlobalNamespace::SteamVR_Render::_get_isQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_get_isQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "isQuitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isQuitting
void GlobalNamespace::SteamVR_Render::_set_isQuitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_set_isQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "isQuitting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _pauseRendering
bool GlobalNamespace::SteamVR_Render::_get__pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_get__pauseRendering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "_pauseRendering"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _pauseRendering
void GlobalNamespace::SteamVR_Render::_set__pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::_set__pauseRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_pauseRendering", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean pauseGameWhenDashboardIsVisible
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Render::dyn_pauseGameWhenDashboardIsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_pauseGameWhenDashboardIsVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pauseGameWhenDashboardIsVisible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean lockPhysicsUpdateRateToRenderFrequency
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_Render::dyn_lockPhysicsUpdateRateToRenderFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_lockPhysicsUpdateRateToRenderFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockPhysicsUpdateRateToRenderFrequency"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_ExternalCamera externalCamera
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_ExternalCamera*& GlobalNamespace::SteamVR_Render::dyn_externalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_externalCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "externalCamera"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_ExternalCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String externalCameraConfigPath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_Render::dyn_externalCameraConfigPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_externalCameraConfigPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "externalCameraConfigPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.ETrackingUniverseOrigin trackingSpace
[[deprecated("Use field access instead!")]] ::Valve::VR::ETrackingUniverseOrigin& GlobalNamespace::SteamVR_Render::dyn_trackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_trackingSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingSpace"))->offset;
  return *reinterpret_cast<::Valve::VR::ETrackingUniverseOrigin*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Camera[] cameras
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SteamVR_Camera*>& GlobalNamespace::SteamVR_Render::dyn_cameras() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_cameras");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cameras"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SteamVR_Camera*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.TrackedDevicePose_t[] poses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::SteamVR_Render::dyn_poses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_poses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.TrackedDevicePose_t[] gamePoses
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& GlobalNamespace::SteamVR_Render::dyn_gamePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_gamePoses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gamePoses"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::TrackedDevicePose_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.WaitForEndOfFrame waitForEndOfFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::WaitForEndOfFrame*& GlobalNamespace::SteamVR_Render::dyn_waitForEndOfFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_waitForEndOfFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitForEndOfFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::WaitForEndOfFrame**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sceneResolutionScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Render::dyn_sceneResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_sceneResolutionScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneResolutionScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Render::dyn_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::dyn_timeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Render.get_eye
::Valve::VR::EVREye GlobalNamespace::SteamVR_Render::get_eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::get_eye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_eye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVREye, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_eye
void GlobalNamespace::SteamVR_Render::set_eye(::Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::set_eye");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_eye", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.get_instance
::GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Render*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDestroy
void GlobalNamespace::SteamVR_Render::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnApplicationQuit
void GlobalNamespace::SteamVR_Render::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Add
void GlobalNamespace::SteamVR_Render::Add(::GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Remove
void GlobalNamespace::SteamVR_Render::Remove(::GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Top
::GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::Top");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "Top", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Camera*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.AddInternal
void GlobalNamespace::SteamVR_Render::AddInternal(::GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::AddInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.RemoveInternal
void GlobalNamespace::SteamVR_Render::RemoveInternal(::GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::RemoveInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrcam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.TopInternal
::GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::TopInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::TopInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.get_pauseRendering
bool GlobalNamespace::SteamVR_Render::get_pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::get_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_pauseRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_pauseRendering
void GlobalNamespace::SteamVR_Render::set_pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::set_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_pauseRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.RenderLoop
::System::Collections::IEnumerator* GlobalNamespace::SteamVR_Render::RenderLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::RenderLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.RenderExternalCamera
void GlobalNamespace::SteamVR_Render::RenderExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::RenderExternalCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderExternalCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnInputFocus
void GlobalNamespace::SteamVR_Render::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_Render.OnQuit
void GlobalNamespace::SteamVR_Render::OnQuit(::Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.GetScreenshotFilename
::StringW GlobalNamespace::SteamVR_Render::GetScreenshotFilename(uint screenshotHandle, ::Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::GetScreenshotFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(screenshotPropertyFilename)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, screenshotHandle, screenshotPropertyFilename);
}
// Autogenerated method: SteamVR_Render.OnRequestScreenshot
void GlobalNamespace::SteamVR_Render::OnRequestScreenshot(::Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnRequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.OnEnable
void GlobalNamespace::SteamVR_Render::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDisable
void GlobalNamespace::SteamVR_Render::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Awake
void GlobalNamespace::SteamVR_Render::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.UpdatePoses
void GlobalNamespace::SteamVR_Render::UpdatePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::UpdatePoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnBeforeRender
void GlobalNamespace::SteamVR_Render::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Update
void GlobalNamespace::SteamVR_Render::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_Render <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Render*& GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Render**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.MoveNext
bool GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Render::$RenderLoop$d__29*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.RenderModel_t
#include "Valve/VR/RenderModel_t.hpp"
// Including type: Valve.VR.RenderModel_TextureMap_t
#include "Valve/VR/RenderModel_TextureMap_t.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String modelOverrideWarning
::StringW GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_RenderModel", "modelOverrideWarning"));
}
// Autogenerated static field setter
// Set static field: static public System.String modelOverrideWarning
void GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "modelOverrideWarning", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_localTransformName
::StringW GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "SteamVR_RenderModel", "k_localTransformName"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_localTransformName
void GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "k_localTransformName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable models
::System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_models() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_get_models");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Hashtable*>("", "SteamVR_RenderModel", "models"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable models
void GlobalNamespace::SteamVR_RenderModel::_set_models(::System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_set_models");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "models", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable materials
::System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_get_materials");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Hashtable*>("", "SteamVR_RenderModel", "materials"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable materials
void GlobalNamespace::SteamVR_RenderModel::_set_materials(::System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::_set_materials");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "materials", value));
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_TrackedObject/EIndex index
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject::EIndex& GlobalNamespace::SteamVR_RenderModel::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedObject::EIndex*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String modelOverride
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_RenderModel::dyn_modelOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_modelOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modelOverride"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Shader shader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::SteamVR_RenderModel::dyn_shader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_shader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean verbose
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_RenderModel::dyn_verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_verbose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "verbose"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean createComponents
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_RenderModel::dyn_createComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_createComponents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "createComponents"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updateDynamically
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_RenderModel::dyn_updateDynamically() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_updateDynamically");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateDynamically"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.RenderModel_ControllerMode_State_t controllerModeState
[[deprecated("Use field access instead!")]] ::Valve::VR::RenderModel_ControllerMode_State_t& GlobalNamespace::SteamVR_RenderModel::dyn_controllerModeState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_controllerModeState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerModeState"))->offset;
  return *reinterpret_cast<::Valve::VR::RenderModel_ControllerMode_State_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <renderModelName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_RenderModel::dyn_$renderModelName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_$renderModelName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<renderModelName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action deviceConnectedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_RenderModel::dyn_deviceConnectedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_deviceConnectedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deviceConnectedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action hideRenderModelsAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_RenderModel::dyn_hideRenderModelsAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_hideRenderModelsAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hideRenderModelsAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action modelSkinSettingsHaveChangedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_RenderModel::dyn_modelSkinSettingsHaveChangedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_modelSkinSettingsHaveChangedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modelSkinSettingsHaveChangedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,System.String> nameCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::StringW>*& GlobalNamespace::SteamVR_RenderModel::dyn_nameCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::dyn_nameCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_RenderModel.get_renderModelName
::StringW GlobalNamespace::SteamVR_RenderModel::get_renderModelName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::get_renderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.set_renderModelName
void GlobalNamespace::SteamVR_RenderModel::set_renderModelName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::set_renderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_renderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel.OnModelSkinSettingsHaveChanged
void GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged(::Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModelSkinSettingsHaveChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrEvent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_RenderModel.OnHideRenderModels
void GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels(bool hidden) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHideRenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hidden)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hidden);
}
// Autogenerated method: SteamVR_RenderModel.OnDeviceConnected
void GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_RenderModel.UpdateModel
void GlobalNamespace::SteamVR_RenderModel::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.SetModelAsync
::System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::SetModelAsync(::StringW renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::SetModelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetModelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.SetModel
bool GlobalNamespace::SteamVR_RenderModel::SetModel(::StringW renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::SetModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.LoadRenderModel
::GlobalNamespace::SteamVR_RenderModel::RenderModel* GlobalNamespace::SteamVR_RenderModel::LoadRenderModel(::Valve::VR::CVRRenderModels* renderModels, ::StringW renderModelName, ::StringW baseName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::LoadRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModels), ::il2cpp_utils::ExtractType(renderModelName), ::il2cpp_utils::ExtractType(baseName)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_RenderModel::RenderModel*, false>(this, ___internal__method, renderModels, renderModelName, baseName);
}
// Autogenerated method: SteamVR_RenderModel.FreeRenderModel
::System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::FreeRenderModel(::System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.FindComponent
::UnityEngine::Transform* GlobalNamespace::SteamVR_RenderModel::FindComponent(::StringW componentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::FindComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentName)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, componentName);
}
// Autogenerated method: SteamVR_RenderModel.StripMesh
void GlobalNamespace::SteamVR_RenderModel::StripMesh(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::StripMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StripMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go);
}
// Autogenerated method: SteamVR_RenderModel.LoadComponents
bool GlobalNamespace::SteamVR_RenderModel::LoadComponents(::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder* holder, ::StringW renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::LoadComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(holder), ::il2cpp_utils::ExtractType(renderModelName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, holder, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.OnEnable
void GlobalNamespace::SteamVR_RenderModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.OnDisable
void GlobalNamespace::SteamVR_RenderModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.Update
void GlobalNamespace::SteamVR_RenderModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.UpdateComponents
void GlobalNamespace::SteamVR_RenderModel::UpdateComponents(::Valve::VR::CVRRenderModels* renderModels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::UpdateComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderModels);
}
// Autogenerated method: SteamVR_RenderModel.SetDeviceIndex
void GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_RenderModel.Sleep
void GlobalNamespace::SteamVR_RenderModel::Sleep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel
::Valve::VR::RenderModel_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel(::System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarshalRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::RenderModel_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel_TextureMap
::Valve::VR::RenderModel_TextureMap_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap(::System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarshalRenderModel_TextureMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::RenderModel_TextureMap_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel..cctor
void GlobalNamespace::SteamVR_RenderModel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh <mesh>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::SteamVR_RenderModel::RenderModel::dyn_$mesh$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::dyn_$mesh$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<mesh>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material <material>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SteamVR_RenderModel::RenderModel::dyn_$material$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::dyn_$material$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<material>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_mesh
::UnityEngine::Mesh* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_mesh
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh(::UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_material
::UnityEngine::Material* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_material
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material(::UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean needsShutdown
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn_needsShutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn_needsShutdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "needsShutdown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean failedLoadInterface
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn_failedLoadInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn_failedLoadInterface");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "failedLoadInterface"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRRenderModels _instance
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRRenderModels*& GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::dyn__instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instance"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRRenderModels**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.get_instance
::Valve::VR::CVRRenderModels* GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.Dispose
void GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String renderModelName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_renderModelName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_renderModelName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModelName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_RenderModel <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel*& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_RenderModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_RenderModel/RenderModelInterfaceHolder <holder>5__2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder*& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$holder$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$holder$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<holder>5__2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRRenderModels <renderModels>5__3
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRRenderModels*& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$renderModels$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$renderModels$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<renderModels>5__3"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRRenderModels**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String[] <renderModelNames>5__4
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$renderModelNames$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::dyn_$renderModelNames$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<renderModelNames>5__4"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.<>m__Finally1
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr pRenderModel
[[deprecated("Use field access instead!")]] ::System::IntPtr& GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_pRenderModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::dyn_pRenderModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pRenderModel"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox
#include "GlobalNamespace/SteamVR_Skybox.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture front
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_front() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_front");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "front"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture back
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_back() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_back");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "back"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture left
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_left");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "left"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture right
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_right");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "right"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture top
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_top");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "top"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture bottom
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& GlobalNamespace::SteamVR_Skybox::dyn_bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_bottom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bottom"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_Skybox/CellSize StereoCellSize
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Skybox::CellSize& GlobalNamespace::SteamVR_Skybox::dyn_StereoCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_StereoCellSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StereoCellSize"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Skybox::CellSize*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single StereoIpdMm
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Skybox::dyn_StereoIpdMm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::dyn_StereoIpdMm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StereoIpdMm"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Skybox.SetTextureByIndex
void GlobalNamespace::SteamVR_Skybox::SetTextureByIndex(int i, ::UnityEngine::Texture* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::SetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, t);
}
// Autogenerated method: SteamVR_Skybox.GetTextureByIndex
::UnityEngine::Texture* GlobalNamespace::SteamVR_Skybox::GetTextureByIndex(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::GetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextureByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture*, false>(this, ___internal__method, i);
}
// Autogenerated method: SteamVR_Skybox.SetOverride
void GlobalNamespace::SteamVR_Skybox::SetOverride(::UnityEngine::Texture* front, ::UnityEngine::Texture* back, ::UnityEngine::Texture* left, ::UnityEngine::Texture* right, ::UnityEngine::Texture* top, ::UnityEngine::Texture* bottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::SetOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "SetOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(front), ::il2cpp_utils::ExtractType(back), ::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(top), ::il2cpp_utils::ExtractType(bottom)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, front, back, left, right, top, bottom);
}
// Autogenerated method: SteamVR_Skybox.ClearOverride
void GlobalNamespace::SteamVR_Skybox::ClearOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::ClearOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "ClearOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnEnable
void GlobalNamespace::SteamVR_Skybox::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnDisable
void GlobalNamespace::SteamVR_Skybox::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox/CellSize
#include "GlobalNamespace/SteamVR_Skybox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x1024
::GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x1024"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x1024
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024(::GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x1024", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x64
::GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x64"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x64
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64(::GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x64", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x32
::GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x32"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x32
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32(::GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x32", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x16
::GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x16"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x16
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16(::GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x16", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x8
::GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x8
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8(::GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x8", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_Skybox::CellSize::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Skybox::CellSize::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_SphericalProjection
#include "GlobalNamespace/SteamVR_SphericalProjection.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material material
::UnityEngine::Material* GlobalNamespace::SteamVR_SphericalProjection::_get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_SphericalProjection::_get_material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Material*>("", "SteamVR_SphericalProjection", "material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material material
void GlobalNamespace::SteamVR_SphericalProjection::_set_material(::UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_SphericalProjection::_set_material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_SphericalProjection", "material", value));
}
// Autogenerated method: SteamVR_SphericalProjection.Set
void GlobalNamespace::SteamVR_SphericalProjection::Set(::UnityEngine::Vector3 N, float phi0, float phi1, float theta0, float theta1, ::UnityEngine::Vector3 uAxis, ::UnityEngine::Vector3 uOrigin, float uScale, ::UnityEngine::Vector3 vAxis, ::UnityEngine::Vector3 vOrigin, float vScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_SphericalProjection::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(N), ::il2cpp_utils::ExtractType(phi0), ::il2cpp_utils::ExtractType(phi1), ::il2cpp_utils::ExtractType(theta0), ::il2cpp_utils::ExtractType(theta1), ::il2cpp_utils::ExtractType(uAxis), ::il2cpp_utils::ExtractType(uOrigin), ::il2cpp_utils::ExtractType(uScale), ::il2cpp_utils::ExtractType(vAxis), ::il2cpp_utils::ExtractType(vOrigin), ::il2cpp_utils::ExtractType(vScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, N, phi0, phi1, theta0, theta1, uAxis, uOrigin, uScale, vAxis, vOrigin, vScale);
}
// Autogenerated method: SteamVR_SphericalProjection.OnRenderImage
void GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Stats
#include "GlobalNamespace/SteamVR_Stats.hpp"
// Including type: UnityEngine.GUIText
#include "UnityEngine/GUIText.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GUIText text
[[deprecated("Use field access instead!")]] ::UnityEngine::GUIText*& GlobalNamespace::SteamVR_Stats::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::UnityEngine::GUIText**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color fadeColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SteamVR_Stats::dyn_fadeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::dyn_fadeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SteamVR_Stats::dyn_fadeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::dyn_fadeDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double lastUpdate
[[deprecated("Use field access instead!")]] double& GlobalNamespace::SteamVR_Stats::dyn_lastUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::dyn_lastUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpdate"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Stats.Awake
void GlobalNamespace::SteamVR_Stats::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Stats.Update
void GlobalNamespace::SteamVR_Stats::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TestController
#include "GlobalNamespace/SteamVR_TestController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> controllerIndices
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::SteamVR_TestController::dyn_controllerIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::dyn_controllerIndices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerIndices"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.EVRButtonId[] buttonIds
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::EVRButtonId>& GlobalNamespace::SteamVR_TestController::dyn_buttonIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::dyn_buttonIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonIds"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::EVRButtonId>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.EVRButtonId[] axisIds
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::EVRButtonId>& GlobalNamespace::SteamVR_TestController::dyn_axisIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::dyn_axisIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "axisIds"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::EVRButtonId>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform point
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_TestController::dyn_point() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::dyn_point");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "point"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pointer
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_TestController::dyn_pointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::dyn_pointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointer"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TestController.OnDeviceConnected
void GlobalNamespace::SteamVR_TestController::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(connected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_TestController.OnEnable
void GlobalNamespace::SteamVR_TestController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.OnDisable
void GlobalNamespace::SteamVR_TestController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.PrintControllerStatus
void GlobalNamespace::SteamVR_TestController::PrintControllerStatus(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::PrintControllerStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrintControllerStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_TestController.Update
void GlobalNamespace::SteamVR_TestController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera
#include "GlobalNamespace/SteamVR_TrackedCamera.hpp"
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*> GlobalNamespace::SteamVR_TrackedCamera::_get_distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_get_distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>>("", "SteamVR_TrackedCamera", "distorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_distorted(::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_set_distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "distorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*> GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>>("", "SteamVR_TrackedCamera", "undistorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted(::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "undistorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStream*> GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>>("", "SteamVR_TrackedCamera", "videostreams"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
void GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams(::ArrayW<::GlobalNamespace::SteamVR_TrackedCamera::VideoStream*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "videostreams", value));
}
// Autogenerated method: SteamVR_TrackedCamera.Distorted
::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Distorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::Distorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Distorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Undistorted
::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Undistorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::Undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Source
::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Source(bool undistorted, int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::Source");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Source", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(undistorted), ::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, undistorted, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Stream
::GlobalNamespace::SteamVR_TrackedCamera::VideoStream* GlobalNamespace::SteamVR_TrackedCamera::Stream(uint deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::Stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_TrackedCamera::VideoStream*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <undistorted>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_$undistorted$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_$undistorted$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<undistorted>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.VRTextureBounds_t <frameBounds>k__BackingField
[[deprecated("Use field access instead!")]] ::Valve::VR::VRTextureBounds_t& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_$frameBounds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_$frameBounds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<frameBounds>k__BackingField"))->offset;
  return *reinterpret_cast<::Valve::VR::VRTextureBounds_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Texture2D _texture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn__texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn__texture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_texture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 prevFrameCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_prevFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_prevFrameCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevFrameCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 glTextureId
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_glTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_glTextureId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "glTextureId"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_TrackedCamera/VideoStream videostream
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedCamera::VideoStream*& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_videostream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_videostream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "videostream"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedCamera::VideoStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CameraVideoStreamFrameHeader_t header
[[deprecated("Use field access instead!")]] ::Valve::VR::CameraVideoStreamFrameHeader_t& GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_header() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::dyn_header");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "header"))->offset;
  return *reinterpret_cast<::Valve::VR::CameraVideoStreamFrameHeader_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_undistorted
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_undistorted
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_undistorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasTracking
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameId
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameBounds
::Valve::VR::VRTextureBounds_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRTextureBounds_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_frameBounds
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds(::Valve::VR::VRTextureBounds_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_frameBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameType
::Valve::VR::EVRTrackedCameraFrameType GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraFrameType, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_texture
::UnityEngine::Texture2D* GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_transform
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_velocity
::UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_angularVelocity
::UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.GetPose
::Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Update
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt32 <deviceIndex>k__BackingField
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn_$deviceIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn_$deviceIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<deviceIndex>k__BackingField"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 _handle
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn__handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn__handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handle"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasCamera
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn__hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn__hasCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasCamera"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 refCount
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn_refCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::dyn_refCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "refCount"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.set_deviceIndex
void GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_handle
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: OrbusTrackedController
#include "GlobalNamespace/OrbusTrackedController.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SteamVR_TrackedObject/EIndex index
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject::EIndex& GlobalNamespace::SteamVR_TrackedObject::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedObject::EIndex*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform origin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_TrackedObject::dyn_origin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_origin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "origin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform indexOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SteamVR_TrackedObject::dyn_indexOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_indexOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OrbusTrackedController otcObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& GlobalNamespace::SteamVR_TrackedObject::dyn_otcObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_otcObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otcObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OrbusTrackedController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SteamVR_TrackedObject::dyn_$isValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_$isValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action newPosesAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& GlobalNamespace::SteamVR_TrackedObject::dyn_newPosesAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::dyn_newPosesAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newPosesAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_TrackedObject.get_isValid
bool GlobalNamespace::SteamVR_TrackedObject::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.set_isValid
void GlobalNamespace::SteamVR_TrackedObject::set_isValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::set_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedObject.Start
void GlobalNamespace::SteamVR_TrackedObject::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.OnNewPoses
void GlobalNamespace::SteamVR_TrackedObject::OnNewPoses(::ArrayW<::Valve::VR::TrackedDevicePose_t> poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR_TrackedObject.OnEnable
void GlobalNamespace::SteamVR_TrackedObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.OnDisable
void GlobalNamespace::SteamVR_TrackedObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.SetDeviceIndex
void GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedObject/EIndex
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex None
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "None"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex None
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "None", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Hmd
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Hmd"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Hmd
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device1
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device1"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device1
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device1", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device2
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device2"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device2
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device2", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device3
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device3"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device3
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device3", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device4
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device4"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device4
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device4", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device5
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device5"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device5
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device5", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device6
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device6"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device6
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device6", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device7
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device7"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device7
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device7", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device8
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device8
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device8", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device9
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device9"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device9
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device9", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device10
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device10"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device10
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device10", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device11
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device11"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device11
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device11", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device12
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device12"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device12
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device12", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device13
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device13"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device13
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device13", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device14
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device14"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device14
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device14", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device15
::GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device15"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device15
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15(::GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device15", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SteamVR_TrackedObject::EIndex::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedObject::EIndex::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_UpdatePoses
#include "GlobalNamespace/SteamVR_UpdatePoses.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_UpdatePoses.Awake
void GlobalNamespace::SteamVR_UpdatePoses::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_UpdatePoses::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
::UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(::UnityEngine::Quaternion A, ::UnityEngine::Quaternion B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(::UnityEngine::Vector3 A, ::UnityEngine::Vector3 B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(::UnityEngine::Vector3 A, ::UnityEngine::Vector3 B, ::UnityEngine::Vector3 result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A), ::il2cpp_utils::ExtractType(B), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Saturate
::UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(::UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
::UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(::UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(A)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::_copysign");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "_copysign", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeval), ::il2cpp_utils::ExtractType(signval)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sizeval, signval);
}
// Autogenerated method: SteamVR_Utils.GetRotation
::UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(::UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetPosition
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(::UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetScale
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(::UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::GetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m);
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(::GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::CallSystemFn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "CallSystemFn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fn), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fn, args);
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, ::UnityEngine::GameObject* target, int cellSize, float ipd, ByRef<::StringW> previewFilename, ByRef<::StringW> VRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils", "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(cellSize), ::il2cpp_utils::ExtractType(ipd), ::il2cpp_utils::ExtractType(previewFilename), ::il2cpp_utils::ExtractType(VRFilename)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, screenshotHandle, target, cellSize, ipd, byref(previewFilename), byref(VRFilename));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 pos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SteamVR_Utils::RigidTransform::dyn_pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::dyn_pos");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SteamVR_Utils::RigidTransform::dyn_rot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::dyn_rot");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.get_identity
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.FromLocal
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "FromLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
// ABORTED elsewhere.  GlobalNamespace::SteamVR_Utils::RigidTransform::RigidTransform(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot)
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform::RigidTransform(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform::RigidTransform(::UnityEngine::Transform* from, ::UnityEngine::Transform* to) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, from, to);
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform::RigidTransform(::Valve::VR::HmdMatrix34_t pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pose)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pose);
}
// Autogenerated method: SteamVR_Utils/RigidTransform..ctor
GlobalNamespace::SteamVR_Utils::RigidTransform::RigidTransform(::Valve::VR::HmdMatrix44_t pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pose)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pose);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix44
::Valve::VR::HmdMatrix44_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToHmdMatrix44", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix44_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix34
::Valve::VR::HmdMatrix34_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToHmdMatrix34", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Inverse
void GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetInverse
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetInverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Multiply
void GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply(::GlobalNamespace::SteamVR_Utils::RigidTransform a, ::GlobalNamespace::SteamVR_Utils::RigidTransform b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.InverseTransformPoint
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint(::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InverseTransformPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.TransformPoint
::UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint(::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TransformPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(::GlobalNamespace::SteamVR_Utils::RigidTransform a, ::GlobalNamespace::SteamVR_Utils::RigidTransform b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
void GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(::GlobalNamespace::SteamVR_Utils::RigidTransform to, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, to, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Equals
bool GlobalNamespace::SteamVR_Utils::RigidTransform::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetHashCode
int GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::SteamVR_Utils::RigidTransform& a, const ::GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::SteamVR_Utils::RigidTransform& a, const ::GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
::GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::operator*(const ::GlobalNamespace::SteamVR_Utils::RigidTransform& a, const ::GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
::UnityEngine::Vector3 GlobalNamespace::operator*(const ::GlobalNamespace::SteamVR_Utils::RigidTransform& t, const ::UnityEngine::Vector3& v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/SystemFn.Invoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(::Valve::VR::CVRSystem* system, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::SystemFn::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Utils::SystemFn*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, system, args);
}
// Autogenerated method: SteamVR_Utils/SystemFn.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke(::Valve::VR::CVRSystem* system, ::ArrayW<::Il2CppObject*> args, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Utils::SystemFn*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, system, args, callback, object);
}
// Autogenerated method: SteamVR_Utils/SystemFn.EndInvoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SteamVR_Utils::SystemFn*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TaskExample
#include "GlobalNamespace/TaskExample.hpp"
// Including type: TaskExample/<>c
#include "GlobalNamespace/TaskExample_--c.hpp"
// Including type: TaskExample/<>c__DisplayClass13_0
#include "GlobalNamespace/TaskExample_--c__DisplayClass13_0.hpp"
// Including type: Xefier.Threading.Tasks.ITask
#include "Xefier/Threading/Tasks/ITask.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TaskExample.Start
void GlobalNamespace::TaskExample::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskRun
void GlobalNamespace::TaskExample::TaskRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskContinueWith
void GlobalNamespace::TaskExample::TaskContinueWith() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskResult
void GlobalNamespace::TaskExample::TaskResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskException
void GlobalNamespace::TaskExample::TaskException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskStatus
void GlobalNamespace::TaskExample::TaskStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskWhenAll
void GlobalNamespace::TaskExample::TaskWhenAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskWhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskWhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskWhenAny
void GlobalNamespace::TaskExample::TaskWhenAny() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskWhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskWhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskWait
void GlobalNamespace::TaskExample::TaskWait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskWaitAll
void GlobalNamespace::TaskExample::TaskWaitAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskWaitAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskWaitAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.TaskWaitAny
void GlobalNamespace::TaskExample::TaskWaitAny() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::TaskWaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskWaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.RunMethod
void GlobalNamespace::TaskExample::RunMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::RunMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample.ContinueWithMethod
void GlobalNamespace::TaskExample::ContinueWithMethod(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::ContinueWithMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWithMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample.RunMultipleTasks
::System::Collections::Generic::List_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::RunMultipleTasks(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::RunMultipleTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunMultipleTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Xefier::Threading::Tasks::ITask*>*, false>(this, ___internal__method, count);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TaskExample/<>c
#include "GlobalNamespace/TaskExample_--c.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Xefier.Threading.Tasks.ITask
#include "Xefier/Threading/Tasks/ITask.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: Xefier.Threading.Tasks.ITask`1
#include "Xefier/Threading/Tasks/ITask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TaskExample/<>c <>9
::GlobalNamespace::TaskExample::$$c* GlobalNamespace::TaskExample::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::TaskExample::$$c*>("", "TaskExample/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TaskExample/<>c <>9
void GlobalNamespace::TaskExample::$$c::_set_$$9(::GlobalNamespace::TaskExample::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__1_0
::System::Action* GlobalNamespace::TaskExample::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TaskExample/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__1_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__1_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__1_1
::System::Action* GlobalNamespace::TaskExample::$$c::_get_$$9__1_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__1_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TaskExample/<>c", "<>9__1_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__1_1
void GlobalNamespace::TaskExample::$$c::_set_$$9__1_1(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__1_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__1_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_0
::System::Action_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask*>*>("", "TaskExample/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__2_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__2_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_1
::System::Action_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask*>*>("", "TaskExample/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_1
void GlobalNamespace::TaskExample::$$c::_set_$$9__2_1(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__2_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`1<System.Single> <>9__3_0
::System::Func_1<float>* GlobalNamespace::TaskExample::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_1<float>*>("", "TaskExample/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`1<System.Single> <>9__3_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__3_0(::System::Func_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__3_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<System.Single>> <>9__3_1
::System::Action_1<::Xefier::Threading::Tasks::ITask_1<float>*>* GlobalNamespace::TaskExample::$$c::_get_$$9__3_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__3_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask_1<float>*>*>("", "TaskExample/<>c", "<>9__3_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<System.Single>> <>9__3_1
void GlobalNamespace::TaskExample::$$c::_set_$$9__3_1(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<float>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__3_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__3_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__4_0
::System::Action* GlobalNamespace::TaskExample::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TaskExample/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__4_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__4_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__4_1
::System::Action_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask*>*>("", "TaskExample/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__4_1
void GlobalNamespace::TaskExample::$$c::_set_$$9__4_1(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__4_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__5_0
::System::Action_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask*>*>("", "TaskExample/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__5_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__5_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__5_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__6_0
::System::Action_1<::Xefier::Threading::Tasks::ITask*>* GlobalNamespace::TaskExample::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask*>*>("", "TaskExample/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__6_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__6_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<Xefier.Threading.Tasks.ITask>> <>9__7_0
::System::Action_1<::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*>* GlobalNamespace::TaskExample::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*>*>("", "TaskExample/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<Xefier.Threading.Tasks.ITask>> <>9__7_0
void GlobalNamespace::TaskExample::$$c::_set_$$9__7_0(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TaskExample/<>c", "<>9__7_0", value)));
}
// Autogenerated method: TaskExample/<>c..cctor
void GlobalNamespace::TaskExample::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TaskExample/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TaskExample/<>c.<TaskRun>b__1_0
void GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskRun>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskRun>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample/<>c.<TaskRun>b__1_1
void GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskRun>b__1_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskRun>b__1_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample/<>c.<TaskContinueWith>b__2_0
void GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_0(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskContinueWith>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskContinueWith>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskContinueWith>b__2_1
void GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_1(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskContinueWith>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskContinueWith>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskResult>b__3_0
float GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskResult>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskResult>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample/<>c.<TaskResult>b__3_1
void GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_1(::Xefier::Threading::Tasks::ITask_1<float>* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskResult>b__3_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskResult>b__3_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskException>b__4_0
void GlobalNamespace::TaskExample::$$c::$TaskException$b__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskException>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskException>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TaskExample/<>c.<TaskException>b__4_1
void GlobalNamespace::TaskExample::$$c::$TaskException$b__4_1(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskException>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskException>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskStatus>b__5_0
void GlobalNamespace::TaskExample::$$c::$TaskStatus$b__5_0(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskStatus>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskStatus>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskWhenAll>b__6_0
void GlobalNamespace::TaskExample::$$c::$TaskWhenAll$b__6_0(::Xefier::Threading::Tasks::ITask* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskWhenAll>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskWhenAll>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: TaskExample/<>c.<TaskWhenAny>b__7_0
void GlobalNamespace::TaskExample::$$c::$TaskWhenAny$b__7_0(::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::<TaskWhenAny>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TaskWhenAny>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TaskExample/<>c__DisplayClass13_0
#include "GlobalNamespace/TaskExample_--c__DisplayClass13_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 iCopy
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TaskExample::$$c__DisplayClass13_0::dyn_iCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c__DisplayClass13_0::dyn_iCopy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iCopy"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TaskExample/<>c__DisplayClass13_0.<RunMultipleTasks>b__0
int GlobalNamespace::TaskExample::$$c__DisplayClass13_0::$RunMultipleTasks$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c__DisplayClass13_0::<RunMultipleTasks>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunMultipleTasks>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.UI.UIIgnoreRaycast
#include "UnityEngine/UI/UIIgnoreRaycast.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.UI.UIIgnoreRaycast.IsRaycastLocationValid
bool UnityEngine::UI::UIIgnoreRaycast::IsRaycastLocationValid(::UnityEngine::Vector2 sp, ::UnityEngine::Camera* eventCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::UIIgnoreRaycast::IsRaycastLocationValid");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UI::UIIgnoreRaycast*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sp, eventCamera);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wacki.IUILaserPointer
#include "Wacki/IUILaserPointer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single laserThickness
[[deprecated("Use field access instead!")]] float& Wacki::IUILaserPointer::dyn_laserThickness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_laserThickness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "laserThickness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single laserHitScale
[[deprecated("Use field access instead!")]] float& Wacki::IUILaserPointer::dyn_laserHitScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_laserHitScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "laserHitScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean laserAlwaysOn
[[deprecated("Use field access instead!")]] bool& Wacki::IUILaserPointer::dyn_laserAlwaysOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_laserAlwaysOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "laserAlwaysOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Wacki::IUILaserPointer::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean pointerIsActive
[[deprecated("Use field access instead!")]] bool& Wacki::IUILaserPointer::dyn_pointerIsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_pointerIsActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerIsActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean pressingTriggerButton
[[deprecated("Use field access instead!")]] bool& Wacki::IUILaserPointer::dyn_pressingTriggerButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_pressingTriggerButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pressingTriggerButton"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject hitPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Wacki::IUILaserPointer::dyn_hitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_hitPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject pointer
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Wacki::IUILaserPointer::dyn_pointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn_pointer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointer"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _distanceLimit
[[deprecated("Use field access instead!")]] float& Wacki::IUILaserPointer::dyn__distanceLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::dyn__distanceLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_distanceLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wacki.IUILaserPointer.Start
void Wacki::IUILaserPointer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.OnDestroy
void Wacki::IUILaserPointer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.Initialize
void Wacki::IUILaserPointer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::Initialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.OnEnterControl
void Wacki::IUILaserPointer::OnEnterControl(::UnityEngine::GameObject* control) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::OnEnterControl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, control);
}
// Autogenerated method: Wacki.IUILaserPointer.OnExitControl
void Wacki::IUILaserPointer::OnExitControl(::UnityEngine::GameObject* control) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::OnExitControl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, control);
}
// Autogenerated method: Wacki.IUILaserPointer.ButtonDown
bool Wacki::IUILaserPointer::ButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::ButtonDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.ButtonUp
bool Wacki::IUILaserPointer::ButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::ButtonUp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.ButtonWasDown
bool Wacki::IUILaserPointer::ButtonWasDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::ButtonWasDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.ResetButtonWasDown
void Wacki::IUILaserPointer::ResetButtonWasDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::ResetButtonWasDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.RegisterButtonClick
void Wacki::IUILaserPointer::RegisterButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::RegisterButtonClick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.FreshButtonClick
bool Wacki::IUILaserPointer::FreshButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::FreshButtonClick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.Update
void Wacki::IUILaserPointer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::Update");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.IUILaserPointer.LimitLaserDistance
void Wacki::IUILaserPointer::LimitLaserDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::IUILaserPointer::LimitLaserDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wacki.LaserPointerInputModule
#include "Wacki/LaserPointerInputModule.hpp"
// Including type: Wacki.LaserPointerInputModule/ControllerData
#include "Wacki/LaserPointerInputModule_ControllerData.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: Wacki.IUILaserPointer
#include "Wacki/IUILaserPointer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Wacki.LaserPointerInputModule _instance
::Wacki::LaserPointerInputModule* Wacki::LaserPointerInputModule::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Wacki::LaserPointerInputModule*>("Wacki", "LaserPointerInputModule", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Wacki.LaserPointerInputModule _instance
void Wacki::LaserPointerInputModule::_set__instance(::Wacki::LaserPointerInputModule* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Wacki", "LaserPointerInputModule", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean startedUp
[[deprecated("Use field access instead!")]] bool& Wacki::LaserPointerInputModule::dyn_startedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::dyn_startedUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startedUp"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera UICamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& Wacki::LaserPointerInputModule::dyn_UICamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::dyn_UICamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UICamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<Wacki.IUILaserPointer> _controllers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Wacki::IUILaserPointer*>*& Wacki::LaserPointerInputModule::dyn__controllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::dyn__controllers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controllers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::Wacki::IUILaserPointer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<Wacki.IUILaserPointer,Wacki.LaserPointerInputModule/ControllerData> _controllerData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Wacki::IUILaserPointer*, ::Wacki::LaserPointerInputModule::ControllerData*>*& Wacki::LaserPointerInputModule::dyn__controllerData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::dyn__controllerData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controllerData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Wacki::IUILaserPointer*, ::Wacki::LaserPointerInputModule::ControllerData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wacki.LaserPointerInputModule.get_instance
::Wacki::LaserPointerInputModule* Wacki::LaserPointerInputModule::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wacki", "LaserPointerInputModule", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Wacki::LaserPointerInputModule*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.Startup
void Wacki::LaserPointerInputModule::Startup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::Startup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Startup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.AddController
void Wacki::LaserPointerInputModule::AddController(::Wacki::IUILaserPointer* controller) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::AddController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, controller);
}
// Autogenerated method: Wacki.LaserPointerInputModule.RemoveController
void Wacki::LaserPointerInputModule::RemoveController(::Wacki::IUILaserPointer* controller) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::RemoveController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, controller);
}
// Autogenerated method: Wacki.LaserPointerInputModule.UpdateCameraPosition
void Wacki::LaserPointerInputModule::UpdateCameraPosition(::Wacki::IUILaserPointer* controller) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::UpdateCameraPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCameraPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, controller);
}
// Autogenerated method: Wacki.LaserPointerInputModule.ClearSelection
void Wacki::LaserPointerInputModule::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.Select
void Wacki::LaserPointerInputModule::Select(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::Select");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Select", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, go);
}
// Autogenerated method: Wacki.LaserPointerInputModule..cctor
void Wacki::LaserPointerInputModule::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Wacki", "LaserPointerInputModule", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.Awake
void Wacki::LaserPointerInputModule::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::UIBehaviour*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.Start
void Wacki::LaserPointerInputModule::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::UIBehaviour*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.LaserPointerInputModule.Process
void Wacki::LaserPointerInputModule::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::Process");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::BaseInputModule*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wacki.LaserPointerInputModule/ControllerData
#include "Wacki/LaserPointerInputModule_ControllerData.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.EventSystems.PointerEventData pointerEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData*& Wacki::LaserPointerInputModule::ControllerData::dyn_pointerEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ControllerData::dyn_pointerEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::EventSystems::PointerEventData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject currentPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Wacki::LaserPointerInputModule::ControllerData::dyn_currentPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ControllerData::dyn_currentPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject currentPressed
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Wacki::LaserPointerInputModule::ControllerData::dyn_currentPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ControllerData::dyn_currentPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentPressed"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject currentDragging
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Wacki::LaserPointerInputModule::ControllerData::dyn_currentDragging() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ControllerData::dyn_currentDragging");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentDragging"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 prevHitPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Wacki::LaserPointerInputModule::ControllerData::dyn_prevHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::LaserPointerInputModule::ControllerData::dyn_prevHitPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevHitPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Wacki.ViveUILaserPointer
#include "Wacki/ViveUILaserPointer.hpp"
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.EVRButtonId button
[[deprecated("Use field access instead!")]] ::Valve::VR::EVRButtonId& Wacki::ViveUILaserPointer::dyn_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn_button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "button"))->offset;
  return *reinterpret_cast<::Valve::VR::EVRButtonId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_TrackedObject _trackedObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject*& Wacki::ViveUILaserPointer::dyn__trackedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn__trackedObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_trackedObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_TrackedObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _connected
[[deprecated("Use field access instead!")]] bool& Wacki::ViveUILaserPointer::dyn__connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn__connected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connected"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _index
[[deprecated("Use field access instead!")]] int& Wacki::ViveUILaserPointer::dyn__index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn__index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean buttonWasDown
[[deprecated("Use field access instead!")]] bool& Wacki::ViveUILaserPointer::dyn_buttonWasDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn_buttonWasDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonWasDown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean buttonIsDown
[[deprecated("Use field access instead!")]] bool& Wacki::ViveUILaserPointer::dyn_buttonIsDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn_buttonIsDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonIsDown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean thisClickRegistered
[[deprecated("Use field access instead!")]] bool& Wacki::ViveUILaserPointer::dyn_thisClickRegistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::dyn_thisClickRegistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisClickRegistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Wacki.ViveUILaserPointer.Initialize
void Wacki::ViveUILaserPointer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::Initialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.Update
void Wacki::ViveUILaserPointer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::Update");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.ButtonDown
bool Wacki::ViveUILaserPointer::ButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::ButtonDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.ButtonUp
bool Wacki::ViveUILaserPointer::ButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::ButtonUp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.ButtonWasDown
bool Wacki::ViveUILaserPointer::ButtonWasDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::ButtonWasDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.ResetButtonWasDown
void Wacki::ViveUILaserPointer::ResetButtonWasDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::ResetButtonWasDown");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.RegisterButtonClick
void Wacki::ViveUILaserPointer::RegisterButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::RegisterButtonClick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.FreshButtonClick
bool Wacki::ViveUILaserPointer::FreshButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::FreshButtonClick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Wacki.ViveUILaserPointer.OnEnterControl
void Wacki::ViveUILaserPointer::OnEnterControl(::UnityEngine::GameObject* control) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::OnEnterControl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, control);
}
// Autogenerated method: Wacki.ViveUILaserPointer.OnExitControl
void Wacki::ViveUILaserPointer::OnExitControl(::UnityEngine::GameObject* control) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Wacki::ViveUILaserPointer::OnExitControl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Wacki::IUILaserPointer*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, control);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonType
#include "LitJson/JsonType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType None
::LitJson::JsonType LitJson::JsonType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "None"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType None
void LitJson::JsonType::_set_None(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType Object
::LitJson::JsonType LitJson::JsonType::_get_Object() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_Object");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "Object"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType Object
void LitJson::JsonType::_set_Object(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_Object");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "Object", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType Array
::LitJson::JsonType LitJson::JsonType::_get_Array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_Array");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "Array"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType Array
void LitJson::JsonType::_set_Array(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_Array");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "Array", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType String
::LitJson::JsonType LitJson::JsonType::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "String"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType String
void LitJson::JsonType::_set_String(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "String", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType Natural
::LitJson::JsonType LitJson::JsonType::_get_Natural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_Natural");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "Natural"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType Natural
void LitJson::JsonType::_set_Natural(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_Natural");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "Natural", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType Real
::LitJson::JsonType LitJson::JsonType::_get_Real() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_Real");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "Real"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType Real
void LitJson::JsonType::_set_Real(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_Real");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "Real", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonType Boolean
::LitJson::JsonType LitJson::JsonType::_get_Boolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_get_Boolean");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonType>("LitJson", "JsonType", "Boolean"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonType Boolean
void LitJson::JsonType::_set_Boolean(::LitJson::JsonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::_set_Boolean");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonType", "Boolean", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LitJson::JsonType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.IJsonWrapper
#include "LitJson/IJsonWrapper.hpp"
// Including type: LitJson.JsonType
#include "LitJson/JsonType.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.IJsonWrapper.get_IsObject
bool LitJson::IJsonWrapper::get_IsObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.get_IsArray
bool LitJson::IJsonWrapper::get_IsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsArray");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.get_IsString
bool LitJson::IJsonWrapper::get_IsString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.get_IsNatural
bool LitJson::IJsonWrapper::get_IsNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.get_IsReal
bool LitJson::IJsonWrapper::get_IsReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.get_IsBoolean
bool LitJson::IJsonWrapper::get_IsBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::get_IsBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.GetJsonType
::LitJson::JsonType LitJson::IJsonWrapper::GetJsonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::GetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonType, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.GetString
::StringW LitJson::IJsonWrapper::GetString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.GetNatural
int64_t LitJson::IJsonWrapper::GetNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::GetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.GetReal
double LitJson::IJsonWrapper::GetReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::GetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.GetBoolean
bool LitJson::IJsonWrapper::GetBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::GetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.SetJsonType
void LitJson::IJsonWrapper::SetJsonType(::LitJson::JsonType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::SetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type);
}
// Autogenerated method: LitJson.IJsonWrapper.SetString
void LitJson::IJsonWrapper::SetString(::StringW val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::SetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.IJsonWrapper.SetNatural
void LitJson::IJsonWrapper::SetNatural(int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::SetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.IJsonWrapper.SetReal
void LitJson::IJsonWrapper::SetReal(double val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::SetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.IJsonWrapper.SetBoolean
void LitJson::IJsonWrapper::SetBoolean(bool val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::SetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.IJsonWrapper.ToJson
::StringW LitJson::IJsonWrapper::ToJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.IJsonWrapper.ToJson
void LitJson::IJsonWrapper::ToJson(::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::IJsonWrapper::ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::IJsonWrapper*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonIgnoreWhen
#include "LitJson/JsonIgnoreWhen.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LitJson.JsonIgnoreWhen Never
::LitJson::JsonIgnoreWhen LitJson::JsonIgnoreWhen::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonIgnoreWhen>("LitJson", "JsonIgnoreWhen", "Never"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonIgnoreWhen Never
void LitJson::JsonIgnoreWhen::_set_Never(::LitJson::JsonIgnoreWhen value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonIgnoreWhen", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonIgnoreWhen Serializing
::LitJson::JsonIgnoreWhen LitJson::JsonIgnoreWhen::_get_Serializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_get_Serializing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonIgnoreWhen>("LitJson", "JsonIgnoreWhen", "Serializing"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonIgnoreWhen Serializing
void LitJson::JsonIgnoreWhen::_set_Serializing(::LitJson::JsonIgnoreWhen value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_set_Serializing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonIgnoreWhen", "Serializing", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonIgnoreWhen Deserializing
::LitJson::JsonIgnoreWhen LitJson::JsonIgnoreWhen::_get_Deserializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_get_Deserializing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonIgnoreWhen>("LitJson", "JsonIgnoreWhen", "Deserializing"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonIgnoreWhen Deserializing
void LitJson::JsonIgnoreWhen::_set_Deserializing(::LitJson::JsonIgnoreWhen value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::_set_Deserializing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonIgnoreWhen", "Deserializing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LitJson::JsonIgnoreWhen::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreWhen::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonIgnore
#include "LitJson/JsonIgnore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LitJson.JsonIgnoreWhen <Usage>k__BackingField
[[deprecated("Use field access instead!")]] ::LitJson::JsonIgnoreWhen& LitJson::JsonIgnore::dyn_$Usage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnore::dyn_$Usage$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Usage>k__BackingField"))->offset;
  return *reinterpret_cast<::LitJson::JsonIgnoreWhen*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonIgnore.get_Usage
::LitJson::JsonIgnoreWhen LitJson::JsonIgnore::get_Usage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnore::get_Usage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Usage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonIgnoreWhen, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonIgnore.set_Usage
void LitJson::JsonIgnore::set_Usage(::LitJson::JsonIgnoreWhen value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnore::set_Usage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Usage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonIgnoreMember
#include "LitJson/JsonIgnoreMember.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.String> <Members>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& LitJson::JsonIgnoreMember::dyn_$Members$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreMember::dyn_$Members$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Members>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonIgnoreMember.get_Members
::System::Collections::Generic::HashSet_1<::StringW>* LitJson::JsonIgnoreMember::get_Members() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreMember::get_Members");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Members", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::HashSet_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonIgnoreMember.set_Members
void LitJson::JsonIgnoreMember::set_Members(::System::Collections::Generic::HashSet_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreMember::set_Members");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Members", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonInclude
#include "LitJson/JsonInclude.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonAlias
#include "LitJson/JsonAlias.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Alias>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonAlias::dyn_$Alias$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::dyn_$Alias$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Alias>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <AcceptOriginal>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonAlias::dyn_$AcceptOriginal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::dyn_$AcceptOriginal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AcceptOriginal>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonAlias.get_Alias
::StringW LitJson::JsonAlias::get_Alias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::get_Alias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Alias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonAlias.set_Alias
void LitJson::JsonAlias::set_Alias(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::set_Alias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Alias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonAlias.get_AcceptOriginal
bool LitJson::JsonAlias::get_AcceptOriginal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::get_AcceptOriginal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AcceptOriginal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonAlias.set_AcceptOriginal
void LitJson::JsonAlias::set_AcceptOriginal(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::set_AcceptOriginal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AcceptOriginal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonData
#include "LitJson/JsonData.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Object val
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LitJson::JsonData::dyn_val() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::dyn_val");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "val"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String json
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonData::dyn_json() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::dyn_json");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "json"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LitJson.JsonType type
[[deprecated("Use field access instead!")]] ::LitJson::JsonType& LitJson::JsonData::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<::LitJson::JsonType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<System.Collections.Generic.KeyValuePair`2<System.String,LitJson.JsonData>> list
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*& LitJson::JsonData::dyn_list() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::dyn_list");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonData.get_Count
int LitJson::JsonData::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsArray
bool LitJson::JsonData::get_IsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsArray");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsBoolean
bool LitJson::JsonData::get_IsBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsReal
bool LitJson::JsonData::get_IsReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsNatural
bool LitJson::JsonData::get_IsNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsObject
bool LitJson::JsonData::get_IsObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_IsString
bool LitJson::JsonData::get_IsString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_IsString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.get_Keys
::System::Collections::Generic::ICollection_1<::StringW>* LitJson::JsonData::get_Keys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_Keys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.ICollection.get_Count
int LitJson::JsonData::System_Collections_ICollection_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.ICollection.get_Count");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 34));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.ICollection.get_IsSynchronized
bool LitJson::JsonData::System_Collections_ICollection_get_IsSynchronized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.ICollection.get_IsSynchronized");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 36));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.ICollection.get_SyncRoot
::Il2CppObject* LitJson::JsonData::System_Collections_ICollection_get_SyncRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.ICollection.get_SyncRoot");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 35));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.get_IsFixedSize
bool LitJson::JsonData::System_Collections_IDictionary_get_IsFixedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.get_IsFixedSize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 51));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.get_IsReadOnly
bool LitJson::JsonData::System_Collections_IDictionary_get_IsReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.get_IsReadOnly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 50));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.get_Keys
::System::Collections::ICollection* LitJson::JsonData::System_Collections_IDictionary_get_Keys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.get_Keys");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 45));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.get_Values
::System::Collections::ICollection* LitJson::JsonData::System_Collections_IDictionary_get_Values() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.get_Values");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 46));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.get_IsFixedSize
bool LitJson::JsonData::System_Collections_IList_get_IsFixedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.get_IsFixedSize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 28));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.get_IsReadOnly
bool LitJson::JsonData::System_Collections_IList_get_IsReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.get_IsReadOnly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 27));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.get_Item
::Il2CppObject* LitJson::JsonData::System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 43));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.set_Item
void LitJson::JsonData::System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.Specialized.IOrderedDictionary.get_Item
::Il2CppObject* LitJson::JsonData::System_Collections_Specialized_IOrderedDictionary_get_Item(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.Specialized.IOrderedDictionary.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, idx);
}
// Autogenerated method: LitJson.JsonData.System.Collections.Specialized.IOrderedDictionary.set_Item
void LitJson::JsonData::System_Collections_Specialized_IOrderedDictionary_set_Item(int idx, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.Specialized.IOrderedDictionary.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.get_Item
::Il2CppObject* LitJson::JsonData::System_Collections_IList_get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 22));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, index);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.set_Item
void LitJson::JsonData::System_Collections_IList_set_Item(int index, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 23));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: LitJson.JsonData.get_Item
::LitJson::JsonData* LitJson::JsonData::get_Item(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(this, ___internal__method, name);
}
// Autogenerated method: LitJson.JsonData.set_Item
void LitJson::JsonData::set_Item(::StringW name, ::LitJson::JsonData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated method: LitJson.JsonData.get_Item
::LitJson::JsonData* LitJson::JsonData::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(this, ___internal__method, index);
}
// Autogenerated method: LitJson.JsonData.set_Item
void LitJson::JsonData::set_Item(int index, ::LitJson::JsonData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator double() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator ::System::Decimal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Decimal, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator int8_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int8_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator uint8_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator int16_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator uint16_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator int() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator uint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator int64_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator uint64_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.op_Explicit
LitJson::JsonData::operator ::StringW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.ICollection.CopyTo
void LitJson::JsonData::System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.ICollection.CopyTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.Add
void LitJson::JsonData::System_Collections_IDictionary_Add(::Il2CppObject* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.Add");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 48));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.Clear
void LitJson::JsonData::System_Collections_IDictionary_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 49));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.Contains
bool LitJson::JsonData::System_Collections_IDictionary_Contains(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 47));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.GetEnumerator
::System::Collections::IDictionaryEnumerator* LitJson::JsonData::System_Collections_IDictionary_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 52));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IDictionary.Remove
void LitJson::JsonData::System_Collections_IDictionary_Remove(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IDictionary.Remove");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 53));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* LitJson::JsonData::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 37));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetBoolean
bool LitJson::JsonData::GetBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetReal
double LitJson::JsonData::GetReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetNatural
int64_t LitJson::JsonData::GetNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetString
::StringW LitJson::JsonData::GetString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 11));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetObject
::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::JsonData*>* LitJson::JsonData::GetObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::JsonData*>*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.GetArray
::System::Collections::Generic::IList_1<::LitJson::JsonData*>* LitJson::JsonData::GetArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::LitJson::JsonData*>*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.SetBoolean
void LitJson::JsonData::SetBoolean(bool val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::SetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonData.SetReal
void LitJson::JsonData::SetReal(double val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::SetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonData.SetNatural
void LitJson::JsonData::SetNatural(int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::SetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonData.SetString
void LitJson::JsonData::SetString(::StringW val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::SetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonData.LitJson.IJsonWrapper.ToJson
void LitJson::JsonData::LitJson_IJsonWrapper_ToJson(::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::LitJson.IJsonWrapper.ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.Add
int LitJson::JsonData::System_Collections_IList_Add(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.Add");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.Clear
void LitJson::JsonData::System_Collections_IList_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 26));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.Contains
bool LitJson::JsonData::System_Collections_IList_Contains(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 25));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.IndexOf
int LitJson::JsonData::System_Collections_IList_IndexOf(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.IndexOf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.Insert
void LitJson::JsonData::System_Collections_IList_Insert(int index, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.Insert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.Remove
void LitJson::JsonData::System_Collections_IList_Remove(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.Remove");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 31));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.IList.RemoveAt
void LitJson::JsonData::System_Collections_IList_RemoveAt(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.IList.RemoveAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: LitJson.JsonData.System.Collections.Specialized.IOrderedDictionary.GetEnumerator
::System::Collections::IDictionaryEnumerator* LitJson::JsonData::System_Collections_Specialized_IOrderedDictionary_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.Specialized.IOrderedDictionary.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 40));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.System.Collections.Specialized.IOrderedDictionary.Insert
void LitJson::JsonData::System_Collections_Specialized_IOrderedDictionary_Insert(int idx, ::Il2CppObject* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.Specialized.IOrderedDictionary.Insert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 41));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, key, value);
}
// Autogenerated method: LitJson.JsonData.System.Collections.Specialized.IOrderedDictionary.RemoveAt
void LitJson::JsonData::System_Collections_Specialized_IOrderedDictionary_RemoveAt(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::System.Collections.Specialized.IOrderedDictionary.RemoveAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: LitJson.JsonData.EnsureCollection
::System::Collections::ICollection* LitJson::JsonData::EnsureCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::EnsureCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.EnsureDictionary
::System::Collections::IDictionary* LitJson::JsonData::EnsureDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::EnsureDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionary*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.EnsureList
::System::Collections::IList* LitJson::JsonData::EnsureList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::EnsureList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IList*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.ToJsonData
::LitJson::JsonData* LitJson::JsonData::ToJsonData(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::ToJsonData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToJsonData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(this, ___internal__method, obj);
}
// Autogenerated method: LitJson.JsonData.WriteJson
void LitJson::JsonData::WriteJson(::LitJson::IJsonWrapper* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::WriteJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonData", "WriteJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonData.Add
int LitJson::JsonData::Add(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonData.Clear
void LitJson::JsonData::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.Equals
bool LitJson::JsonData::Equals(::LitJson::JsonData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 54));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data);
}
// Autogenerated method: LitJson.JsonData.GetJsonType
::LitJson::JsonType LitJson::JsonData::GetJsonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonType, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.SetJsonType
void LitJson::JsonData::SetJsonType(::LitJson::JsonType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::SetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type);
}
// Autogenerated method: LitJson.JsonData.ToJson
::StringW LitJson::JsonData::ToJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonData*), 20));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.ToJson
void LitJson::JsonData::ToJson(::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::ToJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LitJson.JsonData.Equals
bool LitJson::JsonData::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: LitJson.JsonData.GetHashCode
int LitJson::JsonData::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonData.ToString
::StringW LitJson::JsonData::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonData::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.OrderedDictionaryEnumerator
#include "LitJson/OrderedDictionaryEnumerator.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: LitJson.JsonData
#include "LitJson/JsonData.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,LitJson.JsonData>> enumerator
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*& LitJson::OrderedDictionaryEnumerator::dyn_enumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::dyn_enumerator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enumerator"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.get_Current
::Il2CppObject* LitJson::OrderedDictionaryEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.get_Entry
::System::Collections::DictionaryEntry LitJson::OrderedDictionaryEnumerator::get_Entry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::get_Entry");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::DictionaryEntry, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.get_Key
::Il2CppObject* LitJson::OrderedDictionaryEnumerator::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::get_Key");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.get_Value
::Il2CppObject* LitJson::OrderedDictionaryEnumerator::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::get_Value");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.MoveNext
bool LitJson::OrderedDictionaryEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.OrderedDictionaryEnumerator.Reset
void LitJson::OrderedDictionaryEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::OrderedDictionaryEnumerator*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonException
#include "LitJson/JsonException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.PropertyMetadata
#include "LitJson/PropertyMetadata.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <Type>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& LitJson::PropertyMetadata::dyn_$Type$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$Type$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Type>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Reflection.MemberInfo <Info>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& LitJson::PropertyMetadata::dyn_$Info$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$Info$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Info>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Reflection::MemberInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LitJson.JsonIgnoreWhen <Ignore>k__BackingField
[[deprecated("Use field access instead!")]] ::LitJson::JsonIgnoreWhen& LitJson::PropertyMetadata::dyn_$Ignore$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$Ignore$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Ignore>k__BackingField"))->offset;
  return *reinterpret_cast<::LitJson::JsonIgnoreWhen*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Alias>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::PropertyMetadata::dyn_$Alias$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$Alias$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Alias>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsField>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::PropertyMetadata::dyn_$IsField$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$IsField$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsField>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Include>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::PropertyMetadata::dyn_$Include$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::dyn_$Include$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Include>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.PropertyMetadata.get_Type
::System::Type* LitJson::PropertyMetadata::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_Type
void LitJson::PropertyMetadata::set_Type(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.PropertyMetadata.get_Info
::System::Reflection::MemberInfo* LitJson::PropertyMetadata::get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_Info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MemberInfo*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_Info
void LitJson::PropertyMetadata::set_Info(::System::Reflection::MemberInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_Info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.PropertyMetadata.get_Ignore
::LitJson::JsonIgnoreWhen LitJson::PropertyMetadata::get_Ignore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_Ignore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Ignore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonIgnoreWhen, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_Ignore
void LitJson::PropertyMetadata::set_Ignore(::LitJson::JsonIgnoreWhen value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_Ignore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Ignore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.PropertyMetadata.get_Alias
::StringW LitJson::PropertyMetadata::get_Alias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_Alias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Alias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_Alias
void LitJson::PropertyMetadata::set_Alias(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_Alias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Alias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.PropertyMetadata.get_IsField
bool LitJson::PropertyMetadata::get_IsField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_IsField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_IsField
void LitJson::PropertyMetadata::set_IsField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_IsField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.PropertyMetadata.get_Include
bool LitJson::PropertyMetadata::get_Include() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::get_Include");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Include", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.PropertyMetadata.set_Include
void LitJson::PropertyMetadata::set_Include(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::PropertyMetadata::set_Include");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Include", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.ArrayMetadata
#include "LitJson/ArrayMetadata.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsArray>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::ArrayMetadata::dyn_$IsArray$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::dyn_$IsArray$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsArray>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsList>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::ArrayMetadata::dyn_$IsList$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::dyn_$IsList$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsList>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type elemType
[[deprecated("Use field access instead!")]] ::System::Type*& LitJson::ArrayMetadata::dyn_elemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::dyn_elemType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elemType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.ArrayMetadata.get_IsArray
bool LitJson::ArrayMetadata::get_IsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::get_IsArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ArrayMetadata.set_IsArray
void LitJson::ArrayMetadata::set_IsArray(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::set_IsArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.ArrayMetadata.get_IsList
bool LitJson::ArrayMetadata::get_IsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::get_IsList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ArrayMetadata.set_IsList
void LitJson::ArrayMetadata::set_IsList(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::set_IsList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.ArrayMetadata.get_ElementType
::System::Type* LitJson::ArrayMetadata::get_ElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::get_ElementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ArrayMetadata.set_ElementType
void LitJson::ArrayMetadata::set_ElementType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ArrayMetadata::set_ElementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.ObjectMetadata
#include "LitJson/ObjectMetadata.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IDictionary`2<System.String,LitJson.PropertyMetadata> <Properties>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::PropertyMetadata>*& LitJson::ObjectMetadata::dyn_$Properties$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::dyn_$Properties$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Properties>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::PropertyMetadata>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDictionary>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::ObjectMetadata::dyn_$IsDictionary$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::dyn_$IsDictionary$k__BackingField");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDictionary>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type elemType
[[deprecated("Use field access instead!")]] ::System::Type*& LitJson::ObjectMetadata::dyn_elemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::dyn_elemType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elemType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.ObjectMetadata.get_Properties
::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::PropertyMetadata>* LitJson::ObjectMetadata::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::get_Properties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::PropertyMetadata>*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ObjectMetadata.set_Properties
void LitJson::ObjectMetadata::set_Properties(::System::Collections::Generic::IDictionary_2<::StringW, ::LitJson::PropertyMetadata>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::set_Properties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.ObjectMetadata.get_IsDictionary
bool LitJson::ObjectMetadata::get_IsDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::get_IsDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ObjectMetadata.set_IsDictionary
void LitJson::ObjectMetadata::set_IsDictionary(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::set_IsDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_IsDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.ObjectMetadata.get_ElementType
::System::Type* LitJson::ObjectMetadata::get_ElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::get_ElementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_ElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.ObjectMetadata.set_ElementType
void LitJson::ObjectMetadata::set_ElementType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ObjectMetadata::set_ElementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_ElementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.ExporterFunc
#include "LitJson/ExporterFunc.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.ExporterFunc.Invoke
void LitJson::ExporterFunc::Invoke(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ExporterFunc::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ExporterFunc*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.ExporterFunc.BeginInvoke
::System::IAsyncResult* LitJson::ExporterFunc::BeginInvoke(::Il2CppObject* obj, ::LitJson::JsonWriter* writer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ExporterFunc::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ExporterFunc*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, obj, writer, callback, object);
}
// Autogenerated method: LitJson.ExporterFunc.EndInvoke
void LitJson::ExporterFunc::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ExporterFunc::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ExporterFunc*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.ImporterFunc
#include "LitJson/ImporterFunc.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.ImporterFunc.Invoke
::Il2CppObject* LitJson::ImporterFunc::Invoke(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ImporterFunc::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ImporterFunc*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.ImporterFunc.BeginInvoke
::System::IAsyncResult* LitJson::ImporterFunc::BeginInvoke(::Il2CppObject* input, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ImporterFunc::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ImporterFunc*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, input, callback, object);
}
// Autogenerated method: LitJson.ImporterFunc.EndInvoke
::Il2CppObject* LitJson::ImporterFunc::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::ImporterFunc::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::ImporterFunc*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.FactoryFunc
#include "LitJson/FactoryFunc.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.FactoryFunc.Invoke
::Il2CppObject* LitJson::FactoryFunc::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FactoryFunc::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::FactoryFunc*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.FactoryFunc.BeginInvoke
::System::IAsyncResult* LitJson::FactoryFunc::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FactoryFunc::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::FactoryFunc*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: LitJson.FactoryFunc.EndInvoke
::Il2CppObject* LitJson::FactoryFunc::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FactoryFunc::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::FactoryFunc*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.WrapperFactory
#include "LitJson/WrapperFactory.hpp"
// Including type: LitJson.IJsonWrapper
#include "LitJson/IJsonWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.WrapperFactory.Invoke
::LitJson::IJsonWrapper* LitJson::WrapperFactory::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WrapperFactory::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::WrapperFactory*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.WrapperFactory.BeginInvoke
::System::IAsyncResult* LitJson::WrapperFactory::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WrapperFactory::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::WrapperFactory*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: LitJson.WrapperFactory.EndInvoke
::LitJson::IJsonWrapper* LitJson::WrapperFactory::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WrapperFactory::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::WrapperFactory*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonMapper
#include "LitJson/JsonMapper.hpp"
// Including type: LitJson.JsonMapper/<>c
#include "LitJson/JsonMapper_--c.hpp"
// Including type: LitJson.JsonMapper/<>c__DisplayClass34_0`1
#include "LitJson/JsonMapper_--c__DisplayClass34_0_1.hpp"
// Including type: LitJson.JsonMapper/<>c__DisplayClass35_0`2
#include "LitJson/JsonMapper_--c__DisplayClass35_0_2.hpp"
// Including type: LitJson.JsonMapper/<>c__DisplayClass36_0`1
#include "LitJson/JsonMapper_--c__DisplayClass36_0_1.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: LitJson.ExporterFunc
#include "LitJson/ExporterFunc.hpp"
// Including type: LitJson.ImporterFunc
#include "LitJson/ImporterFunc.hpp"
// Including type: LitJson.FactoryFunc
#include "LitJson/FactoryFunc.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: LitJson.JsonReader
#include "LitJson/JsonReader.hpp"
// Including type: LitJson.IJsonWrapper
#include "LitJson/IJsonWrapper.hpp"
// Including type: LitJson.WrapperFactory
#include "LitJson/WrapperFactory.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
// Including type: LitJson.JsonData
#include "LitJson/JsonData.hpp"
// Including type: System.IO.TextReader
#include "System/IO/TextReader.hpp"
// Including type: LitJson.ExporterFunc`1
#include "LitJson/ExporterFunc_1.hpp"
// Including type: LitJson.ImporterFunc`2
#include "LitJson/ImporterFunc_2.hpp"
// Including type: LitJson.FactoryFunc`1
#include "LitJson/FactoryFunc_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 maxNestingDepth
int LitJson::JsonMapper::_get_maxNestingDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_maxNestingDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LitJson", "JsonMapper", "maxNestingDepth"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 maxNestingDepth
void LitJson::JsonMapper::_set_maxNestingDepth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_maxNestingDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "maxNestingDepth", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.IFormatProvider datetimeFormat
::System::IFormatProvider* LitJson::JsonMapper::_get_datetimeFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_datetimeFormat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::IFormatProvider*>("LitJson", "JsonMapper", "datetimeFormat"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.IFormatProvider datetimeFormat
void LitJson::JsonMapper::_set_datetimeFormat(::System::IFormatProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_datetimeFormat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "datetimeFormat", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ExporterFunc> baseExportTable
::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>* LitJson::JsonMapper::_get_baseExportTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_baseExportTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>*>("LitJson", "JsonMapper", "baseExportTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ExporterFunc> baseExportTable
void LitJson::JsonMapper::_set_baseExportTable(::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_baseExportTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "baseExportTable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ExporterFunc> customExportTable
::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>* LitJson::JsonMapper::_get_customExportTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_customExportTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>*>("LitJson", "JsonMapper", "customExportTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ExporterFunc> customExportTable
void LitJson::JsonMapper::_set_customExportTable(::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ExporterFunc*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_customExportTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "customExportTable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,LitJson.ImporterFunc>> baseImportTable
::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>* LitJson::JsonMapper::_get_baseImportTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_baseImportTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>*>("LitJson", "JsonMapper", "baseImportTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,LitJson.ImporterFunc>> baseImportTable
void LitJson::JsonMapper::_set_baseImportTable(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_baseImportTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "baseImportTable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,LitJson.ImporterFunc>> customImportTable
::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>* LitJson::JsonMapper::_get_customImportTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_customImportTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>*>("LitJson", "JsonMapper", "customImportTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,LitJson.ImporterFunc>> customImportTable
void LitJson::JsonMapper::_set_customImportTable(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_customImportTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "customImportTable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.FactoryFunc> customFactoryTable
::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::FactoryFunc*>* LitJson::JsonMapper::_get_customFactoryTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_customFactoryTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::FactoryFunc*>*>("LitJson", "JsonMapper", "customFactoryTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.FactoryFunc> customFactoryTable
void LitJson::JsonMapper::_set_customFactoryTable(::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::FactoryFunc*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_customFactoryTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "customFactoryTable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ArrayMetadata> arrayMetadata
::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ArrayMetadata>* LitJson::JsonMapper::_get_arrayMetadata() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_arrayMetadata");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ArrayMetadata>*>("LitJson", "JsonMapper", "arrayMetadata")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ArrayMetadata> arrayMetadata
void LitJson::JsonMapper::_set_arrayMetadata(::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ArrayMetadata>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_arrayMetadata");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "arrayMetadata", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,System.Reflection.MethodInfo>> convOps
::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Reflection::MethodInfo*>*>* LitJson::JsonMapper::_get_convOps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_convOps");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Reflection::MethodInfo*>*>*>("LitJson", "JsonMapper", "convOps")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Type,System.Reflection.MethodInfo>> convOps
void LitJson::JsonMapper::_set_convOps(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Reflection::MethodInfo*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_convOps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "convOps", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ObjectMetadata> objectMetadata
::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ObjectMetadata>* LitJson::JsonMapper::_get_objectMetadata() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_get_objectMetadata");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ObjectMetadata>*>("LitJson", "JsonMapper", "objectMetadata")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Type,LitJson.ObjectMetadata> objectMetadata
void LitJson::JsonMapper::_set_objectMetadata(::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ObjectMetadata>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::_set_objectMetadata");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonMapper", "objectMetadata", value));
}
// Autogenerated method: LitJson.JsonMapper..cctor
void LitJson::JsonMapper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper.AddArrayMetadata
::LitJson::ArrayMetadata LitJson::JsonMapper::AddArrayMetadata(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::AddArrayMetadata");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "AddArrayMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::ArrayMetadata, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: LitJson.JsonMapper.AddObjectMetadata
::LitJson::ObjectMetadata LitJson::JsonMapper::AddObjectMetadata(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::AddObjectMetadata");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "AddObjectMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::ObjectMetadata, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: LitJson.JsonMapper.CreateInstance
::Il2CppObject* LitJson::JsonMapper::CreateInstance(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::CreateInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "CreateInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: LitJson.JsonMapper.GetConvOp
::System::Reflection::MethodInfo* LitJson::JsonMapper::GetConvOp(::System::Type* t1, ::System::Type* t2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::GetConvOp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "GetConvOp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(t2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t1, t2);
}
// Autogenerated method: LitJson.JsonMapper.GetImporter
::LitJson::ImporterFunc* LitJson::JsonMapper::GetImporter(::System::Type* jsonType, ::System::Type* valueType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::GetImporter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "GetImporter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(jsonType), ::il2cpp_utils::ExtractType(valueType)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::ImporterFunc*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, jsonType, valueType);
}
// Autogenerated method: LitJson.JsonMapper.GetExporter
::LitJson::ExporterFunc* LitJson::JsonMapper::GetExporter(::System::Type* valueType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::GetExporter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "GetExporter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(valueType)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::ExporterFunc*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, valueType);
}
// Autogenerated method: LitJson.JsonMapper.ReadValue
::Il2CppObject* LitJson::JsonMapper::ReadValue(::System::Type* instType, ::LitJson::JsonReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ReadValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ReadValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instType), ::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, instType, reader);
}
// Autogenerated method: LitJson.JsonMapper.ReadValue
::LitJson::IJsonWrapper* LitJson::JsonMapper::ReadValue(::LitJson::WrapperFactory* factory, ::LitJson::JsonReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ReadValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ReadValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(factory), ::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, factory, reader);
}
// Autogenerated method: LitJson.JsonMapper.ReadSkip
void LitJson::JsonMapper::ReadSkip(::LitJson::JsonReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ReadSkip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ReadSkip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: LitJson.JsonMapper.RegisterBaseExporters
void LitJson::JsonMapper::RegisterBaseExporters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::RegisterBaseExporters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "RegisterBaseExporters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper.RegisterBaseImporters
void LitJson::JsonMapper::RegisterBaseImporters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::RegisterBaseImporters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "RegisterBaseImporters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper.RegisterImporter
void LitJson::JsonMapper::RegisterImporter(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Type*, ::LitJson::ImporterFunc*>*>* table, ::System::Type* jsonType, ::System::Type* valueType, ::LitJson::ImporterFunc* importer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::RegisterImporter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "RegisterImporter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(table), ::il2cpp_utils::ExtractType(jsonType), ::il2cpp_utils::ExtractType(valueType), ::il2cpp_utils::ExtractType(importer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, table, jsonType, valueType, importer);
}
// Autogenerated method: LitJson.JsonMapper.WriteValue
void LitJson::JsonMapper::WriteValue(::Il2CppObject* obj, ::LitJson::JsonWriter* writer, bool privateWriter, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::WriteValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(privateWriter), ::il2cpp_utils::ExtractType(depth)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, writer, privateWriter, depth);
}
// Autogenerated method: LitJson.JsonMapper.ToJson
::StringW LitJson::JsonMapper::ToJson(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: LitJson.JsonMapper.ToJson
void LitJson::JsonMapper::ToJson(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper.ToObject
::LitJson::JsonData* LitJson::JsonMapper::ToObject(::LitJson::JsonReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: LitJson.JsonMapper.ToObject
::LitJson::JsonData* LitJson::JsonMapper::ToObject(::System::IO::TextReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: LitJson.JsonMapper.ToObject
::LitJson::JsonData* LitJson::JsonMapper::ToObject(::StringW json) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(json)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, json);
}
// Autogenerated method: LitJson.JsonMapper.ToWrapper
::LitJson::IJsonWrapper* LitJson::JsonMapper::ToWrapper(::LitJson::WrapperFactory* factory, ::LitJson::JsonReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToWrapper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToWrapper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(factory), ::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, factory, reader);
}
// Autogenerated method: LitJson.JsonMapper.ToWrapper
::LitJson::IJsonWrapper* LitJson::JsonMapper::ToWrapper(::LitJson::WrapperFactory* factory, ::StringW json) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::ToWrapper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "ToWrapper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(factory), ::il2cpp_utils::ExtractType(json)})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, factory, json);
}
// Autogenerated method: LitJson.JsonMapper.UnregisterFactories
void LitJson::JsonMapper::UnregisterFactories() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::UnregisterFactories");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "UnregisterFactories", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper.UnregisterExporters
void LitJson::JsonMapper::UnregisterExporters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::UnregisterExporters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "UnregisterExporters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper.UnregisterImporters
void LitJson::JsonMapper::UnregisterImporters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::UnregisterImporters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper", "UnregisterImporters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonMapper/<>c
#include "LitJson/JsonMapper_--c.hpp"
// Including type: LitJson.WrapperFactory
#include "LitJson/WrapperFactory.hpp"
// Including type: LitJson.ExporterFunc
#include "LitJson/ExporterFunc.hpp"
// Including type: LitJson.ImporterFunc
#include "LitJson/ImporterFunc.hpp"
// Including type: LitJson.IJsonWrapper
#include "LitJson/IJsonWrapper.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly LitJson.JsonMapper/<>c <>9
::LitJson::JsonMapper::$$c* LitJson::JsonMapper::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::JsonMapper::$$c*>("LitJson", "JsonMapper/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly LitJson.JsonMapper/<>c <>9
void LitJson::JsonMapper::$$c::_set_$$9(::LitJson::JsonMapper::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.WrapperFactory <>9__19_0
::LitJson::WrapperFactory* LitJson::JsonMapper::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::WrapperFactory*>("LitJson", "JsonMapper/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.WrapperFactory <>9__19_0
void LitJson::JsonMapper::$$c::_set_$$9__19_0(::LitJson::WrapperFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_0
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_0
void LitJson::JsonMapper::$$c::_set_$$9__20_0(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_0", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_1
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_1")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_1
void LitJson::JsonMapper::$$c::_set_$$9__20_1(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_1", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_2
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_2")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_2
void LitJson::JsonMapper::$$c::_set_$$9__20_2(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_2", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_3
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_3")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_3
void LitJson::JsonMapper::$$c::_set_$$9__20_3(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_3", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_4
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_4")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_4
void LitJson::JsonMapper::$$c::_set_$$9__20_4(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_4", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_5
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_5")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_5
void LitJson::JsonMapper::$$c::_set_$$9__20_5(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_5", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_6
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_6");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_6")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_6
void LitJson::JsonMapper::$$c::_set_$$9__20_6(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_6");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_6", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_7
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_7");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_7")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_7
void LitJson::JsonMapper::$$c::_set_$$9__20_7(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_7");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_7", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_8
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_8");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_8")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_8
void LitJson::JsonMapper::$$c::_set_$$9__20_8(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_8");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_8", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_9
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_9")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_9
void LitJson::JsonMapper::$$c::_set_$$9__20_9(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_9", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ExporterFunc <>9__20_10
::LitJson::ExporterFunc* LitJson::JsonMapper::$$c::_get_$$9__20_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__20_10");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ExporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__20_10")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ExporterFunc <>9__20_10
void LitJson::JsonMapper::$$c::_set_$$9__20_10(::LitJson::ExporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__20_10");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__20_10", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_0
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_0
void LitJson::JsonMapper::$$c::_set_$$9__21_0(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_0", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_1
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_1")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_1
void LitJson::JsonMapper::$$c::_set_$$9__21_1(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_1", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_2
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_2")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_2
void LitJson::JsonMapper::$$c::_set_$$9__21_2(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_2", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_3
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_3")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_3
void LitJson::JsonMapper::$$c::_set_$$9__21_3(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_3", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_4
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_4")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_4
void LitJson::JsonMapper::$$c::_set_$$9__21_4(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_4", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_5
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_5")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_5
void LitJson::JsonMapper::$$c::_set_$$9__21_5(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_5", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_6
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_6");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_6")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_6
void LitJson::JsonMapper::$$c::_set_$$9__21_6(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_6");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_6", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_7
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_7");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_7")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_7
void LitJson::JsonMapper::$$c::_set_$$9__21_7(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_7");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_7", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_8
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_8");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_8")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_8
void LitJson::JsonMapper::$$c::_set_$$9__21_8(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_8");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_8", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_9
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_9")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_9
void LitJson::JsonMapper::$$c::_set_$$9__21_9(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_9", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_10
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_10");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_10")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_10
void LitJson::JsonMapper::$$c::_set_$$9__21_10(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_10");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_10", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_11
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_11() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_11");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_11")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_11
void LitJson::JsonMapper::$$c::_set_$$9__21_11(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_11");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_11", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_12
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_12");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_12")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_12
void LitJson::JsonMapper::$$c::_set_$$9__21_12(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_12");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_12", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.ImporterFunc <>9__21_13
::LitJson::ImporterFunc* LitJson::JsonMapper::$$c::_get_$$9__21_13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__21_13");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::ImporterFunc*>("LitJson", "JsonMapper/<>c", "<>9__21_13")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.ImporterFunc <>9__21_13
void LitJson::JsonMapper::$$c::_set_$$9__21_13(::LitJson::ImporterFunc* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__21_13");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__21_13", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.WrapperFactory <>9__26_0
::LitJson::WrapperFactory* LitJson::JsonMapper::$$c::_get_$$9__26_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__26_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::WrapperFactory*>("LitJson", "JsonMapper/<>c", "<>9__26_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.WrapperFactory <>9__26_0
void LitJson::JsonMapper::$$c::_set_$$9__26_0(::LitJson::WrapperFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__26_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__26_0", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.WrapperFactory <>9__27_0
::LitJson::WrapperFactory* LitJson::JsonMapper::$$c::_get_$$9__27_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__27_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::WrapperFactory*>("LitJson", "JsonMapper/<>c", "<>9__27_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.WrapperFactory <>9__27_0
void LitJson::JsonMapper::$$c::_set_$$9__27_0(::LitJson::WrapperFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__27_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__27_0", value)));
}
// Autogenerated static field getter
// Get static field: static public LitJson.WrapperFactory <>9__28_0
::LitJson::WrapperFactory* LitJson::JsonMapper::$$c::_get_$$9__28_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_get_$$9__28_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::LitJson::WrapperFactory*>("LitJson", "JsonMapper/<>c", "<>9__28_0")));
}
// Autogenerated static field setter
// Set static field: static public LitJson.WrapperFactory <>9__28_0
void LitJson::JsonMapper::$$c::_set_$$9__28_0(::LitJson::WrapperFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::_set_$$9__28_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("LitJson", "JsonMapper/<>c", "<>9__28_0", value)));
}
// Autogenerated method: LitJson.JsonMapper/<>c..cctor
void LitJson::JsonMapper::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonMapper/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<ReadSkip>b__19_0
::LitJson::IJsonWrapper* LitJson::JsonMapper::$$c::$ReadSkip$b__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<ReadSkip>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReadSkip>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_0
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_0(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_1
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_1(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_2
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_2(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_3
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_3(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_4
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_4(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_5
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_5(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_6
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_6(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_7
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_7(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_7");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_7", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_8
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_8(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_9
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_9(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_9");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_9", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseExporters>b__20_10
void LitJson::JsonMapper::$$c::$RegisterBaseExporters$b__20_10(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseExporters>b__20_10");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseExporters>b__20_10", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_0
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_0(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_1
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_1(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_2
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_2(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_3
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_3(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_4
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_4(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_5
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_5(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_6
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_6(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_7
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_7(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_7");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_7", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_8
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_8(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_9
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_9(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_9");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_9", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_10
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_10(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_10");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_10", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_11
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_11(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_12
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_12(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_12");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_12", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<RegisterBaseImporters>b__21_13
::Il2CppObject* LitJson::JsonMapper::$$c::$RegisterBaseImporters$b__21_13(::Il2CppObject* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<RegisterBaseImporters>b__21_13");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterBaseImporters>b__21_13", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, input);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<ToObject>b__26_0
::LitJson::IJsonWrapper* LitJson::JsonMapper::$$c::$ToObject$b__26_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<ToObject>b__26_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToObject>b__26_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<ToObject>b__27_0
::LitJson::IJsonWrapper* LitJson::JsonMapper::$$c::$ToObject$b__27_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<ToObject>b__27_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToObject>b__27_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMapper/<>c.<ToObject>b__28_0
::LitJson::IJsonWrapper* LitJson::JsonMapper::$$c::$ToObject$b__28_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c::<ToObject>b__28_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToObject>b__28_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::IJsonWrapper*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonMockWrapper
#include "LitJson/JsonMockWrapper.hpp"
// Including type: LitJson.JsonType
#include "LitJson/JsonType.hpp"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LitJson.JsonMockWrapper.get_IsArray
bool LitJson::JsonMockWrapper::get_IsArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsArray");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.get_IsBoolean
bool LitJson::JsonMockWrapper::get_IsBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.get_IsReal
bool LitJson::JsonMockWrapper::get_IsReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.get_IsNatural
bool LitJson::JsonMockWrapper::get_IsNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.get_IsObject
bool LitJson::JsonMockWrapper::get_IsObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.get_IsString
bool LitJson::JsonMockWrapper::get_IsString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::get_IsString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.GetBoolean
bool LitJson::JsonMockWrapper::GetBoolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::GetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.GetReal
double LitJson::JsonMockWrapper::GetReal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::GetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 13));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.GetNatural
int64_t LitJson::JsonMockWrapper::GetNatural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::GetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.GetJsonType
::LitJson::JsonType LitJson::JsonMockWrapper::GetJsonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::GetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonType, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.GetString
::StringW LitJson::JsonMockWrapper::GetString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 11));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.SetBoolean
void LitJson::JsonMockWrapper::SetBoolean(bool val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::SetBoolean");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonMockWrapper.SetReal
void LitJson::JsonMockWrapper::SetReal(double val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::SetReal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonMockWrapper.SetNatural
void LitJson::JsonMockWrapper::SetNatural(int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::SetNatural");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonMockWrapper.SetJsonType
void LitJson::JsonMockWrapper::SetJsonType(::LitJson::JsonType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::SetJsonType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type);
}
// Autogenerated method: LitJson.JsonMockWrapper.SetString
void LitJson::JsonMockWrapper::SetString(::StringW val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::SetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: LitJson.JsonMockWrapper.ToJson
::StringW LitJson::JsonMockWrapper::ToJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 20));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.ToJson
void LitJson::JsonMockWrapper::ToJson(::LitJson::JsonWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::ToJson");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.get_IsFixedSize
bool LitJson::JsonMockWrapper::System_Collections_IList_get_IsFixedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.get_IsFixedSize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 28));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.get_IsReadOnly
bool LitJson::JsonMockWrapper::System_Collections_IList_get_IsReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.get_IsReadOnly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 27));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.get_Item
::Il2CppObject* LitJson::JsonMockWrapper::System_Collections_IList_get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 22));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, index);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.set_Item
void LitJson::JsonMockWrapper::System_Collections_IList_set_Item(int index, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 23));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.Add
int LitJson::JsonMockWrapper::System_Collections_IList_Add(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.Add");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.Clear
void LitJson::JsonMockWrapper::System_Collections_IList_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 26));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.Contains
bool LitJson::JsonMockWrapper::System_Collections_IList_Contains(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 25));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.IndexOf
int LitJson::JsonMockWrapper::System_Collections_IList_IndexOf(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.IndexOf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.Insert
void LitJson::JsonMockWrapper::System_Collections_IList_Insert(int i, ::Il2CppObject* v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.Insert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, v);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.Remove
void LitJson::JsonMockWrapper::System_Collections_IList_Remove(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.Remove");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 31));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IList.RemoveAt
void LitJson::JsonMockWrapper::System_Collections_IList_RemoveAt(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IList.RemoveAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.ICollection.get_Count
int LitJson::JsonMockWrapper::System_Collections_ICollection_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.ICollection.get_Count");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 34));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.ICollection.get_IsSynchronized
bool LitJson::JsonMockWrapper::System_Collections_ICollection_get_IsSynchronized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.ICollection.get_IsSynchronized");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 36));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.ICollection.get_SyncRoot
::Il2CppObject* LitJson::JsonMockWrapper::System_Collections_ICollection_get_SyncRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.ICollection.get_SyncRoot");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 35));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.ICollection.CopyTo
void LitJson::JsonMockWrapper::System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.ICollection.CopyTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* LitJson::JsonMockWrapper::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 37));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.get_IsFixedSize
bool LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsFixedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.get_IsFixedSize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 51));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.get_IsReadOnly
bool LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.get_IsReadOnly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 50));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.get_Keys
::System::Collections::ICollection* LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Keys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.get_Keys");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 45));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.get_Values
::System::Collections::ICollection* LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Values() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.get_Values");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 46));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.get_Item
::Il2CppObject* LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 43));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.set_Item
void LitJson::JsonMockWrapper::System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.Add
void LitJson::JsonMockWrapper::System_Collections_IDictionary_Add(::Il2CppObject* k, ::Il2CppObject* v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.Add");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 48));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, k, v);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.Clear
void LitJson::JsonMockWrapper::System_Collections_IDictionary_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 49));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.Contains
bool LitJson::JsonMockWrapper::System_Collections_IDictionary_Contains(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 47));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.Remove
void LitJson::JsonMockWrapper::System_Collections_IDictionary_Remove(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.Remove");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 53));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.IDictionary.GetEnumerator
::System::Collections::IDictionaryEnumerator* LitJson::JsonMockWrapper::System_Collections_IDictionary_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.IDictionary.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 52));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.Specialized.IOrderedDictionary.get_Item
::Il2CppObject* LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_get_Item(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.Specialized.IOrderedDictionary.get_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, idx);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.Specialized.IOrderedDictionary.set_Item
void LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_set_Item(int idx, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.Specialized.IOrderedDictionary.set_Item");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, value);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.Specialized.IOrderedDictionary.GetEnumerator
::System::Collections::IDictionaryEnumerator* LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.Specialized.IOrderedDictionary.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 40));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.Specialized.IOrderedDictionary.Insert
void LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_Insert(int i, ::Il2CppObject* k, ::Il2CppObject* v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.Specialized.IOrderedDictionary.Insert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 41));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i, k, v);
}
// Autogenerated method: LitJson.JsonMockWrapper.System.Collections.Specialized.IOrderedDictionary.RemoveAt
void LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_RemoveAt(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::System.Collections.Specialized.IOrderedDictionary.RemoveAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::LitJson::JsonMockWrapper*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.JsonToken
#include "LitJson/JsonToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken None
::LitJson::JsonToken LitJson::JsonToken::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "None"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken None
void LitJson::JsonToken::_set_None(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken Null
::LitJson::JsonToken LitJson::JsonToken::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "Null"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken Null
void LitJson::JsonToken::_set_Null(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "Null", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken ObjectStart
::LitJson::JsonToken LitJson::JsonToken::_get_ObjectStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_ObjectStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "ObjectStart"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken ObjectStart
void LitJson::JsonToken::_set_ObjectStart(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_ObjectStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "ObjectStart", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken PropertyName
::LitJson::JsonToken LitJson::JsonToken::_get_PropertyName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_PropertyName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "PropertyName"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken PropertyName
void LitJson::JsonToken::_set_PropertyName(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_PropertyName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "PropertyName", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken ObjectEnd
::LitJson::JsonToken LitJson::JsonToken::_get_ObjectEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_ObjectEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "ObjectEnd"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken ObjectEnd
void LitJson::JsonToken::_set_ObjectEnd(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_ObjectEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "ObjectEnd", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken ArrayStart
::LitJson::JsonToken LitJson::JsonToken::_get_ArrayStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_ArrayStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "ArrayStart"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken ArrayStart
void LitJson::JsonToken::_set_ArrayStart(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_ArrayStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "ArrayStart", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken ArrayEnd
::LitJson::JsonToken LitJson::JsonToken::_get_ArrayEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_ArrayEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "ArrayEnd"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken ArrayEnd
void LitJson::JsonToken::_set_ArrayEnd(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_ArrayEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "ArrayEnd", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken Real
::LitJson::JsonToken LitJson::JsonToken::_get_Real() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_Real");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "Real"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken Real
void LitJson::JsonToken::_set_Real(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_Real");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "Real", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken Natural
::LitJson::JsonToken LitJson::JsonToken::_get_Natural() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_Natural");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "Natural"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken Natural
void LitJson::JsonToken::_set_Natural(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_Natural");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "Natural", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken String
::LitJson::JsonToken LitJson::JsonToken::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "String"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken String
void LitJson::JsonToken::_set_String(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "String", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.JsonToken Boolean
::LitJson::JsonToken LitJson::JsonToken::_get_Boolean() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_get_Boolean");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::JsonToken>("LitJson", "JsonToken", "Boolean"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.JsonToken Boolean
void LitJson::JsonToken::_set_Boolean(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::_set_Boolean");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonToken", "Boolean", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LitJson::JsonToken::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonToken::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonReader
#include "LitJson/JsonReader.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: LitJson.Lexer
#include "LitJson/Lexer.hpp"
// Including type: System.IO.TextReader
#include "System/IO/TextReader.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parseTable
::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* LitJson::JsonReader::_get_parseTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::_get_parseTable");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>*>("LitJson", "JsonReader", "parseTable")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parseTable
void LitJson::JsonReader::_set_parseTable(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::_set_parseTable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonReader", "parseTable", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Stack`1<System.Int32> automationStack
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& LitJson::JsonReader::dyn_automationStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_automationStack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "automationStack"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Stack_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LitJson.Lexer lexer
[[deprecated("Use field access instead!")]] ::LitJson::Lexer*& LitJson::JsonReader::dyn_lexer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_lexer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lexer"))->offset;
  return *reinterpret_cast<::LitJson::Lexer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.TextReader reader
[[deprecated("Use field access instead!")]] ::System::IO::TextReader*& LitJson::JsonReader::dyn_reader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_reader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reader"))->offset;
  return *reinterpret_cast<::System::IO::TextReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentInput
[[deprecated("Use field access instead!")]] int& LitJson::JsonReader::dyn_currentInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_currentInput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentInput"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentSymbol
[[deprecated("Use field access instead!")]] int& LitJson::JsonReader::dyn_currentSymbol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_currentSymbol");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentSymbol"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean parserInString
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_parserInString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_parserInString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parserInString"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean parserReturn
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_parserReturn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_parserReturn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parserReturn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean readStarted
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_readStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_readStarted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readStarted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean readerIsOwned
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_readerIsOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_readerIsOwned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readerIsOwned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <SkipNonMembers>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_$SkipNonMembers$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$SkipNonMembers$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SkipNonMembers>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TypeHinting>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_$TypeHinting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$TypeHinting$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TypeHinting>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <HintTypeName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonReader::dyn_$HintTypeName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$HintTypeName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HintTypeName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <HintValueName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonReader::dyn_$HintValueName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$HintValueName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HintValueName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <EndOfInput>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_$EndOfInput$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$EndOfInput$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<EndOfInput>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <EndOfJson>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonReader::dyn_$EndOfJson$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$EndOfJson$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<EndOfJson>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LitJson.JsonToken <Token>k__BackingField
[[deprecated("Use field access instead!")]] ::LitJson::JsonToken& LitJson::JsonReader::dyn_$Token$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$Token$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Token>k__BackingField"))->offset;
  return *reinterpret_cast<::LitJson::JsonToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <Value>k__BackingField
[[deprecated("Use field access instead!")]] ::Il2CppObject*& LitJson::JsonReader::dyn_$Value$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::dyn_$Value$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Value>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonReader.get_AllowComments
bool LitJson::JsonReader::get_AllowComments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_AllowComments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllowComments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_AllowComments
void LitJson::JsonReader::set_AllowComments(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_AllowComments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AllowComments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_AllowSingleQuotedStrings
bool LitJson::JsonReader::get_AllowSingleQuotedStrings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_AllowSingleQuotedStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllowSingleQuotedStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_AllowSingleQuotedStrings
void LitJson::JsonReader::set_AllowSingleQuotedStrings(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_AllowSingleQuotedStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AllowSingleQuotedStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_SkipNonMembers
bool LitJson::JsonReader::get_SkipNonMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_SkipNonMembers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SkipNonMembers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_SkipNonMembers
void LitJson::JsonReader::set_SkipNonMembers(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_SkipNonMembers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SkipNonMembers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_TypeHinting
bool LitJson::JsonReader::get_TypeHinting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_TypeHinting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeHinting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_TypeHinting
void LitJson::JsonReader::set_TypeHinting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_TypeHinting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TypeHinting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_HintTypeName
::StringW LitJson::JsonReader::get_HintTypeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_HintTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HintTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_HintTypeName
void LitJson::JsonReader::set_HintTypeName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_HintTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HintTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_HintValueName
::StringW LitJson::JsonReader::get_HintValueName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_HintValueName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HintValueName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_HintValueName
void LitJson::JsonReader::set_HintValueName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_HintValueName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HintValueName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_EndOfInput
bool LitJson::JsonReader::get_EndOfInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_EndOfInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_EndOfInput
void LitJson::JsonReader::set_EndOfInput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_EndOfInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EndOfInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_EndOfJson
bool LitJson::JsonReader::get_EndOfJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_EndOfJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_EndOfJson
void LitJson::JsonReader::set_EndOfJson(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_EndOfJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EndOfJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_Token
::LitJson::JsonToken LitJson::JsonReader::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::LitJson::JsonToken, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_Token
void LitJson::JsonReader::set_Token(::LitJson::JsonToken value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader.get_Value
::Il2CppObject* LitJson::JsonReader::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.set_Value
void LitJson::JsonReader::set_Value(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::set_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonReader..cctor
void LitJson::JsonReader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonReader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.TableAddCol
void LitJson::JsonReader::TableAddCol(::LitJson::ParserToken row, int col, ::ArrayW<int> symbols) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::TableAddCol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonReader", "TableAddCol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(row), ::il2cpp_utils::ExtractType(col), ::il2cpp_utils::ExtractType(symbols)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, row, col, symbols);
}
// Autogenerated method: LitJson.JsonReader.TableAddRow
void LitJson::JsonReader::TableAddRow(::LitJson::ParserToken rule) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::TableAddRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonReader", "TableAddRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rule)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rule);
}
// Autogenerated method: LitJson.JsonReader.ProcessNumber
void LitJson::JsonReader::ProcessNumber(::StringW number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::ProcessNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, number);
}
// Autogenerated method: LitJson.JsonReader.ProcessSymbol
void LitJson::JsonReader::ProcessSymbol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::ProcessSymbol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSymbol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.ReadToken
bool LitJson::JsonReader::ReadToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::ReadToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.Close
void LitJson::JsonReader::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonReader.Read
bool LitJson::JsonReader::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.Condition
#include "LitJson/Condition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LitJson.Condition InArray
::LitJson::Condition LitJson::Condition::_get_InArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_get_InArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::Condition>("LitJson", "Condition", "InArray"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.Condition InArray
void LitJson::Condition::_set_InArray(::LitJson::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_set_InArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "Condition", "InArray", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.Condition InObject
::LitJson::Condition LitJson::Condition::_get_InObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_get_InObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::Condition>("LitJson", "Condition", "InObject"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.Condition InObject
void LitJson::Condition::_set_InObject(::LitJson::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_set_InObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "Condition", "InObject", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.Condition NotAProperty
::LitJson::Condition LitJson::Condition::_get_NotAProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_get_NotAProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::Condition>("LitJson", "Condition", "NotAProperty"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.Condition NotAProperty
void LitJson::Condition::_set_NotAProperty(::LitJson::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_set_NotAProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "Condition", "NotAProperty", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.Condition Property
::LitJson::Condition LitJson::Condition::_get_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_get_Property");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::Condition>("LitJson", "Condition", "Property"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.Condition Property
void LitJson::Condition::_set_Property(::LitJson::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_set_Property");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "Condition", "Property", value));
}
// Autogenerated static field getter
// Get static field: static public LitJson.Condition Value
::LitJson::Condition LitJson::Condition::_get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_get_Value");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::LitJson::Condition>("LitJson", "Condition", "Value"));
}
// Autogenerated static field setter
// Set static field: static public LitJson.Condition Value
void LitJson::Condition::_set_Value(::LitJson::Condition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::_set_Value");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "Condition", "Value", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& LitJson::Condition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::Condition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.WriterContext
#include "LitJson/WriterContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 Count
[[deprecated("Use field access instead!")]] int& LitJson::WriterContext::dyn_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WriterContext::dyn_Count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Padding
[[deprecated("Use field access instead!")]] int& LitJson::WriterContext::dyn_Padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WriterContext::dyn_Padding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Padding"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean InArray
[[deprecated("Use field access instead!")]] bool& LitJson::WriterContext::dyn_InArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WriterContext::dyn_InArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InArray"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean InObject
[[deprecated("Use field access instead!")]] bool& LitJson::WriterContext::dyn_InObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WriterContext::dyn_InObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ExpectingValue
[[deprecated("Use field access instead!")]] bool& LitJson::WriterContext::dyn_ExpectingValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::WriterContext::dyn_ExpectingValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ExpectingValue"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LitJson.JsonWriter
#include "LitJson/JsonWriter.hpp"
// Including type: LitJson.WriterContext
#include "LitJson/WriterContext.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.Globalization.NumberFormatInfo
#include "System/Globalization/NumberFormatInfo.hpp"
// Including type: LitJson.Condition
#include "LitJson/Condition.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Globalization.NumberFormatInfo numberFormat
::System::Globalization::NumberFormatInfo* LitJson::JsonWriter::_get_numberFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::_get_numberFormat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::NumberFormatInfo*>("LitJson", "JsonWriter", "numberFormat"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Globalization.NumberFormatInfo numberFormat
void LitJson::JsonWriter::_set_numberFormat(::System::Globalization::NumberFormatInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::_set_numberFormat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LitJson", "JsonWriter", "numberFormat", value));
}
// Autogenerated instance field getter
// Get instance field: private LitJson.WriterContext context
[[deprecated("Use field access instead!")]] ::LitJson::WriterContext*& LitJson::JsonWriter::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::LitJson::WriterContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Stack`1<LitJson.WriterContext> ctxStack
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::LitJson::WriterContext*>*& LitJson::JsonWriter::dyn_ctxStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_ctxStack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ctxStack"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Stack_1<::LitJson::WriterContext*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasReachedEnd
[[deprecated("Use field access instead!")]] bool& LitJson::JsonWriter::dyn_hasReachedEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_hasReachedEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasReachedEnd"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Char[] hexSeq
[[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& LitJson::JsonWriter::dyn_hexSeq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_hexSeq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hexSeq"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 indentation
[[deprecated("Use field access instead!")]] int& LitJson::JsonWriter::dyn_indentation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_indentation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indentation"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 indentValue
[[deprecated("Use field access instead!")]] int& LitJson::JsonWriter::dyn_indentValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_indentValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indentValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder stringBuilder
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& LitJson::JsonWriter::dyn_stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_stringBuilder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringBuilder"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <PrettyPrint>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonWriter::dyn_$PrettyPrint$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$PrettyPrint$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PrettyPrint>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Validate>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonWriter::dyn_$Validate$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$Validate$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Validate>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TypeHinting>k__BackingField
[[deprecated("Use field access instead!")]] bool& LitJson::JsonWriter::dyn_$TypeHinting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$TypeHinting$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TypeHinting>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <HintTypeName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonWriter::dyn_$HintTypeName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$HintTypeName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HintTypeName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <HintValueName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& LitJson::JsonWriter::dyn_$HintValueName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$HintValueName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<HintValueName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.TextWriter <TextWriter>k__BackingField
[[deprecated("Use field access instead!")]] ::System::IO::TextWriter*& LitJson::JsonWriter::dyn_$TextWriter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::dyn_$TextWriter$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TextWriter>k__BackingField"))->offset;
  return *reinterpret_cast<::System::IO::TextWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LitJson.JsonWriter.get_IndentValue
int LitJson::JsonWriter::get_IndentValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_IndentValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IndentValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_IndentValue
void LitJson::JsonWriter::set_IndentValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_IndentValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IndentValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_PrettyPrint
bool LitJson::JsonWriter::get_PrettyPrint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_PrettyPrint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PrettyPrint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_PrettyPrint
void LitJson::JsonWriter::set_PrettyPrint(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_PrettyPrint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrettyPrint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_Validate
bool LitJson::JsonWriter::get_Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_Validate
void LitJson::JsonWriter::set_Validate(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_TypeHinting
bool LitJson::JsonWriter::get_TypeHinting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_TypeHinting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeHinting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_TypeHinting
void LitJson::JsonWriter::set_TypeHinting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_TypeHinting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TypeHinting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_HintTypeName
::StringW LitJson::JsonWriter::get_HintTypeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_HintTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HintTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_HintTypeName
void LitJson::JsonWriter::set_HintTypeName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_HintTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HintTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_HintValueName
::StringW LitJson::JsonWriter::get_HintValueName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_HintValueName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HintValueName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_HintValueName
void LitJson::JsonWriter::set_HintValueName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_HintValueName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HintValueName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter.get_TextWriter
::System::IO::TextWriter* LitJson::JsonWriter::get_TextWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::get_TextWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TextWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::TextWriter*, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.set_TextWriter
void LitJson::JsonWriter::set_TextWriter(::System::IO::TextWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::set_TextWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TextWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LitJson.JsonWriter..cctor
void LitJson::JsonWriter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonWriter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.DoValidation
void LitJson::JsonWriter::DoValidation(::LitJson::Condition cond) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::DoValidation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoValidation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cond)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cond);
}
// Autogenerated method: LitJson.JsonWriter.Init
void LitJson::JsonWriter::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.IntToHex
void LitJson::JsonWriter::IntToHex(int n, ::ArrayW<::Il2CppChar> hex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::IntToHex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LitJson", "JsonWriter", "IntToHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n), ::il2cpp_utils::ExtractType(hex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, n, hex);
}
// Autogenerated method: LitJson.JsonWriter.Indent
void LitJson::JsonWriter::Indent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Indent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Indent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.Put
void LitJson::JsonWriter::Put(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, str);
}
// Autogenerated method: LitJson.JsonWriter.PutNewline
void LitJson::JsonWriter::PutNewline(bool addComma) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::PutNewline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutNewline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addComma)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, addComma);
}
// Autogenerated method: LitJson.JsonWriter.PutString
void LitJson::JsonWriter::PutString(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::PutString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, str);
}
// Autogenerated method: LitJson.JsonWriter.Unindent
void LitJson::JsonWriter::Unindent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Unindent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unindent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.Reset
void LitJson::JsonWriter::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(bool boolean) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boolean)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, boolean);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(double number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, number);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(::System::Decimal number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, number);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(int64_t number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, number);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(uint64_t number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, number);
}
// Autogenerated method: LitJson.JsonWriter.Write
void LitJson::JsonWriter::Write(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, str);
}
// Autogenerated method: LitJson.JsonWriter.WriteArrayEnd
void LitJson::JsonWriter::WriteArrayEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::WriteArrayEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteArrayEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.WriteArrayStart
void LitJson::JsonWriter::WriteArrayStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::WriteArrayStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteArrayStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.WriteObjectEnd
void LitJson::JsonWriter::WriteObjectEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::WriteObjectEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteObjectEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.WriteObjectStart
void LitJson::JsonWriter::WriteObjectStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::WriteObjectStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteObjectStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LitJson.JsonWriter.WritePropertyName
void LitJson::JsonWriter::WritePropertyName(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::WritePropertyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePropertyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: LitJson.JsonWriter.ToString
::StringW LitJson::JsonWriter::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonWriter::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LitJson.FsmContext
#include "LitJson/FsmContext.hpp"
// Including type: LitJson.Lexer
#include "LitJson/Lexer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LitJson.Lexer L
[[deprecated("Use field access instead!")]] ::LitJson::Lexer*& LitJson::FsmContext::dyn_L() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FsmContext::dyn_L");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "L"))->offset;
  return *reinterpret_cast<::LitJson::Lexer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Return
[[deprecated("Use field access instead!")]] bool& LitJson::FsmContext::dyn_Return() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FsmContext::dyn_Return");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Return"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 NextState
[[deprecated("Use field access instead!")]] int& LitJson::FsmContext::dyn_NextState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FsmContext::dyn_NextState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextState"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 StateStack
[[deprecated("Use field access instead!")]] int& LitJson::FsmContext::dyn_StateStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FsmContext::dyn_StateStack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StateStack"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
