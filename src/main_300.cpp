// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bodyTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 bodyTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_bodyTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 footTrackerForward
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footTrackerForward"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 footTrackerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footTrackerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footTrackerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_headOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_handOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footForwardOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footForwardOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footForwardOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footForwardOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footInwardOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footInwardOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footInwardOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footInwardOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single footHeadingOffset
[[deprecated("Use field access instead!")]] float& RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footHeadingOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKCalibrator::Settings::dyn_footHeadingOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "footHeadingOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.HitReactionVRIKTrigger
#include "RootMotion/Demos/HitReactionVRIKTrigger.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK
#include "RootMotion/FinalIK/HitReactionVRIK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private RootMotion.FinalIK.HitReactionVRIK hitReaction
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::HitReactionVRIK*& RootMotion::Demos::HitReactionVRIKTrigger::dyn_hitReaction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::HitReactionVRIKTrigger::dyn_hitReaction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitReaction"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::HitReactionVRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hitForce
[[deprecated("Use field access instead!")]] float& RootMotion::Demos::HitReactionVRIKTrigger::dyn_hitForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::HitReactionVRIKTrigger::dyn_hitForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String colliderName
[[deprecated("Use field access instead!")]] ::StringW& RootMotion::Demos::HitReactionVRIKTrigger::dyn_colliderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::HitReactionVRIKTrigger::dyn_colliderName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.Demos.HitReactionVRIKTrigger.Update
void RootMotion::Demos::HitReactionVRIKTrigger::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::HitReactionVRIKTrigger::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.HitReactionVRIKTrigger.OnGUI
void RootMotion::Demos::HitReactionVRIKTrigger::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::HitReactionVRIKTrigger::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.VRIKCalibrationController
#include "RootMotion/Demos/VRIKCalibrationController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& RootMotion::Demos::VRIKCalibrationController::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIKCalibrator/Settings settings
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIKCalibrator::Settings*& RootMotion::Demos::VRIKCalibrationController::dyn_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "settings"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIKCalibrator::Settings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform headTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_headTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_headTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform bodyTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_bodyTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_bodyTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHandTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_leftHandTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_leftHandTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHandTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_rightHandTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_rightHandTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftFootTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_leftFootTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_leftFootTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftFootTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightFootTracker
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& RootMotion::Demos::VRIKCalibrationController::dyn_rightFootTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::dyn_rightFootTracker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightFootTracker"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.Demos.VRIKCalibrationController.LateUpdate
void RootMotion::Demos::VRIKCalibrationController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.VRIKCalibrationController.Calibrate
void RootMotion::Demos::VRIKCalibrationController::Calibrate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKCalibrationController::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.Demos.VRIKPlatform
#include "RootMotion/Demos/VRIKPlatform.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public RootMotion.FinalIK.VRIK ik
[[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& RootMotion::Demos::VRIKPlatform::dyn_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::dyn_ik");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ik"))->offset;
  return *reinterpret_cast<::RootMotion::FinalIK::VRIK**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& RootMotion::Demos::VRIKPlatform::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& RootMotion::Demos::VRIKPlatform::dyn_lastRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::dyn_lastRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RootMotion.Demos.VRIKPlatform.Start
void RootMotion::Demos::VRIKPlatform::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.Demos.VRIKPlatform.Update
void RootMotion::Demos::VRIKPlatform::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::Demos::VRIKPlatform::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.LoopMode
#include "HighlightingSystem/LoopMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.LoopMode Once
::HighlightingSystem::LoopMode HighlightingSystem::LoopMode::_get_Once() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_get_Once");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::LoopMode>("HighlightingSystem", "LoopMode", "Once"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.LoopMode Once
void HighlightingSystem::LoopMode::_set_Once(::HighlightingSystem::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_set_Once");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "LoopMode", "Once", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.LoopMode Loop
::HighlightingSystem::LoopMode HighlightingSystem::LoopMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::LoopMode>("HighlightingSystem", "LoopMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.LoopMode Loop
void HighlightingSystem::LoopMode::_set_Loop(::HighlightingSystem::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "LoopMode", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.LoopMode PingPong
::HighlightingSystem::LoopMode HighlightingSystem::LoopMode::_get_PingPong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_get_PingPong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::LoopMode>("HighlightingSystem", "LoopMode", "PingPong"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.LoopMode PingPong
void HighlightingSystem::LoopMode::_set_PingPong(::HighlightingSystem::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_set_PingPong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "LoopMode", "PingPong", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.LoopMode ClampForever
::HighlightingSystem::LoopMode HighlightingSystem::LoopMode::_get_ClampForever() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_get_ClampForever");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::LoopMode>("HighlightingSystem", "LoopMode", "ClampForever"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.LoopMode ClampForever
void HighlightingSystem::LoopMode::_set_ClampForever(::HighlightingSystem::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::_set_ClampForever");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "LoopMode", "ClampForever", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::LoopMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::LoopMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.Easing
#include "HighlightingSystem/Easing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing Linear
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing Linear
void HighlightingSystem::Easing::_set_Linear(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing QuadIn
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_QuadIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_QuadIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "QuadIn"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing QuadIn
void HighlightingSystem::Easing::_set_QuadIn(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_QuadIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "QuadIn", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing QuadOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_QuadOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_QuadOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "QuadOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing QuadOut
void HighlightingSystem::Easing::_set_QuadOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_QuadOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "QuadOut", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing QuadInOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_QuadInOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_QuadInOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "QuadInOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing QuadInOut
void HighlightingSystem::Easing::_set_QuadInOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_QuadInOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "QuadInOut", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing CubicIn
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_CubicIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_CubicIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "CubicIn"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing CubicIn
void HighlightingSystem::Easing::_set_CubicIn(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_CubicIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "CubicIn", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing CubicOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_CubicOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_CubicOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "CubicOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing CubicOut
void HighlightingSystem::Easing::_set_CubicOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_CubicOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "CubicOut", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing CubicInOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_CubicInOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_CubicInOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "CubicInOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing CubicInOut
void HighlightingSystem::Easing::_set_CubicInOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_CubicInOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "CubicInOut", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing SineIn
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_SineIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_SineIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "SineIn"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing SineIn
void HighlightingSystem::Easing::_set_SineIn(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_SineIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "SineIn", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing SineOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_SineOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_SineOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "SineOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing SineOut
void HighlightingSystem::Easing::_set_SineOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_SineOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "SineOut", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.Easing SineInOut
::HighlightingSystem::Easing HighlightingSystem::Easing::_get_SineInOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_get_SineInOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::Easing>("HighlightingSystem", "Easing", "SineInOut"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.Easing SineInOut
void HighlightingSystem::Easing::_set_SineInOut(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::_set_SineInOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Easing", "SineInOut", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::Easing::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Easing::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.RendererFilterMode
#include "HighlightingSystem/RendererFilterMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.RendererFilterMode None
::HighlightingSystem::RendererFilterMode HighlightingSystem::RendererFilterMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::RendererFilterMode>("HighlightingSystem", "RendererFilterMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.RendererFilterMode None
void HighlightingSystem::RendererFilterMode::_set_None(::HighlightingSystem::RendererFilterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "RendererFilterMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.RendererFilterMode Include
::HighlightingSystem::RendererFilterMode HighlightingSystem::RendererFilterMode::_get_Include() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_get_Include");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::RendererFilterMode>("HighlightingSystem", "RendererFilterMode", "Include"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.RendererFilterMode Include
void HighlightingSystem::RendererFilterMode::_set_Include(::HighlightingSystem::RendererFilterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_set_Include");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "RendererFilterMode", "Include", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.RendererFilterMode Exclude
::HighlightingSystem::RendererFilterMode HighlightingSystem::RendererFilterMode::_get_Exclude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_get_Exclude");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::RendererFilterMode>("HighlightingSystem", "RendererFilterMode", "Exclude"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.RendererFilterMode Exclude
void HighlightingSystem::RendererFilterMode::_set_Exclude(::HighlightingSystem::RendererFilterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::_set_Exclude");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "RendererFilterMode", "Exclude", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::RendererFilterMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::RendererFilterMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.Highlighter
#include "HighlightingSystem/Highlighter.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: HighlightingSystem.HighlighterCore/RendererFilter
#include "HighlightingSystem/HighlighterCore_RendererFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected System.Single HALFPI
float HighlightingSystem::Highlighter::_get_HALFPI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::_get_HALFPI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HighlightingSystem", "Highlighter", "HALFPI"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single HALFPI
void HighlightingSystem::Highlighter::_set_HALFPI(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::_set_HALFPI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "Highlighter", "HALFPI", value));
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _overlay
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__overlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overlay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _occluder
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__occluder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__occluder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_occluder"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Color _hoverColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HighlightingSystem::Highlighter::dyn__hoverColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__hoverColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _hoverFrame
[[deprecated("Use field access instead!")]] int& HighlightingSystem::Highlighter::dyn__hoverFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__hoverFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoverFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _tween
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__tween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tween"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Gradient _tweenGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& HighlightingSystem::Highlighter::dyn__tweenGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _tweenDuration
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__tweenDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _tweenReverse
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__tweenReverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenReverse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenReverse"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.LoopMode _tweenLoop
[[deprecated("Use field access instead!")]] ::HighlightingSystem::LoopMode& HighlightingSystem::Highlighter::dyn__tweenLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenLoop"))->offset;
  return *reinterpret_cast<::HighlightingSystem::LoopMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.Easing _tweenEasing
[[deprecated("Use field access instead!")]] ::HighlightingSystem::Easing& HighlightingSystem::Highlighter::dyn__tweenEasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenEasing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenEasing"))->offset;
  return *reinterpret_cast<::HighlightingSystem::Easing*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _tweenDelay
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__tweenDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _tweenRepeatCount
[[deprecated("Use field access instead!")]] int& HighlightingSystem::Highlighter::dyn__tweenRepeatCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenRepeatCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenRepeatCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _tweenUseUnscaledTime
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__tweenUseUnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenUseUnscaledTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenUseUnscaledTime"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _constant
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__constant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constant");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constant"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Color _constantColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HighlightingSystem::Highlighter::dyn__constantColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _constantFadeInTime
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__constantFadeInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantFadeInTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantFadeInTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _constantFadeOutTime
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__constantFadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantFadeOutTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantFadeOutTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.Easing _constantEasing
[[deprecated("Use field access instead!")]] ::HighlightingSystem::Easing& HighlightingSystem::Highlighter::dyn__constantEasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantEasing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantEasing"))->offset;
  return *reinterpret_cast<::HighlightingSystem::Easing*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _constantUseUnscaledTime
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__constantUseUnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantUseUnscaledTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantUseUnscaledTime"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.RendererFilterMode _filterMode
[[deprecated("Use field access instead!")]] ::HighlightingSystem::RendererFilterMode& HighlightingSystem::Highlighter::dyn__filterMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__filterMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_filterMode"))->offset;
  return *reinterpret_cast<::HighlightingSystem::RendererFilterMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<UnityEngine.Transform> _filterList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& HighlightingSystem::Highlighter::dyn__filterList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__filterList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_filterList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _tweenEnabled
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__tweenEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _tweenStart
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__tweenStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__tweenStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tweenStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _constantEnabled
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::Highlighter::dyn__constantEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _constantStart
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__constantStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _constantDuration
[[deprecated("Use field access instead!")]] float& HighlightingSystem::Highlighter::dyn__constantDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn__constantDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_constantDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GradientColorKey[] flashingColorKeys
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GradientColorKey>& HighlightingSystem::Highlighter::dyn_flashingColorKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn_flashingColorKeys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashingColorKeys"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GradientColorKey>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GradientAlphaKey[] flashingAlphaKeys
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GradientAlphaKey>& HighlightingSystem::Highlighter::dyn_flashingAlphaKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::dyn_flashingAlphaKeys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashingAlphaKeys"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GradientAlphaKey>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_overlay
bool HighlightingSystem::Highlighter::get_overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_overlay
void HighlightingSystem::Highlighter::set_overlay(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_occluder
bool HighlightingSystem::Highlighter::get_occluder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_occluder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_occluder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_occluder
void HighlightingSystem::Highlighter::set_occluder(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_occluder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_occluder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tween
bool HighlightingSystem::Highlighter::get_tween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tween
void HighlightingSystem::Highlighter::set_tween(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenGradient
::UnityEngine::Gradient* HighlightingSystem::Highlighter::get_tweenGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Gradient*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenGradient
void HighlightingSystem::Highlighter::set_tweenGradient(::UnityEngine::Gradient* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenDuration
float HighlightingSystem::Highlighter::get_tweenDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenDuration
void HighlightingSystem::Highlighter::set_tweenDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenDelay
float HighlightingSystem::Highlighter::get_tweenDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenDelay
void HighlightingSystem::Highlighter::set_tweenDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenUseUnscaledTime
bool HighlightingSystem::Highlighter::get_tweenUseUnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenUseUnscaledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenUseUnscaledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenUseUnscaledTime
void HighlightingSystem::Highlighter::set_tweenUseUnscaledTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenUseUnscaledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenUseUnscaledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenLoop
::HighlightingSystem::LoopMode HighlightingSystem::Highlighter::get_tweenLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenLoop
void HighlightingSystem::Highlighter::set_tweenLoop(::HighlightingSystem::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenEasing
::HighlightingSystem::Easing HighlightingSystem::Highlighter::get_tweenEasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenEasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenEasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::Easing, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenEasing
void HighlightingSystem::Highlighter::set_tweenEasing(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenEasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenEasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenReverse
bool HighlightingSystem::Highlighter::get_tweenReverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenReverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenReverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenReverse
void HighlightingSystem::Highlighter::set_tweenReverse(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenReverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenReverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_tweenRepeatCount
int HighlightingSystem::Highlighter::get_tweenRepeatCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_tweenRepeatCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweenRepeatCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_tweenRepeatCount
void HighlightingSystem::Highlighter::set_tweenRepeatCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_tweenRepeatCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tweenRepeatCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constant
bool HighlightingSystem::Highlighter::get_constant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constant
void HighlightingSystem::Highlighter::set_constant(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantColor
::UnityEngine::Color HighlightingSystem::Highlighter::get_constantColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantColor
void HighlightingSystem::Highlighter::set_constantColor(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantFadeTime
void HighlightingSystem::Highlighter::set_constantFadeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantFadeTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantFadeTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantFadeInTime
float HighlightingSystem::Highlighter::get_constantFadeInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantFadeInTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantFadeInTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantFadeInTime
void HighlightingSystem::Highlighter::set_constantFadeInTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantFadeInTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantFadeInTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantFadeOutTime
float HighlightingSystem::Highlighter::get_constantFadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantFadeOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantFadeOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantFadeOutTime
void HighlightingSystem::Highlighter::set_constantFadeOutTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantFadeOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantFadeOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantUseUnscaledTime
bool HighlightingSystem::Highlighter::get_constantUseUnscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantUseUnscaledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantUseUnscaledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantUseUnscaledTime
void HighlightingSystem::Highlighter::set_constantUseUnscaledTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantUseUnscaledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantUseUnscaledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantEasing
::HighlightingSystem::Easing HighlightingSystem::Highlighter::get_constantEasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantEasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantEasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::Easing, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_constantEasing
void HighlightingSystem::Highlighter::set_constantEasing(::HighlightingSystem::Easing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_constantEasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_constantEasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_filterMode
::HighlightingSystem::RendererFilterMode HighlightingSystem::Highlighter::get_filterMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_filterMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::RendererFilterMode, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_filterMode
void HighlightingSystem::Highlighter::set_filterMode(::HighlightingSystem::RendererFilterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_filterMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_filterList
::System::Collections::Generic::List_1<::UnityEngine::Transform*>* HighlightingSystem::Highlighter::get_filterList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_filterList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_hover
bool HighlightingSystem::Highlighter::get_hover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_hover");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hover", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.set_hover
void HighlightingSystem::Highlighter::set_hover(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::set_hover");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hover", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_constantValue
float HighlightingSystem::Highlighter::get_constantValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_constantValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_constantValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.OnDidApplyAnimationProperties
void HighlightingSystem::Highlighter::OnDidApplyAnimationProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::OnDidApplyAnimationProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::Highlighter*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ValidateAll
void HighlightingSystem::Highlighter::ValidateAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ValidateAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ValidateRanges
void HighlightingSystem::Highlighter::ValidateRanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ValidateRanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateRanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.Hover
void HighlightingSystem::Highlighter::Hover(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::Hover");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hover", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOn
void HighlightingSystem::Highlighter::ConstantOn(float fadeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeTime);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOn
void HighlightingSystem::Highlighter::ConstantOn(::UnityEngine::Color color, float fadeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(fadeTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, fadeTime);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOff
void HighlightingSystem::Highlighter::ConstantOff(float fadeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeTime);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantSwitch
void HighlightingSystem::Highlighter::ConstantSwitch(float fadeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantSwitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantSwitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeTime);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOnImmediate
void HighlightingSystem::Highlighter::ConstantOnImmediate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOnImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOnImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOnImmediate
void HighlightingSystem::Highlighter::ConstantOnImmediate(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOnImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOnImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantOffImmediate
void HighlightingSystem::Highlighter::ConstantOffImmediate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantOffImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantOffImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantSwitchImmediate
void HighlightingSystem::Highlighter::ConstantSwitchImmediate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantSwitchImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantSwitchImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.Off
void HighlightingSystem::Highlighter::Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::Off");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Off", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.TweenStart
void HighlightingSystem::Highlighter::TweenStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TweenStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TweenStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.TweenStop
void HighlightingSystem::Highlighter::TweenStop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TweenStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TweenStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.TweenSet
void HighlightingSystem::Highlighter::TweenSet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TweenSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TweenSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantSet
void HighlightingSystem::Highlighter::ConstantSet(float fadeTime, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeTime), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fadeTime, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.TweenSet
void HighlightingSystem::Highlighter::TweenSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TweenSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TweenSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantSet
void HighlightingSystem::Highlighter::ConstantSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantSet
void HighlightingSystem::Highlighter::ConstantSet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.TransformFilterInclude
bool HighlightingSystem::Highlighter::TransformFilterInclude(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TransformFilterInclude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformFilterInclude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(submeshIndices)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, renderer, submeshIndices);
}
// Autogenerated method: HighlightingSystem.Highlighter.TransformFilterExclude
bool HighlightingSystem::Highlighter::TransformFilterExclude(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::TransformFilterExclude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformFilterExclude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(submeshIndices)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, renderer, submeshIndices);
}
// Autogenerated method: HighlightingSystem.Highlighter.Loop
float HighlightingSystem::Highlighter::Loop(float x, ::HighlightingSystem::LoopMode loop, bool reverse, int repeatCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::Loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(loop), ::il2cpp_utils::ExtractType(reverse), ::il2cpp_utils::ExtractType(repeatCount)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, x, loop, reverse, repeatCount);
}
// Autogenerated method: HighlightingSystem.Highlighter.Ease
float HighlightingSystem::Highlighter::Ease(float x, ::HighlightingSystem::Easing easing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::Ease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Ease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(easing)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, x, easing);
}
// Autogenerated method: HighlightingSystem.Highlighter.GetTweenTime
float HighlightingSystem::Highlighter::GetTweenTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::GetTweenTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTweenTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.GetConstantTime
float HighlightingSystem::Highlighter::GetConstantTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::GetConstantTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstantTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.HSVToRGB
::UnityEngine::Color HighlightingSystem::Highlighter::HSVToRGB(float hue, float saturation, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::HSVToRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "Highlighter", "HSVToRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hue), ::il2cpp_utils::ExtractType(saturation), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hue, saturation, value);
}
// Autogenerated method: HighlightingSystem.Highlighter.On
void HighlightingSystem::Highlighter::On() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::On");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "On", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.On
void HighlightingSystem::Highlighter::On(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::On");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "On", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: HighlightingSystem.Highlighter.OnParams
void HighlightingSystem::Highlighter::OnParams(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::OnParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: HighlightingSystem.Highlighter.ConstantParams
void HighlightingSystem::Highlighter::ConstantParams(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::ConstantParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstantParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingParams
void HighlightingSystem::Highlighter::FlashingParams(::UnityEngine::Color color1, ::UnityEngine::Color color2, float freq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(color2), ::il2cpp_utils::ExtractType(freq)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color1, color2, freq);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingOn
void HighlightingSystem::Highlighter::FlashingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingOn
void HighlightingSystem::Highlighter::FlashingOn(::UnityEngine::Color color1, ::UnityEngine::Color color2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(color2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color1, color2);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingOn
void HighlightingSystem::Highlighter::FlashingOn(::UnityEngine::Color color1, ::UnityEngine::Color color2, float freq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(color2), ::il2cpp_utils::ExtractType(freq)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color1, color2, freq);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingOn
void HighlightingSystem::Highlighter::FlashingOn(float freq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(freq)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, freq);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingOff
void HighlightingSystem::Highlighter::FlashingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingOff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingOff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.FlashingSwitch
void HighlightingSystem::Highlighter::FlashingSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::FlashingSwitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlashingSwitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.get_rendererFilterToUse
::HighlightingSystem::HighlighterCore::RendererFilter* HighlightingSystem::Highlighter::get_rendererFilterToUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::get_rendererFilterToUse");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlighterCore::RendererFilter*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.OnEnableSafe
void HighlightingSystem::Highlighter::OnEnableSafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::OnEnableSafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.OnDisableSafe
void HighlightingSystem::Highlighter::OnDisableSafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::OnDisableSafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.Highlighter.UpdateHighlighting
void HighlightingSystem::Highlighter::UpdateHighlighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::Highlighter::UpdateHighlighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlighterBlocker
#include "HighlightingSystem/HighlighterBlocker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlightingBlitter
#include "HighlightingSystem/HighlightingBlitter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HighlightingSystem.HighlightingBase
#include "HighlightingSystem/HighlightingBase.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<HighlightingSystem.HighlightingBase> renderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>*& HighlightingSystem::HighlightingBlitter::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBlitter::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingBase*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlightingBlitter.OnRenderImage
void HighlightingSystem::HighlightingBlitter::OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBlitter::OnRenderImage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBlitter*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dst);
}
// Autogenerated method: HighlightingSystem.HighlightingBlitter.Register
void HighlightingSystem::HighlightingBlitter::Register(::HighlightingSystem::HighlightingBase* renderer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBlitter::Register");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBlitter*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderer);
}
// Autogenerated method: HighlightingSystem.HighlightingBlitter.Unregister
void HighlightingSystem::HighlightingBlitter::Unregister(::HighlightingSystem::HighlightingBase* renderer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBlitter::Unregister");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBlitter*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlightingRenderer
#include "HighlightingSystem/HighlightingRenderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> defaultPresets
::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>* HighlightingSystem::HighlightingRenderer::_get_defaultPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::_get_defaultPresets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>*>("HighlightingSystem", "HighlightingRenderer", "defaultPresets"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> defaultPresets
void HighlightingSystem::HighlightingRenderer::_set_defaultPresets(::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::_set_defaultPresets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingRenderer", "defaultPresets", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HighlightingSystem.HighlightingPreset> _presets
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>*& HighlightingSystem::HighlightingRenderer::dyn__presets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::dyn__presets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_presets"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HighlightingSystem::HighlightingPreset>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlightingPreset> _presetsReadonly
[[deprecated("Use field access instead!")]] ::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>*& HighlightingSystem::HighlightingRenderer::dyn__presetsReadonly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::dyn__presetsReadonly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_presetsReadonly"))->offset;
  return *reinterpret_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.get_presets
::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>* HighlightingSystem::HighlightingRenderer::get_presets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::get_presets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_presets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlightingPreset>*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.GetPreset
bool HighlightingSystem::HighlightingRenderer::GetPreset(::StringW name, ByRef<::HighlightingSystem::HighlightingPreset> preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::GetPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::HighlightingSystem::HighlightingPreset&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name, byref(preset));
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.AddPreset
bool HighlightingSystem::HighlightingRenderer::AddPreset(::HighlightingSystem::HighlightingPreset preset, bool overwrite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::AddPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset), ::il2cpp_utils::ExtractType(overwrite)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, preset, overwrite);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.RemovePreset
bool HighlightingSystem::HighlightingRenderer::RemovePreset(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::RemovePreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.LoadPreset
bool HighlightingSystem::HighlightingRenderer::LoadPreset(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::LoadPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.ApplyPreset
void HighlightingSystem::HighlightingRenderer::ApplyPreset(::HighlightingSystem::HighlightingPreset preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::ApplyPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, preset);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer.ClearPresets
void HighlightingSystem::HighlightingRenderer::ClearPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::ClearPresets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPresets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingRenderer..cctor
void HighlightingSystem::HighlightingRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlightingRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.EndOfFrame
#include "HighlightingSystem/EndOfFrame.hpp"
// Including type: HighlightingSystem.EndOfFrame/OnEndOfFrame
#include "HighlightingSystem/EndOfFrame_OnEndOfFrame.hpp"
// Including type: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11
#include "HighlightingSystem/EndOfFrame_-EndOfFrameRoutine-d__11.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private HighlightingSystem.EndOfFrame _singleton
::HighlightingSystem::EndOfFrame* HighlightingSystem::EndOfFrame::_get__singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::_get__singleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::EndOfFrame*>("HighlightingSystem", "EndOfFrame", "_singleton"));
}
// Autogenerated static field setter
// Set static field: static private HighlightingSystem.EndOfFrame _singleton
void HighlightingSystem::EndOfFrame::_set__singleton(::HighlightingSystem::EndOfFrame* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::_set__singleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "EndOfFrame", "_singleton", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.WaitForEndOfFrame waitForEndOfFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::WaitForEndOfFrame*& HighlightingSystem::EndOfFrame::dyn_waitForEndOfFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::dyn_waitForEndOfFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitForEndOfFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::WaitForEndOfFrame**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine coroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& HighlightingSystem::EndOfFrame::dyn_coroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::dyn_coroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "coroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HighlightingSystem.EndOfFrame/OnEndOfFrame> listeners
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::EndOfFrame::OnEndOfFrame*>*& HighlightingSystem::EndOfFrame::dyn_listeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::dyn_listeners");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "listeners"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HighlightingSystem::EndOfFrame::OnEndOfFrame*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.get_singleton
::HighlightingSystem::EndOfFrame* HighlightingSystem::EndOfFrame::get_singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::get_singleton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "EndOfFrame", "get_singleton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::EndOfFrame*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.OnEnable
void HighlightingSystem::EndOfFrame::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.OnDisable
void HighlightingSystem::EndOfFrame::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.AddListener
void HighlightingSystem::EndOfFrame::AddListener(::HighlightingSystem::EndOfFrame::OnEndOfFrame* listener) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::AddListener");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "EndOfFrame", "AddListener", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, listener);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.RemoveListener
void HighlightingSystem::EndOfFrame::RemoveListener(::HighlightingSystem::EndOfFrame::OnEndOfFrame* listener) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::RemoveListener");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "EndOfFrame", "RemoveListener", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, listener);
}
// Autogenerated method: HighlightingSystem.EndOfFrame.EndOfFrameRoutine
::System::Collections::IEnumerator* HighlightingSystem::EndOfFrame::EndOfFrameRoutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::EndOfFrameRoutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndOfFrameRoutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HighlightingSystem.EndOfFrame/OnEndOfFrame
#include "HighlightingSystem/EndOfFrame_OnEndOfFrame.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HighlightingSystem.EndOfFrame/OnEndOfFrame.Invoke
void HighlightingSystem::EndOfFrame::OnEndOfFrame::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::OnEndOfFrame::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::OnEndOfFrame*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/OnEndOfFrame.BeginInvoke
::System::IAsyncResult* HighlightingSystem::EndOfFrame::OnEndOfFrame::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::OnEndOfFrame::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::OnEndOfFrame*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/OnEndOfFrame.EndInvoke
void HighlightingSystem::EndOfFrame::OnEndOfFrame::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::OnEndOfFrame::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::OnEndOfFrame*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11
#include "HighlightingSystem/EndOfFrame_-EndOfFrameRoutine-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HighlightingSystem.EndOfFrame <>4__this
[[deprecated("Use field access instead!")]] ::HighlightingSystem::EndOfFrame*& HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::HighlightingSystem::EndOfFrame**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11.System.IDisposable.Dispose
void HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11.MoveNext
bool HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11.System.Collections.IEnumerator.Reset
void HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.EndOfFrame/<EndOfFrameRoutine>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::EndOfFrame::$EndOfFrameRoutine$d__11*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlighterMode
#include "HighlightingSystem/HighlighterMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.HighlighterMode Disabled
::HighlightingSystem::HighlighterMode HighlightingSystem::HighlighterMode::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::HighlighterMode>("HighlightingSystem", "HighlighterMode", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.HighlighterMode Disabled
void HighlightingSystem::HighlighterMode::_set_Disabled(::HighlightingSystem::HighlighterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterMode", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.HighlighterMode Default
::HighlightingSystem::HighlighterMode HighlightingSystem::HighlighterMode::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::HighlighterMode>("HighlightingSystem", "HighlighterMode", "Default"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.HighlighterMode Default
void HighlightingSystem::HighlighterMode::_set_Default(::HighlightingSystem::HighlighterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterMode", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.HighlighterMode Overlay
::HighlightingSystem::HighlighterMode HighlightingSystem::HighlighterMode::_get_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_get_Overlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::HighlighterMode>("HighlightingSystem", "HighlighterMode", "Overlay"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.HighlighterMode Overlay
void HighlightingSystem::HighlighterMode::_set_Overlay(::HighlightingSystem::HighlighterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_set_Overlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterMode", "Overlay", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.HighlighterMode Occluder
::HighlightingSystem::HighlighterMode HighlightingSystem::HighlighterMode::_get_Occluder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_get_Occluder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::HighlighterMode>("HighlightingSystem", "HighlighterMode", "Occluder"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.HighlighterMode Occluder
void HighlightingSystem::HighlighterMode::_set_Occluder(::HighlightingSystem::HighlighterMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::_set_Occluder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterMode", "Occluder", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::HighlighterMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlighterCore
#include "HighlightingSystem/HighlighterCore.hpp"
// Including type: HighlightingSystem.HighlighterCore/RendererData
#include "HighlightingSystem/HighlighterCore_RendererData.hpp"
// Including type: HighlightingSystem.HighlighterCore/RendererFilter
#include "HighlightingSystem/HighlighterCore_RendererFilter.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HighlightingSystem.HighlighterRenderer
#include "HighlightingSystem/HighlighterRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String keywordOverlay
::StringW HighlightingSystem::HighlighterCore::_get_keywordOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_keywordOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterCore", "keywordOverlay"));
}
// Autogenerated static field setter
// Set static field: static public System.String keywordOverlay
void HighlightingSystem::HighlighterCore::_set_keywordOverlay(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_keywordOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "keywordOverlay", value));
}
// Autogenerated static field getter
// Get static field: static private readonly HighlightingSystem.HighlighterMode[] renderingOrder
::ArrayW<::HighlightingSystem::HighlighterMode> HighlightingSystem::HighlighterCore::_get_renderingOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_renderingOrder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::HighlightingSystem::HighlighterMode>>("HighlightingSystem", "HighlighterCore", "renderingOrder"));
}
// Autogenerated static field setter
// Set static field: static private readonly HighlightingSystem.HighlighterMode[] renderingOrder
void HighlightingSystem::HighlighterCore::_set_renderingOrder(::ArrayW<::HighlightingSystem::HighlighterMode> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_renderingOrder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "renderingOrder", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 poolChunkSize
int HighlightingSystem::HighlighterCore::_get_poolChunkSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_poolChunkSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "HighlighterCore", "poolChunkSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 poolChunkSize
void HighlightingSystem::HighlighterCore::_set_poolChunkSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_poolChunkSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "poolChunkSize", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Renderer> sRenderers
::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* HighlightingSystem::HighlighterCore::_get_sRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sRenderers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*>("HighlightingSystem", "HighlighterCore", "sRenderers"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Renderer> sRenderers
void HighlightingSystem::HighlighterCore::_set_sRenderers(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sRenderers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sRenderers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Stack`1<HighlightingSystem.HighlighterCore/RendererData> sRendererDataPool
::System::Collections::Generic::Stack_1<::HighlightingSystem::HighlighterCore::RendererData*>* HighlightingSystem::HighlighterCore::_get_sRendererDataPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sRendererDataPool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Stack_1<::HighlightingSystem::HighlighterCore::RendererData*>*>("HighlightingSystem", "HighlighterCore", "sRendererDataPool"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Stack`1<HighlightingSystem.HighlighterCore/RendererData> sRendererDataPool
void HighlightingSystem::HighlighterCore::_set_sRendererDataPool(::System::Collections::Generic::Stack_1<::HighlightingSystem::HighlighterCore::RendererData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sRendererDataPool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sRendererDataPool", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore/RendererData> sRendererData
::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore::RendererData*>* HighlightingSystem::HighlighterCore::_get_sRendererData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sRendererData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore::RendererData*>*>("HighlightingSystem", "HighlighterCore", "sRendererData"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore/RendererData> sRendererData
void HighlightingSystem::HighlighterCore::_set_sRendererData(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore::RendererData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sRendererData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sRendererData", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<System.Int32> sSubmeshIndices
::System::Collections::Generic::List_1<int>* HighlightingSystem::HighlighterCore::_get_sSubmeshIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sSubmeshIndices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<int>*>("HighlightingSystem", "HighlighterCore", "sSubmeshIndices"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<System.Int32> sSubmeshIndices
void HighlightingSystem::HighlighterCore::_set_sSubmeshIndices(::System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sSubmeshIndices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sSubmeshIndices", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore> sHighlighters
::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore*>* HighlightingSystem::HighlighterCore::_get_sHighlighters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sHighlighters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore*>*>("HighlightingSystem", "HighlighterCore", "sHighlighters"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<HighlightingSystem.HighlighterCore> sHighlighters
void HighlightingSystem::HighlighterCore::_set_sHighlighters(::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterCore*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sHighlighters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sHighlighters", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlighterCore> sHighlightersReadonly
::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* HighlightingSystem::HighlighterCore::_get_sHighlightersReadonly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get_sHighlightersReadonly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>*>("HighlightingSystem", "HighlighterCore", "sHighlightersReadonly"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<HighlightingSystem.HighlighterCore> sHighlightersReadonly
void HighlightingSystem::HighlighterCore::_set_sHighlightersReadonly(::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set_sHighlightersReadonly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "sHighlightersReadonly", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Shader _opaqueShader
::UnityEngine::Shader* HighlightingSystem::HighlighterCore::_get__opaqueShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get__opaqueShader");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Shader*>("HighlightingSystem", "HighlighterCore", "_opaqueShader"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Shader _opaqueShader
void HighlightingSystem::HighlighterCore::_set__opaqueShader(::UnityEngine::Shader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set__opaqueShader");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "_opaqueShader", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Shader _transparentShader
::UnityEngine::Shader* HighlightingSystem::HighlighterCore::_get__transparentShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get__transparentShader");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Shader*>("HighlightingSystem", "HighlighterCore", "_transparentShader"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Shader _transparentShader
void HighlightingSystem::HighlighterCore::_set__transparentShader(::UnityEngine::Shader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set__transparentShader");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "_transparentShader", value));
}
// Autogenerated static field getter
// Get static field: static private HighlightingSystem.HighlighterCore/RendererFilter _globalRendererFilter
::HighlightingSystem::HighlighterCore::RendererFilter* HighlightingSystem::HighlighterCore::_get__globalRendererFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_get__globalRendererFilter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::HighlighterCore::RendererFilter*>("HighlightingSystem", "HighlighterCore", "_globalRendererFilter"));
}
// Autogenerated static field setter
// Set static field: static private HighlightingSystem.HighlighterCore/RendererFilter _globalRendererFilter
void HighlightingSystem::HighlighterCore::_set__globalRendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::_set__globalRendererFilter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterCore", "_globalRendererFilter", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Color occluderColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HighlightingSystem::HighlighterCore::dyn_occluderColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_occluderColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "occluderColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HighlightingSystem.HighlighterMode mode
[[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlighterMode& HighlightingSystem::HighlighterCore::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::HighlightingSystem::HighlighterMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forceRender
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::HighlighterCore::dyn_forceRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_forceRender");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forceRender"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HighlightingSystem::HighlighterCore::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform tr
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& HighlightingSystem::HighlighterCore::dyn_tr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_tr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tr"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer> highlightableRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer*>*& HighlightingSystem::HighlighterCore::dyn_highlightableRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_highlightableRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlightableRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isDirty
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::HighlighterCore::dyn_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_isDirty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isDirty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean cachedOverlay
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::HighlighterCore::dyn_cachedOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_cachedOverlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedOverlay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color cachedColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& HighlightingSystem::HighlighterCore::dyn_cachedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn_cachedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _opaqueMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& HighlightingSystem::HighlighterCore::dyn__opaqueMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn__opaqueMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_opaqueMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HighlightingSystem.HighlighterCore/RendererFilter _rendererFilter
[[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlighterCore::RendererFilter*& HighlightingSystem::HighlighterCore::dyn__rendererFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::dyn__rendererFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rendererFilter"))->offset;
  return *reinterpret_cast<::HighlightingSystem::HighlighterCore::RendererFilter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_highlighters
::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>* HighlightingSystem::HighlighterCore::get_highlighters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_highlighters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "get_highlighters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::HighlightingSystem::HighlighterCore*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_opaqueShader
::UnityEngine::Shader* HighlightingSystem::HighlighterCore::get_opaqueShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_opaqueShader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "get_opaqueShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Shader*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_transparentShader
::UnityEngine::Shader* HighlightingSystem::HighlighterCore::get_transparentShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_transparentShader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "get_transparentShader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Shader*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_opaqueMaterial
::UnityEngine::Material* HighlightingSystem::HighlighterCore::get_opaqueMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_opaqueMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_opaqueMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_globalRendererFilter
::HighlightingSystem::HighlighterCore::RendererFilter* HighlightingSystem::HighlighterCore::get_globalRendererFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_globalRendererFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "get_globalRendererFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlighterCore::RendererFilter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.set_globalRendererFilter
void HighlightingSystem::HighlighterCore::set_globalRendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::set_globalRendererFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "set_globalRendererFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_rendererFilter
::HighlightingSystem::HighlighterCore::RendererFilter* HighlightingSystem::HighlighterCore::get_rendererFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_rendererFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rendererFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlighterCore::RendererFilter*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.set_rendererFilter
void HighlightingSystem::HighlighterCore::set_rendererFilter(::HighlightingSystem::HighlighterCore::RendererFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::set_rendererFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rendererFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.get_rendererFilterToUse
::HighlightingSystem::HighlighterCore::RendererFilter* HighlightingSystem::HighlighterCore::get_rendererFilterToUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::get_rendererFilterToUse");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlighterCore::RendererFilter*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.DefaultRendererFilter
bool HighlightingSystem::HighlighterCore::DefaultRendererFilter(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::DefaultRendererFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "DefaultRendererFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer), ::il2cpp_utils::ExtractType(submeshIndices)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, renderer, submeshIndices);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.Awake
void HighlightingSystem::HighlighterCore::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnEnable
void HighlightingSystem::HighlighterCore::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnDisable
void HighlightingSystem::HighlighterCore::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnDestroy
void HighlightingSystem::HighlighterCore::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.AwakeSafe
void HighlightingSystem::HighlighterCore::AwakeSafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::AwakeSafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnEnableSafe
void HighlightingSystem::HighlighterCore::OnEnableSafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnEnableSafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnDisableSafe
void HighlightingSystem::HighlighterCore::OnDisableSafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnDisableSafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.OnDestroySafe
void HighlightingSystem::HighlighterCore::OnDestroySafe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::OnDestroySafe");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.SetDirty
void HighlightingSystem::HighlighterCore::SetDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::SetDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.UpdateHighlighting
void HighlightingSystem::HighlighterCore::UpdateHighlighting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::UpdateHighlighting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.ClearRenderers
void HighlightingSystem::HighlighterCore::ClearRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::ClearRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.UpdateRenderers
void HighlightingSystem::HighlighterCore::UpdateRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::UpdateRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.GrabRenderers
void HighlightingSystem::HighlighterCore::GrabRenderers(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::GrabRenderers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabRenderers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.FillBufferInternal
void HighlightingSystem::HighlighterCore::FillBufferInternal(::UnityEngine::Rendering::CommandBuffer* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::FillBufferInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillBufferInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.ExpandRendererDataPool
void HighlightingSystem::HighlighterCore::ExpandRendererDataPool(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::ExpandRendererDataPool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "ExpandRendererDataPool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, count);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.GetRendererDataInstance
::HighlightingSystem::HighlighterCore::RendererData* HighlightingSystem::HighlighterCore::GetRendererDataInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::GetRendererDataInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "GetRendererDataInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlighterCore::RendererData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.ReleaseRendererDataInstance
void HighlightingSystem::HighlighterCore::ReleaseRendererDataInstance(::HighlightingSystem::HighlighterCore::RendererData* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::ReleaseRendererDataInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "ReleaseRendererDataInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, instance);
}
// Autogenerated method: HighlightingSystem.HighlighterCore.FillBuffer
void HighlightingSystem::HighlighterCore::FillBuffer(::UnityEngine::Rendering::CommandBuffer* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::FillBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", "FillBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer);
}
// Autogenerated method: HighlightingSystem.HighlighterCore..cctor
void HighlightingSystem::HighlighterCore::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterCore", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlighterCore/RendererData
#include "HighlightingSystem/HighlighterCore_RendererData.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& HighlightingSystem::HighlighterCore::RendererData::dyn_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::RendererData::dyn_renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> submeshIndices
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& HighlightingSystem::HighlighterCore::RendererData::dyn_submeshIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::RendererData::dyn_submeshIndices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "submeshIndices"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HighlightingSystem.HighlighterCore/RendererFilter
#include "HighlightingSystem/HighlighterCore_RendererFilter.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HighlightingSystem.HighlighterCore/RendererFilter.Invoke
bool HighlightingSystem::HighlighterCore::RendererFilter::Invoke(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::RendererFilter::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore::RendererFilter*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, renderer, submeshIndices);
}
// Autogenerated method: HighlightingSystem.HighlighterCore/RendererFilter.BeginInvoke
::System::IAsyncResult* HighlightingSystem::HighlighterCore::RendererFilter::BeginInvoke(::UnityEngine::Renderer* renderer, ::System::Collections::Generic::List_1<int>* submeshIndices, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::RendererFilter::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore::RendererFilter*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, renderer, submeshIndices, callback, object);
}
// Autogenerated method: HighlightingSystem.HighlighterCore/RendererFilter.EndInvoke
bool HighlightingSystem::HighlighterCore::RendererFilter::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterCore::RendererFilter::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlighterCore::RendererFilter*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlighterRenderer
#include "HighlightingSystem/HighlighterRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single transparentCutoff
float HighlightingSystem::HighlighterRenderer::_get_transparentCutoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_transparentCutoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HighlightingSystem", "HighlighterRenderer", "transparentCutoff"));
}
// Autogenerated static field setter
// Set static field: static private System.Single transparentCutoff
void HighlightingSystem::HighlighterRenderer::_set_transparentCutoff(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_transparentCutoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "transparentCutoff", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.HideFlags flags
::UnityEngine::HideFlags HighlightingSystem::HighlighterRenderer::_get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_flags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::HideFlags>("HighlightingSystem", "HighlighterRenderer", "flags"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.HideFlags flags
void HighlightingSystem::HighlighterRenderer::_set_flags(::UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_flags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "flags", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 cullOff
int HighlightingSystem::HighlighterRenderer::_get_cullOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_cullOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "HighlighterRenderer", "cullOff"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 cullOff
void HighlightingSystem::HighlighterRenderer::_set_cullOff(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_cullOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "cullOff", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String sRenderType
::StringW HighlightingSystem::HighlighterRenderer::_get_sRenderType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_sRenderType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterRenderer", "sRenderType"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String sRenderType
void HighlightingSystem::HighlighterRenderer::_set_sRenderType(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_sRenderType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "sRenderType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String sOpaque
::StringW HighlightingSystem::HighlighterRenderer::_get_sOpaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_sOpaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterRenderer", "sOpaque"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String sOpaque
void HighlightingSystem::HighlighterRenderer::_set_sOpaque(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_sOpaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "sOpaque", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String sTransparent
::StringW HighlightingSystem::HighlighterRenderer::_get_sTransparent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_sTransparent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterRenderer", "sTransparent"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String sTransparent
void HighlightingSystem::HighlighterRenderer::_set_sTransparent(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_sTransparent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "sTransparent", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String sTransparentCutout
::StringW HighlightingSystem::HighlighterRenderer::_get_sTransparentCutout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_sTransparentCutout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterRenderer", "sTransparentCutout"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String sTransparentCutout
void HighlightingSystem::HighlighterRenderer::_set_sTransparentCutout(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_sTransparentCutout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "sTransparentCutout", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String sMainTex
::StringW HighlightingSystem::HighlighterRenderer::_get_sMainTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_get_sMainTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlighterRenderer", "sMainTex"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String sMainTex
void HighlightingSystem::HighlighterRenderer::_set_sMainTex(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::_set_sMainTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlighterRenderer", "sMainTex", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isAlive
[[deprecated("Use field access instead!")]] bool& HighlightingSystem::HighlighterRenderer::dyn_isAlive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::dyn_isAlive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isAlive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer r
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& HighlightingSystem::HighlighterRenderer::dyn_r() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::dyn_r");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "r"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HighlightingSystem.HighlighterRenderer/Data> data
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>*& HighlightingSystem::HighlighterRenderer::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::dyn_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::HighlightingSystem::HighlighterRenderer::Data>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.Awake
void HighlightingSystem::HighlighterRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.OnEnable
void HighlightingSystem::HighlighterRenderer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.OnDisable
void HighlightingSystem::HighlighterRenderer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.OnWillRenderObject
void HighlightingSystem::HighlighterRenderer::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.OnDestroy
void HighlightingSystem::HighlighterRenderer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.Initialize
void HighlightingSystem::HighlighterRenderer::Initialize(::UnityEngine::Material* sharedOpaqueMaterial, ::UnityEngine::Shader* transparentShader, ::System::Collections::Generic::List_1<int>* submeshIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sharedOpaqueMaterial), ::il2cpp_utils::ExtractType(transparentShader), ::il2cpp_utils::ExtractType(submeshIndices)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sharedOpaqueMaterial, transparentShader, submeshIndices);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.SetOverlay
void HighlightingSystem::HighlighterRenderer::SetOverlay(bool overlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::SetOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overlay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, overlay);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.SetColor
void HighlightingSystem::HighlighterRenderer::SetColor(::UnityEngine::Color clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clr);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.FillBuffer
void HighlightingSystem::HighlighterRenderer::FillBuffer(::UnityEngine::Rendering::CommandBuffer* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::FillBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.IsValid
bool HighlightingSystem::HighlighterRenderer::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer.OnEndOfFrame
void HighlightingSystem::HighlighterRenderer::OnEndOfFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::OnEndOfFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEndOfFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlighterRenderer..cctor
void HighlightingSystem::HighlighterRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlighterRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlighterRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.BlurDirections
#include "HighlightingSystem/BlurDirections.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.BlurDirections Diagonal
::HighlightingSystem::BlurDirections HighlightingSystem::BlurDirections::_get_Diagonal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_get_Diagonal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::BlurDirections>("HighlightingSystem", "BlurDirections", "Diagonal"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.BlurDirections Diagonal
void HighlightingSystem::BlurDirections::_set_Diagonal(::HighlightingSystem::BlurDirections value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_set_Diagonal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "BlurDirections", "Diagonal", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.BlurDirections Straight
::HighlightingSystem::BlurDirections HighlightingSystem::BlurDirections::_get_Straight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_get_Straight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::BlurDirections>("HighlightingSystem", "BlurDirections", "Straight"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.BlurDirections Straight
void HighlightingSystem::BlurDirections::_set_Straight(::HighlightingSystem::BlurDirections value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_set_Straight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "BlurDirections", "Straight", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.BlurDirections All
::HighlightingSystem::BlurDirections HighlightingSystem::BlurDirections::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::BlurDirections>("HighlightingSystem", "BlurDirections", "All"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.BlurDirections All
void HighlightingSystem::BlurDirections::_set_All(::HighlightingSystem::BlurDirections value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "BlurDirections", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::BlurDirections::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::BlurDirections::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.AntiAliasing
#include "HighlightingSystem/AntiAliasing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.AntiAliasing QualitySettings
::HighlightingSystem::AntiAliasing HighlightingSystem::AntiAliasing::_get_QualitySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_get_QualitySettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::AntiAliasing>("HighlightingSystem", "AntiAliasing", "QualitySettings"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.AntiAliasing QualitySettings
void HighlightingSystem::AntiAliasing::_set_QualitySettings(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_set_QualitySettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "AntiAliasing", "QualitySettings", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.AntiAliasing Disabled
::HighlightingSystem::AntiAliasing HighlightingSystem::AntiAliasing::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::AntiAliasing>("HighlightingSystem", "AntiAliasing", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.AntiAliasing Disabled
void HighlightingSystem::AntiAliasing::_set_Disabled(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "AntiAliasing", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.AntiAliasing MSAA2x
::HighlightingSystem::AntiAliasing HighlightingSystem::AntiAliasing::_get_MSAA2x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_get_MSAA2x");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::AntiAliasing>("HighlightingSystem", "AntiAliasing", "MSAA2x"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.AntiAliasing MSAA2x
void HighlightingSystem::AntiAliasing::_set_MSAA2x(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_set_MSAA2x");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "AntiAliasing", "MSAA2x", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.AntiAliasing MSAA4x
::HighlightingSystem::AntiAliasing HighlightingSystem::AntiAliasing::_get_MSAA4x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_get_MSAA4x");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::AntiAliasing>("HighlightingSystem", "AntiAliasing", "MSAA4x"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.AntiAliasing MSAA4x
void HighlightingSystem::AntiAliasing::_set_MSAA4x(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_set_MSAA4x");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "AntiAliasing", "MSAA4x", value));
}
// Autogenerated static field getter
// Get static field: static public HighlightingSystem.AntiAliasing MSAA8x
::HighlightingSystem::AntiAliasing HighlightingSystem::AntiAliasing::_get_MSAA8x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_get_MSAA8x");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::HighlightingSystem::AntiAliasing>("HighlightingSystem", "AntiAliasing", "MSAA8x"));
}
// Autogenerated static field setter
// Set static field: static public HighlightingSystem.AntiAliasing MSAA8x
void HighlightingSystem::AntiAliasing::_set_MSAA8x(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::_set_MSAA8x");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "AntiAliasing", "MSAA8x", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& HighlightingSystem::AntiAliasing::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::AntiAliasing::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlightingBase
#include "HighlightingSystem/HighlightingBase.hpp"
// Including type: UnityEngine.Rendering.CommandBuffer
#include "UnityEngine/Rendering/CommandBuffer.hpp"
// Including type: HighlightingSystem.HighlightingBlitter
#include "HighlightingSystem/HighlightingBlitter.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: HighlightingSystem.HighlighterRenderer
#include "HighlightingSystem/HighlighterRenderer.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected readonly UnityEngine.Color colorClear
::UnityEngine::Color HighlightingSystem::HighlightingBase::_get_colorClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_colorClear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Color>("HighlightingSystem", "HighlightingBase", "colorClear"));
}
// Autogenerated static field setter
// Set static field: static protected readonly UnityEngine.Color colorClear
void HighlightingSystem::HighlightingBase::_set_colorClear(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_colorClear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "colorClear", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.String renderBufferName
::StringW HighlightingSystem::HighlightingBase::_get_renderBufferName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_renderBufferName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlightingBase", "renderBufferName"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.String renderBufferName
void HighlightingSystem::HighlightingBase::_set_renderBufferName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_renderBufferName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "renderBufferName", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly UnityEngine.Matrix4x4 identityMatrix
::UnityEngine::Matrix4x4 HighlightingSystem::HighlightingBase::_get_identityMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_identityMatrix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Matrix4x4>("HighlightingSystem", "HighlightingBase", "identityMatrix"));
}
// Autogenerated static field setter
// Set static field: static protected readonly UnityEngine.Matrix4x4 identityMatrix
void HighlightingSystem::HighlightingBase::_set_identityMatrix(::UnityEngine::Matrix4x4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_identityMatrix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "identityMatrix", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.String keywordStraightDirections
::StringW HighlightingSystem::HighlightingBase::_get_keywordStraightDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_keywordStraightDirections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlightingBase", "keywordStraightDirections"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.String keywordStraightDirections
void HighlightingSystem::HighlightingBase::_set_keywordStraightDirections(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_keywordStraightDirections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "keywordStraightDirections", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.String keywordAllDirections
::StringW HighlightingSystem::HighlightingBase::_get_keywordAllDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_keywordAllDirections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlightingBase", "keywordAllDirections"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.String keywordAllDirections
void HighlightingSystem::HighlightingBase::_set_keywordAllDirections(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_keywordAllDirections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "keywordAllDirections", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.String profileHighlightingSystem
::StringW HighlightingSystem::HighlightingBase::_get_profileHighlightingSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_profileHighlightingSystem");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("HighlightingSystem", "HighlightingBase", "profileHighlightingSystem"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.String profileHighlightingSystem
void HighlightingSystem::HighlightingBase::_set_profileHighlightingSystem(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_profileHighlightingSystem");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "profileHighlightingSystem", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Rendering.CameraEvent queue
::UnityEngine::Rendering::CameraEvent HighlightingSystem::HighlightingBase::_get_queue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_queue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Rendering::CameraEvent>("HighlightingSystem", "HighlightingBase", "queue"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Rendering.CameraEvent queue
void HighlightingSystem::HighlightingBase::_set_queue(::UnityEngine::Rendering::CameraEvent value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_queue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "queue", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Camera currentCamera
::UnityEngine::Camera* HighlightingSystem::HighlightingBase::_get_currentCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_currentCamera");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Camera*>("HighlightingSystem", "HighlightingBase", "currentCamera"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Camera currentCamera
void HighlightingSystem::HighlightingBase::_set_currentCamera(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_currentCamera");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "currentCamera", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Collections.Generic.HashSet`1<HighlightingSystem.HighlighterRenderer> visibleRenderers
::System::Collections::Generic::HashSet_1<::HighlightingSystem::HighlighterRenderer*>* HighlightingSystem::HighlightingBase::_get_visibleRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_visibleRenderers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::HighlightingSystem::HighlighterRenderer*>*>("HighlightingSystem", "HighlightingBase", "visibleRenderers"));
}
// Autogenerated static field setter
// Set static field: static protected System.Collections.Generic.HashSet`1<HighlightingSystem.HighlighterRenderer> visibleRenderers
void HighlightingSystem::HighlightingBase::_set_visibleRenderers(::System::Collections::Generic::HashSet_1<::HighlightingSystem::HighlighterRenderer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_visibleRenderers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "visibleRenderers", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 BLUR
int HighlightingSystem::HighlightingBase::_get_BLUR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_BLUR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "HighlightingBase", "BLUR"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 BLUR
void HighlightingSystem::HighlightingBase::_set_BLUR(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_BLUR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "BLUR", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 CUT
int HighlightingSystem::HighlightingBase::_get_CUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_CUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "HighlightingBase", "CUT"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 CUT
void HighlightingSystem::HighlightingBase::_set_CUT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_CUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "CUT", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 COMP
int HighlightingSystem::HighlightingBase::_get_COMP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_COMP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "HighlightingBase", "COMP"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 COMP
void HighlightingSystem::HighlightingBase::_set_COMP(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_COMP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "COMP", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.String[] shaderPaths
::ArrayW<::StringW> HighlightingSystem::HighlightingBase::_get_shaderPaths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_shaderPaths");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("HighlightingSystem", "HighlightingBase", "shaderPaths"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.String[] shaderPaths
void HighlightingSystem::HighlightingBase::_set_shaderPaths(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_shaderPaths");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "shaderPaths", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Shader[] shaders
::ArrayW<::UnityEngine::Shader*> HighlightingSystem::HighlightingBase::_get_shaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_shaders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Shader*>>("HighlightingSystem", "HighlightingBase", "shaders"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Shader[] shaders
void HighlightingSystem::HighlightingBase::_set_shaders(::ArrayW<::UnityEngine::Shader*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_shaders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "shaders", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Material[] materials
::ArrayW<::UnityEngine::Material*> HighlightingSystem::HighlightingBase::_get_materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_materials");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Material*>>("HighlightingSystem", "HighlightingBase", "materials"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Material[] materials
void HighlightingSystem::HighlightingBase::_set_materials(::ArrayW<::UnityEngine::Material*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_materials");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "materials", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Boolean initialized
bool HighlightingSystem::HighlightingBase::_get_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_get_initialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("HighlightingSystem", "HighlightingBase", "initialized"));
}
// Autogenerated static field setter
// Set static field: static protected System.Boolean initialized
void HighlightingSystem::HighlightingBase::_set_initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::_set_initialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "HighlightingBase", "initialized", value));
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Rendering.CommandBuffer renderBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& HighlightingSystem::HighlightingBase::dyn_renderBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_renderBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::CommandBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.RenderTextureDescriptor cachedDescriptor
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTextureDescriptor& HighlightingSystem::HighlightingBase::dyn_cachedDescriptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_cachedDescriptor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedDescriptor"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTextureDescriptor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _fillAlpha
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingBase::dyn__fillAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__fillAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fillAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _downsampleFactor
[[deprecated("Use field access instead!")]] int& HighlightingSystem::HighlightingBase::dyn__downsampleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__downsampleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_downsampleFactor"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 _iterations
[[deprecated("Use field access instead!")]] int& HighlightingSystem::HighlightingBase::dyn__iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__iterations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iterations"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _blurMinSpread
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingBase::dyn__blurMinSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__blurMinSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurMinSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _blurSpread
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingBase::dyn__blurSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__blurSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _blurIntensity
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingBase::dyn__blurIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__blurIntensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.BlurDirections _blurDirections
[[deprecated("Use field access instead!")]] ::HighlightingSystem::BlurDirections& HighlightingSystem::HighlightingBase::dyn__blurDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__blurDirections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurDirections"))->offset;
  return *reinterpret_cast<::HighlightingSystem::BlurDirections*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.HighlightingBlitter _blitter
[[deprecated("Use field access instead!")]] ::HighlightingSystem::HighlightingBlitter*& HighlightingSystem::HighlightingBase::dyn__blitter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__blitter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blitter"))->offset;
  return *reinterpret_cast<::HighlightingSystem::HighlightingBlitter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected HighlightingSystem.AntiAliasing _antiAliasing
[[deprecated("Use field access instead!")]] ::HighlightingSystem::AntiAliasing& HighlightingSystem::HighlightingBase::dyn__antiAliasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn__antiAliasing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_antiAliasing"))->offset;
  return *reinterpret_cast<::HighlightingSystem::AntiAliasing*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Rendering.RenderTargetIdentifier highlightingBufferID
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& HighlightingSystem::HighlightingBase::dyn_highlightingBufferID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_highlightingBufferID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlightingBufferID"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::RenderTargetIdentifier*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Rendering.RenderTargetIdentifier blur1ID
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& HighlightingSystem::HighlightingBase::dyn_blur1ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_blur1ID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blur1ID"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::RenderTargetIdentifier*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Rendering.RenderTargetIdentifier blur2ID
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::RenderTargetIdentifier& HighlightingSystem::HighlightingBase::dyn_blur2ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_blur2ID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blur2ID"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::RenderTargetIdentifier*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.RenderTexture highlightingBuffer
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& HighlightingSystem::HighlightingBase::dyn_highlightingBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_highlightingBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlightingBuffer"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Camera cam
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& HighlightingSystem::HighlightingBase::dyn_cam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_cam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cam"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Material blurMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& HighlightingSystem::HighlightingBase::dyn_blurMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_blurMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blurMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Material cutMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& HighlightingSystem::HighlightingBase::dyn_cutMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_cutMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cutMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Material compMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& HighlightingSystem::HighlightingBase::dyn_compMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::dyn_compMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_isSupported
bool HighlightingSystem::HighlightingBase::get_isSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_isSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_fillAlpha
float HighlightingSystem::HighlightingBase::get_fillAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_fillAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fillAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_fillAlpha
void HighlightingSystem::HighlightingBase::set_fillAlpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_fillAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fillAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_downsampleFactor
int HighlightingSystem::HighlightingBase::get_downsampleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_downsampleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_downsampleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_downsampleFactor
void HighlightingSystem::HighlightingBase::set_downsampleFactor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_downsampleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_downsampleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_iterations
int HighlightingSystem::HighlightingBase::get_iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_iterations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_iterations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_iterations
void HighlightingSystem::HighlightingBase::set_iterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_iterations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_iterations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_blurMinSpread
float HighlightingSystem::HighlightingBase::get_blurMinSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_blurMinSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blurMinSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_blurMinSpread
void HighlightingSystem::HighlightingBase::set_blurMinSpread(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_blurMinSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blurMinSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_blurSpread
float HighlightingSystem::HighlightingBase::get_blurSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_blurSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blurSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_blurSpread
void HighlightingSystem::HighlightingBase::set_blurSpread(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_blurSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blurSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_blurIntensity
float HighlightingSystem::HighlightingBase::get_blurIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_blurIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blurIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_blurIntensity
void HighlightingSystem::HighlightingBase::set_blurIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_blurIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blurIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_blurDirections
::HighlightingSystem::BlurDirections HighlightingSystem::HighlightingBase::get_blurDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_blurDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blurDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::BlurDirections, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_blurDirections
void HighlightingSystem::HighlightingBase::set_blurDirections(::HighlightingSystem::BlurDirections value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_blurDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blurDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_blitter
::HighlightingSystem::HighlightingBlitter* HighlightingSystem::HighlightingBase::get_blitter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_blitter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blitter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::HighlightingBlitter*, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_blitter
void HighlightingSystem::HighlightingBase::set_blitter(::HighlightingSystem::HighlightingBlitter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_blitter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blitter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.get_antiAliasing
::HighlightingSystem::AntiAliasing HighlightingSystem::HighlightingBase::get_antiAliasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::get_antiAliasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_antiAliasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::AntiAliasing, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.set_antiAliasing
void HighlightingSystem::HighlightingBase::set_antiAliasing(::HighlightingSystem::AntiAliasing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::set_antiAliasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_antiAliasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnEnable
void HighlightingSystem::HighlightingBase::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnDisable
void HighlightingSystem::HighlightingBase::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnPreCull
void HighlightingSystem::HighlightingBase::OnPreCull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnPreCull");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnPreRender
void HighlightingSystem::HighlightingBase::OnPreRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnPreRender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnRenderImage
void HighlightingSystem::HighlightingBase::OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnRenderImage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dst);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.OnEndOfFrame
void HighlightingSystem::HighlightingBase::OnEndOfFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::OnEndOfFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.SetVisible
void HighlightingSystem::HighlightingBase::SetVisible(::HighlightingSystem::HighlighterRenderer* renderer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::SetVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlightingBase", "SetVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, renderer);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.GetVisible
bool HighlightingSystem::HighlightingBase::GetVisible(::HighlightingSystem::HighlighterRenderer* renderer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::GetVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlightingBase", "GetVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, renderer);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.Initialize
void HighlightingSystem::HighlightingBase::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlightingBase", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.GetDescriptor
::UnityEngine::RenderTextureDescriptor HighlightingSystem::HighlightingBase::GetDescriptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::GetDescriptor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::RenderTextureDescriptor, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.Equals
bool HighlightingSystem::HighlightingBase::Equals(::UnityEngine::RenderTextureDescriptor x, ::UnityEngine::RenderTextureDescriptor y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.GetAA
int HighlightingSystem::HighlightingBase::GetAA(::UnityEngine::RenderTexture* targetTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::GetAA");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, targetTexture);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.CheckSupported
bool HighlightingSystem::HighlightingBase::CheckSupported(bool verbose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::CheckSupported");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, verbose);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.RebuildCommandBuffer
void HighlightingSystem::HighlightingBase::RebuildCommandBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::RebuildCommandBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingBase.Blit
void HighlightingSystem::HighlightingBase::Blit(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::Blit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::HighlightingSystem::HighlightingBase*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, src, dst);
}
// Autogenerated method: HighlightingSystem.HighlightingBase..cctor
void HighlightingSystem::HighlightingBase::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingBase::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "HighlightingBase", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.HighlightingPreset
#include "HighlightingSystem/HighlightingPreset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _name
[[deprecated("Use field access instead!")]] ::StringW& HighlightingSystem::HighlightingPreset::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__name");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _fillAlpha
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingPreset::dyn__fillAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__fillAlpha");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fillAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _downsampleFactor
[[deprecated("Use field access instead!")]] int& HighlightingSystem::HighlightingPreset::dyn__downsampleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__downsampleFactor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_downsampleFactor"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _iterations
[[deprecated("Use field access instead!")]] int& HighlightingSystem::HighlightingPreset::dyn__iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__iterations");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iterations"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _blurMinSpread
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingPreset::dyn__blurMinSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__blurMinSpread");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurMinSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _blurSpread
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingPreset::dyn__blurSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__blurSpread");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _blurIntensity
[[deprecated("Use field access instead!")]] float& HighlightingSystem::HighlightingPreset::dyn__blurIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__blurIntensity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurIntensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HighlightingSystem.BlurDirections _blurDirections
[[deprecated("Use field access instead!")]] ::HighlightingSystem::BlurDirections& HighlightingSystem::HighlightingPreset::dyn__blurDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::dyn__blurDirections");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_blurDirections"))->offset;
  return *reinterpret_cast<::HighlightingSystem::BlurDirections*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_name
::StringW HighlightingSystem::HighlightingPreset::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_name
void HighlightingSystem::HighlightingPreset::set_name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_fillAlpha
float HighlightingSystem::HighlightingPreset::get_fillAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_fillAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_fillAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_fillAlpha
void HighlightingSystem::HighlightingPreset::set_fillAlpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_fillAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fillAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_downsampleFactor
int HighlightingSystem::HighlightingPreset::get_downsampleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_downsampleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_downsampleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_downsampleFactor
void HighlightingSystem::HighlightingPreset::set_downsampleFactor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_downsampleFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_downsampleFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_iterations
int HighlightingSystem::HighlightingPreset::get_iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_iterations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_iterations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_iterations
void HighlightingSystem::HighlightingPreset::set_iterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_iterations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_iterations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_blurMinSpread
float HighlightingSystem::HighlightingPreset::get_blurMinSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_blurMinSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_blurMinSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_blurMinSpread
void HighlightingSystem::HighlightingPreset::set_blurMinSpread(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_blurMinSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_blurMinSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_blurSpread
float HighlightingSystem::HighlightingPreset::get_blurSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_blurSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_blurSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_blurSpread
void HighlightingSystem::HighlightingPreset::set_blurSpread(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_blurSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_blurSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_blurIntensity
float HighlightingSystem::HighlightingPreset::get_blurIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_blurIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_blurIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_blurIntensity
void HighlightingSystem::HighlightingPreset::set_blurIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_blurIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_blurIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.get_blurDirections
::HighlightingSystem::BlurDirections HighlightingSystem::HighlightingPreset::get_blurDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::get_blurDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_blurDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::HighlightingSystem::BlurDirections, false>(this, ___internal__method);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.set_blurDirections
void HighlightingSystem::HighlightingPreset::set_blurDirections(::HighlightingSystem::BlurDirections value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::set_blurDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_blurDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HighlightingSystem.HighlightingPreset.System.IEquatable<HighlightingSystem.HighlightingPreset>.Equals
bool HighlightingSystem::HighlightingPreset::System_IEquatable$HighlightingSystem_HighlightingPreset$_Equals(::HighlightingSystem::HighlightingPreset other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::HighlightingPreset::System.IEquatable<HighlightingSystem.HighlightingPreset>.Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::HighlightingSystem::HighlightingPreset), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.MaterialExtensions
#include "HighlightingSystem/MaterialExtensions.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HighlightingSystem.MaterialExtensions.SetKeyword
void HighlightingSystem::MaterialExtensions::SetKeyword(::UnityEngine::Material* material, ::StringW keyword, bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::MaterialExtensions::SetKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "MaterialExtensions", "SetKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, material, keyword, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HighlightingSystem.ShaderPropertyID
#include "HighlightingSystem/ShaderPropertyID.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _MainTex
int HighlightingSystem::ShaderPropertyID::_get__MainTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__MainTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_MainTex"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _MainTex
void HighlightingSystem::ShaderPropertyID::_set__MainTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__MainTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_MainTex", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _Cutoff
int HighlightingSystem::ShaderPropertyID::_get__Cutoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__Cutoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_Cutoff"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _Cutoff
void HighlightingSystem::ShaderPropertyID::_set__Cutoff(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__Cutoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_Cutoff", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingIntensity
int HighlightingSystem::ShaderPropertyID::_get__HighlightingIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingIntensity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingIntensity"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingIntensity
void HighlightingSystem::ShaderPropertyID::_set__HighlightingIntensity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingIntensity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingIntensity", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingCull
int HighlightingSystem::ShaderPropertyID::_get__HighlightingCull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingCull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingCull"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingCull
void HighlightingSystem::ShaderPropertyID::_set__HighlightingCull(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingCull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingCull", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingColor
int HighlightingSystem::ShaderPropertyID::_get__HighlightingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingColor"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingColor
void HighlightingSystem::ShaderPropertyID::_set__HighlightingColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingColor", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingBlurOffset
int HighlightingSystem::ShaderPropertyID::_get__HighlightingBlurOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingBlurOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlurOffset"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingBlurOffset
void HighlightingSystem::ShaderPropertyID::_set__HighlightingBlurOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingBlurOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlurOffset", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingFillAlpha
int HighlightingSystem::ShaderPropertyID::_get__HighlightingFillAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingFillAlpha");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingFillAlpha"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingFillAlpha
void HighlightingSystem::ShaderPropertyID::_set__HighlightingFillAlpha(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingFillAlpha");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingFillAlpha", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingBuffer
int HighlightingSystem::ShaderPropertyID::_get__HighlightingBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingBuffer"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingBuffer
void HighlightingSystem::ShaderPropertyID::_set__HighlightingBuffer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingBlur1
int HighlightingSystem::ShaderPropertyID::_get__HighlightingBlur1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingBlur1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlur1"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingBlur1
void HighlightingSystem::ShaderPropertyID::_set__HighlightingBlur1(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingBlur1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlur1", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _HighlightingBlur2
int HighlightingSystem::ShaderPropertyID::_get__HighlightingBlur2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_get__HighlightingBlur2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlur2"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _HighlightingBlur2
void HighlightingSystem::ShaderPropertyID::_set__HighlightingBlur2(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::_set__HighlightingBlur2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HighlightingSystem", "ShaderPropertyID", "_HighlightingBlur2", value));
}
// Autogenerated method: HighlightingSystem.ShaderPropertyID..cctor
void HighlightingSystem::ShaderPropertyID::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::HighlightingSystem::ShaderPropertyID::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HighlightingSystem", "ShaderPropertyID", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.VERSION
#include "FMOD/_VERSION.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 number
int FMOD::_VERSION::_get_number() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::_VERSION::_get_number");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "VERSION", "number"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 number
void FMOD::_VERSION::_set_number(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::_VERSION::_set_number");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "VERSION", "number", value));
}
// Autogenerated static field getter
// Get static field: static public System.String dll
::StringW FMOD::_VERSION::_get_dll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::_VERSION::_get_dll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("FMOD", "VERSION", "dll"));
}
// Autogenerated static field setter
// Set static field: static public System.String dll
void FMOD::_VERSION::_set_dll(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::_VERSION::_set_dll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "VERSION", "dll", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CONSTANTS
#include "FMOD/CONSTANTS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MAX_CHANNEL_WIDTH
int FMOD::CONSTANTS::_get_MAX_CHANNEL_WIDTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_get_MAX_CHANNEL_WIDTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CONSTANTS", "MAX_CHANNEL_WIDTH"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MAX_CHANNEL_WIDTH
void FMOD::CONSTANTS::_set_MAX_CHANNEL_WIDTH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_set_MAX_CHANNEL_WIDTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CONSTANTS", "MAX_CHANNEL_WIDTH", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MAX_LISTENERS
int FMOD::CONSTANTS::_get_MAX_LISTENERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_get_MAX_LISTENERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CONSTANTS", "MAX_LISTENERS"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MAX_LISTENERS
void FMOD::CONSTANTS::_set_MAX_LISTENERS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_set_MAX_LISTENERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CONSTANTS", "MAX_LISTENERS", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 REVERB_MAXINSTANCES
int FMOD::CONSTANTS::_get_REVERB_MAXINSTANCES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_get_REVERB_MAXINSTANCES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CONSTANTS", "REVERB_MAXINSTANCES"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 REVERB_MAXINSTANCES
void FMOD::CONSTANTS::_set_REVERB_MAXINSTANCES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_set_REVERB_MAXINSTANCES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CONSTANTS", "REVERB_MAXINSTANCES", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MAX_SYSTEMS
int FMOD::CONSTANTS::_get_MAX_SYSTEMS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_get_MAX_SYSTEMS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CONSTANTS", "MAX_SYSTEMS"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MAX_SYSTEMS
void FMOD::CONSTANTS::_set_MAX_SYSTEMS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CONSTANTS::_set_MAX_SYSTEMS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CONSTANTS", "MAX_SYSTEMS", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT OK
::FMOD::RESULT FMOD::RESULT::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "OK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT OK
void FMOD::RESULT::_set_OK(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_BADCOMMAND
::FMOD::RESULT FMOD::RESULT::_get_ERR_BADCOMMAND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_BADCOMMAND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_BADCOMMAND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_BADCOMMAND
void FMOD::RESULT::_set_ERR_BADCOMMAND(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_BADCOMMAND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_BADCOMMAND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_CHANNEL_ALLOC
::FMOD::RESULT FMOD::RESULT::_get_ERR_CHANNEL_ALLOC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_CHANNEL_ALLOC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_CHANNEL_ALLOC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_CHANNEL_ALLOC
void FMOD::RESULT::_set_ERR_CHANNEL_ALLOC(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_CHANNEL_ALLOC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_CHANNEL_ALLOC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_CHANNEL_STOLEN
::FMOD::RESULT FMOD::RESULT::_get_ERR_CHANNEL_STOLEN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_CHANNEL_STOLEN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_CHANNEL_STOLEN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_CHANNEL_STOLEN
void FMOD::RESULT::_set_ERR_CHANNEL_STOLEN(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_CHANNEL_STOLEN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_CHANNEL_STOLEN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DMA
::FMOD::RESULT FMOD::RESULT::_get_ERR_DMA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DMA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DMA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DMA
void FMOD::RESULT::_set_ERR_DMA(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DMA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DMA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_CONNECTION
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_CONNECTION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_CONNECTION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_CONNECTION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_CONNECTION
void FMOD::RESULT::_set_ERR_DSP_CONNECTION(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_CONNECTION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_CONNECTION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_DONTPROCESS
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_DONTPROCESS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_DONTPROCESS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_DONTPROCESS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_DONTPROCESS
void FMOD::RESULT::_set_ERR_DSP_DONTPROCESS(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_DONTPROCESS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_DONTPROCESS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_FORMAT
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_FORMAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_FORMAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_FORMAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_FORMAT
void FMOD::RESULT::_set_ERR_DSP_FORMAT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_FORMAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_FORMAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_INUSE
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_INUSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_INUSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_INUSE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_INUSE
void FMOD::RESULT::_set_ERR_DSP_INUSE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_INUSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_INUSE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_NOTFOUND
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_NOTFOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_NOTFOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_NOTFOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_NOTFOUND
void FMOD::RESULT::_set_ERR_DSP_NOTFOUND(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_NOTFOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_NOTFOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_RESERVED
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_RESERVED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_RESERVED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_RESERVED
void FMOD::RESULT::_set_ERR_DSP_RESERVED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_RESERVED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_SILENCE
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_SILENCE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_SILENCE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_SILENCE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_SILENCE
void FMOD::RESULT::_set_ERR_DSP_SILENCE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_SILENCE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_SILENCE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_DSP_TYPE
::FMOD::RESULT FMOD::RESULT::_get_ERR_DSP_TYPE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_DSP_TYPE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_DSP_TYPE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_DSP_TYPE
void FMOD::RESULT::_set_ERR_DSP_TYPE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_DSP_TYPE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_DSP_TYPE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_BAD
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_BAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_BAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_BAD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_BAD
void FMOD::RESULT::_set_ERR_FILE_BAD(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_BAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_BAD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_COULDNOTSEEK
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_COULDNOTSEEK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_COULDNOTSEEK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_COULDNOTSEEK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_COULDNOTSEEK
void FMOD::RESULT::_set_ERR_FILE_COULDNOTSEEK(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_COULDNOTSEEK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_COULDNOTSEEK", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_DISKEJECTED
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_DISKEJECTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_DISKEJECTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_DISKEJECTED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_DISKEJECTED
void FMOD::RESULT::_set_ERR_FILE_DISKEJECTED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_DISKEJECTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_DISKEJECTED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_EOF
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_EOF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_EOF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_EOF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_EOF
void FMOD::RESULT::_set_ERR_FILE_EOF(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_EOF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_EOF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_ENDOFDATA
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_ENDOFDATA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_ENDOFDATA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_ENDOFDATA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_ENDOFDATA
void FMOD::RESULT::_set_ERR_FILE_ENDOFDATA(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_ENDOFDATA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_ENDOFDATA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FILE_NOTFOUND
::FMOD::RESULT FMOD::RESULT::_get_ERR_FILE_NOTFOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FILE_NOTFOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FILE_NOTFOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FILE_NOTFOUND
void FMOD::RESULT::_set_ERR_FILE_NOTFOUND(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FILE_NOTFOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FILE_NOTFOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_FORMAT
::FMOD::RESULT FMOD::RESULT::_get_ERR_FORMAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_FORMAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_FORMAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_FORMAT
void FMOD::RESULT::_set_ERR_FORMAT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_FORMAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_FORMAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HEADER_MISMATCH
::FMOD::RESULT FMOD::RESULT::_get_ERR_HEADER_MISMATCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HEADER_MISMATCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HEADER_MISMATCH"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HEADER_MISMATCH
void FMOD::RESULT::_set_ERR_HEADER_MISMATCH(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HEADER_MISMATCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HEADER_MISMATCH", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HTTP
::FMOD::RESULT FMOD::RESULT::_get_ERR_HTTP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HTTP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HTTP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HTTP
void FMOD::RESULT::_set_ERR_HTTP(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HTTP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HTTP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HTTP_ACCESS
::FMOD::RESULT FMOD::RESULT::_get_ERR_HTTP_ACCESS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HTTP_ACCESS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HTTP_ACCESS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HTTP_ACCESS
void FMOD::RESULT::_set_ERR_HTTP_ACCESS(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HTTP_ACCESS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HTTP_ACCESS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HTTP_PROXY_AUTH
::FMOD::RESULT FMOD::RESULT::_get_ERR_HTTP_PROXY_AUTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HTTP_PROXY_AUTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HTTP_PROXY_AUTH"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HTTP_PROXY_AUTH
void FMOD::RESULT::_set_ERR_HTTP_PROXY_AUTH(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HTTP_PROXY_AUTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HTTP_PROXY_AUTH", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HTTP_SERVER_ERROR
::FMOD::RESULT FMOD::RESULT::_get_ERR_HTTP_SERVER_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HTTP_SERVER_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HTTP_SERVER_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HTTP_SERVER_ERROR
void FMOD::RESULT::_set_ERR_HTTP_SERVER_ERROR(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HTTP_SERVER_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HTTP_SERVER_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_HTTP_TIMEOUT
::FMOD::RESULT FMOD::RESULT::_get_ERR_HTTP_TIMEOUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_HTTP_TIMEOUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_HTTP_TIMEOUT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_HTTP_TIMEOUT
void FMOD::RESULT::_set_ERR_HTTP_TIMEOUT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_HTTP_TIMEOUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_HTTP_TIMEOUT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INITIALIZATION
::FMOD::RESULT FMOD::RESULT::_get_ERR_INITIALIZATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INITIALIZATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INITIALIZATION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INITIALIZATION
void FMOD::RESULT::_set_ERR_INITIALIZATION(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INITIALIZATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INITIALIZATION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INITIALIZED
::FMOD::RESULT FMOD::RESULT::_get_ERR_INITIALIZED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INITIALIZED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INITIALIZED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INITIALIZED
void FMOD::RESULT::_set_ERR_INITIALIZED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INITIALIZED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INITIALIZED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INTERNAL
::FMOD::RESULT FMOD::RESULT::_get_ERR_INTERNAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INTERNAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INTERNAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INTERNAL
void FMOD::RESULT::_set_ERR_INTERNAL(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INTERNAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INTERNAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_FLOAT
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_FLOAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_FLOAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_FLOAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_FLOAT
void FMOD::RESULT::_set_ERR_INVALID_FLOAT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_FLOAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_FLOAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_HANDLE
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_HANDLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_HANDLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_HANDLE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_HANDLE
void FMOD::RESULT::_set_ERR_INVALID_HANDLE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_HANDLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_HANDLE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_PARAM
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_PARAM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_PARAM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_PARAM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_PARAM
void FMOD::RESULT::_set_ERR_INVALID_PARAM(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_PARAM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_PARAM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_POSITION
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_POSITION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_POSITION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_POSITION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_POSITION
void FMOD::RESULT::_set_ERR_INVALID_POSITION(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_POSITION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_POSITION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_SPEAKER
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_SPEAKER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_SPEAKER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_SPEAKER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_SPEAKER
void FMOD::RESULT::_set_ERR_INVALID_SPEAKER(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_SPEAKER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_SPEAKER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_SYNCPOINT
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_SYNCPOINT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_SYNCPOINT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_SYNCPOINT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_SYNCPOINT
void FMOD::RESULT::_set_ERR_INVALID_SYNCPOINT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_SYNCPOINT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_SYNCPOINT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_THREAD
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_THREAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_THREAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_THREAD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_THREAD
void FMOD::RESULT::_set_ERR_INVALID_THREAD(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_THREAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_THREAD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_VECTOR
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_VECTOR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_VECTOR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_VECTOR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_VECTOR
void FMOD::RESULT::_set_ERR_INVALID_VECTOR(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_VECTOR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_VECTOR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_MAXAUDIBLE
::FMOD::RESULT FMOD::RESULT::_get_ERR_MAXAUDIBLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_MAXAUDIBLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_MAXAUDIBLE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_MAXAUDIBLE
void FMOD::RESULT::_set_ERR_MAXAUDIBLE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_MAXAUDIBLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_MAXAUDIBLE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_MEMORY
::FMOD::RESULT FMOD::RESULT::_get_ERR_MEMORY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_MEMORY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_MEMORY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_MEMORY
void FMOD::RESULT::_set_ERR_MEMORY(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_MEMORY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_MEMORY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_MEMORY_CANTPOINT
::FMOD::RESULT FMOD::RESULT::_get_ERR_MEMORY_CANTPOINT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_MEMORY_CANTPOINT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_MEMORY_CANTPOINT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_MEMORY_CANTPOINT
void FMOD::RESULT::_set_ERR_MEMORY_CANTPOINT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_MEMORY_CANTPOINT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_MEMORY_CANTPOINT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NEEDS3D
::FMOD::RESULT FMOD::RESULT::_get_ERR_NEEDS3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NEEDS3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NEEDS3D"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NEEDS3D
void FMOD::RESULT::_set_ERR_NEEDS3D(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NEEDS3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NEEDS3D", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NEEDSHARDWARE
::FMOD::RESULT FMOD::RESULT::_get_ERR_NEEDSHARDWARE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NEEDSHARDWARE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NEEDSHARDWARE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NEEDSHARDWARE
void FMOD::RESULT::_set_ERR_NEEDSHARDWARE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NEEDSHARDWARE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NEEDSHARDWARE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NET_CONNECT
::FMOD::RESULT FMOD::RESULT::_get_ERR_NET_CONNECT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NET_CONNECT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NET_CONNECT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NET_CONNECT
void FMOD::RESULT::_set_ERR_NET_CONNECT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NET_CONNECT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NET_CONNECT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NET_SOCKET_ERROR
::FMOD::RESULT FMOD::RESULT::_get_ERR_NET_SOCKET_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NET_SOCKET_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NET_SOCKET_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NET_SOCKET_ERROR
void FMOD::RESULT::_set_ERR_NET_SOCKET_ERROR(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NET_SOCKET_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NET_SOCKET_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NET_URL
::FMOD::RESULT FMOD::RESULT::_get_ERR_NET_URL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NET_URL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NET_URL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NET_URL
void FMOD::RESULT::_set_ERR_NET_URL(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NET_URL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NET_URL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NET_WOULD_BLOCK
::FMOD::RESULT FMOD::RESULT::_get_ERR_NET_WOULD_BLOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NET_WOULD_BLOCK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NET_WOULD_BLOCK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NET_WOULD_BLOCK
void FMOD::RESULT::_set_ERR_NET_WOULD_BLOCK(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NET_WOULD_BLOCK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NET_WOULD_BLOCK", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NOTREADY
::FMOD::RESULT FMOD::RESULT::_get_ERR_NOTREADY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NOTREADY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NOTREADY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NOTREADY
void FMOD::RESULT::_set_ERR_NOTREADY(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NOTREADY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NOTREADY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_ALLOCATED
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_ALLOCATED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_ALLOCATED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_ALLOCATED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_ALLOCATED
void FMOD::RESULT::_set_ERR_OUTPUT_ALLOCATED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_ALLOCATED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_ALLOCATED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_CREATEBUFFER
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_CREATEBUFFER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_CREATEBUFFER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_CREATEBUFFER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_CREATEBUFFER
void FMOD::RESULT::_set_ERR_OUTPUT_CREATEBUFFER(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_CREATEBUFFER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_CREATEBUFFER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_DRIVERCALL
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_DRIVERCALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_DRIVERCALL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_DRIVERCALL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_DRIVERCALL
void FMOD::RESULT::_set_ERR_OUTPUT_DRIVERCALL(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_DRIVERCALL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_DRIVERCALL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_FORMAT
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_FORMAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_FORMAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_FORMAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_FORMAT
void FMOD::RESULT::_set_ERR_OUTPUT_FORMAT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_FORMAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_FORMAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_INIT
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_INIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_INIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_INIT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_INIT
void FMOD::RESULT::_set_ERR_OUTPUT_INIT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_INIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_INIT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_OUTPUT_NODRIVERS
::FMOD::RESULT FMOD::RESULT::_get_ERR_OUTPUT_NODRIVERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_OUTPUT_NODRIVERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_OUTPUT_NODRIVERS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_OUTPUT_NODRIVERS
void FMOD::RESULT::_set_ERR_OUTPUT_NODRIVERS(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_OUTPUT_NODRIVERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_OUTPUT_NODRIVERS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_PLUGIN
::FMOD::RESULT FMOD::RESULT::_get_ERR_PLUGIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_PLUGIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_PLUGIN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_PLUGIN
void FMOD::RESULT::_set_ERR_PLUGIN(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_PLUGIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_PLUGIN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_PLUGIN_MISSING
::FMOD::RESULT FMOD::RESULT::_get_ERR_PLUGIN_MISSING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_PLUGIN_MISSING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_PLUGIN_MISSING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_PLUGIN_MISSING
void FMOD::RESULT::_set_ERR_PLUGIN_MISSING(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_PLUGIN_MISSING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_PLUGIN_MISSING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_PLUGIN_RESOURCE
::FMOD::RESULT FMOD::RESULT::_get_ERR_PLUGIN_RESOURCE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_PLUGIN_RESOURCE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_PLUGIN_RESOURCE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_PLUGIN_RESOURCE
void FMOD::RESULT::_set_ERR_PLUGIN_RESOURCE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_PLUGIN_RESOURCE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_PLUGIN_RESOURCE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_PLUGIN_VERSION
::FMOD::RESULT FMOD::RESULT::_get_ERR_PLUGIN_VERSION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_PLUGIN_VERSION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_PLUGIN_VERSION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_PLUGIN_VERSION
void FMOD::RESULT::_set_ERR_PLUGIN_VERSION(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_PLUGIN_VERSION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_PLUGIN_VERSION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_RECORD
::FMOD::RESULT FMOD::RESULT::_get_ERR_RECORD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_RECORD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_RECORD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_RECORD
void FMOD::RESULT::_set_ERR_RECORD(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_RECORD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_RECORD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_REVERB_CHANNELGROUP
::FMOD::RESULT FMOD::RESULT::_get_ERR_REVERB_CHANNELGROUP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_REVERB_CHANNELGROUP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_REVERB_CHANNELGROUP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_REVERB_CHANNELGROUP
void FMOD::RESULT::_set_ERR_REVERB_CHANNELGROUP(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_REVERB_CHANNELGROUP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_REVERB_CHANNELGROUP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_REVERB_INSTANCE
::FMOD::RESULT FMOD::RESULT::_get_ERR_REVERB_INSTANCE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_REVERB_INSTANCE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_REVERB_INSTANCE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_REVERB_INSTANCE
void FMOD::RESULT::_set_ERR_REVERB_INSTANCE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_REVERB_INSTANCE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_REVERB_INSTANCE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_SUBSOUNDS
::FMOD::RESULT FMOD::RESULT::_get_ERR_SUBSOUNDS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_SUBSOUNDS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_SUBSOUNDS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_SUBSOUNDS
void FMOD::RESULT::_set_ERR_SUBSOUNDS(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_SUBSOUNDS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_SUBSOUNDS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_SUBSOUND_ALLOCATED
::FMOD::RESULT FMOD::RESULT::_get_ERR_SUBSOUND_ALLOCATED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_SUBSOUND_ALLOCATED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_SUBSOUND_ALLOCATED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_SUBSOUND_ALLOCATED
void FMOD::RESULT::_set_ERR_SUBSOUND_ALLOCATED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_SUBSOUND_ALLOCATED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_SUBSOUND_ALLOCATED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_SUBSOUND_CANTMOVE
::FMOD::RESULT FMOD::RESULT::_get_ERR_SUBSOUND_CANTMOVE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_SUBSOUND_CANTMOVE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_SUBSOUND_CANTMOVE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_SUBSOUND_CANTMOVE
void FMOD::RESULT::_set_ERR_SUBSOUND_CANTMOVE(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_SUBSOUND_CANTMOVE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_SUBSOUND_CANTMOVE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_TAGNOTFOUND
::FMOD::RESULT FMOD::RESULT::_get_ERR_TAGNOTFOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_TAGNOTFOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_TAGNOTFOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_TAGNOTFOUND
void FMOD::RESULT::_set_ERR_TAGNOTFOUND(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_TAGNOTFOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_TAGNOTFOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_TOOMANYCHANNELS
::FMOD::RESULT FMOD::RESULT::_get_ERR_TOOMANYCHANNELS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_TOOMANYCHANNELS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_TOOMANYCHANNELS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_TOOMANYCHANNELS
void FMOD::RESULT::_set_ERR_TOOMANYCHANNELS(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_TOOMANYCHANNELS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_TOOMANYCHANNELS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_TRUNCATED
::FMOD::RESULT FMOD::RESULT::_get_ERR_TRUNCATED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_TRUNCATED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_TRUNCATED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_TRUNCATED
void FMOD::RESULT::_set_ERR_TRUNCATED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_TRUNCATED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_TRUNCATED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_UNIMPLEMENTED
::FMOD::RESULT FMOD::RESULT::_get_ERR_UNIMPLEMENTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_UNIMPLEMENTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_UNIMPLEMENTED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_UNIMPLEMENTED
void FMOD::RESULT::_set_ERR_UNIMPLEMENTED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_UNIMPLEMENTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_UNIMPLEMENTED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_UNINITIALIZED
::FMOD::RESULT FMOD::RESULT::_get_ERR_UNINITIALIZED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_UNINITIALIZED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_UNINITIALIZED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_UNINITIALIZED
void FMOD::RESULT::_set_ERR_UNINITIALIZED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_UNINITIALIZED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_UNINITIALIZED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_UNSUPPORTED
::FMOD::RESULT FMOD::RESULT::_get_ERR_UNSUPPORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_UNSUPPORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_UNSUPPORTED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_UNSUPPORTED
void FMOD::RESULT::_set_ERR_UNSUPPORTED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_UNSUPPORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_UNSUPPORTED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_VERSION
::FMOD::RESULT FMOD::RESULT::_get_ERR_VERSION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_VERSION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_VERSION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_VERSION
void FMOD::RESULT::_set_ERR_VERSION(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_VERSION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_VERSION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_EVENT_ALREADY_LOADED
::FMOD::RESULT FMOD::RESULT::_get_ERR_EVENT_ALREADY_LOADED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_EVENT_ALREADY_LOADED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_EVENT_ALREADY_LOADED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_EVENT_ALREADY_LOADED
void FMOD::RESULT::_set_ERR_EVENT_ALREADY_LOADED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_EVENT_ALREADY_LOADED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_EVENT_ALREADY_LOADED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_BUSY
::FMOD::RESULT FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_BUSY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_BUSY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_BUSY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_BUSY
void FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_BUSY(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_BUSY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_BUSY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_MISMATCH
::FMOD::RESULT FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_MISMATCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_MISMATCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_MISMATCH"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_MISMATCH
void FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_MISMATCH(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_MISMATCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_MISMATCH", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_TIMEOUT
::FMOD::RESULT FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_TIMEOUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_EVENT_LIVEUPDATE_TIMEOUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_TIMEOUT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_EVENT_LIVEUPDATE_TIMEOUT
void FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_TIMEOUT(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_EVENT_LIVEUPDATE_TIMEOUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_EVENT_LIVEUPDATE_TIMEOUT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_EVENT_NOTFOUND
::FMOD::RESULT FMOD::RESULT::_get_ERR_EVENT_NOTFOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_EVENT_NOTFOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_EVENT_NOTFOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_EVENT_NOTFOUND
void FMOD::RESULT::_set_ERR_EVENT_NOTFOUND(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_EVENT_NOTFOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_EVENT_NOTFOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_STUDIO_UNINITIALIZED
::FMOD::RESULT FMOD::RESULT::_get_ERR_STUDIO_UNINITIALIZED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_STUDIO_UNINITIALIZED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_STUDIO_UNINITIALIZED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_STUDIO_UNINITIALIZED
void FMOD::RESULT::_set_ERR_STUDIO_UNINITIALIZED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_STUDIO_UNINITIALIZED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_STUDIO_UNINITIALIZED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_STUDIO_NOT_LOADED
::FMOD::RESULT FMOD::RESULT::_get_ERR_STUDIO_NOT_LOADED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_STUDIO_NOT_LOADED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_STUDIO_NOT_LOADED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_STUDIO_NOT_LOADED
void FMOD::RESULT::_set_ERR_STUDIO_NOT_LOADED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_STUDIO_NOT_LOADED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_STUDIO_NOT_LOADED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_INVALID_STRING
::FMOD::RESULT FMOD::RESULT::_get_ERR_INVALID_STRING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_INVALID_STRING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_INVALID_STRING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_INVALID_STRING
void FMOD::RESULT::_set_ERR_INVALID_STRING(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_INVALID_STRING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_INVALID_STRING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_ALREADY_LOCKED
::FMOD::RESULT FMOD::RESULT::_get_ERR_ALREADY_LOCKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_ALREADY_LOCKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_ALREADY_LOCKED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_ALREADY_LOCKED
void FMOD::RESULT::_set_ERR_ALREADY_LOCKED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_ALREADY_LOCKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_ALREADY_LOCKED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_NOT_LOCKED
::FMOD::RESULT FMOD::RESULT::_get_ERR_NOT_LOCKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_NOT_LOCKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_NOT_LOCKED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_NOT_LOCKED
void FMOD::RESULT::_set_ERR_NOT_LOCKED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_NOT_LOCKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_NOT_LOCKED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_RECORD_DISCONNECTED
::FMOD::RESULT FMOD::RESULT::_get_ERR_RECORD_DISCONNECTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_RECORD_DISCONNECTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_RECORD_DISCONNECTED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_RECORD_DISCONNECTED
void FMOD::RESULT::_set_ERR_RECORD_DISCONNECTED(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_RECORD_DISCONNECTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_RECORD_DISCONNECTED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.RESULT ERR_TOOMANYSAMPLES
::FMOD::RESULT FMOD::RESULT::_get_ERR_TOOMANYSAMPLES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_get_ERR_TOOMANYSAMPLES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::RESULT>("FMOD", "RESULT", "ERR_TOOMANYSAMPLES"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.RESULT ERR_TOOMANYSAMPLES
void FMOD::RESULT::_set_ERR_TOOMANYSAMPLES(::FMOD::RESULT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::_set_ERR_TOOMANYSAMPLES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "RESULT", "ERR_TOOMANYSAMPLES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::RESULT::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::RESULT::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CHANNELCONTROL_TYPE
#include "FMOD/CHANNELCONTROL_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_TYPE CHANNEL
::FMOD::CHANNELCONTROL_TYPE FMOD::CHANNELCONTROL_TYPE::_get_CHANNEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_TYPE::_get_CHANNEL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_TYPE>("FMOD", "CHANNELCONTROL_TYPE", "CHANNEL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_TYPE CHANNEL
void FMOD::CHANNELCONTROL_TYPE::_set_CHANNEL(::FMOD::CHANNELCONTROL_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_TYPE::_set_CHANNEL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_TYPE", "CHANNEL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_TYPE CHANNELGROUP
::FMOD::CHANNELCONTROL_TYPE FMOD::CHANNELCONTROL_TYPE::_get_CHANNELGROUP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_TYPE::_get_CHANNELGROUP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_TYPE>("FMOD", "CHANNELCONTROL_TYPE", "CHANNELGROUP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_TYPE CHANNELGROUP
void FMOD::CHANNELCONTROL_TYPE::_set_CHANNELGROUP(::FMOD::CHANNELCONTROL_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_TYPE::_set_CHANNELGROUP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_TYPE", "CHANNELGROUP", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::CHANNELCONTROL_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.OUTPUTTYPE
#include "FMOD/OUTPUTTYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE AUTODETECT
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_AUTODETECT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_AUTODETECT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "AUTODETECT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE AUTODETECT
void FMOD::OUTPUTTYPE::_set_AUTODETECT(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_AUTODETECT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "AUTODETECT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE UNKNOWN
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_UNKNOWN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_UNKNOWN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "UNKNOWN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE UNKNOWN
void FMOD::OUTPUTTYPE::_set_UNKNOWN(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_UNKNOWN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "UNKNOWN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE NOSOUND
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_NOSOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_NOSOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "NOSOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE NOSOUND
void FMOD::OUTPUTTYPE::_set_NOSOUND(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_NOSOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "NOSOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WAVWRITER
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WAVWRITER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WAVWRITER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WAVWRITER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WAVWRITER
void FMOD::OUTPUTTYPE::_set_WAVWRITER(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WAVWRITER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WAVWRITER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE NOSOUND_NRT
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_NOSOUND_NRT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_NOSOUND_NRT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "NOSOUND_NRT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE NOSOUND_NRT
void FMOD::OUTPUTTYPE::_set_NOSOUND_NRT(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_NOSOUND_NRT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "NOSOUND_NRT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WAVWRITER_NRT
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WAVWRITER_NRT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WAVWRITER_NRT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WAVWRITER_NRT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WAVWRITER_NRT
void FMOD::OUTPUTTYPE::_set_WAVWRITER_NRT(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WAVWRITER_NRT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WAVWRITER_NRT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE DSOUND
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_DSOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_DSOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "DSOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE DSOUND
void FMOD::OUTPUTTYPE::_set_DSOUND(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_DSOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "DSOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WINMM
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WINMM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WINMM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WINMM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WINMM
void FMOD::OUTPUTTYPE::_set_WINMM(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WINMM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WINMM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WASAPI
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WASAPI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WASAPI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WASAPI"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WASAPI
void FMOD::OUTPUTTYPE::_set_WASAPI(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WASAPI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WASAPI", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE ASIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_ASIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_ASIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "ASIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE ASIO
void FMOD::OUTPUTTYPE::_set_ASIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_ASIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "ASIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE PULSEAUDIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_PULSEAUDIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_PULSEAUDIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "PULSEAUDIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE PULSEAUDIO
void FMOD::OUTPUTTYPE::_set_PULSEAUDIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_PULSEAUDIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "PULSEAUDIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE ALSA
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_ALSA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_ALSA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "ALSA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE ALSA
void FMOD::OUTPUTTYPE::_set_ALSA(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_ALSA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "ALSA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE COREAUDIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_COREAUDIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_COREAUDIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "COREAUDIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE COREAUDIO
void FMOD::OUTPUTTYPE::_set_COREAUDIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_COREAUDIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "COREAUDIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE XAUDIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_XAUDIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_XAUDIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "XAUDIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE XAUDIO
void FMOD::OUTPUTTYPE::_set_XAUDIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_XAUDIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "XAUDIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE PS3
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_PS3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_PS3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "PS3"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE PS3
void FMOD::OUTPUTTYPE::_set_PS3(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_PS3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "PS3", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE AUDIOTRACK
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_AUDIOTRACK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_AUDIOTRACK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "AUDIOTRACK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE AUDIOTRACK
void FMOD::OUTPUTTYPE::_set_AUDIOTRACK(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_AUDIOTRACK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "AUDIOTRACK", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE OPENSL
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_OPENSL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_OPENSL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "OPENSL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE OPENSL
void FMOD::OUTPUTTYPE::_set_OPENSL(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_OPENSL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "OPENSL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WIIU
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WIIU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WIIU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WIIU"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WIIU
void FMOD::OUTPUTTYPE::_set_WIIU(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WIIU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WIIU", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE AUDIOOUT
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_AUDIOOUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_AUDIOOUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "AUDIOOUT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE AUDIOOUT
void FMOD::OUTPUTTYPE::_set_AUDIOOUT(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_AUDIOOUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "AUDIOOUT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE AUDIO3D
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_AUDIO3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_AUDIO3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "AUDIO3D"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE AUDIO3D
void FMOD::OUTPUTTYPE::_set_AUDIO3D(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_AUDIO3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "AUDIO3D", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE ATMOS
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_ATMOS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_ATMOS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "ATMOS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE ATMOS
void FMOD::OUTPUTTYPE::_set_ATMOS(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_ATMOS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "ATMOS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WEBAUDIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WEBAUDIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WEBAUDIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WEBAUDIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WEBAUDIO
void FMOD::OUTPUTTYPE::_set_WEBAUDIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WEBAUDIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WEBAUDIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE NNAUDIO
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_NNAUDIO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_NNAUDIO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "NNAUDIO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE NNAUDIO
void FMOD::OUTPUTTYPE::_set_NNAUDIO(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_NNAUDIO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "NNAUDIO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE WINSONIC
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_WINSONIC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_WINSONIC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "WINSONIC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE WINSONIC
void FMOD::OUTPUTTYPE::_set_WINSONIC(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_WINSONIC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "WINSONIC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OUTPUTTYPE MAX
::FMOD::OUTPUTTYPE FMOD::OUTPUTTYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OUTPUTTYPE>("FMOD", "OUTPUTTYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OUTPUTTYPE MAX
void FMOD::OUTPUTTYPE::_set_MAX(::FMOD::OUTPUTTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OUTPUTTYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::OUTPUTTYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OUTPUTTYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DEBUG_MODE
#include "FMOD/DEBUG_MODE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_MODE TTY
::FMOD::DEBUG_MODE FMOD::DEBUG_MODE::_get_TTY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_get_TTY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_MODE>("FMOD", "DEBUG_MODE", "TTY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_MODE TTY
void FMOD::DEBUG_MODE::_set_TTY(::FMOD::DEBUG_MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_set_TTY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_MODE", "TTY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_MODE FILE
::FMOD::DEBUG_MODE FMOD::DEBUG_MODE::_get_FILE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_get_FILE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_MODE>("FMOD", "DEBUG_MODE", "FILE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_MODE FILE
void FMOD::DEBUG_MODE::_set_FILE(::FMOD::DEBUG_MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_set_FILE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_MODE", "FILE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_MODE CALLBACK
::FMOD::DEBUG_MODE FMOD::DEBUG_MODE::_get_CALLBACK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_get_CALLBACK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_MODE>("FMOD", "DEBUG_MODE", "CALLBACK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_MODE CALLBACK
void FMOD::DEBUG_MODE::_set_CALLBACK(::FMOD::DEBUG_MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::_set_CALLBACK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_MODE", "CALLBACK", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::DEBUG_MODE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_MODE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DEBUG_FLAGS
#include "FMOD/DEBUG_FLAGS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS NONE
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS NONE
void FMOD::DEBUG_FLAGS::_set_NONE(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS ERROR
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "ERROR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS ERROR
void FMOD::DEBUG_FLAGS::_set_ERROR(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS WARNING
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_WARNING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_WARNING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "WARNING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS WARNING
void FMOD::DEBUG_FLAGS::_set_WARNING(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_WARNING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "WARNING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS LOG
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_LOG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_LOG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "LOG"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS LOG
void FMOD::DEBUG_FLAGS::_set_LOG(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_LOG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "LOG", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS TYPE_MEMORY
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_TYPE_MEMORY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_TYPE_MEMORY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "TYPE_MEMORY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS TYPE_MEMORY
void FMOD::DEBUG_FLAGS::_set_TYPE_MEMORY(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_TYPE_MEMORY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "TYPE_MEMORY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS TYPE_FILE
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_TYPE_FILE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_TYPE_FILE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "TYPE_FILE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS TYPE_FILE
void FMOD::DEBUG_FLAGS::_set_TYPE_FILE(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_TYPE_FILE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "TYPE_FILE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS TYPE_CODEC
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_TYPE_CODEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_TYPE_CODEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "TYPE_CODEC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS TYPE_CODEC
void FMOD::DEBUG_FLAGS::_set_TYPE_CODEC(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_TYPE_CODEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "TYPE_CODEC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS TYPE_TRACE
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_TYPE_TRACE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_TYPE_TRACE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "TYPE_TRACE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS TYPE_TRACE
void FMOD::DEBUG_FLAGS::_set_TYPE_TRACE(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_TYPE_TRACE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "TYPE_TRACE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_TIMESTAMPS
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_DISPLAY_TIMESTAMPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_DISPLAY_TIMESTAMPS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "DISPLAY_TIMESTAMPS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_TIMESTAMPS
void FMOD::DEBUG_FLAGS::_set_DISPLAY_TIMESTAMPS(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_DISPLAY_TIMESTAMPS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "DISPLAY_TIMESTAMPS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_LINENUMBERS
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_DISPLAY_LINENUMBERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_DISPLAY_LINENUMBERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "DISPLAY_LINENUMBERS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_LINENUMBERS
void FMOD::DEBUG_FLAGS::_set_DISPLAY_LINENUMBERS(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_DISPLAY_LINENUMBERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "DISPLAY_LINENUMBERS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_THREAD
::FMOD::DEBUG_FLAGS FMOD::DEBUG_FLAGS::_get_DISPLAY_THREAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_get_DISPLAY_THREAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DEBUG_FLAGS>("FMOD", "DEBUG_FLAGS", "DISPLAY_THREAD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_THREAD
void FMOD::DEBUG_FLAGS::_set_DISPLAY_THREAD(::FMOD::DEBUG_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::_set_DISPLAY_THREAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DEBUG_FLAGS", "DISPLAY_THREAD", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::DEBUG_FLAGS::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_FLAGS::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.MEMORY_TYPE
#include "FMOD/MEMORY_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE NORMAL
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_NORMAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_NORMAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "NORMAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE NORMAL
void FMOD::MEMORY_TYPE::_set_NORMAL(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_NORMAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "NORMAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE STREAM_FILE
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_STREAM_FILE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_STREAM_FILE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "STREAM_FILE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE STREAM_FILE
void FMOD::MEMORY_TYPE::_set_STREAM_FILE(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_STREAM_FILE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "STREAM_FILE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE STREAM_DECODE
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_STREAM_DECODE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_STREAM_DECODE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "STREAM_DECODE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE STREAM_DECODE
void FMOD::MEMORY_TYPE::_set_STREAM_DECODE(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_STREAM_DECODE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "STREAM_DECODE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE SAMPLEDATA
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_SAMPLEDATA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_SAMPLEDATA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "SAMPLEDATA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE SAMPLEDATA
void FMOD::MEMORY_TYPE::_set_SAMPLEDATA(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_SAMPLEDATA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "SAMPLEDATA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE DSP_BUFFER
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_DSP_BUFFER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_DSP_BUFFER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "DSP_BUFFER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE DSP_BUFFER
void FMOD::MEMORY_TYPE::_set_DSP_BUFFER(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_DSP_BUFFER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "DSP_BUFFER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE PLUGIN
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_PLUGIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_PLUGIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "PLUGIN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE PLUGIN
void FMOD::MEMORY_TYPE::_set_PLUGIN(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_PLUGIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "PLUGIN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE XBOX360_PHYSICAL
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_XBOX360_PHYSICAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_XBOX360_PHYSICAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "XBOX360_PHYSICAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE XBOX360_PHYSICAL
void FMOD::MEMORY_TYPE::_set_XBOX360_PHYSICAL(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_XBOX360_PHYSICAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "XBOX360_PHYSICAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE PERSISTENT
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_PERSISTENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_PERSISTENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "PERSISTENT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE PERSISTENT
void FMOD::MEMORY_TYPE::_set_PERSISTENT(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_PERSISTENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "PERSISTENT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE SECONDARY
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_SECONDARY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_SECONDARY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "SECONDARY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE SECONDARY
void FMOD::MEMORY_TYPE::_set_SECONDARY(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_SECONDARY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "SECONDARY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MEMORY_TYPE ALL
::FMOD::MEMORY_TYPE FMOD::MEMORY_TYPE::_get_ALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_get_ALL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MEMORY_TYPE>("FMOD", "MEMORY_TYPE", "ALL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MEMORY_TYPE ALL
void FMOD::MEMORY_TYPE::_set_ALL(::FMOD::MEMORY_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::_set_ALL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MEMORY_TYPE", "ALL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::MEMORY_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SPEAKERMODE
#include "FMOD/SPEAKERMODE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE DEFAULT
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE DEFAULT
void FMOD::SPEAKERMODE::_set_DEFAULT(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE RAW
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_RAW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_RAW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "RAW"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE RAW
void FMOD::SPEAKERMODE::_set_RAW(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_RAW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "RAW", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE MONO
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_MONO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_MONO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "MONO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE MONO
void FMOD::SPEAKERMODE::_set_MONO(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_MONO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "MONO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE STEREO
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_STEREO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_STEREO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "STEREO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE STEREO
void FMOD::SPEAKERMODE::_set_STEREO(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_STEREO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "STEREO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE QUAD
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_QUAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_QUAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "QUAD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE QUAD
void FMOD::SPEAKERMODE::_set_QUAD(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_QUAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "QUAD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE SURROUND
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_SURROUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_SURROUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "SURROUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE SURROUND
void FMOD::SPEAKERMODE::_set_SURROUND(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_SURROUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "SURROUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE _5POINT1
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get__5POINT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get__5POINT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "_5POINT1"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE _5POINT1
void FMOD::SPEAKERMODE::_set__5POINT1(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set__5POINT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "_5POINT1", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE _7POINT1
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get__7POINT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get__7POINT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "_7POINT1"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE _7POINT1
void FMOD::SPEAKERMODE::_set__7POINT1(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set__7POINT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "_7POINT1", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE _7POINT1POINT4
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get__7POINT1POINT4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get__7POINT1POINT4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "_7POINT1POINT4"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE _7POINT1POINT4
void FMOD::SPEAKERMODE::_set__7POINT1POINT4(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set__7POINT1POINT4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "_7POINT1POINT4", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKERMODE MAX
::FMOD::SPEAKERMODE FMOD::SPEAKERMODE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKERMODE>("FMOD", "SPEAKERMODE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKERMODE MAX
void FMOD::SPEAKERMODE::_set_MAX(::FMOD::SPEAKERMODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKERMODE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::SPEAKERMODE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKERMODE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SPEAKER
#include "FMOD/SPEAKER.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER FRONT_LEFT
::FMOD::SPEAKER FMOD::SPEAKER::_get_FRONT_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_FRONT_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "FRONT_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER FRONT_LEFT
void FMOD::SPEAKER::_set_FRONT_LEFT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_FRONT_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "FRONT_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER FRONT_RIGHT
::FMOD::SPEAKER FMOD::SPEAKER::_get_FRONT_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_FRONT_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "FRONT_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER FRONT_RIGHT
void FMOD::SPEAKER::_set_FRONT_RIGHT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_FRONT_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "FRONT_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER FRONT_CENTER
::FMOD::SPEAKER FMOD::SPEAKER::_get_FRONT_CENTER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_FRONT_CENTER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "FRONT_CENTER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER FRONT_CENTER
void FMOD::SPEAKER::_set_FRONT_CENTER(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_FRONT_CENTER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "FRONT_CENTER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER LOW_FREQUENCY
::FMOD::SPEAKER FMOD::SPEAKER::_get_LOW_FREQUENCY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_LOW_FREQUENCY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "LOW_FREQUENCY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER LOW_FREQUENCY
void FMOD::SPEAKER::_set_LOW_FREQUENCY(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_LOW_FREQUENCY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "LOW_FREQUENCY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER SURROUND_LEFT
::FMOD::SPEAKER FMOD::SPEAKER::_get_SURROUND_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_SURROUND_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "SURROUND_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER SURROUND_LEFT
void FMOD::SPEAKER::_set_SURROUND_LEFT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_SURROUND_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "SURROUND_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER SURROUND_RIGHT
::FMOD::SPEAKER FMOD::SPEAKER::_get_SURROUND_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_SURROUND_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "SURROUND_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER SURROUND_RIGHT
void FMOD::SPEAKER::_set_SURROUND_RIGHT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_SURROUND_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "SURROUND_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER BACK_LEFT
::FMOD::SPEAKER FMOD::SPEAKER::_get_BACK_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_BACK_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "BACK_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER BACK_LEFT
void FMOD::SPEAKER::_set_BACK_LEFT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_BACK_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "BACK_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER BACK_RIGHT
::FMOD::SPEAKER FMOD::SPEAKER::_get_BACK_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_BACK_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "BACK_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER BACK_RIGHT
void FMOD::SPEAKER::_set_BACK_RIGHT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_BACK_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "BACK_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER TOP_FRONT_LEFT
::FMOD::SPEAKER FMOD::SPEAKER::_get_TOP_FRONT_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_TOP_FRONT_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "TOP_FRONT_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER TOP_FRONT_LEFT
void FMOD::SPEAKER::_set_TOP_FRONT_LEFT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_TOP_FRONT_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "TOP_FRONT_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER TOP_FRONT_RIGHT
::FMOD::SPEAKER FMOD::SPEAKER::_get_TOP_FRONT_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_TOP_FRONT_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "TOP_FRONT_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER TOP_FRONT_RIGHT
void FMOD::SPEAKER::_set_TOP_FRONT_RIGHT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_TOP_FRONT_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "TOP_FRONT_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER TOP_BACK_LEFT
::FMOD::SPEAKER FMOD::SPEAKER::_get_TOP_BACK_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_TOP_BACK_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "TOP_BACK_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER TOP_BACK_LEFT
void FMOD::SPEAKER::_set_TOP_BACK_LEFT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_TOP_BACK_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "TOP_BACK_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER TOP_BACK_RIGHT
::FMOD::SPEAKER FMOD::SPEAKER::_get_TOP_BACK_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_TOP_BACK_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "TOP_BACK_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER TOP_BACK_RIGHT
void FMOD::SPEAKER::_set_TOP_BACK_RIGHT(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_TOP_BACK_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "TOP_BACK_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SPEAKER MAX
::FMOD::SPEAKER FMOD::SPEAKER::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SPEAKER>("FMOD", "SPEAKER", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SPEAKER MAX
void FMOD::SPEAKER::_set_MAX(::FMOD::SPEAKER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SPEAKER", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::SPEAKER::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SPEAKER::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CHANNELMASK
#include "FMOD/CHANNELMASK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK FRONT_LEFT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_FRONT_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_FRONT_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "FRONT_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK FRONT_LEFT
void FMOD::CHANNELMASK::_set_FRONT_LEFT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_FRONT_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "FRONT_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK FRONT_RIGHT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_FRONT_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_FRONT_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "FRONT_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK FRONT_RIGHT
void FMOD::CHANNELMASK::_set_FRONT_RIGHT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_FRONT_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "FRONT_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK FRONT_CENTER
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_FRONT_CENTER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_FRONT_CENTER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "FRONT_CENTER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK FRONT_CENTER
void FMOD::CHANNELMASK::_set_FRONT_CENTER(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_FRONT_CENTER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "FRONT_CENTER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK LOW_FREQUENCY
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_LOW_FREQUENCY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_LOW_FREQUENCY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "LOW_FREQUENCY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK LOW_FREQUENCY
void FMOD::CHANNELMASK::_set_LOW_FREQUENCY(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_LOW_FREQUENCY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "LOW_FREQUENCY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK SURROUND_LEFT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_SURROUND_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_SURROUND_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "SURROUND_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK SURROUND_LEFT
void FMOD::CHANNELMASK::_set_SURROUND_LEFT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_SURROUND_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "SURROUND_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK SURROUND_RIGHT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_SURROUND_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_SURROUND_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "SURROUND_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK SURROUND_RIGHT
void FMOD::CHANNELMASK::_set_SURROUND_RIGHT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_SURROUND_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "SURROUND_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK BACK_LEFT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_BACK_LEFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_BACK_LEFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "BACK_LEFT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK BACK_LEFT
void FMOD::CHANNELMASK::_set_BACK_LEFT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_BACK_LEFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "BACK_LEFT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK BACK_RIGHT
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_BACK_RIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_BACK_RIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "BACK_RIGHT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK BACK_RIGHT
void FMOD::CHANNELMASK::_set_BACK_RIGHT(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_BACK_RIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "BACK_RIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK BACK_CENTER
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_BACK_CENTER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_BACK_CENTER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "BACK_CENTER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK BACK_CENTER
void FMOD::CHANNELMASK::_set_BACK_CENTER(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_BACK_CENTER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "BACK_CENTER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK MONO
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_MONO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_MONO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "MONO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK MONO
void FMOD::CHANNELMASK::_set_MONO(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_MONO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "MONO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK STEREO
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_STEREO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_STEREO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "STEREO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK STEREO
void FMOD::CHANNELMASK::_set_STEREO(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_STEREO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "STEREO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK LRC
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_LRC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_LRC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "LRC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK LRC
void FMOD::CHANNELMASK::_set_LRC(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_LRC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "LRC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK QUAD
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_QUAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_QUAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "QUAD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK QUAD
void FMOD::CHANNELMASK::_set_QUAD(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_QUAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "QUAD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK SURROUND
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get_SURROUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get_SURROUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "SURROUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK SURROUND
void FMOD::CHANNELMASK::_set_SURROUND(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set_SURROUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "SURROUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK _5POINT1
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get__5POINT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get__5POINT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "_5POINT1"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK _5POINT1
void FMOD::CHANNELMASK::_set__5POINT1(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set__5POINT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "_5POINT1", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK _5POINT1_REARS
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get__5POINT1_REARS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get__5POINT1_REARS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "_5POINT1_REARS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK _5POINT1_REARS
void FMOD::CHANNELMASK::_set__5POINT1_REARS(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set__5POINT1_REARS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "_5POINT1_REARS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK _7POINT0
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get__7POINT0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get__7POINT0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "_7POINT0"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK _7POINT0
void FMOD::CHANNELMASK::_set__7POINT0(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set__7POINT0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "_7POINT0", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELMASK _7POINT1
::FMOD::CHANNELMASK FMOD::CHANNELMASK::_get__7POINT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_get__7POINT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELMASK>("FMOD", "CHANNELMASK", "_7POINT1"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELMASK _7POINT1
void FMOD::CHANNELMASK::_set__7POINT1(::FMOD::CHANNELMASK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::_set__7POINT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELMASK", "_7POINT1", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::CHANNELMASK::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELMASK::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CHANNELORDER
#include "FMOD/CHANNELORDER.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER DEFAULT
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER DEFAULT
void FMOD::CHANNELORDER::_set_DEFAULT(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER WAVEFORMAT
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_WAVEFORMAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_WAVEFORMAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "WAVEFORMAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER WAVEFORMAT
void FMOD::CHANNELORDER::_set_WAVEFORMAT(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_WAVEFORMAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "WAVEFORMAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER PROTOOLS
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_PROTOOLS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_PROTOOLS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "PROTOOLS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER PROTOOLS
void FMOD::CHANNELORDER::_set_PROTOOLS(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_PROTOOLS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "PROTOOLS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER ALLMONO
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_ALLMONO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_ALLMONO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "ALLMONO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER ALLMONO
void FMOD::CHANNELORDER::_set_ALLMONO(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_ALLMONO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "ALLMONO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER ALLSTEREO
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_ALLSTEREO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_ALLSTEREO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "ALLSTEREO"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER ALLSTEREO
void FMOD::CHANNELORDER::_set_ALLSTEREO(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_ALLSTEREO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "ALLSTEREO", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER ALSA
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_ALSA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_ALSA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "ALSA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER ALSA
void FMOD::CHANNELORDER::_set_ALSA(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_ALSA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "ALSA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELORDER MAX
::FMOD::CHANNELORDER FMOD::CHANNELORDER::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELORDER>("FMOD", "CHANNELORDER", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELORDER MAX
void FMOD::CHANNELORDER::_set_MAX(::FMOD::CHANNELORDER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELORDER", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::CHANNELORDER::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELORDER::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.PLUGINTYPE
#include "FMOD/PLUGINTYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.PLUGINTYPE OUTPUT
::FMOD::PLUGINTYPE FMOD::PLUGINTYPE::_get_OUTPUT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_get_OUTPUT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::PLUGINTYPE>("FMOD", "PLUGINTYPE", "OUTPUT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.PLUGINTYPE OUTPUT
void FMOD::PLUGINTYPE::_set_OUTPUT(::FMOD::PLUGINTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_set_OUTPUT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "PLUGINTYPE", "OUTPUT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.PLUGINTYPE CODEC
::FMOD::PLUGINTYPE FMOD::PLUGINTYPE::_get_CODEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_get_CODEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::PLUGINTYPE>("FMOD", "PLUGINTYPE", "CODEC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.PLUGINTYPE CODEC
void FMOD::PLUGINTYPE::_set_CODEC(::FMOD::PLUGINTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_set_CODEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "PLUGINTYPE", "CODEC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.PLUGINTYPE DSP
::FMOD::PLUGINTYPE FMOD::PLUGINTYPE::_get_DSP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_get_DSP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::PLUGINTYPE>("FMOD", "PLUGINTYPE", "DSP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.PLUGINTYPE DSP
void FMOD::PLUGINTYPE::_set_DSP(::FMOD::PLUGINTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_set_DSP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "PLUGINTYPE", "DSP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.PLUGINTYPE MAX
::FMOD::PLUGINTYPE FMOD::PLUGINTYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::PLUGINTYPE>("FMOD", "PLUGINTYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.PLUGINTYPE MAX
void FMOD::PLUGINTYPE::_set_MAX(::FMOD::PLUGINTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "PLUGINTYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::PLUGINTYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PLUGINTYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.INITFLAGS
#include "FMOD/INITFLAGS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS NORMAL
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_NORMAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_NORMAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "NORMAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS NORMAL
void FMOD::INITFLAGS::_set_NORMAL(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_NORMAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "NORMAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS STREAM_FROM_UPDATE
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_STREAM_FROM_UPDATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_STREAM_FROM_UPDATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "STREAM_FROM_UPDATE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS STREAM_FROM_UPDATE
void FMOD::INITFLAGS::_set_STREAM_FROM_UPDATE(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_STREAM_FROM_UPDATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "STREAM_FROM_UPDATE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS MIX_FROM_UPDATE
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_MIX_FROM_UPDATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_MIX_FROM_UPDATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "MIX_FROM_UPDATE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS MIX_FROM_UPDATE
void FMOD::INITFLAGS::_set_MIX_FROM_UPDATE(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_MIX_FROM_UPDATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "MIX_FROM_UPDATE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS _3D_RIGHTHANDED
::FMOD::INITFLAGS FMOD::INITFLAGS::_get__3D_RIGHTHANDED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get__3D_RIGHTHANDED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "_3D_RIGHTHANDED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS _3D_RIGHTHANDED
void FMOD::INITFLAGS::_set__3D_RIGHTHANDED(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set__3D_RIGHTHANDED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "_3D_RIGHTHANDED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS CHANNEL_LOWPASS
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_CHANNEL_LOWPASS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_CHANNEL_LOWPASS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "CHANNEL_LOWPASS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS CHANNEL_LOWPASS
void FMOD::INITFLAGS::_set_CHANNEL_LOWPASS(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_CHANNEL_LOWPASS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "CHANNEL_LOWPASS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS CHANNEL_DISTANCEFILTER
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_CHANNEL_DISTANCEFILTER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_CHANNEL_DISTANCEFILTER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "CHANNEL_DISTANCEFILTER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS CHANNEL_DISTANCEFILTER
void FMOD::INITFLAGS::_set_CHANNEL_DISTANCEFILTER(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_CHANNEL_DISTANCEFILTER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "CHANNEL_DISTANCEFILTER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS PROFILE_ENABLE
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_PROFILE_ENABLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_PROFILE_ENABLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "PROFILE_ENABLE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS PROFILE_ENABLE
void FMOD::INITFLAGS::_set_PROFILE_ENABLE(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_PROFILE_ENABLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "PROFILE_ENABLE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS VOL0_BECOMES_VIRTUAL
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_VOL0_BECOMES_VIRTUAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_VOL0_BECOMES_VIRTUAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "VOL0_BECOMES_VIRTUAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS VOL0_BECOMES_VIRTUAL
void FMOD::INITFLAGS::_set_VOL0_BECOMES_VIRTUAL(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_VOL0_BECOMES_VIRTUAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "VOL0_BECOMES_VIRTUAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS GEOMETRY_USECLOSEST
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_GEOMETRY_USECLOSEST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_GEOMETRY_USECLOSEST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "GEOMETRY_USECLOSEST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS GEOMETRY_USECLOSEST
void FMOD::INITFLAGS::_set_GEOMETRY_USECLOSEST(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_GEOMETRY_USECLOSEST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "GEOMETRY_USECLOSEST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS PREFER_DOLBY_DOWNMIX
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_PREFER_DOLBY_DOWNMIX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_PREFER_DOLBY_DOWNMIX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "PREFER_DOLBY_DOWNMIX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS PREFER_DOLBY_DOWNMIX
void FMOD::INITFLAGS::_set_PREFER_DOLBY_DOWNMIX(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_PREFER_DOLBY_DOWNMIX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "PREFER_DOLBY_DOWNMIX", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS THREAD_UNSAFE
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_THREAD_UNSAFE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_THREAD_UNSAFE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "THREAD_UNSAFE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS THREAD_UNSAFE
void FMOD::INITFLAGS::_set_THREAD_UNSAFE(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_THREAD_UNSAFE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "THREAD_UNSAFE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS PROFILE_METER_ALL
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_PROFILE_METER_ALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_PROFILE_METER_ALL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "PROFILE_METER_ALL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS PROFILE_METER_ALL
void FMOD::INITFLAGS::_set_PROFILE_METER_ALL(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_PROFILE_METER_ALL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "PROFILE_METER_ALL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.INITFLAGS DISABLE_SRS_HIGHPASSFILTER
::FMOD::INITFLAGS FMOD::INITFLAGS::_get_DISABLE_SRS_HIGHPASSFILTER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_get_DISABLE_SRS_HIGHPASSFILTER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::INITFLAGS>("FMOD", "INITFLAGS", "DISABLE_SRS_HIGHPASSFILTER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.INITFLAGS DISABLE_SRS_HIGHPASSFILTER
void FMOD::INITFLAGS::_set_DISABLE_SRS_HIGHPASSFILTER(::FMOD::INITFLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::_set_DISABLE_SRS_HIGHPASSFILTER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "INITFLAGS", "DISABLE_SRS_HIGHPASSFILTER", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::INITFLAGS::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::INITFLAGS::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SOUND_TYPE
#include "FMOD/SOUND_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE UNKNOWN
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_UNKNOWN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_UNKNOWN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "UNKNOWN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE UNKNOWN
void FMOD::SOUND_TYPE::_set_UNKNOWN(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_UNKNOWN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "UNKNOWN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE AIFF
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_AIFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_AIFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "AIFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE AIFF
void FMOD::SOUND_TYPE::_set_AIFF(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_AIFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "AIFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE ASF
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_ASF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_ASF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "ASF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE ASF
void FMOD::SOUND_TYPE::_set_ASF(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_ASF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "ASF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE DLS
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_DLS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_DLS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "DLS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE DLS
void FMOD::SOUND_TYPE::_set_DLS(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_DLS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "DLS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE FLAC
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_FLAC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_FLAC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "FLAC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE FLAC
void FMOD::SOUND_TYPE::_set_FLAC(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_FLAC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "FLAC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE FSB
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_FSB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_FSB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "FSB"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE FSB
void FMOD::SOUND_TYPE::_set_FSB(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_FSB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "FSB", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE IT
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_IT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_IT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "IT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE IT
void FMOD::SOUND_TYPE::_set_IT(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_IT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "IT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MIDI
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MIDI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MIDI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MIDI"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MIDI
void FMOD::SOUND_TYPE::_set_MIDI(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MIDI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MIDI", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MOD
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MOD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MOD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MOD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MOD
void FMOD::SOUND_TYPE::_set_MOD(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MOD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MOD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MPEG
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MPEG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MPEG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MPEG"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MPEG
void FMOD::SOUND_TYPE::_set_MPEG(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MPEG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MPEG", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE OGGVORBIS
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_OGGVORBIS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_OGGVORBIS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "OGGVORBIS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE OGGVORBIS
void FMOD::SOUND_TYPE::_set_OGGVORBIS(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_OGGVORBIS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "OGGVORBIS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE PLAYLIST
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_PLAYLIST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_PLAYLIST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "PLAYLIST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE PLAYLIST
void FMOD::SOUND_TYPE::_set_PLAYLIST(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_PLAYLIST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "PLAYLIST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE RAW
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_RAW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_RAW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "RAW"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE RAW
void FMOD::SOUND_TYPE::_set_RAW(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_RAW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "RAW", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE S3M
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_S3M() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_S3M");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "S3M"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE S3M
void FMOD::SOUND_TYPE::_set_S3M(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_S3M");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "S3M", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE USER
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_USER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_USER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "USER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE USER
void FMOD::SOUND_TYPE::_set_USER(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_USER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "USER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE WAV
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_WAV() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_WAV");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "WAV"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE WAV
void FMOD::SOUND_TYPE::_set_WAV(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_WAV");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "WAV", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE XM
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_XM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_XM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "XM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE XM
void FMOD::SOUND_TYPE::_set_XM(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_XM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "XM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE XMA
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_XMA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_XMA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "XMA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE XMA
void FMOD::SOUND_TYPE::_set_XMA(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_XMA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "XMA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE AUDIOQUEUE
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_AUDIOQUEUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_AUDIOQUEUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "AUDIOQUEUE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE AUDIOQUEUE
void FMOD::SOUND_TYPE::_set_AUDIOQUEUE(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_AUDIOQUEUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "AUDIOQUEUE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE AT9
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_AT9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_AT9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "AT9"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE AT9
void FMOD::SOUND_TYPE::_set_AT9(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_AT9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "AT9", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE VORBIS
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_VORBIS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_VORBIS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "VORBIS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE VORBIS
void FMOD::SOUND_TYPE::_set_VORBIS(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_VORBIS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "VORBIS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MEDIA_FOUNDATION
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MEDIA_FOUNDATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MEDIA_FOUNDATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MEDIA_FOUNDATION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MEDIA_FOUNDATION
void FMOD::SOUND_TYPE::_set_MEDIA_FOUNDATION(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MEDIA_FOUNDATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MEDIA_FOUNDATION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MEDIACODEC
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MEDIACODEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MEDIACODEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MEDIACODEC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MEDIACODEC
void FMOD::SOUND_TYPE::_set_MEDIACODEC(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MEDIACODEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MEDIACODEC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE FADPCM
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_FADPCM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_FADPCM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "FADPCM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE FADPCM
void FMOD::SOUND_TYPE::_set_FADPCM(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_FADPCM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "FADPCM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_TYPE MAX
::FMOD::SOUND_TYPE FMOD::SOUND_TYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_TYPE>("FMOD", "SOUND_TYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_TYPE MAX
void FMOD::SOUND_TYPE::_set_MAX(::FMOD::SOUND_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_TYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::SOUND_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SOUND_FORMAT
#include "FMOD/SOUND_FORMAT.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT NONE
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT NONE
void FMOD::SOUND_FORMAT::_set_NONE(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT PCM8
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_PCM8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_PCM8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "PCM8"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT PCM8
void FMOD::SOUND_FORMAT::_set_PCM8(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_PCM8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "PCM8", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT PCM16
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_PCM16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_PCM16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "PCM16"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT PCM16
void FMOD::SOUND_FORMAT::_set_PCM16(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_PCM16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "PCM16", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT PCM24
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_PCM24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_PCM24");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "PCM24"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT PCM24
void FMOD::SOUND_FORMAT::_set_PCM24(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_PCM24");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "PCM24", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT PCM32
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_PCM32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_PCM32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "PCM32"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT PCM32
void FMOD::SOUND_FORMAT::_set_PCM32(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_PCM32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "PCM32", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT PCMFLOAT
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_PCMFLOAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_PCMFLOAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "PCMFLOAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT PCMFLOAT
void FMOD::SOUND_FORMAT::_set_PCMFLOAT(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_PCMFLOAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "PCMFLOAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT BITSTREAM
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_BITSTREAM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_BITSTREAM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "BITSTREAM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT BITSTREAM
void FMOD::SOUND_FORMAT::_set_BITSTREAM(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_BITSTREAM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "BITSTREAM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUND_FORMAT MAX
::FMOD::SOUND_FORMAT FMOD::SOUND_FORMAT::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUND_FORMAT>("FMOD", "SOUND_FORMAT", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUND_FORMAT MAX
void FMOD::SOUND_FORMAT::_set_MAX(::FMOD::SOUND_FORMAT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUND_FORMAT", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::SOUND_FORMAT::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_FORMAT::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.MODE DEFAULT
::FMOD::MODE FMOD::MODE::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE DEFAULT
void FMOD::MODE::_set_DEFAULT(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE LOOP_OFF
::FMOD::MODE FMOD::MODE::_get_LOOP_OFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_LOOP_OFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "LOOP_OFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE LOOP_OFF
void FMOD::MODE::_set_LOOP_OFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_LOOP_OFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "LOOP_OFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE LOOP_NORMAL
::FMOD::MODE FMOD::MODE::_get_LOOP_NORMAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_LOOP_NORMAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "LOOP_NORMAL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE LOOP_NORMAL
void FMOD::MODE::_set_LOOP_NORMAL(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_LOOP_NORMAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "LOOP_NORMAL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE LOOP_BIDI
::FMOD::MODE FMOD::MODE::_get_LOOP_BIDI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_LOOP_BIDI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "LOOP_BIDI"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE LOOP_BIDI
void FMOD::MODE::_set_LOOP_BIDI(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_LOOP_BIDI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "LOOP_BIDI", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _2D
::FMOD::MODE FMOD::MODE::_get__2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_2D"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _2D
void FMOD::MODE::_set__2D(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_2D", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D
::FMOD::MODE FMOD::MODE::_get__3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D
void FMOD::MODE::_set__3D(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE CREATESTREAM
::FMOD::MODE FMOD::MODE::_get_CREATESTREAM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_CREATESTREAM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "CREATESTREAM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE CREATESTREAM
void FMOD::MODE::_set_CREATESTREAM(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_CREATESTREAM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "CREATESTREAM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE CREATESAMPLE
::FMOD::MODE FMOD::MODE::_get_CREATESAMPLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_CREATESAMPLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "CREATESAMPLE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE CREATESAMPLE
void FMOD::MODE::_set_CREATESAMPLE(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_CREATESAMPLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "CREATESAMPLE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE CREATECOMPRESSEDSAMPLE
::FMOD::MODE FMOD::MODE::_get_CREATECOMPRESSEDSAMPLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_CREATECOMPRESSEDSAMPLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "CREATECOMPRESSEDSAMPLE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE CREATECOMPRESSEDSAMPLE
void FMOD::MODE::_set_CREATECOMPRESSEDSAMPLE(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_CREATECOMPRESSEDSAMPLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "CREATECOMPRESSEDSAMPLE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE OPENUSER
::FMOD::MODE FMOD::MODE::_get_OPENUSER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_OPENUSER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "OPENUSER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE OPENUSER
void FMOD::MODE::_set_OPENUSER(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_OPENUSER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "OPENUSER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE OPENMEMORY
::FMOD::MODE FMOD::MODE::_get_OPENMEMORY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_OPENMEMORY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "OPENMEMORY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE OPENMEMORY
void FMOD::MODE::_set_OPENMEMORY(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_OPENMEMORY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "OPENMEMORY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE OPENMEMORY_POINT
::FMOD::MODE FMOD::MODE::_get_OPENMEMORY_POINT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_OPENMEMORY_POINT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "OPENMEMORY_POINT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE OPENMEMORY_POINT
void FMOD::MODE::_set_OPENMEMORY_POINT(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_OPENMEMORY_POINT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "OPENMEMORY_POINT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE OPENRAW
::FMOD::MODE FMOD::MODE::_get_OPENRAW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_OPENRAW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "OPENRAW"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE OPENRAW
void FMOD::MODE::_set_OPENRAW(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_OPENRAW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "OPENRAW", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE OPENONLY
::FMOD::MODE FMOD::MODE::_get_OPENONLY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_OPENONLY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "OPENONLY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE OPENONLY
void FMOD::MODE::_set_OPENONLY(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_OPENONLY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "OPENONLY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE ACCURATETIME
::FMOD::MODE FMOD::MODE::_get_ACCURATETIME() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_ACCURATETIME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "ACCURATETIME"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE ACCURATETIME
void FMOD::MODE::_set_ACCURATETIME(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_ACCURATETIME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "ACCURATETIME", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE MPEGSEARCH
::FMOD::MODE FMOD::MODE::_get_MPEGSEARCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_MPEGSEARCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "MPEGSEARCH"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE MPEGSEARCH
void FMOD::MODE::_set_MPEGSEARCH(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_MPEGSEARCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "MPEGSEARCH", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE NONBLOCKING
::FMOD::MODE FMOD::MODE::_get_NONBLOCKING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_NONBLOCKING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "NONBLOCKING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE NONBLOCKING
void FMOD::MODE::_set_NONBLOCKING(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_NONBLOCKING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "NONBLOCKING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE UNIQUE
::FMOD::MODE FMOD::MODE::_get_UNIQUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_UNIQUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "UNIQUE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE UNIQUE
void FMOD::MODE::_set_UNIQUE(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_UNIQUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "UNIQUE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_HEADRELATIVE
::FMOD::MODE FMOD::MODE::_get__3D_HEADRELATIVE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_HEADRELATIVE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_HEADRELATIVE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_HEADRELATIVE
void FMOD::MODE::_set__3D_HEADRELATIVE(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_HEADRELATIVE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_HEADRELATIVE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_WORLDRELATIVE
::FMOD::MODE FMOD::MODE::_get__3D_WORLDRELATIVE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_WORLDRELATIVE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_WORLDRELATIVE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_WORLDRELATIVE
void FMOD::MODE::_set__3D_WORLDRELATIVE(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_WORLDRELATIVE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_WORLDRELATIVE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_INVERSEROLLOFF
::FMOD::MODE FMOD::MODE::_get__3D_INVERSEROLLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_INVERSEROLLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_INVERSEROLLOFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_INVERSEROLLOFF
void FMOD::MODE::_set__3D_INVERSEROLLOFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_INVERSEROLLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_INVERSEROLLOFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_LINEARROLLOFF
::FMOD::MODE FMOD::MODE::_get__3D_LINEARROLLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_LINEARROLLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_LINEARROLLOFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_LINEARROLLOFF
void FMOD::MODE::_set__3D_LINEARROLLOFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_LINEARROLLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_LINEARROLLOFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_LINEARSQUAREROLLOFF
::FMOD::MODE FMOD::MODE::_get__3D_LINEARSQUAREROLLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_LINEARSQUAREROLLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_LINEARSQUAREROLLOFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_LINEARSQUAREROLLOFF
void FMOD::MODE::_set__3D_LINEARSQUAREROLLOFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_LINEARSQUAREROLLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_LINEARSQUAREROLLOFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_INVERSETAPEREDROLLOFF
::FMOD::MODE FMOD::MODE::_get__3D_INVERSETAPEREDROLLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_INVERSETAPEREDROLLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_INVERSETAPEREDROLLOFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_INVERSETAPEREDROLLOFF
void FMOD::MODE::_set__3D_INVERSETAPEREDROLLOFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_INVERSETAPEREDROLLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_INVERSETAPEREDROLLOFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_CUSTOMROLLOFF
::FMOD::MODE FMOD::MODE::_get__3D_CUSTOMROLLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_CUSTOMROLLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_CUSTOMROLLOFF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_CUSTOMROLLOFF
void FMOD::MODE::_set__3D_CUSTOMROLLOFF(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_CUSTOMROLLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_CUSTOMROLLOFF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE _3D_IGNOREGEOMETRY
::FMOD::MODE FMOD::MODE::_get__3D_IGNOREGEOMETRY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get__3D_IGNOREGEOMETRY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "_3D_IGNOREGEOMETRY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE _3D_IGNOREGEOMETRY
void FMOD::MODE::_set__3D_IGNOREGEOMETRY(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set__3D_IGNOREGEOMETRY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "_3D_IGNOREGEOMETRY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE IGNORETAGS
::FMOD::MODE FMOD::MODE::_get_IGNORETAGS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_IGNORETAGS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "IGNORETAGS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE IGNORETAGS
void FMOD::MODE::_set_IGNORETAGS(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_IGNORETAGS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "IGNORETAGS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE LOWMEM
::FMOD::MODE FMOD::MODE::_get_LOWMEM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_LOWMEM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "LOWMEM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE LOWMEM
void FMOD::MODE::_set_LOWMEM(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_LOWMEM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "LOWMEM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE LOADSECONDARYRAM
::FMOD::MODE FMOD::MODE::_get_LOADSECONDARYRAM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_LOADSECONDARYRAM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "LOADSECONDARYRAM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE LOADSECONDARYRAM
void FMOD::MODE::_set_LOADSECONDARYRAM(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_LOADSECONDARYRAM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "LOADSECONDARYRAM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.MODE VIRTUAL_PLAYFROMSTART
::FMOD::MODE FMOD::MODE::_get_VIRTUAL_PLAYFROMSTART() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_get_VIRTUAL_PLAYFROMSTART");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::MODE>("FMOD", "MODE", "VIRTUAL_PLAYFROMSTART"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.MODE VIRTUAL_PLAYFROMSTART
void FMOD::MODE::_set_VIRTUAL_PLAYFROMSTART(::FMOD::MODE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::_set_VIRTUAL_PLAYFROMSTART");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "MODE", "VIRTUAL_PLAYFROMSTART", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::MODE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MODE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.OPENSTATE
#include "FMOD/OPENSTATE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE READY
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_READY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_READY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "READY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE READY
void FMOD::OPENSTATE::_set_READY(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_READY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "READY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE LOADING
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_LOADING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_LOADING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "LOADING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE LOADING
void FMOD::OPENSTATE::_set_LOADING(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_LOADING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "LOADING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE ERROR
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "ERROR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE ERROR
void FMOD::OPENSTATE::_set_ERROR(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE CONNECTING
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_CONNECTING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_CONNECTING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "CONNECTING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE CONNECTING
void FMOD::OPENSTATE::_set_CONNECTING(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_CONNECTING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "CONNECTING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE BUFFERING
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_BUFFERING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_BUFFERING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "BUFFERING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE BUFFERING
void FMOD::OPENSTATE::_set_BUFFERING(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_BUFFERING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "BUFFERING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE SEEKING
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_SEEKING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_SEEKING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "SEEKING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE SEEKING
void FMOD::OPENSTATE::_set_SEEKING(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_SEEKING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "SEEKING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE PLAYING
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_PLAYING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_PLAYING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "PLAYING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE PLAYING
void FMOD::OPENSTATE::_set_PLAYING(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_PLAYING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "PLAYING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE SETPOSITION
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_SETPOSITION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_SETPOSITION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "SETPOSITION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE SETPOSITION
void FMOD::OPENSTATE::_set_SETPOSITION(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_SETPOSITION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "SETPOSITION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.OPENSTATE MAX
::FMOD::OPENSTATE FMOD::OPENSTATE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::OPENSTATE>("FMOD", "OPENSTATE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.OPENSTATE MAX
void FMOD::OPENSTATE::_set_MAX(::FMOD::OPENSTATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "OPENSTATE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::OPENSTATE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::OPENSTATE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SOUNDGROUP_BEHAVIOR
#include "FMOD/SOUNDGROUP_BEHAVIOR.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_FAIL
::FMOD::SOUNDGROUP_BEHAVIOR FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_FAIL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_FAIL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUNDGROUP_BEHAVIOR>("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_FAIL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_FAIL
void FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_FAIL(::FMOD::SOUNDGROUP_BEHAVIOR value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_FAIL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_FAIL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_MUTE
::FMOD::SOUNDGROUP_BEHAVIOR FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_MUTE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_MUTE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUNDGROUP_BEHAVIOR>("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_MUTE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_MUTE
void FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_MUTE(::FMOD::SOUNDGROUP_BEHAVIOR value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_MUTE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_MUTE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_STEALLOWEST
::FMOD::SOUNDGROUP_BEHAVIOR FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_STEALLOWEST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_get_BEHAVIOR_STEALLOWEST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUNDGROUP_BEHAVIOR>("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_STEALLOWEST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUNDGROUP_BEHAVIOR BEHAVIOR_STEALLOWEST
void FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_STEALLOWEST(::FMOD::SOUNDGROUP_BEHAVIOR value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_set_BEHAVIOR_STEALLOWEST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUNDGROUP_BEHAVIOR", "BEHAVIOR_STEALLOWEST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SOUNDGROUP_BEHAVIOR MAX
::FMOD::SOUNDGROUP_BEHAVIOR FMOD::SOUNDGROUP_BEHAVIOR::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SOUNDGROUP_BEHAVIOR>("FMOD", "SOUNDGROUP_BEHAVIOR", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SOUNDGROUP_BEHAVIOR MAX
void FMOD::SOUNDGROUP_BEHAVIOR::_set_MAX(::FMOD::SOUNDGROUP_BEHAVIOR value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SOUNDGROUP_BEHAVIOR", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::SOUNDGROUP_BEHAVIOR::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUNDGROUP_BEHAVIOR::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CHANNELCONTROL_CALLBACK_TYPE
#include "FMOD/CHANNELCONTROL_CALLBACK_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE END
::FMOD::CHANNELCONTROL_CALLBACK_TYPE FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_END() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_END");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_CALLBACK_TYPE>("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "END"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE END
void FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_END(::FMOD::CHANNELCONTROL_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_END");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "END", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE VIRTUALVOICE
::FMOD::CHANNELCONTROL_CALLBACK_TYPE FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_VIRTUALVOICE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_VIRTUALVOICE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_CALLBACK_TYPE>("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "VIRTUALVOICE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE VIRTUALVOICE
void FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_VIRTUALVOICE(::FMOD::CHANNELCONTROL_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_VIRTUALVOICE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "VIRTUALVOICE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE SYNCPOINT
::FMOD::CHANNELCONTROL_CALLBACK_TYPE FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_SYNCPOINT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_SYNCPOINT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_CALLBACK_TYPE>("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "SYNCPOINT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE SYNCPOINT
void FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_SYNCPOINT(::FMOD::CHANNELCONTROL_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_SYNCPOINT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "SYNCPOINT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE OCCLUSION
::FMOD::CHANNELCONTROL_CALLBACK_TYPE FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_OCCLUSION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_OCCLUSION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_CALLBACK_TYPE>("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "OCCLUSION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE OCCLUSION
void FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_OCCLUSION(::FMOD::CHANNELCONTROL_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_OCCLUSION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "OCCLUSION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE MAX
::FMOD::CHANNELCONTROL_CALLBACK_TYPE FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::CHANNELCONTROL_CALLBACK_TYPE>("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.CHANNELCONTROL_CALLBACK_TYPE MAX
void FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_MAX(::FMOD::CHANNELCONTROL_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_CALLBACK_TYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::CHANNELCONTROL_CALLBACK_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_CALLBACK_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CHANNELCONTROL_DSP_INDEX
#include "FMOD/CHANNELCONTROL_DSP_INDEX.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 HEAD
int FMOD::CHANNELCONTROL_DSP_INDEX::_get_HEAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_get_HEAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CHANNELCONTROL_DSP_INDEX", "HEAD"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HEAD
void FMOD::CHANNELCONTROL_DSP_INDEX::_set_HEAD(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_set_HEAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_DSP_INDEX", "HEAD", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FADER
int FMOD::CHANNELCONTROL_DSP_INDEX::_get_FADER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_get_FADER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CHANNELCONTROL_DSP_INDEX", "FADER"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FADER
void FMOD::CHANNELCONTROL_DSP_INDEX::_set_FADER(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_set_FADER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_DSP_INDEX", "FADER", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 TAIL
int FMOD::CHANNELCONTROL_DSP_INDEX::_get_TAIL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_get_TAIL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("FMOD", "CHANNELCONTROL_DSP_INDEX", "TAIL"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 TAIL
void FMOD::CHANNELCONTROL_DSP_INDEX::_set_TAIL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNELCONTROL_DSP_INDEX::_set_TAIL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "CHANNELCONTROL_DSP_INDEX", "TAIL", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.ERRORCALLBACK_INSTANCETYPE
#include "FMOD/ERRORCALLBACK_INSTANCETYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE NONE
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE NONE
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_NONE(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SYSTEM
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SYSTEM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SYSTEM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SYSTEM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SYSTEM
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SYSTEM(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SYSTEM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SYSTEM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNEL
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNEL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNEL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNEL
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNEL(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNEL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNEL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNELGROUP
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNELGROUP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNELGROUP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNELGROUP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNELGROUP
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNELGROUP(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNELGROUP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNELGROUP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNELCONTROL
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNELCONTROL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_CHANNELCONTROL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNELCONTROL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE CHANNELCONTROL
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNELCONTROL(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_CHANNELCONTROL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "CHANNELCONTROL", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SOUND
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SOUND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SOUND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SOUND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SOUND
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SOUND(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SOUND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SOUND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SOUNDGROUP
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SOUNDGROUP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_SOUNDGROUP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SOUNDGROUP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE SOUNDGROUP
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SOUNDGROUP(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_SOUNDGROUP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "SOUNDGROUP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE DSP
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_DSP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_DSP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "DSP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE DSP
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_DSP(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_DSP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "DSP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE DSPCONNECTION
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_DSPCONNECTION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_DSPCONNECTION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "DSPCONNECTION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE DSPCONNECTION
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_DSPCONNECTION(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_DSPCONNECTION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "DSPCONNECTION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE GEOMETRY
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_GEOMETRY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_GEOMETRY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "GEOMETRY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE GEOMETRY
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_GEOMETRY(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_GEOMETRY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "GEOMETRY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE REVERB3D
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_REVERB3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_REVERB3D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "REVERB3D"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE REVERB3D
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_REVERB3D(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_REVERB3D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "REVERB3D", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_SYSTEM
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_SYSTEM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_SYSTEM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_SYSTEM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_SYSTEM
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_SYSTEM(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_SYSTEM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_SYSTEM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_EVENTDESCRIPTION
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_EVENTDESCRIPTION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_EVENTDESCRIPTION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_EVENTDESCRIPTION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_EVENTDESCRIPTION
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_EVENTDESCRIPTION(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_EVENTDESCRIPTION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_EVENTDESCRIPTION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_EVENTINSTANCE
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_EVENTINSTANCE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_EVENTINSTANCE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_EVENTINSTANCE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_EVENTINSTANCE
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_EVENTINSTANCE(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_EVENTINSTANCE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_EVENTINSTANCE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_PARAMETERINSTANCE
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_PARAMETERINSTANCE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_PARAMETERINSTANCE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_PARAMETERINSTANCE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_PARAMETERINSTANCE
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_PARAMETERINSTANCE(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_PARAMETERINSTANCE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_PARAMETERINSTANCE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_BUS
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_BUS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_BUS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_BUS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_BUS
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_BUS(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_BUS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_BUS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_VCA
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_VCA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_VCA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_VCA"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_VCA
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_VCA(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_VCA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_VCA", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_BANK
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_BANK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_BANK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_BANK"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_BANK
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_BANK(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_BANK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_BANK", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_COMMANDREPLAY
::FMOD::ERRORCALLBACK_INSTANCETYPE FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_COMMANDREPLAY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_get_STUDIO_COMMANDREPLAY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::ERRORCALLBACK_INSTANCETYPE>("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_COMMANDREPLAY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.ERRORCALLBACK_INSTANCETYPE STUDIO_COMMANDREPLAY
void FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_COMMANDREPLAY(::FMOD::ERRORCALLBACK_INSTANCETYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::_set_STUDIO_COMMANDREPLAY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "ERRORCALLBACK_INSTANCETYPE", "STUDIO_COMMANDREPLAY", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::ERRORCALLBACK_INSTANCETYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ERRORCALLBACK_INSTANCETYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SYSTEM_CALLBACK_TYPE
#include "FMOD/SYSTEM_CALLBACK_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE DEVICELISTCHANGED
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_DEVICELISTCHANGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_DEVICELISTCHANGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "DEVICELISTCHANGED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE DEVICELISTCHANGED
void FMOD::SYSTEM_CALLBACK_TYPE::_set_DEVICELISTCHANGED(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_DEVICELISTCHANGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "DEVICELISTCHANGED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE DEVICELOST
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_DEVICELOST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_DEVICELOST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "DEVICELOST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE DEVICELOST
void FMOD::SYSTEM_CALLBACK_TYPE::_set_DEVICELOST(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_DEVICELOST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "DEVICELOST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE MEMORYALLOCATIONFAILED
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_MEMORYALLOCATIONFAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_MEMORYALLOCATIONFAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "MEMORYALLOCATIONFAILED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE MEMORYALLOCATIONFAILED
void FMOD::SYSTEM_CALLBACK_TYPE::_set_MEMORYALLOCATIONFAILED(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_MEMORYALLOCATIONFAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "MEMORYALLOCATIONFAILED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE THREADCREATED
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_THREADCREATED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_THREADCREATED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "THREADCREATED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE THREADCREATED
void FMOD::SYSTEM_CALLBACK_TYPE::_set_THREADCREATED(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_THREADCREATED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "THREADCREATED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE BADDSPCONNECTION
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_BADDSPCONNECTION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_BADDSPCONNECTION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "BADDSPCONNECTION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE BADDSPCONNECTION
void FMOD::SYSTEM_CALLBACK_TYPE::_set_BADDSPCONNECTION(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_BADDSPCONNECTION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "BADDSPCONNECTION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE PREMIX
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_PREMIX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_PREMIX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "PREMIX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE PREMIX
void FMOD::SYSTEM_CALLBACK_TYPE::_set_PREMIX(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_PREMIX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "PREMIX", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE POSTMIX
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_POSTMIX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_POSTMIX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "POSTMIX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE POSTMIX
void FMOD::SYSTEM_CALLBACK_TYPE::_set_POSTMIX(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_POSTMIX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "POSTMIX", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE ERROR
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "ERROR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE ERROR
void FMOD::SYSTEM_CALLBACK_TYPE::_set_ERROR(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE MIDMIX
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_MIDMIX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_MIDMIX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "MIDMIX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE MIDMIX
void FMOD::SYSTEM_CALLBACK_TYPE::_set_MIDMIX(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_MIDMIX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "MIDMIX", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE THREADDESTROYED
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_THREADDESTROYED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_THREADDESTROYED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "THREADDESTROYED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE THREADDESTROYED
void FMOD::SYSTEM_CALLBACK_TYPE::_set_THREADDESTROYED(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_THREADDESTROYED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "THREADDESTROYED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE PREUPDATE
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_PREUPDATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_PREUPDATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "PREUPDATE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE PREUPDATE
void FMOD::SYSTEM_CALLBACK_TYPE::_set_PREUPDATE(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_PREUPDATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "PREUPDATE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE POSTUPDATE
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_POSTUPDATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_POSTUPDATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "POSTUPDATE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE POSTUPDATE
void FMOD::SYSTEM_CALLBACK_TYPE::_set_POSTUPDATE(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_POSTUPDATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "POSTUPDATE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE RECORDLISTCHANGED
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_RECORDLISTCHANGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_RECORDLISTCHANGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "RECORDLISTCHANGED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE RECORDLISTCHANGED
void FMOD::SYSTEM_CALLBACK_TYPE::_set_RECORDLISTCHANGED(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_RECORDLISTCHANGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "RECORDLISTCHANGED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.SYSTEM_CALLBACK_TYPE ALL
::FMOD::SYSTEM_CALLBACK_TYPE FMOD::SYSTEM_CALLBACK_TYPE::_get_ALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_get_ALL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::SYSTEM_CALLBACK_TYPE>("FMOD", "SYSTEM_CALLBACK_TYPE", "ALL"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.SYSTEM_CALLBACK_TYPE ALL
void FMOD::SYSTEM_CALLBACK_TYPE::_set_ALL(::FMOD::SYSTEM_CALLBACK_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::_set_ALL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "SYSTEM_CALLBACK_TYPE", "ALL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::SYSTEM_CALLBACK_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.ASYNCREADINFO_DONE_CALLBACK
#include "FMOD/ASYNCREADINFO_DONE_CALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.ASYNCREADINFO_DONE_CALLBACK.Invoke
::FMOD::RESULT FMOD::ASYNCREADINFO_DONE_CALLBACK::Invoke(::System::IntPtr info, ::FMOD::RESULT result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ASYNCREADINFO_DONE_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::ASYNCREADINFO_DONE_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, info, result);
}
// Autogenerated method: FMOD.ASYNCREADINFO_DONE_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::ASYNCREADINFO_DONE_CALLBACK::BeginInvoke(::System::IntPtr info, ::FMOD::RESULT result, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ASYNCREADINFO_DONE_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::ASYNCREADINFO_DONE_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, info, result, callback, object);
}
// Autogenerated method: FMOD.ASYNCREADINFO_DONE_CALLBACK.EndInvoke
::FMOD::RESULT FMOD::ASYNCREADINFO_DONE_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ASYNCREADINFO_DONE_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::ASYNCREADINFO_DONE_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.DEBUG_CALLBACK
#include "FMOD/DEBUG_CALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.DEBUG_FLAGS
#include "FMOD/DEBUG_FLAGS.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.DEBUG_CALLBACK.Invoke
::FMOD::RESULT FMOD::DEBUG_CALLBACK::Invoke(::FMOD::DEBUG_FLAGS flags, ::FMOD::StringWrapper file, int line, ::FMOD::StringWrapper func, ::FMOD::StringWrapper message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::DEBUG_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, flags, file, line, func, message);
}
// Autogenerated method: FMOD.DEBUG_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::DEBUG_CALLBACK::BeginInvoke(::FMOD::DEBUG_FLAGS flags, ::FMOD::StringWrapper file, int line, ::FMOD::StringWrapper func, ::FMOD::StringWrapper message, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::DEBUG_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, flags, file, line, func, message, callback, object);
}
// Autogenerated method: FMOD.DEBUG_CALLBACK.EndInvoke
::FMOD::RESULT FMOD::DEBUG_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::DEBUG_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.SYSTEM_CALLBACK
#include "FMOD/SYSTEM_CALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.SYSTEM_CALLBACK_TYPE
#include "FMOD/SYSTEM_CALLBACK_TYPE.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.SYSTEM_CALLBACK.Invoke
::FMOD::RESULT FMOD::SYSTEM_CALLBACK::Invoke(::System::IntPtr systemraw, ::FMOD::SYSTEM_CALLBACK_TYPE type, ::System::IntPtr commanddata1, ::System::IntPtr commanddata2, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SYSTEM_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, systemraw, type, commanddata1, commanddata2, userdata);
}
// Autogenerated method: FMOD.SYSTEM_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::SYSTEM_CALLBACK::BeginInvoke(::System::IntPtr systemraw, ::FMOD::SYSTEM_CALLBACK_TYPE type, ::System::IntPtr commanddata1, ::System::IntPtr commanddata2, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SYSTEM_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, systemraw, type, commanddata1, commanddata2, userdata, callback, object);
}
// Autogenerated method: FMOD.SYSTEM_CALLBACK.EndInvoke
::FMOD::RESULT FMOD::SYSTEM_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SYSTEM_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SYSTEM_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.CHANNEL_CALLBACK
#include "FMOD/CHANNEL_CALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.CHANNELCONTROL_TYPE
#include "FMOD/CHANNELCONTROL_TYPE.hpp"
// Including type: FMOD.CHANNELCONTROL_CALLBACK_TYPE
#include "FMOD/CHANNELCONTROL_CALLBACK_TYPE.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.CHANNEL_CALLBACK.Invoke
::FMOD::RESULT FMOD::CHANNEL_CALLBACK::Invoke(::System::IntPtr channelraw, ::FMOD::CHANNELCONTROL_TYPE controltype, ::FMOD::CHANNELCONTROL_CALLBACK_TYPE type, ::System::IntPtr commanddata1, ::System::IntPtr commanddata2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNEL_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CHANNEL_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channelraw, controltype, type, commanddata1, commanddata2);
}
// Autogenerated method: FMOD.CHANNEL_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::CHANNEL_CALLBACK::BeginInvoke(::System::IntPtr channelraw, ::FMOD::CHANNELCONTROL_TYPE controltype, ::FMOD::CHANNELCONTROL_CALLBACK_TYPE type, ::System::IntPtr commanddata1, ::System::IntPtr commanddata2, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNEL_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CHANNEL_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, channelraw, controltype, type, commanddata1, commanddata2, callback, object);
}
// Autogenerated method: FMOD.CHANNEL_CALLBACK.EndInvoke
::FMOD::RESULT FMOD::CHANNEL_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CHANNEL_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CHANNEL_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.SOUND_NONBLOCKCALLBACK
#include "FMOD/SOUND_NONBLOCKCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.SOUND_NONBLOCKCALLBACK.Invoke
::FMOD::RESULT FMOD::SOUND_NONBLOCKCALLBACK::Invoke(::System::IntPtr soundraw, ::FMOD::RESULT result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_NONBLOCKCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_NONBLOCKCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, soundraw, result);
}
// Autogenerated method: FMOD.SOUND_NONBLOCKCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::SOUND_NONBLOCKCALLBACK::BeginInvoke(::System::IntPtr soundraw, ::FMOD::RESULT result, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_NONBLOCKCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_NONBLOCKCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, soundraw, result, callback, object);
}
// Autogenerated method: FMOD.SOUND_NONBLOCKCALLBACK.EndInvoke
::FMOD::RESULT FMOD::SOUND_NONBLOCKCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_NONBLOCKCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_NONBLOCKCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.SOUND_PCMREADCALLBACK
#include "FMOD/SOUND_PCMREADCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.SOUND_PCMREADCALLBACK.Invoke
::FMOD::RESULT FMOD::SOUND_PCMREADCALLBACK::Invoke(::System::IntPtr soundraw, ::System::IntPtr data, uint datalen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMREADCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMREADCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, soundraw, data, datalen);
}
// Autogenerated method: FMOD.SOUND_PCMREADCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::SOUND_PCMREADCALLBACK::BeginInvoke(::System::IntPtr soundraw, ::System::IntPtr data, uint datalen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMREADCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMREADCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, soundraw, data, datalen, callback, object);
}
// Autogenerated method: FMOD.SOUND_PCMREADCALLBACK.EndInvoke
::FMOD::RESULT FMOD::SOUND_PCMREADCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMREADCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMREADCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.SOUND_PCMSETPOSCALLBACK
#include "FMOD/SOUND_PCMSETPOSCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.SOUND_PCMSETPOSCALLBACK.Invoke
::FMOD::RESULT FMOD::SOUND_PCMSETPOSCALLBACK::Invoke(::System::IntPtr soundraw, int subsound, uint position, ::FMOD::TIMEUNIT postype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMSETPOSCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMSETPOSCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, soundraw, subsound, position, postype);
}
// Autogenerated method: FMOD.SOUND_PCMSETPOSCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::SOUND_PCMSETPOSCALLBACK::BeginInvoke(::System::IntPtr soundraw, int subsound, uint position, ::FMOD::TIMEUNIT postype, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMSETPOSCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMSETPOSCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, soundraw, subsound, position, postype, callback, object);
}
// Autogenerated method: FMOD.SOUND_PCMSETPOSCALLBACK.EndInvoke
::FMOD::RESULT FMOD::SOUND_PCMSETPOSCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SOUND_PCMSETPOSCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::SOUND_PCMSETPOSCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_OPENCALLBACK
#include "FMOD/FILE_OPENCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_OPENCALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_OPENCALLBACK::Invoke(::FMOD::StringWrapper name, ByRef<uint> filesize, ByRef<::System::IntPtr> handle, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_OPENCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_OPENCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, byref(filesize), byref(handle), userdata);
}
// Autogenerated method: FMOD.FILE_OPENCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_OPENCALLBACK::BeginInvoke(::FMOD::StringWrapper name, ByRef<uint> filesize, ByRef<::System::IntPtr> handle, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_OPENCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_OPENCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, name, byref(filesize), byref(handle), userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_OPENCALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_OPENCALLBACK::EndInvoke(ByRef<uint> filesize, ByRef<::System::IntPtr> handle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_OPENCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_OPENCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(filesize), byref(handle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_CLOSECALLBACK
#include "FMOD/FILE_CLOSECALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_CLOSECALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_CLOSECALLBACK::Invoke(::System::IntPtr handle, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_CLOSECALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_CLOSECALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, userdata);
}
// Autogenerated method: FMOD.FILE_CLOSECALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_CLOSECALLBACK::BeginInvoke(::System::IntPtr handle, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_CLOSECALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_CLOSECALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, handle, userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_CLOSECALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_CLOSECALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_CLOSECALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_CLOSECALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_READCALLBACK
#include "FMOD/FILE_READCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_READCALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_READCALLBACK::Invoke(::System::IntPtr handle, ::System::IntPtr buffer, uint sizebytes, ByRef<uint> bytesread, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_READCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_READCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, buffer, sizebytes, byref(bytesread), userdata);
}
// Autogenerated method: FMOD.FILE_READCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_READCALLBACK::BeginInvoke(::System::IntPtr handle, ::System::IntPtr buffer, uint sizebytes, ByRef<uint> bytesread, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_READCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_READCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, handle, buffer, sizebytes, byref(bytesread), userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_READCALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_READCALLBACK::EndInvoke(ByRef<uint> bytesread, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_READCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_READCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(bytesread), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_SEEKCALLBACK
#include "FMOD/FILE_SEEKCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_SEEKCALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_SEEKCALLBACK::Invoke(::System::IntPtr handle, uint pos, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_SEEKCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_SEEKCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, pos, userdata);
}
// Autogenerated method: FMOD.FILE_SEEKCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_SEEKCALLBACK::BeginInvoke(::System::IntPtr handle, uint pos, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_SEEKCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_SEEKCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, handle, pos, userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_SEEKCALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_SEEKCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_SEEKCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_SEEKCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_ASYNCREADCALLBACK
#include "FMOD/FILE_ASYNCREADCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_ASYNCREADCALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_ASYNCREADCALLBACK::Invoke(::System::IntPtr handle, ::System::IntPtr info, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCREADCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCREADCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, info, userdata);
}
// Autogenerated method: FMOD.FILE_ASYNCREADCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_ASYNCREADCALLBACK::BeginInvoke(::System::IntPtr handle, ::System::IntPtr info, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCREADCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCREADCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, handle, info, userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_ASYNCREADCALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_ASYNCREADCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCREADCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCREADCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.FILE_ASYNCCANCELCALLBACK
#include "FMOD/FILE_ASYNCCANCELCALLBACK.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.FILE_ASYNCCANCELCALLBACK.Invoke
::FMOD::RESULT FMOD::FILE_ASYNCCANCELCALLBACK::Invoke(::System::IntPtr handle, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCCANCELCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCCANCELCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, userdata);
}
// Autogenerated method: FMOD.FILE_ASYNCCANCELCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::FILE_ASYNCCANCELCALLBACK::BeginInvoke(::System::IntPtr handle, ::System::IntPtr userdata, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCCANCELCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCCANCELCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, handle, userdata, callback, object);
}
// Autogenerated method: FMOD.FILE_ASYNCCANCELCALLBACK.EndInvoke
::FMOD::RESULT FMOD::FILE_ASYNCCANCELCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::FILE_ASYNCCANCELCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::FILE_ASYNCCANCELCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.MEMORY_ALLOC_CALLBACK
#include "FMOD/MEMORY_ALLOC_CALLBACK.hpp"
// Including type: FMOD.MEMORY_TYPE
#include "FMOD/MEMORY_TYPE.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.MEMORY_ALLOC_CALLBACK.Invoke
::System::IntPtr FMOD::MEMORY_ALLOC_CALLBACK::Invoke(uint size, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_ALLOC_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_ALLOC_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, size, type, sourcestr);
}
// Autogenerated method: FMOD.MEMORY_ALLOC_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::MEMORY_ALLOC_CALLBACK::BeginInvoke(uint size, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_ALLOC_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_ALLOC_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, size, type, sourcestr, callback, object);
}
// Autogenerated method: FMOD.MEMORY_ALLOC_CALLBACK.EndInvoke
::System::IntPtr FMOD::MEMORY_ALLOC_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_ALLOC_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_ALLOC_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.MEMORY_REALLOC_CALLBACK
#include "FMOD/MEMORY_REALLOC_CALLBACK.hpp"
// Including type: FMOD.MEMORY_TYPE
#include "FMOD/MEMORY_TYPE.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.MEMORY_REALLOC_CALLBACK.Invoke
::System::IntPtr FMOD::MEMORY_REALLOC_CALLBACK::Invoke(::System::IntPtr ptr, uint size, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_REALLOC_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_REALLOC_CALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, ptr, size, type, sourcestr);
}
// Autogenerated method: FMOD.MEMORY_REALLOC_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::MEMORY_REALLOC_CALLBACK::BeginInvoke(::System::IntPtr ptr, uint size, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_REALLOC_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_REALLOC_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ptr, size, type, sourcestr, callback, object);
}
// Autogenerated method: FMOD.MEMORY_REALLOC_CALLBACK.EndInvoke
::System::IntPtr FMOD::MEMORY_REALLOC_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_REALLOC_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_REALLOC_CALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.MEMORY_FREE_CALLBACK
#include "FMOD/MEMORY_FREE_CALLBACK.hpp"
// Including type: FMOD.MEMORY_TYPE
#include "FMOD/MEMORY_TYPE.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.MEMORY_FREE_CALLBACK.Invoke
void FMOD::MEMORY_FREE_CALLBACK::Invoke(::System::IntPtr ptr, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_FREE_CALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_FREE_CALLBACK*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ptr, type, sourcestr);
}
// Autogenerated method: FMOD.MEMORY_FREE_CALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::MEMORY_FREE_CALLBACK::BeginInvoke(::System::IntPtr ptr, ::FMOD::MEMORY_TYPE type, ::FMOD::StringWrapper sourcestr, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_FREE_CALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_FREE_CALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ptr, type, sourcestr, callback, object);
}
// Autogenerated method: FMOD.MEMORY_FREE_CALLBACK.EndInvoke
void FMOD::MEMORY_FREE_CALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::MEMORY_FREE_CALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::MEMORY_FREE_CALLBACK*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: FMOD.CB_3D_ROLLOFFCALLBACK
#include "FMOD/CB_3D_ROLLOFFCALLBACK.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.CB_3D_ROLLOFFCALLBACK.Invoke
float FMOD::CB_3D_ROLLOFFCALLBACK::Invoke(::System::IntPtr channelraw, float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CB_3D_ROLLOFFCALLBACK::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CB_3D_ROLLOFFCALLBACK*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, channelraw, distance);
}
// Autogenerated method: FMOD.CB_3D_ROLLOFFCALLBACK.BeginInvoke
::System::IAsyncResult* FMOD::CB_3D_ROLLOFFCALLBACK::BeginInvoke(::System::IntPtr channelraw, float distance, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CB_3D_ROLLOFFCALLBACK::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CB_3D_ROLLOFFCALLBACK*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, channelraw, distance, callback, object);
}
// Autogenerated method: FMOD.CB_3D_ROLLOFFCALLBACK.EndInvoke
float FMOD::CB_3D_ROLLOFFCALLBACK::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CB_3D_ROLLOFFCALLBACK::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::CB_3D_ROLLOFFCALLBACK*), 14));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DSP_RESAMPLER
#include "FMOD/DSP_RESAMPLER.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER DEFAULT
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER DEFAULT
void FMOD::DSP_RESAMPLER::_set_DEFAULT(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER NOINTERP
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_NOINTERP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_NOINTERP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "NOINTERP"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER NOINTERP
void FMOD::DSP_RESAMPLER::_set_NOINTERP(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_NOINTERP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "NOINTERP", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER LINEAR
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_LINEAR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_LINEAR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "LINEAR"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER LINEAR
void FMOD::DSP_RESAMPLER::_set_LINEAR(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_LINEAR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "LINEAR", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER CUBIC
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_CUBIC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_CUBIC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "CUBIC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER CUBIC
void FMOD::DSP_RESAMPLER::_set_CUBIC(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_CUBIC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "CUBIC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER SPLINE
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_SPLINE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_SPLINE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "SPLINE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER SPLINE
void FMOD::DSP_RESAMPLER::_set_SPLINE(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_SPLINE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "SPLINE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSP_RESAMPLER MAX
::FMOD::DSP_RESAMPLER FMOD::DSP_RESAMPLER::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSP_RESAMPLER>("FMOD", "DSP_RESAMPLER", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSP_RESAMPLER MAX
void FMOD::DSP_RESAMPLER::_set_MAX(::FMOD::DSP_RESAMPLER value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSP_RESAMPLER", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::DSP_RESAMPLER::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP_RESAMPLER::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DSPCONNECTION_TYPE
#include "FMOD/DSPCONNECTION_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.DSPCONNECTION_TYPE STANDARD
::FMOD::DSPCONNECTION_TYPE FMOD::DSPCONNECTION_TYPE::_get_STANDARD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_get_STANDARD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSPCONNECTION_TYPE>("FMOD", "DSPCONNECTION_TYPE", "STANDARD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSPCONNECTION_TYPE STANDARD
void FMOD::DSPCONNECTION_TYPE::_set_STANDARD(::FMOD::DSPCONNECTION_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_set_STANDARD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSPCONNECTION_TYPE", "STANDARD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSPCONNECTION_TYPE SIDECHAIN
::FMOD::DSPCONNECTION_TYPE FMOD::DSPCONNECTION_TYPE::_get_SIDECHAIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_get_SIDECHAIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSPCONNECTION_TYPE>("FMOD", "DSPCONNECTION_TYPE", "SIDECHAIN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSPCONNECTION_TYPE SIDECHAIN
void FMOD::DSPCONNECTION_TYPE::_set_SIDECHAIN(::FMOD::DSPCONNECTION_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_set_SIDECHAIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSPCONNECTION_TYPE", "SIDECHAIN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSPCONNECTION_TYPE SEND
::FMOD::DSPCONNECTION_TYPE FMOD::DSPCONNECTION_TYPE::_get_SEND() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_get_SEND");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSPCONNECTION_TYPE>("FMOD", "DSPCONNECTION_TYPE", "SEND"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSPCONNECTION_TYPE SEND
void FMOD::DSPCONNECTION_TYPE::_set_SEND(::FMOD::DSPCONNECTION_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_set_SEND");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSPCONNECTION_TYPE", "SEND", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSPCONNECTION_TYPE SEND_SIDECHAIN
::FMOD::DSPCONNECTION_TYPE FMOD::DSPCONNECTION_TYPE::_get_SEND_SIDECHAIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_get_SEND_SIDECHAIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSPCONNECTION_TYPE>("FMOD", "DSPCONNECTION_TYPE", "SEND_SIDECHAIN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSPCONNECTION_TYPE SEND_SIDECHAIN
void FMOD::DSPCONNECTION_TYPE::_set_SEND_SIDECHAIN(::FMOD::DSPCONNECTION_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_set_SEND_SIDECHAIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSPCONNECTION_TYPE", "SEND_SIDECHAIN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DSPCONNECTION_TYPE MAX
::FMOD::DSPCONNECTION_TYPE FMOD::DSPCONNECTION_TYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DSPCONNECTION_TYPE>("FMOD", "DSPCONNECTION_TYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DSPCONNECTION_TYPE MAX
void FMOD::DSPCONNECTION_TYPE::_set_MAX(::FMOD::DSPCONNECTION_TYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DSPCONNECTION_TYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::DSPCONNECTION_TYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPCONNECTION_TYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.TAGTYPE
#include "FMOD/TAGTYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE UNKNOWN
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_UNKNOWN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_UNKNOWN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "UNKNOWN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE UNKNOWN
void FMOD::TAGTYPE::_set_UNKNOWN(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_UNKNOWN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "UNKNOWN", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE ID3V1
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_ID3V1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_ID3V1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "ID3V1"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE ID3V1
void FMOD::TAGTYPE::_set_ID3V1(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_ID3V1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "ID3V1", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE ID3V2
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_ID3V2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_ID3V2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "ID3V2"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE ID3V2
void FMOD::TAGTYPE::_set_ID3V2(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_ID3V2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "ID3V2", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE VORBISCOMMENT
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_VORBISCOMMENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_VORBISCOMMENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "VORBISCOMMENT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE VORBISCOMMENT
void FMOD::TAGTYPE::_set_VORBISCOMMENT(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_VORBISCOMMENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "VORBISCOMMENT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE SHOUTCAST
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_SHOUTCAST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_SHOUTCAST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "SHOUTCAST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE SHOUTCAST
void FMOD::TAGTYPE::_set_SHOUTCAST(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_SHOUTCAST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "SHOUTCAST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE ICECAST
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_ICECAST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_ICECAST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "ICECAST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE ICECAST
void FMOD::TAGTYPE::_set_ICECAST(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_ICECAST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "ICECAST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE ASF
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_ASF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_ASF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "ASF"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE ASF
void FMOD::TAGTYPE::_set_ASF(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_ASF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "ASF", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE MIDI
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_MIDI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_MIDI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "MIDI"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE MIDI
void FMOD::TAGTYPE::_set_MIDI(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_MIDI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "MIDI", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE PLAYLIST
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_PLAYLIST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_PLAYLIST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "PLAYLIST"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE PLAYLIST
void FMOD::TAGTYPE::_set_PLAYLIST(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_PLAYLIST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "PLAYLIST", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE FMOD
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_FMOD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_FMOD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "FMOD"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE FMOD
void FMOD::TAGTYPE::_set_FMOD(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_FMOD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "FMOD", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE USER
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_USER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_USER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "USER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE USER
void FMOD::TAGTYPE::_set_USER(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_USER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "USER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGTYPE MAX
::FMOD::TAGTYPE FMOD::TAGTYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGTYPE>("FMOD", "TAGTYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGTYPE MAX
void FMOD::TAGTYPE::_set_MAX(::FMOD::TAGTYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGTYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::TAGTYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGTYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.TAGDATATYPE
#include "FMOD/TAGDATATYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE BINARY
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_BINARY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_BINARY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "BINARY"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE BINARY
void FMOD::TAGDATATYPE::_set_BINARY(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_BINARY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "BINARY", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE INT
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_INT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_INT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "INT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE INT
void FMOD::TAGDATATYPE::_set_INT(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_INT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "INT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE FLOAT
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_FLOAT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_FLOAT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "FLOAT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE FLOAT
void FMOD::TAGDATATYPE::_set_FLOAT(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_FLOAT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "FLOAT", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE STRING
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_STRING() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_STRING");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "STRING"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE STRING
void FMOD::TAGDATATYPE::_set_STRING(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_STRING");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "STRING", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE STRING_UTF16
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_STRING_UTF16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_STRING_UTF16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "STRING_UTF16"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE STRING_UTF16
void FMOD::TAGDATATYPE::_set_STRING_UTF16(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_STRING_UTF16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "STRING_UTF16", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE STRING_UTF16BE
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_STRING_UTF16BE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_STRING_UTF16BE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "STRING_UTF16BE"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE STRING_UTF16BE
void FMOD::TAGDATATYPE::_set_STRING_UTF16BE(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_STRING_UTF16BE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "STRING_UTF16BE", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE STRING_UTF8
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_STRING_UTF8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_STRING_UTF8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "STRING_UTF8"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE STRING_UTF8
void FMOD::TAGDATATYPE::_set_STRING_UTF8(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_STRING_UTF8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "STRING_UTF8", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE CDTOC
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_CDTOC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_CDTOC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "CDTOC"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE CDTOC
void FMOD::TAGDATATYPE::_set_CDTOC(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_CDTOC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "CDTOC", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TAGDATATYPE MAX
::FMOD::TAGDATATYPE FMOD::TAGDATATYPE::_get_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_get_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TAGDATATYPE>("FMOD", "TAGDATATYPE", "MAX"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TAGDATATYPE MAX
void FMOD::TAGDATATYPE::_set_MAX(::FMOD::TAGDATATYPE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::_set_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TAGDATATYPE", "MAX", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& FMOD::TAGDATATYPE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TAGDATATYPE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT MS
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_MS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_MS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "MS"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT MS
void FMOD::TIMEUNIT::_set_MS(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_MS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "MS", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT PCM
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_PCM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_PCM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "PCM"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT PCM
void FMOD::TIMEUNIT::_set_PCM(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_PCM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "PCM", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT PCMBYTES
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_PCMBYTES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_PCMBYTES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "PCMBYTES"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT PCMBYTES
void FMOD::TIMEUNIT::_set_PCMBYTES(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_PCMBYTES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "PCMBYTES", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT RAWBYTES
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_RAWBYTES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_RAWBYTES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "RAWBYTES"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT RAWBYTES
void FMOD::TIMEUNIT::_set_RAWBYTES(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_RAWBYTES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "RAWBYTES", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT PCMFRACTION
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_PCMFRACTION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_PCMFRACTION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "PCMFRACTION"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT PCMFRACTION
void FMOD::TIMEUNIT::_set_PCMFRACTION(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_PCMFRACTION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "PCMFRACTION", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT MODORDER
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_MODORDER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_MODORDER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "MODORDER"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT MODORDER
void FMOD::TIMEUNIT::_set_MODORDER(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_MODORDER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "MODORDER", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT MODROW
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_MODROW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_MODROW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "MODROW"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT MODROW
void FMOD::TIMEUNIT::_set_MODROW(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_MODROW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "MODROW", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.TIMEUNIT MODPATTERN
::FMOD::TIMEUNIT FMOD::TIMEUNIT::_get_MODPATTERN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_get_MODPATTERN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::TIMEUNIT>("FMOD", "TIMEUNIT", "MODPATTERN"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.TIMEUNIT MODPATTERN
void FMOD::TIMEUNIT::_set_MODPATTERN(::FMOD::TIMEUNIT value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::_set_MODPATTERN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "TIMEUNIT", "MODPATTERN", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::TIMEUNIT::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::TIMEUNIT::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.PORT_INDEX
#include "FMOD/PORT_INDEX.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt64 NONE
uint64_t FMOD::PORT_INDEX::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PORT_INDEX::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("FMOD", "PORT_INDEX", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 NONE
void FMOD::PORT_INDEX::_set_NONE(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PORT_INDEX::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "PORT_INDEX", "NONE", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.CREATESOUNDEXINFO
#include "FMOD/CREATESOUNDEXINFO.hpp"
// Including type: FMOD.SOUND_PCMREADCALLBACK
#include "FMOD/SOUND_PCMREADCALLBACK.hpp"
// Including type: FMOD.SOUND_PCMSETPOSCALLBACK
#include "FMOD/SOUND_PCMSETPOSCALLBACK.hpp"
// Including type: FMOD.SOUND_NONBLOCKCALLBACK
#include "FMOD/SOUND_NONBLOCKCALLBACK.hpp"
// Including type: FMOD.FILE_OPENCALLBACK
#include "FMOD/FILE_OPENCALLBACK.hpp"
// Including type: FMOD.FILE_CLOSECALLBACK
#include "FMOD/FILE_CLOSECALLBACK.hpp"
// Including type: FMOD.FILE_READCALLBACK
#include "FMOD/FILE_READCALLBACK.hpp"
// Including type: FMOD.FILE_SEEKCALLBACK
#include "FMOD/FILE_SEEKCALLBACK.hpp"
// Including type: FMOD.FILE_ASYNCREADCALLBACK
#include "FMOD/FILE_ASYNCREADCALLBACK.hpp"
// Including type: FMOD.FILE_ASYNCCANCELCALLBACK
#include "FMOD/FILE_ASYNCCANCELCALLBACK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 cbsize
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_cbsize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_cbsize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cbsize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 length
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_length");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "length"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 fileoffset
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_fileoffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileoffset");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileoffset"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 numchannels
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_numchannels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_numchannels");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numchannels"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 defaultfrequency
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_defaultfrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_defaultfrequency");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultfrequency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FMOD.SOUND_FORMAT format
[[deprecated("Use field access instead!")]] ::FMOD::SOUND_FORMAT& FMOD::CREATESOUNDEXINFO::dyn_format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_format");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "format"))->offset;
  return *reinterpret_cast<::FMOD::SOUND_FORMAT*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 decodebuffersize
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_decodebuffersize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_decodebuffersize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "decodebuffersize"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 initialsubsound
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_initialsubsound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_initialsubsound");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialsubsound"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 numsubsounds
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_numsubsounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_numsubsounds");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numsubsounds"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr inclusionlist
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_inclusionlist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_inclusionlist");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inclusionlist"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 inclusionlistnum
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_inclusionlistnum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_inclusionlistnum");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inclusionlistnum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr pcmreadcallback_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_pcmreadcallback_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_pcmreadcallback_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pcmreadcallback_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr pcmsetposcallback_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_pcmsetposcallback_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_pcmsetposcallback_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pcmsetposcallback_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr nonblockcallback_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_nonblockcallback_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_nonblockcallback_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonblockcallback_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr dlsname
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_dlsname() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_dlsname");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dlsname"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr encryptionkey
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_encryptionkey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_encryptionkey");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encryptionkey"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 maxpolyphony
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_maxpolyphony() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_maxpolyphony");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxpolyphony"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr userdata
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_userdata() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_userdata");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userdata"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FMOD.SOUND_TYPE suggestedsoundtype
[[deprecated("Use field access instead!")]] ::FMOD::SOUND_TYPE& FMOD::CREATESOUNDEXINFO::dyn_suggestedsoundtype() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_suggestedsoundtype");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suggestedsoundtype"))->offset;
  return *reinterpret_cast<::FMOD::SOUND_TYPE*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuseropen_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuseropen_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuseropen_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuseropen_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserclose_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserclose_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserclose_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserclose_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserread_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserread_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserread_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserread_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserseek_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserseek_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserseek_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserseek_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserasyncread_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserasyncread_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserasyncread_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserasyncread_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserasynccancel_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserasynccancel_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserasynccancel_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserasynccancel_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fileuserdata
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fileuserdata() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fileuserdata");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileuserdata"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 filebuffersize
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_filebuffersize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_filebuffersize");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "filebuffersize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FMOD.CHANNELORDER channelorder
[[deprecated("Use field access instead!")]] ::FMOD::CHANNELORDER& FMOD::CREATESOUNDEXINFO::dyn_channelorder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_channelorder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channelorder"))->offset;
  return *reinterpret_cast<::FMOD::CHANNELORDER*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FMOD.CHANNELMASK channelmask
[[deprecated("Use field access instead!")]] ::FMOD::CHANNELMASK& FMOD::CREATESOUNDEXINFO::dyn_channelmask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_channelmask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channelmask"))->offset;
  return *reinterpret_cast<::FMOD::CHANNELMASK*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr initialsoundgroup
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_initialsoundgroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_initialsoundgroup");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialsoundgroup"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 initialseekposition
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_initialseekposition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_initialseekposition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialseekposition"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FMOD.TIMEUNIT initialseekpostype
[[deprecated("Use field access instead!")]] ::FMOD::TIMEUNIT& FMOD::CREATESOUNDEXINFO::dyn_initialseekpostype() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_initialseekpostype");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialseekpostype"))->offset;
  return *reinterpret_cast<::FMOD::TIMEUNIT*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ignoresetfilesystem
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_ignoresetfilesystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_ignoresetfilesystem");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ignoresetfilesystem"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 audioqueuepolicy
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_audioqueuepolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_audioqueuepolicy");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioqueuepolicy"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 minmidigranularity
[[deprecated("Use field access instead!")]] uint& FMOD::CREATESOUNDEXINFO::dyn_minmidigranularity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_minmidigranularity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minmidigranularity"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 nonblockthreadid
[[deprecated("Use field access instead!")]] int& FMOD::CREATESOUNDEXINFO::dyn_nonblockthreadid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_nonblockthreadid");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonblockthreadid"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr fsbguid
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::CREATESOUNDEXINFO::dyn_fsbguid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::dyn_fsbguid");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fsbguid"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_pcmreadcallback
void FMOD::CREATESOUNDEXINFO::set_pcmreadcallback(::FMOD::SOUND_PCMREADCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_pcmreadcallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_pcmreadcallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_pcmsetposcallback
void FMOD::CREATESOUNDEXINFO::set_pcmsetposcallback(::FMOD::SOUND_PCMSETPOSCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_pcmsetposcallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_pcmsetposcallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_nonblockcallback
void FMOD::CREATESOUNDEXINFO::set_nonblockcallback(::FMOD::SOUND_NONBLOCKCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_nonblockcallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_nonblockcallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuseropen
void FMOD::CREATESOUNDEXINFO::set_fileuseropen(::FMOD::FILE_OPENCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuseropen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuseropen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuserclose
void FMOD::CREATESOUNDEXINFO::set_fileuserclose(::FMOD::FILE_CLOSECALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuserclose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuserclose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuserread
void FMOD::CREATESOUNDEXINFO::set_fileuserread(::FMOD::FILE_READCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuserread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuserread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuserseek
void FMOD::CREATESOUNDEXINFO::set_fileuserseek(::FMOD::FILE_SEEKCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuserseek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuserseek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuserasyncread
void FMOD::CREATESOUNDEXINFO::set_fileuserasyncread(::FMOD::FILE_ASYNCREADCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuserasyncread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuserasyncread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FMOD.CREATESOUNDEXINFO.set_fileuserasynccancel
void FMOD::CREATESOUNDEXINFO::set_fileuserasynccancel(::FMOD::FILE_ASYNCCANCELCALLBACK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::CREATESOUNDEXINFO::set_fileuserasynccancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_fileuserasynccancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.REVERB_PROPERTIES
#include "FMOD/REVERB_PROPERTIES.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single DecayTime
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_DecayTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_DecayTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DecayTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single EarlyDelay
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_EarlyDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_EarlyDelay");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EarlyDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LateDelay
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_LateDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_LateDelay");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LateDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HFReference
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_HFReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_HFReference");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HFReference"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HFDecayRatio
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_HFDecayRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_HFDecayRatio");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HFDecayRatio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Diffusion
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_Diffusion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_Diffusion");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Diffusion"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Density
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_Density() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_Density");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Density"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LowShelfFrequency
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_LowShelfFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_LowShelfFrequency");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LowShelfFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single LowShelfGain
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_LowShelfGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_LowShelfGain");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LowShelfGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HighCut
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_HighCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_HighCut");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HighCut"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single EarlyLateMix
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_EarlyLateMix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_EarlyLateMix");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EarlyLateMix"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single WetLevel
[[deprecated("Use field access instead!")]] float& FMOD::REVERB_PROPERTIES::dyn_WetLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::REVERB_PROPERTIES::dyn_WetLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WetLevel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.REVERB_PROPERTIES..ctor
// ABORTED elsewhere.  FMOD::REVERB_PROPERTIES::REVERB_PROPERTIES(float decayTime, float earlyDelay, float lateDelay, float hfReference, float hfDecayRatio, float diffusion, float density, float lowShelfFrequency, float lowShelfGain, float highCut, float earlyLateMix, float wetLevel)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.PRESET
#include "FMOD/PRESET.hpp"
// Including type: FMOD.REVERB_PROPERTIES
#include "FMOD/REVERB_PROPERTIES.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.PRESET.OFF
::FMOD::REVERB_PROPERTIES FMOD::PRESET::OFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::OFF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "OFF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.GENERIC
::FMOD::REVERB_PROPERTIES FMOD::PRESET::GENERIC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::GENERIC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "GENERIC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.PADDEDCELL
::FMOD::REVERB_PROPERTIES FMOD::PRESET::PADDEDCELL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::PADDEDCELL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "PADDEDCELL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.ROOM
::FMOD::REVERB_PROPERTIES FMOD::PRESET::ROOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::ROOM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "ROOM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.BATHROOM
::FMOD::REVERB_PROPERTIES FMOD::PRESET::BATHROOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::BATHROOM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "BATHROOM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.LIVINGROOM
::FMOD::REVERB_PROPERTIES FMOD::PRESET::LIVINGROOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::LIVINGROOM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "LIVINGROOM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.STONEROOM
::FMOD::REVERB_PROPERTIES FMOD::PRESET::STONEROOM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::STONEROOM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "STONEROOM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.AUDITORIUM
::FMOD::REVERB_PROPERTIES FMOD::PRESET::AUDITORIUM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::AUDITORIUM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "AUDITORIUM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.CONCERTHALL
::FMOD::REVERB_PROPERTIES FMOD::PRESET::CONCERTHALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::CONCERTHALL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "CONCERTHALL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.CAVE
::FMOD::REVERB_PROPERTIES FMOD::PRESET::CAVE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::CAVE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "CAVE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.ARENA
::FMOD::REVERB_PROPERTIES FMOD::PRESET::ARENA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::ARENA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "ARENA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.HANGAR
::FMOD::REVERB_PROPERTIES FMOD::PRESET::HANGAR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::HANGAR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "HANGAR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.CARPETTEDHALLWAY
::FMOD::REVERB_PROPERTIES FMOD::PRESET::CARPETTEDHALLWAY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::CARPETTEDHALLWAY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "CARPETTEDHALLWAY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.HALLWAY
::FMOD::REVERB_PROPERTIES FMOD::PRESET::HALLWAY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::HALLWAY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "HALLWAY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.STONECORRIDOR
::FMOD::REVERB_PROPERTIES FMOD::PRESET::STONECORRIDOR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::STONECORRIDOR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "STONECORRIDOR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.ALLEY
::FMOD::REVERB_PROPERTIES FMOD::PRESET::ALLEY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::ALLEY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "ALLEY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.FOREST
::FMOD::REVERB_PROPERTIES FMOD::PRESET::FOREST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::FOREST");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "FOREST", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.CITY
::FMOD::REVERB_PROPERTIES FMOD::PRESET::CITY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::CITY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "CITY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.MOUNTAINS
::FMOD::REVERB_PROPERTIES FMOD::PRESET::MOUNTAINS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::MOUNTAINS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "MOUNTAINS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.QUARRY
::FMOD::REVERB_PROPERTIES FMOD::PRESET::QUARRY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::QUARRY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "QUARRY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.PLAIN
::FMOD::REVERB_PROPERTIES FMOD::PRESET::PLAIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::PLAIN");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "PLAIN", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.PARKINGLOT
::FMOD::REVERB_PROPERTIES FMOD::PRESET::PARKINGLOT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::PARKINGLOT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "PARKINGLOT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.SEWERPIPE
::FMOD::REVERB_PROPERTIES FMOD::PRESET::SEWERPIPE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::SEWERPIPE");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "SEWERPIPE", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.PRESET.UNDERWATER
::FMOD::REVERB_PROPERTIES FMOD::PRESET::UNDERWATER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::UNDERWATER");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "PRESET", "UNDERWATER", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::REVERB_PROPERTIES, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DRIVER_STATE
#include "FMOD/DRIVER_STATE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FMOD.DRIVER_STATE CONNECTED
::FMOD::DRIVER_STATE FMOD::DRIVER_STATE::_get_CONNECTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DRIVER_STATE::_get_CONNECTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DRIVER_STATE>("FMOD", "DRIVER_STATE", "CONNECTED"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DRIVER_STATE CONNECTED
void FMOD::DRIVER_STATE::_set_CONNECTED(::FMOD::DRIVER_STATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DRIVER_STATE::_set_CONNECTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DRIVER_STATE", "CONNECTED", value));
}
// Autogenerated static field getter
// Get static field: static public FMOD.DRIVER_STATE DEFAULT
::FMOD::DRIVER_STATE FMOD::DRIVER_STATE::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DRIVER_STATE::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::FMOD::DRIVER_STATE>("FMOD", "DRIVER_STATE", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public FMOD.DRIVER_STATE DEFAULT
void FMOD::DRIVER_STATE::_set_DEFAULT(::FMOD::DRIVER_STATE value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DRIVER_STATE::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "DRIVER_STATE", "DEFAULT", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& FMOD::DRIVER_STATE::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DRIVER_STATE::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Factory
#include "FMOD/Factory.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.Factory.System_Create
::FMOD::RESULT FMOD::Factory::System_Create(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Factory::System_Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Factory", "System_Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::System&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(system));
}
// Autogenerated method: FMOD.Factory.FMOD5_System_Create
::FMOD::RESULT FMOD::Factory::FMOD5_System_Create(ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Factory::FMOD5_System_Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Factory", "FMOD5_System_Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(system));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Memory
#include "FMOD/Memory.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.MEMORY_ALLOC_CALLBACK
#include "FMOD/MEMORY_ALLOC_CALLBACK.hpp"
// Including type: FMOD.MEMORY_REALLOC_CALLBACK
#include "FMOD/MEMORY_REALLOC_CALLBACK.hpp"
// Including type: FMOD.MEMORY_FREE_CALLBACK
#include "FMOD/MEMORY_FREE_CALLBACK.hpp"
// Including type: FMOD.MEMORY_TYPE
#include "FMOD/MEMORY_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.Memory.Initialize
::FMOD::RESULT FMOD::Memory::Initialize(::System::IntPtr poolmem, int poollen, ::FMOD::MEMORY_ALLOC_CALLBACK* useralloc, ::FMOD::MEMORY_REALLOC_CALLBACK* userrealloc, ::FMOD::MEMORY_FREE_CALLBACK* userfree, ::FMOD::MEMORY_TYPE memtypeflags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Memory::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Memory", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poolmem), ::il2cpp_utils::ExtractType(poollen), ::il2cpp_utils::ExtractType(useralloc), ::il2cpp_utils::ExtractType(userrealloc), ::il2cpp_utils::ExtractType(userfree), ::il2cpp_utils::ExtractType(memtypeflags)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags);
}
// Autogenerated method: FMOD.Memory.GetStats
::FMOD::RESULT FMOD::Memory::GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Memory::GetStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Memory", "GetStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(currentalloced), byref(maxalloced));
}
// Autogenerated method: FMOD.Memory.GetStats
::FMOD::RESULT FMOD::Memory::GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced, bool blocking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Memory::GetStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Memory", "GetStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(blocking)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(currentalloced), byref(maxalloced), blocking);
}
// Autogenerated method: FMOD.Memory.FMOD5_Memory_Initialize
::FMOD::RESULT FMOD::Memory::FMOD5_Memory_Initialize(::System::IntPtr poolmem, int poollen, ::FMOD::MEMORY_ALLOC_CALLBACK* useralloc, ::FMOD::MEMORY_REALLOC_CALLBACK* userrealloc, ::FMOD::MEMORY_FREE_CALLBACK* userfree, ::FMOD::MEMORY_TYPE memtypeflags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Memory::FMOD5_Memory_Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Memory", "FMOD5_Memory_Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poolmem), ::il2cpp_utils::ExtractType(poollen), ::il2cpp_utils::ExtractType(useralloc), ::il2cpp_utils::ExtractType(userrealloc), ::il2cpp_utils::ExtractType(userfree), ::il2cpp_utils::ExtractType(memtypeflags)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags);
}
// Autogenerated method: FMOD.Memory.FMOD5_Memory_GetStats
::FMOD::RESULT FMOD::Memory::FMOD5_Memory_GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced, bool blocking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Memory::FMOD5_Memory_GetStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Memory", "FMOD5_Memory_GetStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(blocking)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(currentalloced), byref(maxalloced), blocking);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Debug
#include "FMOD/Debug.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.DEBUG_FLAGS
#include "FMOD/DEBUG_FLAGS.hpp"
// Including type: FMOD.DEBUG_MODE
#include "FMOD/DEBUG_MODE.hpp"
// Including type: FMOD.DEBUG_CALLBACK
#include "FMOD/DEBUG_CALLBACK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.Debug.Initialize
::FMOD::RESULT FMOD::Debug::Initialize(::FMOD::DEBUG_FLAGS flags, ::FMOD::DEBUG_MODE mode, ::FMOD::DEBUG_CALLBACK* callback, ::StringW filename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Debug::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Debug", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(filename)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags, mode, callback, filename);
}
// Autogenerated method: FMOD.Debug.FMOD5_Debug_Initialize
::FMOD::RESULT FMOD::Debug::FMOD5_Debug_Initialize(::FMOD::DEBUG_FLAGS flags, ::FMOD::DEBUG_MODE mode, ::FMOD::DEBUG_CALLBACK* callback, ::ArrayW<uint8_t> filename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Debug::FMOD5_Debug_Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Debug", "FMOD5_Debug_Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(filename)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags, mode, callback, filename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.OUTPUTTYPE
#include "FMOD/OUTPUTTYPE.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: FMOD.SPEAKERMODE
#include "FMOD/SPEAKERMODE.hpp"
// Including type: FMOD.FILE_OPENCALLBACK
#include "FMOD/FILE_OPENCALLBACK.hpp"
// Including type: FMOD.FILE_CLOSECALLBACK
#include "FMOD/FILE_CLOSECALLBACK.hpp"
// Including type: FMOD.FILE_READCALLBACK
#include "FMOD/FILE_READCALLBACK.hpp"
// Including type: FMOD.FILE_SEEKCALLBACK
#include "FMOD/FILE_SEEKCALLBACK.hpp"
// Including type: FMOD.FILE_ASYNCREADCALLBACK
#include "FMOD/FILE_ASYNCREADCALLBACK.hpp"
// Including type: FMOD.FILE_ASYNCCANCELCALLBACK
#include "FMOD/FILE_ASYNCCANCELCALLBACK.hpp"
// Including type: FMOD.ADVANCEDSETTINGS
#include "FMOD/ADVANCEDSETTINGS.hpp"
// Including type: FMOD.SYSTEM_CALLBACK
#include "FMOD/SYSTEM_CALLBACK.hpp"
// Including type: FMOD.SYSTEM_CALLBACK_TYPE
#include "FMOD/SYSTEM_CALLBACK_TYPE.hpp"
// Including type: FMOD.PLUGINTYPE
#include "FMOD/PLUGINTYPE.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.DSP_DESCRIPTION
#include "FMOD/DSP_DESCRIPTION.hpp"
// Including type: FMOD.INITFLAGS
#include "FMOD/INITFLAGS.hpp"
// Including type: FMOD.SPEAKER
#include "FMOD/SPEAKER.hpp"
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
// Including type: FMOD.CB_3D_ROLLOFFCALLBACK
#include "FMOD/CB_3D_ROLLOFFCALLBACK.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
// Including type: FMOD.CREATESOUNDEXINFO
#include "FMOD/CREATESOUNDEXINFO.hpp"
// Including type: FMOD.Sound
#include "FMOD/Sound.hpp"
// Including type: FMOD.DSP_TYPE
#include "FMOD/DSP_TYPE.hpp"
// Including type: FMOD.ChannelGroup
#include "FMOD/ChannelGroup.hpp"
// Including type: FMOD.SoundGroup
#include "FMOD/SoundGroup.hpp"
// Including type: FMOD.Reverb3D
#include "FMOD/Reverb3D.hpp"
// Including type: FMOD.Channel
#include "FMOD/Channel.hpp"
// Including type: FMOD.REVERB_PROPERTIES
#include "FMOD/REVERB_PROPERTIES.hpp"
// Including type: FMOD.DRIVER_STATE
#include "FMOD/DRIVER_STATE.hpp"
// Including type: FMOD.Geometry
#include "FMOD/Geometry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::System::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.System.release
::FMOD::RESULT FMOD::System::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.setOutput
::FMOD::RESULT FMOD::System::setOutput(::FMOD::OUTPUTTYPE output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, output);
}
// Autogenerated method: FMOD.System.getOutput
::FMOD::RESULT FMOD::System::getOutput(ByRef<::FMOD::OUTPUTTYPE> output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::OUTPUTTYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(output));
}
// Autogenerated method: FMOD.System.getNumDrivers
::FMOD::RESULT FMOD::System::getNumDrivers(ByRef<int> numdrivers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNumDrivers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumDrivers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numdrivers));
}
// Autogenerated method: FMOD.System.getDriverInfo
::FMOD::RESULT FMOD::System::getDriverInfo(int id, ByRef<::StringW> name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(name), namelen, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels));
}
// Autogenerated method: FMOD.System.getDriverInfo
::FMOD::RESULT FMOD::System::getDriverInfo(int id, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels));
}
// Autogenerated method: FMOD.System.setDriver
::FMOD::RESULT FMOD::System::setDriver(int driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setDriver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setDriver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, driver);
}
// Autogenerated method: FMOD.System.getDriver
::FMOD::RESULT FMOD::System::getDriver(ByRef<int> driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDriver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDriver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(driver));
}
// Autogenerated method: FMOD.System.setSoftwareChannels
::FMOD::RESULT FMOD::System::setSoftwareChannels(int numsoftwarechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setSoftwareChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setSoftwareChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numsoftwarechannels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, numsoftwarechannels);
}
// Autogenerated method: FMOD.System.getSoftwareChannels
::FMOD::RESULT FMOD::System::getSoftwareChannels(ByRef<int> numsoftwarechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getSoftwareChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSoftwareChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numsoftwarechannels));
}
// Autogenerated method: FMOD.System.setSoftwareFormat
::FMOD::RESULT FMOD::System::setSoftwareFormat(int samplerate, ::FMOD::SPEAKERMODE speakermode, int numrawspeakers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setSoftwareFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setSoftwareFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(samplerate), ::il2cpp_utils::ExtractType(speakermode), ::il2cpp_utils::ExtractType(numrawspeakers)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, samplerate, speakermode, numrawspeakers);
}
// Autogenerated method: FMOD.System.getSoftwareFormat
::FMOD::RESULT FMOD::System::getSoftwareFormat(ByRef<int> samplerate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> numrawspeakers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getSoftwareFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSoftwareFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(samplerate), byref(speakermode), byref(numrawspeakers));
}
// Autogenerated method: FMOD.System.setDSPBufferSize
::FMOD::RESULT FMOD::System::setDSPBufferSize(uint bufferlength, int numbuffers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setDSPBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setDSPBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferlength), ::il2cpp_utils::ExtractType(numbuffers)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, bufferlength, numbuffers);
}
// Autogenerated method: FMOD.System.getDSPBufferSize
::FMOD::RESULT FMOD::System::getDSPBufferSize(ByRef<uint> bufferlength, ByRef<int> numbuffers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDSPBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDSPBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(bufferlength), byref(numbuffers));
}
// Autogenerated method: FMOD.System.setFileSystem
::FMOD::RESULT FMOD::System::setFileSystem(::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek, ::FMOD::FILE_ASYNCREADCALLBACK* userasyncread, ::FMOD::FILE_ASYNCCANCELCALLBACK* userasynccancel, int blockalign) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setFileSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setFileSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useropen), ::il2cpp_utils::ExtractType(userclose), ::il2cpp_utils::ExtractType(userread), ::il2cpp_utils::ExtractType(userseek), ::il2cpp_utils::ExtractType(userasyncread), ::il2cpp_utils::ExtractType(userasynccancel), ::il2cpp_utils::ExtractType(blockalign)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign);
}
// Autogenerated method: FMOD.System.attachFileSystem
::FMOD::RESULT FMOD::System::attachFileSystem(::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::attachFileSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "attachFileSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useropen), ::il2cpp_utils::ExtractType(userclose), ::il2cpp_utils::ExtractType(userread), ::il2cpp_utils::ExtractType(userseek)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, useropen, userclose, userread, userseek);
}
// Autogenerated method: FMOD.System.setAdvancedSettings
::FMOD::RESULT FMOD::System::setAdvancedSettings(ByRef<::FMOD::ADVANCEDSETTINGS> settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setAdvancedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setAdvancedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(settings));
}
// Autogenerated method: FMOD.System.getAdvancedSettings
::FMOD::RESULT FMOD::System::getAdvancedSettings(ByRef<::FMOD::ADVANCEDSETTINGS> settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getAdvancedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getAdvancedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(settings));
}
// Autogenerated method: FMOD.System.setCallback
::FMOD::RESULT FMOD::System::setCallback(::FMOD::SYSTEM_CALLBACK* callback, ::FMOD::SYSTEM_CALLBACK_TYPE callbackmask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(callbackmask)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, callback, callbackmask);
}
// Autogenerated method: FMOD.System.setPluginPath
::FMOD::RESULT FMOD::System::setPluginPath(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setPluginPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPluginPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, path);
}
// Autogenerated method: FMOD.System.loadPlugin
::FMOD::RESULT FMOD::System::loadPlugin(::StringW filename, ByRef<uint> handle, uint priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::loadPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "loadPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filename), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, filename, byref(handle), priority);
}
// Autogenerated method: FMOD.System.loadPlugin
::FMOD::RESULT FMOD::System::loadPlugin(::StringW filename, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::loadPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "loadPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filename), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, filename, byref(handle));
}
// Autogenerated method: FMOD.System.unloadPlugin
::FMOD::RESULT FMOD::System::unloadPlugin(uint handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::unloadPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "unloadPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle);
}
// Autogenerated method: FMOD.System.getNumNestedPlugins
::FMOD::RESULT FMOD::System::getNumNestedPlugins(uint handle, ByRef<int> count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNumNestedPlugins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumNestedPlugins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, byref(count));
}
// Autogenerated method: FMOD.System.getNestedPlugin
::FMOD::RESULT FMOD::System::getNestedPlugin(uint handle, int index, ByRef<uint> nestedhandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNestedPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNestedPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, index, byref(nestedhandle));
}
// Autogenerated method: FMOD.System.getNumPlugins
::FMOD::RESULT FMOD::System::getNumPlugins(::FMOD::PLUGINTYPE plugintype, ByRef<int> numplugins) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNumPlugins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumPlugins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plugintype), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, plugintype, byref(numplugins));
}
// Autogenerated method: FMOD.System.getPluginHandle
::FMOD::RESULT FMOD::System::getPluginHandle(::FMOD::PLUGINTYPE plugintype, int index, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getPluginHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPluginHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plugintype), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, plugintype, index, byref(handle));
}
// Autogenerated method: FMOD.System.getPluginInfo
::FMOD::RESULT FMOD::System::getPluginInfo(uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ByRef<::StringW> name, int namelen, ByRef<uint> version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getPluginInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPluginInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::FMOD::PLUGINTYPE&>(), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, byref(plugintype), byref(name), namelen, byref(version));
}
// Autogenerated method: FMOD.System.getPluginInfo
::FMOD::RESULT FMOD::System::getPluginInfo(uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ByRef<uint> version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getPluginInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPluginInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::FMOD::PLUGINTYPE&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, byref(plugintype), byref(version));
}
// Autogenerated method: FMOD.System.setOutputByPlugin
::FMOD::RESULT FMOD::System::setOutputByPlugin(uint handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setOutputByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setOutputByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle);
}
// Autogenerated method: FMOD.System.getOutputByPlugin
::FMOD::RESULT FMOD::System::getOutputByPlugin(ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getOutputByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutputByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(handle));
}
// Autogenerated method: FMOD.System.createDSPByPlugin
::FMOD::RESULT FMOD::System::createDSPByPlugin(uint handle, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createDSPByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createDSPByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, byref(dsp));
}
// Autogenerated method: FMOD.System.getDSPInfoByPlugin
::FMOD::RESULT FMOD::System::getDSPInfoByPlugin(uint handle, ByRef<::System::IntPtr> description) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDSPInfoByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDSPInfoByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, handle, byref(description));
}
// Autogenerated method: FMOD.System.registerDSP
::FMOD::RESULT FMOD::System::registerDSP(ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::registerDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "registerDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(description), byref(handle));
}
// Autogenerated method: FMOD.System.init
::FMOD::RESULT FMOD::System::init(int maxchannels, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxchannels), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(extradriverdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, maxchannels, flags, extradriverdata);
}
// Autogenerated method: FMOD.System.close
::FMOD::RESULT FMOD::System::close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.update
::FMOD::RESULT FMOD::System::update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.setSpeakerPosition
::FMOD::RESULT FMOD::System::setSpeakerPosition(::FMOD::SPEAKER speaker, float x, float y, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setSpeakerPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setSpeakerPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speaker), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, speaker, x, y, active);
}
// Autogenerated method: FMOD.System.getSpeakerPosition
::FMOD::RESULT FMOD::System::getSpeakerPosition(::FMOD::SPEAKER speaker, ByRef<float> x, ByRef<float> y, ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getSpeakerPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSpeakerPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speaker), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, speaker, byref(x), byref(y), byref(active));
}
// Autogenerated method: FMOD.System.setStreamBufferSize
::FMOD::RESULT FMOD::System::setStreamBufferSize(uint filebuffersize, ::FMOD::TIMEUNIT filebuffersizetype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setStreamBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setStreamBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filebuffersize), ::il2cpp_utils::ExtractType(filebuffersizetype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, filebuffersize, filebuffersizetype);
}
// Autogenerated method: FMOD.System.getStreamBufferSize
::FMOD::RESULT FMOD::System::getStreamBufferSize(ByRef<uint> filebuffersize, ByRef<::FMOD::TIMEUNIT> filebuffersizetype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getStreamBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getStreamBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::TIMEUNIT&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(filebuffersize), byref(filebuffersizetype));
}
// Autogenerated method: FMOD.System.set3DSettings
::FMOD::RESULT FMOD::System::set3DSettings(float dopplerscale, float distancefactor, float rolloffscale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::set3DSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dopplerscale), ::il2cpp_utils::ExtractType(distancefactor), ::il2cpp_utils::ExtractType(rolloffscale)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dopplerscale, distancefactor, rolloffscale);
}
// Autogenerated method: FMOD.System.get3DSettings
::FMOD::RESULT FMOD::System::get3DSettings(ByRef<float> dopplerscale, ByRef<float> distancefactor, ByRef<float> rolloffscale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::get3DSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dopplerscale), byref(distancefactor), byref(rolloffscale));
}
// Autogenerated method: FMOD.System.set3DNumListeners
::FMOD::RESULT FMOD::System::set3DNumListeners(int numlisteners) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::set3DNumListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DNumListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numlisteners)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, numlisteners);
}
// Autogenerated method: FMOD.System.get3DNumListeners
::FMOD::RESULT FMOD::System::get3DNumListeners(ByRef<int> numlisteners) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::get3DNumListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DNumListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numlisteners));
}
// Autogenerated method: FMOD.System.set3DListenerAttributes
::FMOD::RESULT FMOD::System::set3DListenerAttributes(int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::set3DListenerAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DListenerAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(vel), ::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, listener, byref(pos), byref(vel), byref(forward), byref(up));
}
// Autogenerated method: FMOD.System.get3DListenerAttributes
::FMOD::RESULT FMOD::System::get3DListenerAttributes(int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::get3DListenerAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DListenerAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, listener, byref(pos), byref(vel), byref(forward), byref(up));
}
// Autogenerated method: FMOD.System.set3DRolloffCallback
::FMOD::RESULT FMOD::System::set3DRolloffCallback(::FMOD::CB_3D_ROLLOFFCALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::set3DRolloffCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DRolloffCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, callback);
}
// Autogenerated method: FMOD.System.mixerSuspend
::FMOD::RESULT FMOD::System::mixerSuspend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::mixerSuspend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "mixerSuspend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.mixerResume
::FMOD::RESULT FMOD::System::mixerResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::mixerResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "mixerResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.getDefaultMixMatrix
::FMOD::RESULT FMOD::System::getDefaultMixMatrix(::FMOD::SPEAKERMODE sourcespeakermode, ::FMOD::SPEAKERMODE targetspeakermode, ::ArrayW<float> matrix, int matrixhop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getDefaultMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDefaultMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourcespeakermode), ::il2cpp_utils::ExtractType(targetspeakermode), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(matrixhop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, sourcespeakermode, targetspeakermode, matrix, matrixhop);
}
// Autogenerated method: FMOD.System.getSpeakerModeChannels
::FMOD::RESULT FMOD::System::getSpeakerModeChannels(::FMOD::SPEAKERMODE mode, ByRef<int> channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getSpeakerModeChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSpeakerModeChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mode, byref(channels));
}
// Autogenerated method: FMOD.System.getVersion
::FMOD::RESULT FMOD::System::getVersion(ByRef<uint> version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(version));
}
// Autogenerated method: FMOD.System.getOutputHandle
::FMOD::RESULT FMOD::System::getOutputHandle(ByRef<::System::IntPtr> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getOutputHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutputHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(handle));
}
// Autogenerated method: FMOD.System.getChannelsPlaying
::FMOD::RESULT FMOD::System::getChannelsPlaying(ByRef<int> channels, ByRef<int> realchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getChannelsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getChannelsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(channels), byref(realchannels));
}
// Autogenerated method: FMOD.System.getCPUUsage
::FMOD::RESULT FMOD::System::getCPUUsage(ByRef<float> dsp, ByRef<float> stream, ByRef<float> geometry, ByRef<float> update, ByRef<float> total) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getCPUUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getCPUUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dsp), byref(stream), byref(geometry), byref(update), byref(total));
}
// Autogenerated method: FMOD.System.getFileUsage
::FMOD::RESULT FMOD::System::getFileUsage(ByRef<int64_t> sampleBytesRead, ByRef<int64_t> streamBytesRead, ByRef<int64_t> otherBytesRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getFileUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getFileUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(sampleBytesRead), byref(streamBytesRead), byref(otherBytesRead));
}
// Autogenerated method: FMOD.System.getSoundRAM
::FMOD::RESULT FMOD::System::getSoundRAM(ByRef<int> currentalloced, ByRef<int> maxalloced, ByRef<int> total) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getSoundRAM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSoundRAM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(currentalloced), byref(maxalloced), byref(total));
}
// Autogenerated method: FMOD.System.createSound
::FMOD::RESULT FMOD::System::createSound(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createSound
::FMOD::RESULT FMOD::System::createSound(::ArrayW<uint8_t> data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createSound
::FMOD::RESULT FMOD::System::createSound(::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createSound
::FMOD::RESULT FMOD::System::createSound(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, mode, byref(sound));
}
// Autogenerated method: FMOD.System.createStream
::FMOD::RESULT FMOD::System::createStream(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createStream
::FMOD::RESULT FMOD::System::createStream(::ArrayW<uint8_t> data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createStream
::FMOD::RESULT FMOD::System::createStream(::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.createStream
::FMOD::RESULT FMOD::System::createStream(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, mode, byref(sound));
}
// Autogenerated method: FMOD.System.createDSP
::FMOD::RESULT FMOD::System::createDSP(ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(description), byref(dsp));
}
// Autogenerated method: FMOD.System.createDSPByType
::FMOD::RESULT FMOD::System::createDSPByType(::FMOD::DSP_TYPE type, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createDSPByType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createDSPByType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, type, byref(dsp));
}
// Autogenerated method: FMOD.System.createChannelGroup
::FMOD::RESULT FMOD::System::createChannelGroup(::StringW name, ByRef<::FMOD::ChannelGroup> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::FMOD::ChannelGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, byref(channelgroup));
}
// Autogenerated method: FMOD.System.createSoundGroup
::FMOD::RESULT FMOD::System::createSoundGroup(::StringW name, ByRef<::FMOD::SoundGroup> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::FMOD::SoundGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, byref(soundgroup));
}
// Autogenerated method: FMOD.System.createReverb3D
::FMOD::RESULT FMOD::System::createReverb3D(ByRef<::FMOD::Reverb3D> reverb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createReverb3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createReverb3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::Reverb3D&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(reverb));
}
// Autogenerated method: FMOD.System.playSound
::FMOD::RESULT FMOD::System::playSound(::FMOD::Sound sound, ::FMOD::ChannelGroup channelGroup, bool paused, ByRef<::FMOD::Channel> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::playSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "playSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(channelGroup), ::il2cpp_utils::ExtractType(paused), ::il2cpp_utils::ExtractIndependentType<::FMOD::Channel&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, sound, channelGroup, paused, byref(channel));
}
// Autogenerated method: FMOD.System.playDSP
::FMOD::RESULT FMOD::System::playDSP(::FMOD::DSP dsp, ::FMOD::ChannelGroup channelGroup, bool paused, ByRef<::FMOD::Channel> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::playDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "playDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(channelGroup), ::il2cpp_utils::ExtractType(paused), ::il2cpp_utils::ExtractIndependentType<::FMOD::Channel&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, channelGroup, paused, byref(channel));
}
// Autogenerated method: FMOD.System.getChannel
::FMOD::RESULT FMOD::System::getChannel(int channelid, ByRef<::FMOD::Channel> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelid), ::il2cpp_utils::ExtractIndependentType<::FMOD::Channel&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channelid, byref(channel));
}
// Autogenerated method: FMOD.System.getMasterChannelGroup
::FMOD::RESULT FMOD::System::getMasterChannelGroup(ByRef<::FMOD::ChannelGroup> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getMasterChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMasterChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::ChannelGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(channelgroup));
}
// Autogenerated method: FMOD.System.getMasterSoundGroup
::FMOD::RESULT FMOD::System::getMasterSoundGroup(ByRef<::FMOD::SoundGroup> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getMasterSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMasterSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::SoundGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(soundgroup));
}
// Autogenerated method: FMOD.System.attachChannelGroupToPort
::FMOD::RESULT FMOD::System::attachChannelGroupToPort(uint portType, uint64_t portIndex, ::FMOD::ChannelGroup channelgroup, bool passThru) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::attachChannelGroupToPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "attachChannelGroupToPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(portType), ::il2cpp_utils::ExtractType(portIndex), ::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(passThru)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, portType, portIndex, channelgroup, passThru);
}
// Autogenerated method: FMOD.System.detachChannelGroupFromPort
::FMOD::RESULT FMOD::System::detachChannelGroupFromPort(::FMOD::ChannelGroup channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::detachChannelGroupFromPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "detachChannelGroupFromPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channelgroup);
}
// Autogenerated method: FMOD.System.setReverbProperties
::FMOD::RESULT FMOD::System::setReverbProperties(int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(prop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, byref(prop));
}
// Autogenerated method: FMOD.System.getReverbProperties
::FMOD::RESULT FMOD::System::getReverbProperties(int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractIndependentType<::FMOD::REVERB_PROPERTIES&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, byref(prop));
}
// Autogenerated method: FMOD.System.lockDSP
::FMOD::RESULT FMOD::System::lockDSP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::lockDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "lockDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.unlockDSP
::FMOD::RESULT FMOD::System::unlockDSP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::unlockDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "unlockDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.getRecordNumDrivers
::FMOD::RESULT FMOD::System::getRecordNumDrivers(ByRef<int> numdrivers, ByRef<int> numconnected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getRecordNumDrivers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getRecordNumDrivers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numdrivers), byref(numconnected));
}
// Autogenerated method: FMOD.System.getRecordDriverInfo
::FMOD::RESULT FMOD::System::getRecordDriverInfo(int id, ByRef<::StringW> name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getRecordDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getRecordDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::DRIVER_STATE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(name), namelen, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels), byref(state));
}
// Autogenerated method: FMOD.System.getRecordDriverInfo
::FMOD::RESULT FMOD::System::getRecordDriverInfo(int id, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getRecordDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getRecordDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::DRIVER_STATE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels), byref(state));
}
// Autogenerated method: FMOD.System.getRecordPosition
::FMOD::RESULT FMOD::System::getRecordPosition(int id, ByRef<uint> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getRecordPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getRecordPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(position));
}
// Autogenerated method: FMOD.System.recordStart
::FMOD::RESULT FMOD::System::recordStart(int id, ::FMOD::Sound sound, bool loop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::recordStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "recordStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(loop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, sound, loop);
}
// Autogenerated method: FMOD.System.recordStop
::FMOD::RESULT FMOD::System::recordStop(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::recordStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "recordStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id);
}
// Autogenerated method: FMOD.System.isRecording
::FMOD::RESULT FMOD::System::isRecording(int id, ByRef<bool> recording) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::isRecording");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "isRecording", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, id, byref(recording));
}
// Autogenerated method: FMOD.System.createGeometry
::FMOD::RESULT FMOD::System::createGeometry(int maxpolygons, int maxvertices, ByRef<::FMOD::Geometry> geometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::createGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "createGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxpolygons), ::il2cpp_utils::ExtractType(maxvertices), ::il2cpp_utils::ExtractIndependentType<::FMOD::Geometry&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, maxpolygons, maxvertices, byref(geometry));
}
// Autogenerated method: FMOD.System.setGeometrySettings
::FMOD::RESULT FMOD::System::setGeometrySettings(float maxworldsize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setGeometrySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setGeometrySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxworldsize)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, maxworldsize);
}
// Autogenerated method: FMOD.System.getGeometrySettings
::FMOD::RESULT FMOD::System::getGeometrySettings(ByRef<float> maxworldsize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getGeometrySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getGeometrySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(maxworldsize));
}
// Autogenerated method: FMOD.System.loadGeometry
::FMOD::RESULT FMOD::System::loadGeometry(::System::IntPtr data, int datasize, ByRef<::FMOD::Geometry> geometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::loadGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "loadGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(datasize), ::il2cpp_utils::ExtractIndependentType<::FMOD::Geometry&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, data, datasize, byref(geometry));
}
// Autogenerated method: FMOD.System.getGeometryOcclusion
::FMOD::RESULT FMOD::System::getGeometryOcclusion(ByRef<::FMOD::VECTOR> listener, ByRef<::FMOD::VECTOR> source, ByRef<float> direct, ByRef<float> reverb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getGeometryOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getGeometryOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(listener), byref(source), byref(direct), byref(reverb));
}
// Autogenerated method: FMOD.System.setNetworkProxy
::FMOD::RESULT FMOD::System::setNetworkProxy(::StringW proxy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setNetworkProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setNetworkProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(proxy)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, proxy);
}
// Autogenerated method: FMOD.System.getNetworkProxy
::FMOD::RESULT FMOD::System::getNetworkProxy(ByRef<::StringW> proxy, int proxylen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNetworkProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNetworkProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(proxylen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(proxy), proxylen);
}
// Autogenerated method: FMOD.System.setNetworkTimeout
::FMOD::RESULT FMOD::System::setNetworkTimeout(int timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setNetworkTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setNetworkTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, timeout);
}
// Autogenerated method: FMOD.System.getNetworkTimeout
::FMOD::RESULT FMOD::System::getNetworkTimeout(ByRef<int> timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getNetworkTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNetworkTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(timeout));
}
// Autogenerated method: FMOD.System.setUserData
::FMOD::RESULT FMOD::System::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.System.getUserData
::FMOD::RESULT FMOD::System::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.System.FMOD5_System_Release
::FMOD::RESULT FMOD::System::FMOD5_System_Release(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetOutput
::FMOD::RESULT FMOD::System::FMOD5_System_SetOutput(::System::IntPtr system, ::FMOD::OUTPUTTYPE output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, output);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetOutput
::FMOD::RESULT FMOD::System::FMOD5_System_GetOutput(::System::IntPtr system, ByRef<::FMOD::OUTPUTTYPE> output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::FMOD::OUTPUTTYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(output));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNumDrivers
::FMOD::RESULT FMOD::System::FMOD5_System_GetNumDrivers(::System::IntPtr system, ByRef<int> numdrivers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNumDrivers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNumDrivers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(numdrivers));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetDriverInfo
::FMOD::RESULT FMOD::System::FMOD5_System_GetDriverInfo(::System::IntPtr system, int id, ::System::IntPtr name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id, name, namelen, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetDriver
::FMOD::RESULT FMOD::System::FMOD5_System_SetDriver(::System::IntPtr system, int driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetDriver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetDriver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(driver)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, driver);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetDriver
::FMOD::RESULT FMOD::System::FMOD5_System_GetDriver(::System::IntPtr system, ByRef<int> driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetDriver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetDriver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(driver));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetSoftwareChannels
::FMOD::RESULT FMOD::System::FMOD5_System_SetSoftwareChannels(::System::IntPtr system, int numsoftwarechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetSoftwareChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetSoftwareChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(numsoftwarechannels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, numsoftwarechannels);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetSoftwareChannels
::FMOD::RESULT FMOD::System::FMOD5_System_GetSoftwareChannels(::System::IntPtr system, ByRef<int> numsoftwarechannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetSoftwareChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetSoftwareChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(numsoftwarechannels));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetSoftwareFormat
::FMOD::RESULT FMOD::System::FMOD5_System_SetSoftwareFormat(::System::IntPtr system, int samplerate, ::FMOD::SPEAKERMODE speakermode, int numrawspeakers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetSoftwareFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetSoftwareFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(samplerate), ::il2cpp_utils::ExtractType(speakermode), ::il2cpp_utils::ExtractType(numrawspeakers)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, samplerate, speakermode, numrawspeakers);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetSoftwareFormat
::FMOD::RESULT FMOD::System::FMOD5_System_GetSoftwareFormat(::System::IntPtr system, ByRef<int> samplerate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> numrawspeakers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetSoftwareFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetSoftwareFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(samplerate), byref(speakermode), byref(numrawspeakers));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetDSPBufferSize
::FMOD::RESULT FMOD::System::FMOD5_System_SetDSPBufferSize(::System::IntPtr system, uint bufferlength, int numbuffers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetDSPBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetDSPBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(bufferlength), ::il2cpp_utils::ExtractType(numbuffers)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, bufferlength, numbuffers);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetDSPBufferSize
::FMOD::RESULT FMOD::System::FMOD5_System_GetDSPBufferSize(::System::IntPtr system, ByRef<uint> bufferlength, ByRef<int> numbuffers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetDSPBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetDSPBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(bufferlength), byref(numbuffers));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetFileSystem
::FMOD::RESULT FMOD::System::FMOD5_System_SetFileSystem(::System::IntPtr system, ::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek, ::FMOD::FILE_ASYNCREADCALLBACK* userasyncread, ::FMOD::FILE_ASYNCCANCELCALLBACK* userasynccancel, int blockalign) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetFileSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetFileSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(useropen), ::il2cpp_utils::ExtractType(userclose), ::il2cpp_utils::ExtractType(userread), ::il2cpp_utils::ExtractType(userseek), ::il2cpp_utils::ExtractType(userasyncread), ::il2cpp_utils::ExtractType(userasynccancel), ::il2cpp_utils::ExtractType(blockalign)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign);
}
// Autogenerated method: FMOD.System.FMOD5_System_AttachFileSystem
::FMOD::RESULT FMOD::System::FMOD5_System_AttachFileSystem(::System::IntPtr system, ::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_AttachFileSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_AttachFileSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(useropen), ::il2cpp_utils::ExtractType(userclose), ::il2cpp_utils::ExtractType(userread), ::il2cpp_utils::ExtractType(userseek)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, useropen, userclose, userread, userseek);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetAdvancedSettings
::FMOD::RESULT FMOD::System::FMOD5_System_SetAdvancedSettings(::System::IntPtr system, ByRef<::FMOD::ADVANCEDSETTINGS> settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetAdvancedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetAdvancedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(settings));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetAdvancedSettings
::FMOD::RESULT FMOD::System::FMOD5_System_GetAdvancedSettings(::System::IntPtr system, ByRef<::FMOD::ADVANCEDSETTINGS> settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetAdvancedSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetAdvancedSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(settings));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetCallback
::FMOD::RESULT FMOD::System::FMOD5_System_SetCallback(::System::IntPtr system, ::FMOD::SYSTEM_CALLBACK* callback, ::FMOD::SYSTEM_CALLBACK_TYPE callbackmask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(callbackmask)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, callback, callbackmask);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetPluginPath
::FMOD::RESULT FMOD::System::FMOD5_System_SetPluginPath(::System::IntPtr system, ::ArrayW<uint8_t> path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetPluginPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetPluginPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, path);
}
// Autogenerated method: FMOD.System.FMOD5_System_LoadPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_LoadPlugin(::System::IntPtr system, ::ArrayW<uint8_t> filename, ByRef<uint> handle, uint priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_LoadPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_LoadPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(filename), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, filename, byref(handle), priority);
}
// Autogenerated method: FMOD.System.FMOD5_System_UnloadPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_UnloadPlugin(::System::IntPtr system, uint handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_UnloadPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_UnloadPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNumNestedPlugins
::FMOD::RESULT FMOD::System::FMOD5_System_GetNumNestedPlugins(::System::IntPtr system, uint handle, ByRef<int> count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNumNestedPlugins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNumNestedPlugins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle, byref(count));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNestedPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_GetNestedPlugin(::System::IntPtr system, uint handle, int index, ByRef<uint> nestedhandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNestedPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNestedPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle, index, byref(nestedhandle));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNumPlugins
::FMOD::RESULT FMOD::System::FMOD5_System_GetNumPlugins(::System::IntPtr system, ::FMOD::PLUGINTYPE plugintype, ByRef<int> numplugins) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNumPlugins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNumPlugins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(plugintype), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, plugintype, byref(numplugins));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetPluginHandle
::FMOD::RESULT FMOD::System::FMOD5_System_GetPluginHandle(::System::IntPtr system, ::FMOD::PLUGINTYPE plugintype, int index, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetPluginHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetPluginHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(plugintype), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, plugintype, index, byref(handle));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetPluginInfo
::FMOD::RESULT FMOD::System::FMOD5_System_GetPluginInfo(::System::IntPtr system, uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ::System::IntPtr name, int namelen, ByRef<uint> version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetPluginInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetPluginInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::FMOD::PLUGINTYPE&>(), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle, byref(plugintype), name, namelen, byref(version));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetOutputByPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_SetOutputByPlugin(::System::IntPtr system, uint handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetOutputByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetOutputByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetOutputByPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_GetOutputByPlugin(::System::IntPtr system, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetOutputByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetOutputByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(handle));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateDSPByPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_CreateDSPByPlugin(::System::IntPtr system, uint handle, ByRef<::System::IntPtr> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateDSPByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateDSPByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle, byref(dsp));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetDSPInfoByPlugin
::FMOD::RESULT FMOD::System::FMOD5_System_GetDSPInfoByPlugin(::System::IntPtr system, uint handle, ByRef<::System::IntPtr> description) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetDSPInfoByPlugin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetDSPInfoByPlugin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, handle, byref(description));
}
// Autogenerated method: FMOD.System.FMOD5_System_RegisterDSP
::FMOD::RESULT FMOD::System::FMOD5_System_RegisterDSP(::System::IntPtr system, ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<uint> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_RegisterDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_RegisterDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(description), byref(handle));
}
// Autogenerated method: FMOD.System.FMOD5_System_Init
::FMOD::RESULT FMOD::System::FMOD5_System_Init(::System::IntPtr system, int maxchannels, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(maxchannels), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(extradriverdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, maxchannels, flags, extradriverdata);
}
// Autogenerated method: FMOD.System.FMOD5_System_Close
::FMOD::RESULT FMOD::System::FMOD5_System_Close(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_Update
::FMOD::RESULT FMOD::System::FMOD5_System_Update(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetSpeakerPosition
::FMOD::RESULT FMOD::System::FMOD5_System_SetSpeakerPosition(::System::IntPtr system, ::FMOD::SPEAKER speaker, float x, float y, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetSpeakerPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetSpeakerPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(speaker), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, speaker, x, y, active);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetSpeakerPosition
::FMOD::RESULT FMOD::System::FMOD5_System_GetSpeakerPosition(::System::IntPtr system, ::FMOD::SPEAKER speaker, ByRef<float> x, ByRef<float> y, ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetSpeakerPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetSpeakerPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(speaker), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, speaker, byref(x), byref(y), byref(active));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetStreamBufferSize
::FMOD::RESULT FMOD::System::FMOD5_System_SetStreamBufferSize(::System::IntPtr system, uint filebuffersize, ::FMOD::TIMEUNIT filebuffersizetype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetStreamBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetStreamBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(filebuffersize), ::il2cpp_utils::ExtractType(filebuffersizetype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, filebuffersize, filebuffersizetype);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetStreamBufferSize
::FMOD::RESULT FMOD::System::FMOD5_System_GetStreamBufferSize(::System::IntPtr system, ByRef<uint> filebuffersize, ByRef<::FMOD::TIMEUNIT> filebuffersizetype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetStreamBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetStreamBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::TIMEUNIT&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(filebuffersize), byref(filebuffersizetype));
}
// Autogenerated method: FMOD.System.FMOD5_System_Set3DSettings
::FMOD::RESULT FMOD::System::FMOD5_System_Set3DSettings(::System::IntPtr system, float dopplerscale, float distancefactor, float rolloffscale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Set3DSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Set3DSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(dopplerscale), ::il2cpp_utils::ExtractType(distancefactor), ::il2cpp_utils::ExtractType(rolloffscale)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, dopplerscale, distancefactor, rolloffscale);
}
// Autogenerated method: FMOD.System.FMOD5_System_Get3DSettings
::FMOD::RESULT FMOD::System::FMOD5_System_Get3DSettings(::System::IntPtr system, ByRef<float> dopplerscale, ByRef<float> distancefactor, ByRef<float> rolloffscale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Get3DSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Get3DSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(dopplerscale), byref(distancefactor), byref(rolloffscale));
}
// Autogenerated method: FMOD.System.FMOD5_System_Set3DNumListeners
::FMOD::RESULT FMOD::System::FMOD5_System_Set3DNumListeners(::System::IntPtr system, int numlisteners) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Set3DNumListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Set3DNumListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(numlisteners)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, numlisteners);
}
// Autogenerated method: FMOD.System.FMOD5_System_Get3DNumListeners
::FMOD::RESULT FMOD::System::FMOD5_System_Get3DNumListeners(::System::IntPtr system, ByRef<int> numlisteners) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Get3DNumListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Get3DNumListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(numlisteners));
}
// Autogenerated method: FMOD.System.FMOD5_System_Set3DListenerAttributes
::FMOD::RESULT FMOD::System::FMOD5_System_Set3DListenerAttributes(::System::IntPtr system, int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Set3DListenerAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Set3DListenerAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(vel), ::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, listener, byref(pos), byref(vel), byref(forward), byref(up));
}
// Autogenerated method: FMOD.System.FMOD5_System_Get3DListenerAttributes
::FMOD::RESULT FMOD::System::FMOD5_System_Get3DListenerAttributes(::System::IntPtr system, int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Get3DListenerAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Get3DListenerAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, listener, byref(pos), byref(vel), byref(forward), byref(up));
}
// Autogenerated method: FMOD.System.FMOD5_System_Set3DRolloffCallback
::FMOD::RESULT FMOD::System::FMOD5_System_Set3DRolloffCallback(::System::IntPtr system, ::FMOD::CB_3D_ROLLOFFCALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_Set3DRolloffCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_Set3DRolloffCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, callback);
}
// Autogenerated method: FMOD.System.FMOD5_System_MixerSuspend
::FMOD::RESULT FMOD::System::FMOD5_System_MixerSuspend(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_MixerSuspend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_MixerSuspend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_MixerResume
::FMOD::RESULT FMOD::System::FMOD5_System_MixerResume(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_MixerResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_MixerResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetDefaultMixMatrix
::FMOD::RESULT FMOD::System::FMOD5_System_GetDefaultMixMatrix(::System::IntPtr system, ::FMOD::SPEAKERMODE sourcespeakermode, ::FMOD::SPEAKERMODE targetspeakermode, ::ArrayW<float> matrix, int matrixhop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetDefaultMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetDefaultMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(sourcespeakermode), ::il2cpp_utils::ExtractType(targetspeakermode), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(matrixhop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, sourcespeakermode, targetspeakermode, matrix, matrixhop);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetSpeakerModeChannels
::FMOD::RESULT FMOD::System::FMOD5_System_GetSpeakerModeChannels(::System::IntPtr system, ::FMOD::SPEAKERMODE mode, ByRef<int> channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetSpeakerModeChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetSpeakerModeChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, mode, byref(channels));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetVersion
::FMOD::RESULT FMOD::System::FMOD5_System_GetVersion(::System::IntPtr system, ByRef<uint> version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(version));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetOutputHandle
::FMOD::RESULT FMOD::System::FMOD5_System_GetOutputHandle(::System::IntPtr system, ByRef<::System::IntPtr> handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetOutputHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetOutputHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(handle));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetChannelsPlaying
::FMOD::RESULT FMOD::System::FMOD5_System_GetChannelsPlaying(::System::IntPtr system, ByRef<int> channels, ByRef<int> realchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetChannelsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetChannelsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(channels), byref(realchannels));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetCPUUsage
::FMOD::RESULT FMOD::System::FMOD5_System_GetCPUUsage(::System::IntPtr system, ByRef<float> dsp, ByRef<float> stream, ByRef<float> geometry, ByRef<float> update, ByRef<float> total) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetCPUUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetCPUUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(dsp), byref(stream), byref(geometry), byref(update), byref(total));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetFileUsage
::FMOD::RESULT FMOD::System::FMOD5_System_GetFileUsage(::System::IntPtr system, ByRef<int64_t> sampleBytesRead, ByRef<int64_t> streamBytesRead, ByRef<int64_t> otherBytesRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetFileUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetFileUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(sampleBytesRead), byref(streamBytesRead), byref(otherBytesRead));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetSoundRAM
::FMOD::RESULT FMOD::System::FMOD5_System_GetSoundRAM(::System::IntPtr system, ByRef<int> currentalloced, ByRef<int> maxalloced, ByRef<int> total) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetSoundRAM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetSoundRAM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(currentalloced), byref(maxalloced), byref(total));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateSound
::FMOD::RESULT FMOD::System::FMOD5_System_CreateSound(::System::IntPtr system, ::ArrayW<uint8_t> name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateSound
::FMOD::RESULT FMOD::System::FMOD5_System_CreateSound(::System::IntPtr system, ::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateStream
::FMOD::RESULT FMOD::System::FMOD5_System_CreateStream(::System::IntPtr system, ::ArrayW<uint8_t> name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateStream
::FMOD::RESULT FMOD::System::FMOD5_System_CreateStream(::System::IntPtr system, ::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name_or_data), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(exinfo), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name_or_data, mode, byref(exinfo), byref(sound));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateDSP
::FMOD::RESULT FMOD::System::FMOD5_System_CreateDSP(::System::IntPtr system, ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<::System::IntPtr> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(description), byref(dsp));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateDSPByType
::FMOD::RESULT FMOD::System::FMOD5_System_CreateDSPByType(::System::IntPtr system, ::FMOD::DSP_TYPE type, ByRef<::System::IntPtr> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateDSPByType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateDSPByType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, type, byref(dsp));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateChannelGroup
::FMOD::RESULT FMOD::System::FMOD5_System_CreateChannelGroup(::System::IntPtr system, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name, byref(channelgroup));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateSoundGroup
::FMOD::RESULT FMOD::System::FMOD5_System_CreateSoundGroup(::System::IntPtr system, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, name, byref(soundgroup));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateReverb3D
::FMOD::RESULT FMOD::System::FMOD5_System_CreateReverb3D(::System::IntPtr system, ByRef<::System::IntPtr> reverb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateReverb3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateReverb3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(reverb));
}
// Autogenerated method: FMOD.System.FMOD5_System_PlaySound
::FMOD::RESULT FMOD::System::FMOD5_System_PlaySound(::System::IntPtr system, ::System::IntPtr sound, ::System::IntPtr channelGroup, bool paused, ByRef<::System::IntPtr> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_PlaySound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_PlaySound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(channelGroup), ::il2cpp_utils::ExtractType(paused), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, sound, channelGroup, paused, byref(channel));
}
// Autogenerated method: FMOD.System.FMOD5_System_PlayDSP
::FMOD::RESULT FMOD::System::FMOD5_System_PlayDSP(::System::IntPtr system, ::System::IntPtr dsp, ::System::IntPtr channelGroup, bool paused, ByRef<::System::IntPtr> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_PlayDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_PlayDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(channelGroup), ::il2cpp_utils::ExtractType(paused), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, dsp, channelGroup, paused, byref(channel));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetChannel
::FMOD::RESULT FMOD::System::FMOD5_System_GetChannel(::System::IntPtr system, int channelid, ByRef<::System::IntPtr> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(channelid), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, channelid, byref(channel));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetMasterChannelGroup
::FMOD::RESULT FMOD::System::FMOD5_System_GetMasterChannelGroup(::System::IntPtr system, ByRef<::System::IntPtr> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetMasterChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetMasterChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(channelgroup));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetMasterSoundGroup
::FMOD::RESULT FMOD::System::FMOD5_System_GetMasterSoundGroup(::System::IntPtr system, ByRef<::System::IntPtr> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetMasterSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetMasterSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(soundgroup));
}
// Autogenerated method: FMOD.System.FMOD5_System_AttachChannelGroupToPort
::FMOD::RESULT FMOD::System::FMOD5_System_AttachChannelGroupToPort(::System::IntPtr system, uint portType, uint64_t portIndex, ::System::IntPtr channelgroup, bool passThru) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_AttachChannelGroupToPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_AttachChannelGroupToPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(portType), ::il2cpp_utils::ExtractType(portIndex), ::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(passThru)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, portType, portIndex, channelgroup, passThru);
}
// Autogenerated method: FMOD.System.FMOD5_System_DetachChannelGroupFromPort
::FMOD::RESULT FMOD::System::FMOD5_System_DetachChannelGroupFromPort(::System::IntPtr system, ::System::IntPtr channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_DetachChannelGroupFromPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_DetachChannelGroupFromPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, channelgroup);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetReverbProperties
::FMOD::RESULT FMOD::System::FMOD5_System_SetReverbProperties(::System::IntPtr system, int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(prop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, instance, byref(prop));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetReverbProperties
::FMOD::RESULT FMOD::System::FMOD5_System_GetReverbProperties(::System::IntPtr system, int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractIndependentType<::FMOD::REVERB_PROPERTIES&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, instance, byref(prop));
}
// Autogenerated method: FMOD.System.FMOD5_System_LockDSP
::FMOD::RESULT FMOD::System::FMOD5_System_LockDSP(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_LockDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_LockDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_UnlockDSP
::FMOD::RESULT FMOD::System::FMOD5_System_UnlockDSP(::System::IntPtr system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_UnlockDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_UnlockDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetRecordNumDrivers
::FMOD::RESULT FMOD::System::FMOD5_System_GetRecordNumDrivers(::System::IntPtr system, ByRef<int> numdrivers, ByRef<int> numconnected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetRecordNumDrivers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetRecordNumDrivers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(numdrivers), byref(numconnected));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetRecordDriverInfo
::FMOD::RESULT FMOD::System::FMOD5_System_GetRecordDriverInfo(::System::IntPtr system, int id, ::System::IntPtr name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetRecordDriverInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetRecordDriverInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<::System::Guid&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::DRIVER_STATE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id, name, namelen, byref(guid), byref(systemrate), byref(speakermode), byref(speakermodechannels), byref(state));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetRecordPosition
::FMOD::RESULT FMOD::System::FMOD5_System_GetRecordPosition(::System::IntPtr system, int id, ByRef<uint> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetRecordPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetRecordPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id, byref(position));
}
// Autogenerated method: FMOD.System.FMOD5_System_RecordStart
::FMOD::RESULT FMOD::System::FMOD5_System_RecordStart(::System::IntPtr system, int id, ::System::IntPtr sound, bool loop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_RecordStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_RecordStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(loop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id, sound, loop);
}
// Autogenerated method: FMOD.System.FMOD5_System_RecordStop
::FMOD::RESULT FMOD::System::FMOD5_System_RecordStop(::System::IntPtr system, int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_RecordStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_RecordStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id);
}
// Autogenerated method: FMOD.System.FMOD5_System_IsRecording
::FMOD::RESULT FMOD::System::FMOD5_System_IsRecording(::System::IntPtr system, int id, ByRef<bool> recording) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_IsRecording");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_IsRecording", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, id, byref(recording));
}
// Autogenerated method: FMOD.System.FMOD5_System_CreateGeometry
::FMOD::RESULT FMOD::System::FMOD5_System_CreateGeometry(::System::IntPtr system, int maxpolygons, int maxvertices, ByRef<::System::IntPtr> geometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_CreateGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_CreateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(maxpolygons), ::il2cpp_utils::ExtractType(maxvertices), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, maxpolygons, maxvertices, byref(geometry));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetGeometrySettings
::FMOD::RESULT FMOD::System::FMOD5_System_SetGeometrySettings(::System::IntPtr system, float maxworldsize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetGeometrySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetGeometrySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(maxworldsize)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, maxworldsize);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetGeometrySettings
::FMOD::RESULT FMOD::System::FMOD5_System_GetGeometrySettings(::System::IntPtr system, ByRef<float> maxworldsize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetGeometrySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetGeometrySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(maxworldsize));
}
// Autogenerated method: FMOD.System.FMOD5_System_LoadGeometry
::FMOD::RESULT FMOD::System::FMOD5_System_LoadGeometry(::System::IntPtr system, ::System::IntPtr data, int datasize, ByRef<::System::IntPtr> geometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_LoadGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_LoadGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(datasize), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, data, datasize, byref(geometry));
}
// Autogenerated method: FMOD.System.FMOD5_System_GetGeometryOcclusion
::FMOD::RESULT FMOD::System::FMOD5_System_GetGeometryOcclusion(::System::IntPtr system, ByRef<::FMOD::VECTOR> listener, ByRef<::FMOD::VECTOR> source, ByRef<float> direct, ByRef<float> reverb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetGeometryOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetGeometryOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(listener), byref(source), byref(direct), byref(reverb));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetNetworkProxy
::FMOD::RESULT FMOD::System::FMOD5_System_SetNetworkProxy(::System::IntPtr system, ::ArrayW<uint8_t> proxy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetNetworkProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetNetworkProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(proxy)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, proxy);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNetworkProxy
::FMOD::RESULT FMOD::System::FMOD5_System_GetNetworkProxy(::System::IntPtr system, ::System::IntPtr proxy, int proxylen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNetworkProxy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNetworkProxy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(proxy), ::il2cpp_utils::ExtractType(proxylen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, proxy, proxylen);
}
// Autogenerated method: FMOD.System.FMOD5_System_SetNetworkTimeout
::FMOD::RESULT FMOD::System::FMOD5_System_SetNetworkTimeout(::System::IntPtr system, int timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetNetworkTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetNetworkTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, timeout);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetNetworkTimeout
::FMOD::RESULT FMOD::System::FMOD5_System_GetNetworkTimeout(::System::IntPtr system, ByRef<int> timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetNetworkTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetNetworkTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(timeout));
}
// Autogenerated method: FMOD.System.FMOD5_System_SetUserData
::FMOD::RESULT FMOD::System::FMOD5_System_SetUserData(::System::IntPtr system, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, userdata);
}
// Autogenerated method: FMOD.System.FMOD5_System_GetUserData
::FMOD::RESULT FMOD::System::FMOD5_System_GetUserData(::System::IntPtr system, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::FMOD5_System_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "System", "FMOD5_System_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(system), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, system, byref(userdata));
}
// Autogenerated method: FMOD.System.hasHandle
bool FMOD::System::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.System.clearHandle
void FMOD::System::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::System::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Sound
#include "FMOD/Sound.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
// Including type: FMOD.SOUND_TYPE
#include "FMOD/SOUND_TYPE.hpp"
// Including type: FMOD.SOUND_FORMAT
#include "FMOD/SOUND_FORMAT.hpp"
// Including type: FMOD.TAG
#include "FMOD/TAG.hpp"
// Including type: FMOD.OPENSTATE
#include "FMOD/OPENSTATE.hpp"
// Including type: FMOD.SoundGroup
#include "FMOD/SoundGroup.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::Sound::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.Sound.release
::FMOD::RESULT FMOD::Sound::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Sound.getSystemObject
::FMOD::RESULT FMOD::Sound::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::System&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.Sound.lock
::FMOD::RESULT FMOD::Sound::lock(uint offset, uint length, ByRef<::System::IntPtr> ptr1, ByRef<::System::IntPtr> ptr2, ByRef<uint> len1, ByRef<uint> len2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::lock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "lock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, offset, length, byref(ptr1), byref(ptr2), byref(len1), byref(len2));
}
// Autogenerated method: FMOD.Sound.unlock
::FMOD::RESULT FMOD::Sound::unlock(::System::IntPtr ptr1, ::System::IntPtr ptr2, uint len1, uint len2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::unlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "unlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr1), ::il2cpp_utils::ExtractType(ptr2), ::il2cpp_utils::ExtractType(len1), ::il2cpp_utils::ExtractType(len2)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, ptr1, ptr2, len1, len2);
}
// Autogenerated method: FMOD.Sound.setDefaults
::FMOD::RESULT FMOD::Sound::setDefaults(float frequency, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, frequency, priority);
}
// Autogenerated method: FMOD.Sound.getDefaults
::FMOD::RESULT FMOD::Sound::getDefaults(ByRef<float> frequency, ByRef<int> priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(frequency), byref(priority));
}
// Autogenerated method: FMOD.Sound.set3DMinMaxDistance
::FMOD::RESULT FMOD::Sound::set3DMinMaxDistance(float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::set3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, min, max);
}
// Autogenerated method: FMOD.Sound.get3DMinMaxDistance
::FMOD::RESULT FMOD::Sound::get3DMinMaxDistance(ByRef<float> min, ByRef<float> max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::get3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(min), byref(max));
}
// Autogenerated method: FMOD.Sound.set3DConeSettings
::FMOD::RESULT FMOD::Sound::set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::set3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(insideconeangle), ::il2cpp_utils::ExtractType(outsideconeangle), ::il2cpp_utils::ExtractType(outsidevolume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.Sound.get3DConeSettings
::FMOD::RESULT FMOD::Sound::get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::get3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.Sound.set3DCustomRolloff
::FMOD::RESULT FMOD::Sound::set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::set3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(numpoints)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), numpoints);
}
// Autogenerated method: FMOD.Sound.get3DCustomRolloff
::FMOD::RESULT FMOD::Sound::get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::get3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.Sound.getSubSound
::FMOD::RESULT FMOD::Sound::getSubSound(int index, ByRef<::FMOD::Sound> subsound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSubSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSubSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(subsound));
}
// Autogenerated method: FMOD.Sound.getSubSoundParent
::FMOD::RESULT FMOD::Sound::getSubSoundParent(ByRef<::FMOD::Sound> parentsound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSubSoundParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSubSoundParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(parentsound));
}
// Autogenerated method: FMOD.Sound.getName
::FMOD::RESULT FMOD::Sound::getName(ByRef<::StringW> name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(name), namelen);
}
// Autogenerated method: FMOD.Sound.getLength
::FMOD::RESULT FMOD::Sound::getLength(ByRef<uint> length, ::FMOD::TIMEUNIT lengthtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(lengthtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(length), lengthtype);
}
// Autogenerated method: FMOD.Sound.getFormat
::FMOD::RESULT FMOD::Sound::getFormat(ByRef<::FMOD::SOUND_TYPE> type, ByRef<::FMOD::SOUND_FORMAT> format, ByRef<int> channels, ByRef<int> bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::SOUND_TYPE&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SOUND_FORMAT&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(type), byref(format), byref(channels), byref(bits));
}
// Autogenerated method: FMOD.Sound.getNumSubSounds
::FMOD::RESULT FMOD::Sound::getNumSubSounds(ByRef<int> numsubsounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getNumSubSounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumSubSounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numsubsounds));
}
// Autogenerated method: FMOD.Sound.getNumTags
::FMOD::RESULT FMOD::Sound::getNumTags(ByRef<int> numtags, ByRef<int> numtagsupdated) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getNumTags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumTags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numtags), byref(numtagsupdated));
}
// Autogenerated method: FMOD.Sound.getTag
::FMOD::RESULT FMOD::Sound::getTag(::StringW name, int index, ByRef<::FMOD::TAG> tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::TAG&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, name, index, byref(tag));
}
// Autogenerated method: FMOD.Sound.getOpenState
::FMOD::RESULT FMOD::Sound::getOpenState(ByRef<::FMOD::OPENSTATE> openstate, ByRef<uint> percentbuffered, ByRef<bool> starving, ByRef<bool> diskbusy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getOpenState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOpenState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::OPENSTATE&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(openstate), byref(percentbuffered), byref(starving), byref(diskbusy));
}
// Autogenerated method: FMOD.Sound.readData
::FMOD::RESULT FMOD::Sound::readData(::System::IntPtr buffer, uint lenbytes, ByRef<uint> read) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::readData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "readData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(lenbytes), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, buffer, lenbytes, byref(read));
}
// Autogenerated method: FMOD.Sound.seekData
::FMOD::RESULT FMOD::Sound::seekData(uint pcm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::seekData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "seekData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pcm)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pcm);
}
// Autogenerated method: FMOD.Sound.setSoundGroup
::FMOD::RESULT FMOD::Sound::setSoundGroup(::FMOD::SoundGroup soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, soundgroup);
}
// Autogenerated method: FMOD.Sound.getSoundGroup
::FMOD::RESULT FMOD::Sound::getSoundGroup(ByRef<::FMOD::SoundGroup> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::SoundGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(soundgroup));
}
// Autogenerated method: FMOD.Sound.getNumSyncPoints
::FMOD::RESULT FMOD::Sound::getNumSyncPoints(ByRef<int> numsyncpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getNumSyncPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumSyncPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numsyncpoints));
}
// Autogenerated method: FMOD.Sound.getSyncPoint
::FMOD::RESULT FMOD::Sound::getSyncPoint(int index, ByRef<::System::IntPtr> point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(point));
}
// Autogenerated method: FMOD.Sound.getSyncPointInfo
::FMOD::RESULT FMOD::Sound::getSyncPointInfo(::System::IntPtr point, ByRef<::StringW> name, int namelen, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSyncPointInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSyncPointInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(offsettype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, point, byref(name), namelen, byref(offset), offsettype);
}
// Autogenerated method: FMOD.Sound.getSyncPointInfo
::FMOD::RESULT FMOD::Sound::getSyncPointInfo(::System::IntPtr point, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getSyncPointInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSyncPointInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(offsettype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, point, byref(offset), offsettype);
}
// Autogenerated method: FMOD.Sound.addSyncPoint
::FMOD::RESULT FMOD::Sound::addSyncPoint(uint offset, ::FMOD::TIMEUNIT offsettype, ::StringW name, ByRef<::System::IntPtr> point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::addSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "addSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(offsettype), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, offset, offsettype, name, byref(point));
}
// Autogenerated method: FMOD.Sound.deleteSyncPoint
::FMOD::RESULT FMOD::Sound::deleteSyncPoint(::System::IntPtr point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::deleteSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "deleteSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, point);
}
// Autogenerated method: FMOD.Sound.setMode
::FMOD::RESULT FMOD::Sound::setMode(::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mode);
}
// Autogenerated method: FMOD.Sound.getMode
::FMOD::RESULT FMOD::Sound::getMode(ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::MODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mode));
}
// Autogenerated method: FMOD.Sound.setLoopCount
::FMOD::RESULT FMOD::Sound::setLoopCount(int loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loopcount)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, loopcount);
}
// Autogenerated method: FMOD.Sound.getLoopCount
::FMOD::RESULT FMOD::Sound::getLoopCount(ByRef<int> loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(loopcount));
}
// Autogenerated method: FMOD.Sound.setLoopPoints
::FMOD::RESULT FMOD::Sound::setLoopPoints(uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loopstart), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractType(loopend), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, loopstart, loopstarttype, loopend, loopendtype);
}
// Autogenerated method: FMOD.Sound.getLoopPoints
::FMOD::RESULT FMOD::Sound::getLoopPoints(ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(loopstart), loopstarttype, byref(loopend), loopendtype);
}
// Autogenerated method: FMOD.Sound.getMusicNumChannels
::FMOD::RESULT FMOD::Sound::getMusicNumChannels(ByRef<int> numchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getMusicNumChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMusicNumChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numchannels));
}
// Autogenerated method: FMOD.Sound.setMusicChannelVolume
::FMOD::RESULT FMOD::Sound::setMusicChannelVolume(int channel, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setMusicChannelVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMusicChannelVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channel, volume);
}
// Autogenerated method: FMOD.Sound.getMusicChannelVolume
::FMOD::RESULT FMOD::Sound::getMusicChannelVolume(int channel, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getMusicChannelVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMusicChannelVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channel, byref(volume));
}
// Autogenerated method: FMOD.Sound.setMusicSpeed
::FMOD::RESULT FMOD::Sound::setMusicSpeed(float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setMusicSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMusicSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, speed);
}
// Autogenerated method: FMOD.Sound.getMusicSpeed
::FMOD::RESULT FMOD::Sound::getMusicSpeed(ByRef<float> speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getMusicSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMusicSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(speed));
}
// Autogenerated method: FMOD.Sound.setUserData
::FMOD::RESULT FMOD::Sound::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.Sound.getUserData
::FMOD::RESULT FMOD::Sound::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Release
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Release(::System::IntPtr sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSystemObject
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSystemObject(::System::IntPtr sound, ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(system));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Lock
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Lock(::System::IntPtr sound, uint offset, uint length, ByRef<::System::IntPtr> ptr1, ByRef<::System::IntPtr> ptr2, ByRef<uint> len1, ByRef<uint> len2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Lock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Lock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, offset, length, byref(ptr1), byref(ptr2), byref(len1), byref(len2));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Unlock
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Unlock(::System::IntPtr sound, ::System::IntPtr ptr1, ::System::IntPtr ptr2, uint len1, uint len2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Unlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Unlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(ptr1), ::il2cpp_utils::ExtractType(ptr2), ::il2cpp_utils::ExtractType(len1), ::il2cpp_utils::ExtractType(len2)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, ptr1, ptr2, len1, len2);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetDefaults
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetDefaults(::System::IntPtr sound, float frequency, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(frequency), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, frequency, priority);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetDefaults
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetDefaults(::System::IntPtr sound, ByRef<float> frequency, ByRef<int> priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(frequency), byref(priority));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Set3DMinMaxDistance
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Set3DMinMaxDistance(::System::IntPtr sound, float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Set3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Set3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, min, max);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Get3DMinMaxDistance
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Get3DMinMaxDistance(::System::IntPtr sound, ByRef<float> min, ByRef<float> max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Get3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Get3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(min), byref(max));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Set3DConeSettings
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Set3DConeSettings(::System::IntPtr sound, float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Set3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Set3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(insideconeangle), ::il2cpp_utils::ExtractType(outsideconeangle), ::il2cpp_utils::ExtractType(outsidevolume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Get3DConeSettings
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Get3DConeSettings(::System::IntPtr sound, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Get3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Get3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Set3DCustomRolloff
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Set3DCustomRolloff(::System::IntPtr sound, ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Set3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Set3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(numpoints)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(points), numpoints);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_Get3DCustomRolloff
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_Get3DCustomRolloff(::System::IntPtr sound, ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_Get3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_Get3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSubSound
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSubSound(::System::IntPtr sound, int index, ByRef<::System::IntPtr> subsound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSubSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSubSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, index, byref(subsound));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSubSoundParent
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSubSoundParent(::System::IntPtr sound, ByRef<::System::IntPtr> parentsound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSubSoundParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSubSoundParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(parentsound));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetName
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetName(::System::IntPtr sound, ::System::IntPtr name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, name, namelen);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetLength
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetLength(::System::IntPtr sound, ByRef<uint> length, ::FMOD::TIMEUNIT lengthtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(lengthtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(length), lengthtype);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetFormat
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetFormat(::System::IntPtr sound, ByRef<::FMOD::SOUND_TYPE> type, ByRef<::FMOD::SOUND_FORMAT> format, ByRef<int> channels, ByRef<int> bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::FMOD::SOUND_TYPE&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SOUND_FORMAT&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(type), byref(format), byref(channels), byref(bits));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetNumSubSounds
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetNumSubSounds(::System::IntPtr sound, ByRef<int> numsubsounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetNumSubSounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetNumSubSounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(numsubsounds));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetNumTags
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetNumTags(::System::IntPtr sound, ByRef<int> numtags, ByRef<int> numtagsupdated) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetNumTags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetNumTags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(numtags), byref(numtagsupdated));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetTag
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetTag(::System::IntPtr sound, ::ArrayW<uint8_t> name, int index, ByRef<::FMOD::TAG> tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::TAG&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, name, index, byref(tag));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetOpenState
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetOpenState(::System::IntPtr sound, ByRef<::FMOD::OPENSTATE> openstate, ByRef<uint> percentbuffered, ByRef<bool> starving, ByRef<bool> diskbusy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetOpenState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetOpenState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::FMOD::OPENSTATE&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(openstate), byref(percentbuffered), byref(starving), byref(diskbusy));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_ReadData
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_ReadData(::System::IntPtr sound, ::System::IntPtr buffer, uint lenbytes, ByRef<uint> read) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_ReadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_ReadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(lenbytes), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, buffer, lenbytes, byref(read));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SeekData
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SeekData(::System::IntPtr sound, uint pcm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SeekData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SeekData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(pcm)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, pcm);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetSoundGroup
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetSoundGroup(::System::IntPtr sound, ::System::IntPtr soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(soundgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, soundgroup);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSoundGroup
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSoundGroup(::System::IntPtr sound, ByRef<::System::IntPtr> soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSoundGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSoundGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(soundgroup));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetNumSyncPoints
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetNumSyncPoints(::System::IntPtr sound, ByRef<int> numsyncpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetNumSyncPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetNumSyncPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(numsyncpoints));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSyncPoint
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSyncPoint(::System::IntPtr sound, int index, ByRef<::System::IntPtr> point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, index, byref(point));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetSyncPointInfo
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetSyncPointInfo(::System::IntPtr sound, ::System::IntPtr point, ::System::IntPtr name, int namelen, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetSyncPointInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetSyncPointInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(offsettype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, point, name, namelen, byref(offset), offsettype);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_AddSyncPoint
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_AddSyncPoint(::System::IntPtr sound, uint offset, ::FMOD::TIMEUNIT offsettype, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_AddSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_AddSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(offsettype), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, offset, offsettype, name, byref(point));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_DeleteSyncPoint
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_DeleteSyncPoint(::System::IntPtr sound, ::System::IntPtr point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_DeleteSyncPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_DeleteSyncPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, point);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetMode
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetMode(::System::IntPtr sound, ::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, mode);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetMode
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetMode(::System::IntPtr sound, ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::FMOD::MODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(mode));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetLoopCount
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetLoopCount(::System::IntPtr sound, int loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(loopcount)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, loopcount);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetLoopCount
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetLoopCount(::System::IntPtr sound, ByRef<int> loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(loopcount));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetLoopPoints
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetLoopPoints(::System::IntPtr sound, uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(loopstart), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractType(loopend), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, loopstart, loopstarttype, loopend, loopendtype);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetLoopPoints
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetLoopPoints(::System::IntPtr sound, ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(loopstart), loopstarttype, byref(loopend), loopendtype);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetMusicNumChannels
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetMusicNumChannels(::System::IntPtr sound, ByRef<int> numchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetMusicNumChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetMusicNumChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(numchannels));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetMusicChannelVolume
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetMusicChannelVolume(::System::IntPtr sound, int channel, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetMusicChannelVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetMusicChannelVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, channel, volume);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetMusicChannelVolume
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetMusicChannelVolume(::System::IntPtr sound, int channel, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetMusicChannelVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetMusicChannelVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, channel, byref(volume));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetMusicSpeed
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetMusicSpeed(::System::IntPtr sound, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetMusicSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetMusicSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, speed);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetMusicSpeed
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetMusicSpeed(::System::IntPtr sound, ByRef<float> speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetMusicSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetMusicSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(speed));
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_SetUserData
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_SetUserData(::System::IntPtr sound, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, userdata);
}
// Autogenerated method: FMOD.Sound.FMOD5_Sound_GetUserData
::FMOD::RESULT FMOD::Sound::FMOD5_Sound_GetUserData(::System::IntPtr sound, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::FMOD5_Sound_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Sound", "FMOD5_Sound_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sound), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sound, byref(userdata));
}
// Autogenerated method: FMOD.Sound.hasHandle
bool FMOD::Sound::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Sound.clearHandle
void FMOD::Sound::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Sound::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.IChannelControl
#include "FMOD/IChannelControl.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
// Including type: FMOD.CHANNEL_CALLBACK
#include "FMOD/CHANNEL_CALLBACK.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FMOD.IChannelControl.getSystemObject
::FMOD::RESULT FMOD::IChannelControl::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getSystemObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.IChannelControl.stop
::FMOD::RESULT FMOD::IChannelControl::stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::stop");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.IChannelControl.setPaused
::FMOD::RESULT FMOD::IChannelControl::setPaused(bool paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, paused);
}
// Autogenerated method: FMOD.IChannelControl.getPaused
::FMOD::RESULT FMOD::IChannelControl::getPaused(ByRef<bool> paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(paused));
}
// Autogenerated method: FMOD.IChannelControl.setVolume
::FMOD::RESULT FMOD::IChannelControl::setVolume(float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, volume);
}
// Autogenerated method: FMOD.IChannelControl.getVolume
::FMOD::RESULT FMOD::IChannelControl::getVolume(ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(volume));
}
// Autogenerated method: FMOD.IChannelControl.setVolumeRamp
::FMOD::RESULT FMOD::IChannelControl::setVolumeRamp(bool ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, ramp);
}
// Autogenerated method: FMOD.IChannelControl.getVolumeRamp
::FMOD::RESULT FMOD::IChannelControl::getVolumeRamp(ByRef<bool> ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(ramp));
}
// Autogenerated method: FMOD.IChannelControl.getAudibility
::FMOD::RESULT FMOD::IChannelControl::getAudibility(ByRef<float> audibility) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getAudibility");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(audibility));
}
// Autogenerated method: FMOD.IChannelControl.setPitch
::FMOD::RESULT FMOD::IChannelControl::setPitch(float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pitch);
}
// Autogenerated method: FMOD.IChannelControl.getPitch
::FMOD::RESULT FMOD::IChannelControl::getPitch(ByRef<float> pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pitch));
}
// Autogenerated method: FMOD.IChannelControl.setMute
::FMOD::RESULT FMOD::IChannelControl::setMute(bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mute);
}
// Autogenerated method: FMOD.IChannelControl.getMute
::FMOD::RESULT FMOD::IChannelControl::getMute(ByRef<bool> mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mute));
}
// Autogenerated method: FMOD.IChannelControl.setReverbProperties
::FMOD::RESULT FMOD::IChannelControl::setReverbProperties(int instance, float wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, wet);
}
// Autogenerated method: FMOD.IChannelControl.getReverbProperties
::FMOD::RESULT FMOD::IChannelControl::getReverbProperties(int instance, ByRef<float> wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, byref(wet));
}
// Autogenerated method: FMOD.IChannelControl.setLowPassGain
::FMOD::RESULT FMOD::IChannelControl::setLowPassGain(float gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, gain);
}
// Autogenerated method: FMOD.IChannelControl.getLowPassGain
::FMOD::RESULT FMOD::IChannelControl::getLowPassGain(ByRef<float> gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(gain));
}
// Autogenerated method: FMOD.IChannelControl.setMode
::FMOD::RESULT FMOD::IChannelControl::setMode(::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mode);
}
// Autogenerated method: FMOD.IChannelControl.getMode
::FMOD::RESULT FMOD::IChannelControl::getMode(ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mode));
}
// Autogenerated method: FMOD.IChannelControl.setCallback
::FMOD::RESULT FMOD::IChannelControl::setCallback(::FMOD::CHANNEL_CALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, callback);
}
// Autogenerated method: FMOD.IChannelControl.isPlaying
::FMOD::RESULT FMOD::IChannelControl::isPlaying(ByRef<bool> isplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::isPlaying");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(isplaying));
}
// Autogenerated method: FMOD.IChannelControl.setPan
::FMOD::RESULT FMOD::IChannelControl::setPan(float pan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setPan");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pan);
}
// Autogenerated method: FMOD.IChannelControl.setMixLevelsOutput
::FMOD::RESULT FMOD::IChannelControl::setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setMixLevelsOutput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
}
// Autogenerated method: FMOD.IChannelControl.setMixLevelsInput
::FMOD::RESULT FMOD::IChannelControl::setMixLevelsInput(::ArrayW<float> levels, int numlevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setMixLevelsInput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, levels, numlevels);
}
// Autogenerated method: FMOD.IChannelControl.setMixMatrix
::FMOD::RESULT FMOD::IChannelControl::setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.IChannelControl.getMixMatrix
::FMOD::RESULT FMOD::IChannelControl::getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.IChannelControl.getDSPClock
::FMOD::RESULT FMOD::IChannelControl::getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getDSPClock");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock), byref(parentclock));
}
// Autogenerated method: FMOD.IChannelControl.setDelay
::FMOD::RESULT FMOD::IChannelControl::setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end, stopchannels);
}
// Autogenerated method: FMOD.IChannelControl.getDelay
::FMOD::RESULT FMOD::IChannelControl::getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock_start), byref(dspclock_end), byref(stopchannels));
}
// Autogenerated method: FMOD.IChannelControl.addFadePoint
::FMOD::RESULT FMOD::IChannelControl::addFadePoint(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::addFadePoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.IChannelControl.setFadePointRamp
::FMOD::RESULT FMOD::IChannelControl::setFadePointRamp(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setFadePointRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.IChannelControl.removeFadePoints
::FMOD::RESULT FMOD::IChannelControl::removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::removeFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end);
}
// Autogenerated method: FMOD.IChannelControl.getFadePoints
::FMOD::RESULT FMOD::IChannelControl::getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numpoints), point_dspclock, point_volume);
}
// Autogenerated method: FMOD.IChannelControl.getDSP
::FMOD::RESULT FMOD::IChannelControl::getDSP(int index, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(dsp));
}
// Autogenerated method: FMOD.IChannelControl.addDSP
::FMOD::RESULT FMOD::IChannelControl::addDSP(int index, ::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::addDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, dsp);
}
// Autogenerated method: FMOD.IChannelControl.removeDSP
::FMOD::RESULT FMOD::IChannelControl::removeDSP(::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::removeDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp);
}
// Autogenerated method: FMOD.IChannelControl.getNumDSPs
::FMOD::RESULT FMOD::IChannelControl::getNumDSPs(ByRef<int> numdsps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getNumDSPs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numdsps));
}
// Autogenerated method: FMOD.IChannelControl.setDSPIndex
::FMOD::RESULT FMOD::IChannelControl::setDSPIndex(::FMOD::DSP dsp, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, index);
}
// Autogenerated method: FMOD.IChannelControl.getDSPIndex
::FMOD::RESULT FMOD::IChannelControl::getDSPIndex(::FMOD::DSP dsp, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, byref(index));
}
// Autogenerated method: FMOD.IChannelControl.set3DAttributes
::FMOD::RESULT FMOD::IChannelControl::set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.IChannelControl.get3DAttributes
::FMOD::RESULT FMOD::IChannelControl::get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.IChannelControl.set3DMinMaxDistance
::FMOD::RESULT FMOD::IChannelControl::set3DMinMaxDistance(float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mindistance, maxdistance);
}
// Autogenerated method: FMOD.IChannelControl.get3DMinMaxDistance
::FMOD::RESULT FMOD::IChannelControl::get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.IChannelControl.set3DConeSettings
::FMOD::RESULT FMOD::IChannelControl::set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.IChannelControl.get3DConeSettings
::FMOD::RESULT FMOD::IChannelControl::get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.IChannelControl.set3DConeOrientation
::FMOD::RESULT FMOD::IChannelControl::set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.IChannelControl.get3DConeOrientation
::FMOD::RESULT FMOD::IChannelControl::get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.IChannelControl.set3DCustomRolloff
::FMOD::RESULT FMOD::IChannelControl::set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), numpoints);
}
// Autogenerated method: FMOD.IChannelControl.get3DCustomRolloff
::FMOD::RESULT FMOD::IChannelControl::get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.IChannelControl.set3DOcclusion
::FMOD::RESULT FMOD::IChannelControl::set3DOcclusion(float directocclusion, float reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, directocclusion, reverbocclusion);
}
// Autogenerated method: FMOD.IChannelControl.get3DOcclusion
::FMOD::RESULT FMOD::IChannelControl::get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(directocclusion), byref(reverbocclusion));
}
// Autogenerated method: FMOD.IChannelControl.set3DSpread
::FMOD::RESULT FMOD::IChannelControl::set3DSpread(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, angle);
}
// Autogenerated method: FMOD.IChannelControl.get3DSpread
::FMOD::RESULT FMOD::IChannelControl::get3DSpread(ByRef<float> angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(angle));
}
// Autogenerated method: FMOD.IChannelControl.set3DLevel
::FMOD::RESULT FMOD::IChannelControl::set3DLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.IChannelControl.get3DLevel
::FMOD::RESULT FMOD::IChannelControl::get3DLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.IChannelControl.set3DDopplerLevel
::FMOD::RESULT FMOD::IChannelControl::set3DDopplerLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.IChannelControl.get3DDopplerLevel
::FMOD::RESULT FMOD::IChannelControl::get3DDopplerLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.IChannelControl.set3DDistanceFilter
::FMOD::RESULT FMOD::IChannelControl::set3DDistanceFilter(bool custom, float customLevel, float centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::set3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, custom, customLevel, centerFreq);
}
// Autogenerated method: FMOD.IChannelControl.get3DDistanceFilter
::FMOD::RESULT FMOD::IChannelControl::get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::get3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(custom), byref(customLevel), byref(centerFreq));
}
// Autogenerated method: FMOD.IChannelControl.setUserData
::FMOD::RESULT FMOD::IChannelControl::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::setUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.IChannelControl.getUserData
::FMOD::RESULT FMOD::IChannelControl::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::IChannelControl::getUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::IChannelControl*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Channel
#include "FMOD/Channel.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
// Including type: FMOD.ChannelGroup
#include "FMOD/ChannelGroup.hpp"
// Including type: FMOD.Sound
#include "FMOD/Sound.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
// Including type: FMOD.CHANNEL_CALLBACK
#include "FMOD/CHANNEL_CALLBACK.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::Channel::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.Channel.setFrequency
::FMOD::RESULT FMOD::Channel::setFrequency(float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frequency)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, frequency);
}
// Autogenerated method: FMOD.Channel.getFrequency
::FMOD::RESULT FMOD::Channel::getFrequency(ByRef<float> frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(frequency));
}
// Autogenerated method: FMOD.Channel.setPriority
::FMOD::RESULT FMOD::Channel::setPriority(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, priority);
}
// Autogenerated method: FMOD.Channel.getPriority
::FMOD::RESULT FMOD::Channel::getPriority(ByRef<int> priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(priority));
}
// Autogenerated method: FMOD.Channel.setPosition
::FMOD::RESULT FMOD::Channel::setPosition(uint position, ::FMOD::TIMEUNIT postype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(postype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, position, postype);
}
// Autogenerated method: FMOD.Channel.getPosition
::FMOD::RESULT FMOD::Channel::getPosition(ByRef<uint> position, ::FMOD::TIMEUNIT postype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(postype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(position), postype);
}
// Autogenerated method: FMOD.Channel.setChannelGroup
::FMOD::RESULT FMOD::Channel::setChannelGroup(::FMOD::ChannelGroup channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channelgroup);
}
// Autogenerated method: FMOD.Channel.getChannelGroup
::FMOD::RESULT FMOD::Channel::getChannelGroup(ByRef<::FMOD::ChannelGroup> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::ChannelGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(channelgroup));
}
// Autogenerated method: FMOD.Channel.setLoopCount
::FMOD::RESULT FMOD::Channel::setLoopCount(int loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loopcount)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, loopcount);
}
// Autogenerated method: FMOD.Channel.getLoopCount
::FMOD::RESULT FMOD::Channel::getLoopCount(ByRef<int> loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(loopcount));
}
// Autogenerated method: FMOD.Channel.setLoopPoints
::FMOD::RESULT FMOD::Channel::setLoopPoints(uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loopstart), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractType(loopend), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, loopstart, loopstarttype, loopend, loopendtype);
}
// Autogenerated method: FMOD.Channel.getLoopPoints
::FMOD::RESULT FMOD::Channel::getLoopPoints(ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(loopstart), loopstarttype, byref(loopend), loopendtype);
}
// Autogenerated method: FMOD.Channel.isVirtual
::FMOD::RESULT FMOD::Channel::isVirtual(ByRef<bool> isvirtual) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::isVirtual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "isVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(isvirtual));
}
// Autogenerated method: FMOD.Channel.getCurrentSound
::FMOD::RESULT FMOD::Channel::getCurrentSound(ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getCurrentSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getCurrentSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(sound));
}
// Autogenerated method: FMOD.Channel.getIndex
::FMOD::RESULT FMOD::Channel::getIndex(ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(index));
}
// Autogenerated method: FMOD.Channel.getSystemObject
::FMOD::RESULT FMOD::Channel::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getSystemObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 4));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.Channel.stop
::FMOD::RESULT FMOD::Channel::stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::stop");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 5));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Channel.setPaused
::FMOD::RESULT FMOD::Channel::setPaused(bool paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 6));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, paused);
}
// Autogenerated method: FMOD.Channel.getPaused
::FMOD::RESULT FMOD::Channel::getPaused(ByRef<bool> paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 7));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(paused));
}
// Autogenerated method: FMOD.Channel.setVolume
::FMOD::RESULT FMOD::Channel::setVolume(float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 8));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, volume);
}
// Autogenerated method: FMOD.Channel.getVolume
::FMOD::RESULT FMOD::Channel::getVolume(ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 9));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(volume));
}
// Autogenerated method: FMOD.Channel.setVolumeRamp
::FMOD::RESULT FMOD::Channel::setVolumeRamp(bool ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 10));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, ramp);
}
// Autogenerated method: FMOD.Channel.getVolumeRamp
::FMOD::RESULT FMOD::Channel::getVolumeRamp(ByRef<bool> ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 11));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(ramp));
}
// Autogenerated method: FMOD.Channel.getAudibility
::FMOD::RESULT FMOD::Channel::getAudibility(ByRef<float> audibility) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getAudibility");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(audibility));
}
// Autogenerated method: FMOD.Channel.setPitch
::FMOD::RESULT FMOD::Channel::setPitch(float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 13));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pitch);
}
// Autogenerated method: FMOD.Channel.getPitch
::FMOD::RESULT FMOD::Channel::getPitch(ByRef<float> pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pitch));
}
// Autogenerated method: FMOD.Channel.setMute
::FMOD::RESULT FMOD::Channel::setMute(bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 15));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mute);
}
// Autogenerated method: FMOD.Channel.getMute
::FMOD::RESULT FMOD::Channel::getMute(ByRef<bool> mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 16));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mute));
}
// Autogenerated method: FMOD.Channel.setReverbProperties
::FMOD::RESULT FMOD::Channel::setReverbProperties(int instance, float wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 17));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, wet);
}
// Autogenerated method: FMOD.Channel.getReverbProperties
::FMOD::RESULT FMOD::Channel::getReverbProperties(int instance, ByRef<float> wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 18));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, byref(wet));
}
// Autogenerated method: FMOD.Channel.setLowPassGain
::FMOD::RESULT FMOD::Channel::setLowPassGain(float gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 19));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, gain);
}
// Autogenerated method: FMOD.Channel.getLowPassGain
::FMOD::RESULT FMOD::Channel::getLowPassGain(ByRef<float> gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 20));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(gain));
}
// Autogenerated method: FMOD.Channel.setMode
::FMOD::RESULT FMOD::Channel::setMode(::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 21));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mode);
}
// Autogenerated method: FMOD.Channel.getMode
::FMOD::RESULT FMOD::Channel::getMode(ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 22));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mode));
}
// Autogenerated method: FMOD.Channel.setCallback
::FMOD::RESULT FMOD::Channel::setCallback(::FMOD::CHANNEL_CALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 23));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, callback);
}
// Autogenerated method: FMOD.Channel.isPlaying
::FMOD::RESULT FMOD::Channel::isPlaying(ByRef<bool> isplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::isPlaying");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 24));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(isplaying));
}
// Autogenerated method: FMOD.Channel.setPan
::FMOD::RESULT FMOD::Channel::setPan(float pan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setPan");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 25));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pan);
}
// Autogenerated method: FMOD.Channel.setMixLevelsOutput
::FMOD::RESULT FMOD::Channel::setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setMixLevelsOutput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 26));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
}
// Autogenerated method: FMOD.Channel.setMixLevelsInput
::FMOD::RESULT FMOD::Channel::setMixLevelsInput(::ArrayW<float> levels, int numlevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setMixLevelsInput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 27));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, levels, numlevels);
}
// Autogenerated method: FMOD.Channel.setMixMatrix
::FMOD::RESULT FMOD::Channel::setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 28));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.Channel.getMixMatrix
::FMOD::RESULT FMOD::Channel::getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 29));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.Channel.getDSPClock
::FMOD::RESULT FMOD::Channel::getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getDSPClock");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 30));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock), byref(parentclock));
}
// Autogenerated method: FMOD.Channel.setDelay
::FMOD::RESULT FMOD::Channel::setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 31));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end, stopchannels);
}
// Autogenerated method: FMOD.Channel.getDelay
::FMOD::RESULT FMOD::Channel::getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 32));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock_start), byref(dspclock_end), byref(stopchannels));
}
// Autogenerated method: FMOD.Channel.addFadePoint
::FMOD::RESULT FMOD::Channel::addFadePoint(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::addFadePoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 33));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.Channel.setFadePointRamp
::FMOD::RESULT FMOD::Channel::setFadePointRamp(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setFadePointRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 34));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.Channel.removeFadePoints
::FMOD::RESULT FMOD::Channel::removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::removeFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 35));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end);
}
// Autogenerated method: FMOD.Channel.getFadePoints
::FMOD::RESULT FMOD::Channel::getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 36));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numpoints), point_dspclock, point_volume);
}
// Autogenerated method: FMOD.Channel.getDSP
::FMOD::RESULT FMOD::Channel::getDSP(int index, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 37));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(dsp));
}
// Autogenerated method: FMOD.Channel.addDSP
::FMOD::RESULT FMOD::Channel::addDSP(int index, ::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::addDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 38));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, dsp);
}
// Autogenerated method: FMOD.Channel.removeDSP
::FMOD::RESULT FMOD::Channel::removeDSP(::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::removeDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 39));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp);
}
// Autogenerated method: FMOD.Channel.getNumDSPs
::FMOD::RESULT FMOD::Channel::getNumDSPs(ByRef<int> numdsps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getNumDSPs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 40));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numdsps));
}
// Autogenerated method: FMOD.Channel.setDSPIndex
::FMOD::RESULT FMOD::Channel::setDSPIndex(::FMOD::DSP dsp, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 41));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, index);
}
// Autogenerated method: FMOD.Channel.getDSPIndex
::FMOD::RESULT FMOD::Channel::getDSPIndex(::FMOD::DSP dsp, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 42));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, byref(index));
}
// Autogenerated method: FMOD.Channel.set3DAttributes
::FMOD::RESULT FMOD::Channel::set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 43));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.Channel.get3DAttributes
::FMOD::RESULT FMOD::Channel::get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 44));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.Channel.set3DMinMaxDistance
::FMOD::RESULT FMOD::Channel::set3DMinMaxDistance(float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 45));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mindistance, maxdistance);
}
// Autogenerated method: FMOD.Channel.get3DMinMaxDistance
::FMOD::RESULT FMOD::Channel::get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 46));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.Channel.set3DConeSettings
::FMOD::RESULT FMOD::Channel::set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 47));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.Channel.get3DConeSettings
::FMOD::RESULT FMOD::Channel::get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 48));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.Channel.set3DConeOrientation
::FMOD::RESULT FMOD::Channel::set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 49));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.Channel.get3DConeOrientation
::FMOD::RESULT FMOD::Channel::get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 50));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.Channel.set3DCustomRolloff
::FMOD::RESULT FMOD::Channel::set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 51));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), numpoints);
}
// Autogenerated method: FMOD.Channel.get3DCustomRolloff
::FMOD::RESULT FMOD::Channel::get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 52));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.Channel.set3DOcclusion
::FMOD::RESULT FMOD::Channel::set3DOcclusion(float directocclusion, float reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 53));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, directocclusion, reverbocclusion);
}
// Autogenerated method: FMOD.Channel.get3DOcclusion
::FMOD::RESULT FMOD::Channel::get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 54));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(directocclusion), byref(reverbocclusion));
}
// Autogenerated method: FMOD.Channel.set3DSpread
::FMOD::RESULT FMOD::Channel::set3DSpread(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 55));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, angle);
}
// Autogenerated method: FMOD.Channel.get3DSpread
::FMOD::RESULT FMOD::Channel::get3DSpread(ByRef<float> angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 56));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(angle));
}
// Autogenerated method: FMOD.Channel.set3DLevel
::FMOD::RESULT FMOD::Channel::set3DLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 57));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.Channel.get3DLevel
::FMOD::RESULT FMOD::Channel::get3DLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 58));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.Channel.set3DDopplerLevel
::FMOD::RESULT FMOD::Channel::set3DDopplerLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 59));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.Channel.get3DDopplerLevel
::FMOD::RESULT FMOD::Channel::get3DDopplerLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 60));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.Channel.set3DDistanceFilter
::FMOD::RESULT FMOD::Channel::set3DDistanceFilter(bool custom, float customLevel, float centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::set3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 61));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, custom, customLevel, centerFreq);
}
// Autogenerated method: FMOD.Channel.get3DDistanceFilter
::FMOD::RESULT FMOD::Channel::get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::get3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 62));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(custom), byref(customLevel), byref(centerFreq));
}
// Autogenerated method: FMOD.Channel.setUserData
::FMOD::RESULT FMOD::Channel::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::setUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 63));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.Channel.getUserData
::FMOD::RESULT FMOD::Channel::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::getUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::Channel), 64));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetFrequency
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetFrequency(::System::IntPtr channel, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(frequency)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, frequency);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetFrequency
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetFrequency(::System::IntPtr channel, ByRef<float> frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(frequency));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetPriority
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetPriority(::System::IntPtr channel, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, priority);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetPriority
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetPriority(::System::IntPtr channel, ByRef<int> priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(priority));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetPosition
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetPosition(::System::IntPtr channel, uint position, ::FMOD::TIMEUNIT postype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(postype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, position, postype);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetPosition
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetPosition(::System::IntPtr channel, ByRef<uint> position, ::FMOD::TIMEUNIT postype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(postype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(position), postype);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetChannelGroup
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetChannelGroup(::System::IntPtr channel, ::System::IntPtr channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, channelgroup);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetChannelGroup
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetChannelGroup(::System::IntPtr channel, ByRef<::System::IntPtr> channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetChannelGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetChannelGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(channelgroup));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetLoopCount
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetLoopCount(::System::IntPtr channel, int loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(loopcount)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, loopcount);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetLoopCount
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetLoopCount(::System::IntPtr channel, ByRef<int> loopcount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetLoopCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetLoopCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(loopcount));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetLoopPoints
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetLoopPoints(::System::IntPtr channel, uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(loopstart), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractType(loopend), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, loopstart, loopstarttype, loopend, loopendtype);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetLoopPoints
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetLoopPoints(::System::IntPtr channel, ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetLoopPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetLoopPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopstarttype), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(loopendtype)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(loopstart), loopstarttype, byref(loopend), loopendtype);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_IsVirtual
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_IsVirtual(::System::IntPtr channel, ByRef<bool> isvirtual) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_IsVirtual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_IsVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(isvirtual));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetCurrentSound
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetCurrentSound(::System::IntPtr channel, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetCurrentSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetCurrentSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(sound));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetIndex
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetIndex(::System::IntPtr channel, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(index));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetSystemObject
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetSystemObject(::System::IntPtr channel, ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(system));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Stop
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Stop(::System::IntPtr channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetPaused
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetPaused(::System::IntPtr channel, bool paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(paused)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, paused);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetPaused
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetPaused(::System::IntPtr channel, ByRef<bool> paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(paused));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetVolume
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetVolume(::System::IntPtr channel, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, volume);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetVolume
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetVolume(::System::IntPtr channel, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(volume));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetVolumeRamp
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetVolumeRamp(::System::IntPtr channel, bool ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetVolumeRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetVolumeRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(ramp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, ramp);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetVolumeRamp
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetVolumeRamp(::System::IntPtr channel, ByRef<bool> ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetVolumeRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetVolumeRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(ramp));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetAudibility
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetAudibility(::System::IntPtr channel, ByRef<float> audibility) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetAudibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetAudibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(audibility));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetPitch
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetPitch(::System::IntPtr channel, float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(pitch)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, pitch);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetPitch
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetPitch(::System::IntPtr channel, ByRef<float> pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(pitch));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetMute
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetMute(::System::IntPtr channel, bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetMute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetMute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(mute)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, mute);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetMute
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetMute(::System::IntPtr channel, ByRef<bool> mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetMute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetMute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(mute));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetReverbProperties
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetReverbProperties(::System::IntPtr channel, int instance, float wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(wet)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, instance, wet);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetReverbProperties
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetReverbProperties(::System::IntPtr channel, int instance, ByRef<float> wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, instance, byref(wet));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetLowPassGain
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetLowPassGain(::System::IntPtr channel, float gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetLowPassGain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetLowPassGain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(gain)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, gain);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetLowPassGain
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetLowPassGain(::System::IntPtr channel, ByRef<float> gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetLowPassGain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetLowPassGain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(gain));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetMode
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetMode(::System::IntPtr channel, ::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, mode);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetMode
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetMode(::System::IntPtr channel, ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::FMOD::MODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(mode));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetCallback
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetCallback(::System::IntPtr channel, ::FMOD::CHANNEL_CALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, callback);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_IsPlaying
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_IsPlaying(::System::IntPtr channel, ByRef<bool> isplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(isplaying));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetPan
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetPan(::System::IntPtr channel, float pan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetPan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetPan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(pan)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, pan);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetMixLevelsOutput
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetMixLevelsOutput(::System::IntPtr channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetMixLevelsOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetMixLevelsOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(frontleft), ::il2cpp_utils::ExtractType(frontright), ::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(lfe), ::il2cpp_utils::ExtractType(surroundleft), ::il2cpp_utils::ExtractType(surroundright), ::il2cpp_utils::ExtractType(backleft), ::il2cpp_utils::ExtractType(backright)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetMixLevelsInput
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetMixLevelsInput(::System::IntPtr channel, ::ArrayW<float> levels, int numlevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetMixLevelsInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetMixLevelsInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(levels), ::il2cpp_utils::ExtractType(numlevels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, levels, numlevels);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetMixMatrix
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetMixMatrix(::System::IntPtr channel, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(outchannels), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetMixMatrix
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetMixMatrix(::System::IntPtr channel, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetDSPClock
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetDSPClock(::System::IntPtr channel, ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetDSPClock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetDSPClock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(dspclock), byref(parentclock));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetDelay
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetDelay(::System::IntPtr channel, uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dspclock_start), ::il2cpp_utils::ExtractType(dspclock_end), ::il2cpp_utils::ExtractType(stopchannels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dspclock_start, dspclock_end, stopchannels);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetDelay
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetDelay(::System::IntPtr channel, ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(dspclock_start), byref(dspclock_end), byref(stopchannels));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_AddFadePoint
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_AddFadePoint(::System::IntPtr channel, uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_AddFadePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_AddFadePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dspclock), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dspclock, volume);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetFadePointRamp
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetFadePointRamp(::System::IntPtr channel, uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetFadePointRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetFadePointRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dspclock), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dspclock, volume);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_RemoveFadePoints
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_RemoveFadePoints(::System::IntPtr channel, uint64_t dspclock_start, uint64_t dspclock_end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_RemoveFadePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_RemoveFadePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dspclock_start), ::il2cpp_utils::ExtractType(dspclock_end)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dspclock_start, dspclock_end);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetFadePoints
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetFadePoints(::System::IntPtr channel, ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetFadePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetFadePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(numpoints), ::il2cpp_utils::ExtractType(point_dspclock), ::il2cpp_utils::ExtractType(point_volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(numpoints), point_dspclock, point_volume);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetDSP
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetDSP(::System::IntPtr channel, int index, ByRef<::System::IntPtr> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, index, byref(dsp));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_AddDSP
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_AddDSP(::System::IntPtr channel, int index, ::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_AddDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_AddDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, index, dsp);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_RemoveDSP
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_RemoveDSP(::System::IntPtr channel, ::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_RemoveDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_RemoveDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dsp);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetNumDSPs
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetNumDSPs(::System::IntPtr channel, ByRef<int> numdsps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetNumDSPs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetNumDSPs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(numdsps));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetDSPIndex
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetDSPIndex(::System::IntPtr channel, ::System::IntPtr dsp, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetDSPIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetDSPIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dsp, index);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetDSPIndex
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetDSPIndex(::System::IntPtr channel, ::System::IntPtr dsp, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetDSPIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetDSPIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, dsp, byref(index));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DAttributes
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DAttributes(::System::IntPtr channel, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(vel), ::il2cpp_utils::ExtractType(alt_pan_pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DAttributes
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DAttributes(::System::IntPtr channel, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DMinMaxDistance
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DMinMaxDistance(::System::IntPtr channel, float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, mindistance, maxdistance);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DMinMaxDistance
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DMinMaxDistance(::System::IntPtr channel, ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DConeSettings
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DConeSettings(::System::IntPtr channel, float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(insideconeangle), ::il2cpp_utils::ExtractType(outsideconeangle), ::il2cpp_utils::ExtractType(outsidevolume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DConeSettings
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DConeSettings(::System::IntPtr channel, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DConeOrientation
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DConeOrientation(::System::IntPtr channel, ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DConeOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DConeOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(orientation)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(orientation));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DConeOrientation
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DConeOrientation(::System::IntPtr channel, ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DConeOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DConeOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(orientation));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DCustomRolloff
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DCustomRolloff(::System::IntPtr channel, ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(numpoints)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(points), numpoints);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DCustomRolloff
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DCustomRolloff(::System::IntPtr channel, ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DOcclusion
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DOcclusion(::System::IntPtr channel, float directocclusion, float reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, directocclusion, reverbocclusion);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DOcclusion
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DOcclusion(::System::IntPtr channel, ByRef<float> directocclusion, ByRef<float> reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(directocclusion), byref(reverbocclusion));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DSpread
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DSpread(::System::IntPtr channel, float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, angle);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DSpread
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DSpread(::System::IntPtr channel, ByRef<float> angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(angle));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DLevel
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DLevel(::System::IntPtr channel, float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, level);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DLevel
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DLevel(::System::IntPtr channel, ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(level));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DDopplerLevel
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DDopplerLevel(::System::IntPtr channel, float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DDopplerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DDopplerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, level);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DDopplerLevel
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DDopplerLevel(::System::IntPtr channel, ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DDopplerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DDopplerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(level));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Set3DDistanceFilter
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Set3DDistanceFilter(::System::IntPtr channel, bool custom, float customLevel, float centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Set3DDistanceFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Set3DDistanceFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(custom), ::il2cpp_utils::ExtractType(customLevel), ::il2cpp_utils::ExtractType(centerFreq)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, custom, customLevel, centerFreq);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_Get3DDistanceFilter
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_Get3DDistanceFilter(::System::IntPtr channel, ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_Get3DDistanceFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_Get3DDistanceFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(custom), byref(customLevel), byref(centerFreq));
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_SetUserData
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_SetUserData(::System::IntPtr channel, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, userdata);
}
// Autogenerated method: FMOD.Channel.FMOD5_Channel_GetUserData
::FMOD::RESULT FMOD::Channel::FMOD5_Channel_GetUserData(::System::IntPtr channel, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::FMOD5_Channel_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Channel", "FMOD5_Channel_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channel, byref(userdata));
}
// Autogenerated method: FMOD.Channel.hasHandle
bool FMOD::Channel::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Channel.clearHandle
void FMOD::Channel::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Channel::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.ChannelGroup
#include "FMOD/ChannelGroup.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.DSPConnection
#include "FMOD/DSPConnection.hpp"
// Including type: FMOD.Channel
#include "FMOD/Channel.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
// Including type: FMOD.CHANNEL_CALLBACK
#include "FMOD/CHANNEL_CALLBACK.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::ChannelGroup::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.ChannelGroup.release
::FMOD::RESULT FMOD::ChannelGroup::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.ChannelGroup.addGroup
::FMOD::RESULT FMOD::ChannelGroup::addGroup(::FMOD::ChannelGroup group, bool propagatedspclock, ByRef<::FMOD::DSPConnection> connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::addGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "addGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(propagatedspclock), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSPConnection&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, group, propagatedspclock, byref(connection));
}
// Autogenerated method: FMOD.ChannelGroup.getNumGroups
::FMOD::RESULT FMOD::ChannelGroup::getNumGroups(ByRef<int> numgroups) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getNumGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numgroups));
}
// Autogenerated method: FMOD.ChannelGroup.getGroup
::FMOD::RESULT FMOD::ChannelGroup::getGroup(int index, ByRef<::FMOD::ChannelGroup> group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::ChannelGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(group));
}
// Autogenerated method: FMOD.ChannelGroup.getParentGroup
::FMOD::RESULT FMOD::ChannelGroup::getParentGroup(ByRef<::FMOD::ChannelGroup> group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getParentGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParentGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::ChannelGroup&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(group));
}
// Autogenerated method: FMOD.ChannelGroup.getName
::FMOD::RESULT FMOD::ChannelGroup::getName(ByRef<::StringW> name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(name), namelen);
}
// Autogenerated method: FMOD.ChannelGroup.getNumChannels
::FMOD::RESULT FMOD::ChannelGroup::getNumChannels(ByRef<int> numchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getNumChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numchannels));
}
// Autogenerated method: FMOD.ChannelGroup.getChannel
::FMOD::RESULT FMOD::ChannelGroup::getChannel(int index, ByRef<::FMOD::Channel> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::Channel&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(channel));
}
// Autogenerated method: FMOD.ChannelGroup.getSystemObject
::FMOD::RESULT FMOD::ChannelGroup::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getSystemObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 4));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.ChannelGroup.stop
::FMOD::RESULT FMOD::ChannelGroup::stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::stop");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 5));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.ChannelGroup.setPaused
::FMOD::RESULT FMOD::ChannelGroup::setPaused(bool paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 6));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, paused);
}
// Autogenerated method: FMOD.ChannelGroup.getPaused
::FMOD::RESULT FMOD::ChannelGroup::getPaused(ByRef<bool> paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getPaused");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 7));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(paused));
}
// Autogenerated method: FMOD.ChannelGroup.setVolume
::FMOD::RESULT FMOD::ChannelGroup::setVolume(float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 8));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, volume);
}
// Autogenerated method: FMOD.ChannelGroup.getVolume
::FMOD::RESULT FMOD::ChannelGroup::getVolume(ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getVolume");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 9));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(volume));
}
// Autogenerated method: FMOD.ChannelGroup.setVolumeRamp
::FMOD::RESULT FMOD::ChannelGroup::setVolumeRamp(bool ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 10));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, ramp);
}
// Autogenerated method: FMOD.ChannelGroup.getVolumeRamp
::FMOD::RESULT FMOD::ChannelGroup::getVolumeRamp(ByRef<bool> ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getVolumeRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 11));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(ramp));
}
// Autogenerated method: FMOD.ChannelGroup.getAudibility
::FMOD::RESULT FMOD::ChannelGroup::getAudibility(ByRef<float> audibility) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getAudibility");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 12));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(audibility));
}
// Autogenerated method: FMOD.ChannelGroup.setPitch
::FMOD::RESULT FMOD::ChannelGroup::setPitch(float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 13));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pitch);
}
// Autogenerated method: FMOD.ChannelGroup.getPitch
::FMOD::RESULT FMOD::ChannelGroup::getPitch(ByRef<float> pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getPitch");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 14));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pitch));
}
// Autogenerated method: FMOD.ChannelGroup.setMute
::FMOD::RESULT FMOD::ChannelGroup::setMute(bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 15));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mute);
}
// Autogenerated method: FMOD.ChannelGroup.getMute
::FMOD::RESULT FMOD::ChannelGroup::getMute(ByRef<bool> mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 16));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mute));
}
// Autogenerated method: FMOD.ChannelGroup.setReverbProperties
::FMOD::RESULT FMOD::ChannelGroup::setReverbProperties(int instance, float wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 17));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, wet);
}
// Autogenerated method: FMOD.ChannelGroup.getReverbProperties
::FMOD::RESULT FMOD::ChannelGroup::getReverbProperties(int instance, ByRef<float> wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getReverbProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 18));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, instance, byref(wet));
}
// Autogenerated method: FMOD.ChannelGroup.setLowPassGain
::FMOD::RESULT FMOD::ChannelGroup::setLowPassGain(float gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 19));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, gain);
}
// Autogenerated method: FMOD.ChannelGroup.getLowPassGain
::FMOD::RESULT FMOD::ChannelGroup::getLowPassGain(ByRef<float> gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getLowPassGain");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 20));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(gain));
}
// Autogenerated method: FMOD.ChannelGroup.setMode
::FMOD::RESULT FMOD::ChannelGroup::setMode(::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 21));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mode);
}
// Autogenerated method: FMOD.ChannelGroup.getMode
::FMOD::RESULT FMOD::ChannelGroup::getMode(ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 22));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mode));
}
// Autogenerated method: FMOD.ChannelGroup.setCallback
::FMOD::RESULT FMOD::ChannelGroup::setCallback(::FMOD::CHANNEL_CALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 23));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, callback);
}
// Autogenerated method: FMOD.ChannelGroup.isPlaying
::FMOD::RESULT FMOD::ChannelGroup::isPlaying(ByRef<bool> isplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::isPlaying");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 24));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(isplaying));
}
// Autogenerated method: FMOD.ChannelGroup.setPan
::FMOD::RESULT FMOD::ChannelGroup::setPan(float pan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setPan");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 25));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, pan);
}
// Autogenerated method: FMOD.ChannelGroup.setMixLevelsOutput
::FMOD::RESULT FMOD::ChannelGroup::setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setMixLevelsOutput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 26));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
}
// Autogenerated method: FMOD.ChannelGroup.setMixLevelsInput
::FMOD::RESULT FMOD::ChannelGroup::setMixLevelsInput(::ArrayW<float> levels, int numlevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setMixLevelsInput");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 27));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, levels, numlevels);
}
// Autogenerated method: FMOD.ChannelGroup.setMixMatrix
::FMOD::RESULT FMOD::ChannelGroup::setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 28));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.ChannelGroup.getMixMatrix
::FMOD::RESULT FMOD::ChannelGroup::getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getMixMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 29));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.ChannelGroup.getDSPClock
::FMOD::RESULT FMOD::ChannelGroup::getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getDSPClock");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 30));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock), byref(parentclock));
}
// Autogenerated method: FMOD.ChannelGroup.setDelay
::FMOD::RESULT FMOD::ChannelGroup::setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 31));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end, stopchannels);
}
// Autogenerated method: FMOD.ChannelGroup.getDelay
::FMOD::RESULT FMOD::ChannelGroup::getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getDelay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 32));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(dspclock_start), byref(dspclock_end), byref(stopchannels));
}
// Autogenerated method: FMOD.ChannelGroup.addFadePoint
::FMOD::RESULT FMOD::ChannelGroup::addFadePoint(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::addFadePoint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 33));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.ChannelGroup.setFadePointRamp
::FMOD::RESULT FMOD::ChannelGroup::setFadePointRamp(uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setFadePointRamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 34));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock, volume);
}
// Autogenerated method: FMOD.ChannelGroup.removeFadePoints
::FMOD::RESULT FMOD::ChannelGroup::removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::removeFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 35));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dspclock_start, dspclock_end);
}
// Autogenerated method: FMOD.ChannelGroup.getFadePoints
::FMOD::RESULT FMOD::ChannelGroup::getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getFadePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 36));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numpoints), point_dspclock, point_volume);
}
// Autogenerated method: FMOD.ChannelGroup.getDSP
::FMOD::RESULT FMOD::ChannelGroup::getDSP(int index, ByRef<::FMOD::DSP> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 37));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(dsp));
}
// Autogenerated method: FMOD.ChannelGroup.addDSP
::FMOD::RESULT FMOD::ChannelGroup::addDSP(int index, ::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::addDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 38));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, dsp);
}
// Autogenerated method: FMOD.ChannelGroup.removeDSP
::FMOD::RESULT FMOD::ChannelGroup::removeDSP(::FMOD::DSP dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::removeDSP");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 39));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp);
}
// Autogenerated method: FMOD.ChannelGroup.getNumDSPs
::FMOD::RESULT FMOD::ChannelGroup::getNumDSPs(ByRef<int> numdsps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getNumDSPs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 40));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numdsps));
}
// Autogenerated method: FMOD.ChannelGroup.setDSPIndex
::FMOD::RESULT FMOD::ChannelGroup::setDSPIndex(::FMOD::DSP dsp, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 41));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, index);
}
// Autogenerated method: FMOD.ChannelGroup.getDSPIndex
::FMOD::RESULT FMOD::ChannelGroup::getDSPIndex(::FMOD::DSP dsp, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getDSPIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 42));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, dsp, byref(index));
}
// Autogenerated method: FMOD.ChannelGroup.set3DAttributes
::FMOD::RESULT FMOD::ChannelGroup::set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 43));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.ChannelGroup.get3DAttributes
::FMOD::RESULT FMOD::ChannelGroup::get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 44));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.ChannelGroup.set3DMinMaxDistance
::FMOD::RESULT FMOD::ChannelGroup::set3DMinMaxDistance(float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 45));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, mindistance, maxdistance);
}
// Autogenerated method: FMOD.ChannelGroup.get3DMinMaxDistance
::FMOD::RESULT FMOD::ChannelGroup::get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DMinMaxDistance");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 46));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.ChannelGroup.set3DConeSettings
::FMOD::RESULT FMOD::ChannelGroup::set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 47));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.ChannelGroup.get3DConeSettings
::FMOD::RESULT FMOD::ChannelGroup::get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DConeSettings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 48));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.ChannelGroup.set3DConeOrientation
::FMOD::RESULT FMOD::ChannelGroup::set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 49));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.ChannelGroup.get3DConeOrientation
::FMOD::RESULT FMOD::ChannelGroup::get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DConeOrientation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 50));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(orientation));
}
// Autogenerated method: FMOD.ChannelGroup.set3DCustomRolloff
::FMOD::RESULT FMOD::ChannelGroup::set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 51));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), numpoints);
}
// Autogenerated method: FMOD.ChannelGroup.get3DCustomRolloff
::FMOD::RESULT FMOD::ChannelGroup::get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DCustomRolloff");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 52));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.ChannelGroup.set3DOcclusion
::FMOD::RESULT FMOD::ChannelGroup::set3DOcclusion(float directocclusion, float reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 53));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, directocclusion, reverbocclusion);
}
// Autogenerated method: FMOD.ChannelGroup.get3DOcclusion
::FMOD::RESULT FMOD::ChannelGroup::get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DOcclusion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 54));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(directocclusion), byref(reverbocclusion));
}
// Autogenerated method: FMOD.ChannelGroup.set3DSpread
::FMOD::RESULT FMOD::ChannelGroup::set3DSpread(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 55));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, angle);
}
// Autogenerated method: FMOD.ChannelGroup.get3DSpread
::FMOD::RESULT FMOD::ChannelGroup::get3DSpread(ByRef<float> angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DSpread");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 56));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(angle));
}
// Autogenerated method: FMOD.ChannelGroup.set3DLevel
::FMOD::RESULT FMOD::ChannelGroup::set3DLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 57));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.ChannelGroup.get3DLevel
::FMOD::RESULT FMOD::ChannelGroup::get3DLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 58));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.ChannelGroup.set3DDopplerLevel
::FMOD::RESULT FMOD::ChannelGroup::set3DDopplerLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 59));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, level);
}
// Autogenerated method: FMOD.ChannelGroup.get3DDopplerLevel
::FMOD::RESULT FMOD::ChannelGroup::get3DDopplerLevel(ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DDopplerLevel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 60));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(level));
}
// Autogenerated method: FMOD.ChannelGroup.set3DDistanceFilter
::FMOD::RESULT FMOD::ChannelGroup::set3DDistanceFilter(bool custom, float customLevel, float centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::set3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 61));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, custom, customLevel, centerFreq);
}
// Autogenerated method: FMOD.ChannelGroup.get3DDistanceFilter
::FMOD::RESULT FMOD::ChannelGroup::get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::get3DDistanceFilter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 62));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(custom), byref(customLevel), byref(centerFreq));
}
// Autogenerated method: FMOD.ChannelGroup.setUserData
::FMOD::RESULT FMOD::ChannelGroup::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::setUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 63));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.ChannelGroup.getUserData
::FMOD::RESULT FMOD::ChannelGroup::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::getUserData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::FMOD::ChannelGroup), 64));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Release
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Release(::System::IntPtr channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_AddGroup
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_AddGroup(::System::IntPtr channelgroup, ::System::IntPtr group, bool propogatedspclocks, ByRef<::System::IntPtr> connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_AddGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_AddGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(group), ::il2cpp_utils::ExtractType(propogatedspclocks), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, group, propogatedspclocks, byref(connection));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetNumGroups
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumGroups(::System::IntPtr channelgroup, ByRef<int> numgroups) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumGroups");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetNumGroups", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(numgroups));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetGroup
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetGroup(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, index, byref(group));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetParentGroup
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetParentGroup(::System::IntPtr channelgroup, ByRef<::System::IntPtr> group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetParentGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetParentGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(group));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetName
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetName(::System::IntPtr channelgroup, ::System::IntPtr name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, name, namelen);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetNumChannels
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumChannels(::System::IntPtr channelgroup, ByRef<int> numchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumChannels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetNumChannels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(numchannels));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetChannel
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetChannel(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, index, byref(channel));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetSystemObject
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetSystemObject(::System::IntPtr channelgroup, ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(system));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Stop
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Stop(::System::IntPtr channelgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetPaused
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPaused(::System::IntPtr channelgroup, bool paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(paused)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, paused);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetPaused
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPaused(::System::IntPtr channelgroup, ByRef<bool> paused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(paused));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetVolume
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolume(::System::IntPtr channelgroup, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, volume);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetVolume
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolume(::System::IntPtr channelgroup, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(volume));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetVolumeRamp
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolumeRamp(::System::IntPtr channelgroup, bool ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolumeRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetVolumeRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(ramp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, ramp);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetVolumeRamp
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolumeRamp(::System::IntPtr channelgroup, ByRef<bool> ramp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolumeRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetVolumeRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(ramp));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetAudibility
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetAudibility(::System::IntPtr channelgroup, ByRef<float> audibility) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetAudibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetAudibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(audibility));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetPitch
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPitch(::System::IntPtr channelgroup, float pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(pitch)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, pitch);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetPitch
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPitch(::System::IntPtr channelgroup, ByRef<float> pitch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(pitch));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetMute
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMute(::System::IntPtr channelgroup, bool mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetMute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(mute)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, mute);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetMute
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMute(::System::IntPtr channelgroup, ByRef<bool> mute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetMute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(mute));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetReverbProperties
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetReverbProperties(::System::IntPtr channelgroup, int instance, float wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(wet)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, instance, wet);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetReverbProperties
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetReverbProperties(::System::IntPtr channelgroup, int instance, ByRef<float> wet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetReverbProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetReverbProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, instance, byref(wet));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetLowPassGain
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetLowPassGain(::System::IntPtr channelgroup, float gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetLowPassGain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetLowPassGain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(gain)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, gain);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetLowPassGain
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetLowPassGain(::System::IntPtr channelgroup, ByRef<float> gain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetLowPassGain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetLowPassGain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(gain));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetMode
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMode(::System::IntPtr channelgroup, ::FMOD::MODE mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, mode);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetMode
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMode(::System::IntPtr channelgroup, ByRef<::FMOD::MODE> mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::FMOD::MODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(mode));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetCallback
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetCallback(::System::IntPtr channelgroup, ::FMOD::CHANNEL_CALLBACK* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, callback);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_IsPlaying
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_IsPlaying(::System::IntPtr channelgroup, ByRef<bool> isplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_IsPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_IsPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(isplaying));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetPan
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPan(::System::IntPtr channelgroup, float pan) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetPan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(pan)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, pan);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetMixLevelsOutput
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsOutput(::System::IntPtr channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetMixLevelsOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(frontleft), ::il2cpp_utils::ExtractType(frontright), ::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(lfe), ::il2cpp_utils::ExtractType(surroundleft), ::il2cpp_utils::ExtractType(surroundright), ::il2cpp_utils::ExtractType(backleft), ::il2cpp_utils::ExtractType(backright)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetMixLevelsInput
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsInput(::System::IntPtr channelgroup, ::ArrayW<float> levels, int numlevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetMixLevelsInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(levels), ::il2cpp_utils::ExtractType(numlevels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, levels, numlevels);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetMixMatrix
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixMatrix(::System::IntPtr channelgroup, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(outchannels), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetMixMatrix
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMixMatrix(::System::IntPtr channelgroup, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetDSPClock
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPClock(::System::IntPtr channelgroup, ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPClock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetDSPClock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(dspclock), byref(parentclock));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetDelay
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDelay(::System::IntPtr channelgroup, uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dspclock_start), ::il2cpp_utils::ExtractType(dspclock_end), ::il2cpp_utils::ExtractType(stopchannels)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dspclock_start, dspclock_end, stopchannels);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetDelay
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDelay(::System::IntPtr channelgroup, ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(dspclock_start), byref(dspclock_end), byref(stopchannels));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_AddFadePoint
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_AddFadePoint(::System::IntPtr channelgroup, uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_AddFadePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_AddFadePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dspclock), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dspclock, volume);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetFadePointRamp
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetFadePointRamp(::System::IntPtr channelgroup, uint64_t dspclock, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetFadePointRamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetFadePointRamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dspclock), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dspclock, volume);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_RemoveFadePoints
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveFadePoints(::System::IntPtr channelgroup, uint64_t dspclock_start, uint64_t dspclock_end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveFadePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_RemoveFadePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dspclock_start), ::il2cpp_utils::ExtractType(dspclock_end)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dspclock_start, dspclock_end);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetFadePoints
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetFadePoints(::System::IntPtr channelgroup, ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetFadePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetFadePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(numpoints), ::il2cpp_utils::ExtractType(point_dspclock), ::il2cpp_utils::ExtractType(point_volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(numpoints), point_dspclock, point_volume);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetDSP
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSP(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, index, byref(dsp));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_AddDSP
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_AddDSP(::System::IntPtr channelgroup, int index, ::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_AddDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_AddDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, index, dsp);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_RemoveDSP
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveDSP(::System::IntPtr channelgroup, ::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveDSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_RemoveDSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dsp);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetNumDSPs
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumDSPs(::System::IntPtr channelgroup, ByRef<int> numdsps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumDSPs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetNumDSPs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(numdsps));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetDSPIndex
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDSPIndex(::System::IntPtr channelgroup, ::System::IntPtr dsp, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDSPIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetDSPIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dsp, index);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetDSPIndex
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPIndex(::System::IntPtr channelgroup, ::System::IntPtr dsp, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetDSPIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, dsp, byref(index));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DAttributes
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DAttributes(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(vel), ::il2cpp_utils::ExtractType(alt_pan_pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DAttributes
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DAttributes(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(pos), byref(vel), byref(alt_pan_pos));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DMinMaxDistance
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DMinMaxDistance(::System::IntPtr channelgroup, float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, mindistance, maxdistance);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DMinMaxDistance
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DMinMaxDistance(::System::IntPtr channelgroup, ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DMinMaxDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DMinMaxDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DConeSettings
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeSettings(::System::IntPtr channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(insideconeangle), ::il2cpp_utils::ExtractType(outsideconeangle), ::il2cpp_utils::ExtractType(outsidevolume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, insideconeangle, outsideconeangle, outsidevolume);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DConeSettings
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeSettings(::System::IntPtr channelgroup, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DConeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(insideconeangle), byref(outsideconeangle), byref(outsidevolume));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DConeOrientation
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeOrientation(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DConeOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(orientation)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(orientation));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DConeOrientation
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeOrientation(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DConeOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(orientation));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DCustomRolloff
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DCustomRolloff(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> points, int numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(points), ::il2cpp_utils::ExtractType(numpoints)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(points), numpoints);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DCustomRolloff
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DCustomRolloff(::System::IntPtr channelgroup, ByRef<::System::IntPtr> points, ByRef<int> numpoints) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DCustomRolloff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DCustomRolloff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(points), byref(numpoints));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DOcclusion
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DOcclusion(::System::IntPtr channelgroup, float directocclusion, float reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, directocclusion, reverbocclusion);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DOcclusion
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DOcclusion(::System::IntPtr channelgroup, ByRef<float> directocclusion, ByRef<float> reverbocclusion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DOcclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DOcclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(directocclusion), byref(reverbocclusion));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DSpread
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DSpread(::System::IntPtr channelgroup, float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, angle);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DSpread
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DSpread(::System::IntPtr channelgroup, ByRef<float> angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DSpread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DSpread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(angle));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DLevel
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DLevel(::System::IntPtr channelgroup, float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, level);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DLevel
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DLevel(::System::IntPtr channelgroup, ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(level));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DDopplerLevel
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDopplerLevel(::System::IntPtr channelgroup, float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDopplerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DDopplerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, level);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DDopplerLevel
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDopplerLevel(::System::IntPtr channelgroup, ByRef<float> level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDopplerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DDopplerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(level));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Set3DDistanceFilter
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDistanceFilter(::System::IntPtr channelgroup, bool custom, float customLevel, float centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDistanceFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Set3DDistanceFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(custom), ::il2cpp_utils::ExtractType(customLevel), ::il2cpp_utils::ExtractType(centerFreq)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, custom, customLevel, centerFreq);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_Get3DDistanceFilter
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDistanceFilter(::System::IntPtr channelgroup, ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDistanceFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_Get3DDistanceFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(custom), byref(customLevel), byref(centerFreq));
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_SetUserData
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_SetUserData(::System::IntPtr channelgroup, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, userdata);
}
// Autogenerated method: FMOD.ChannelGroup.FMOD5_ChannelGroup_GetUserData
::FMOD::RESULT FMOD::ChannelGroup::FMOD5_ChannelGroup_GetUserData(::System::IntPtr channelgroup, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::FMOD5_ChannelGroup_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "ChannelGroup", "FMOD5_ChannelGroup_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, channelgroup, byref(userdata));
}
// Autogenerated method: FMOD.ChannelGroup.hasHandle
bool FMOD::ChannelGroup::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.ChannelGroup.clearHandle
void FMOD::ChannelGroup::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::ChannelGroup::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.SoundGroup
#include "FMOD/SoundGroup.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.SOUNDGROUP_BEHAVIOR
#include "FMOD/SOUNDGROUP_BEHAVIOR.hpp"
// Including type: FMOD.Sound
#include "FMOD/Sound.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::SoundGroup::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.SoundGroup.release
::FMOD::RESULT FMOD::SoundGroup::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.SoundGroup.getSystemObject
::FMOD::RESULT FMOD::SoundGroup::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::System&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.SoundGroup.setMaxAudible
::FMOD::RESULT FMOD::SoundGroup::setMaxAudible(int maxaudible) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::setMaxAudible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMaxAudible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxaudible)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, maxaudible);
}
// Autogenerated method: FMOD.SoundGroup.getMaxAudible
::FMOD::RESULT FMOD::SoundGroup::getMaxAudible(ByRef<int> maxaudible) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getMaxAudible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMaxAudible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(maxaudible));
}
// Autogenerated method: FMOD.SoundGroup.setMaxAudibleBehavior
::FMOD::RESULT FMOD::SoundGroup::setMaxAudibleBehavior(::FMOD::SOUNDGROUP_BEHAVIOR behavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::setMaxAudibleBehavior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMaxAudibleBehavior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(behavior)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, behavior);
}
// Autogenerated method: FMOD.SoundGroup.getMaxAudibleBehavior
::FMOD::RESULT FMOD::SoundGroup::getMaxAudibleBehavior(ByRef<::FMOD::SOUNDGROUP_BEHAVIOR> behavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getMaxAudibleBehavior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMaxAudibleBehavior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::SOUNDGROUP_BEHAVIOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(behavior));
}
// Autogenerated method: FMOD.SoundGroup.setMuteFadeSpeed
::FMOD::RESULT FMOD::SoundGroup::setMuteFadeSpeed(float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::setMuteFadeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMuteFadeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, speed);
}
// Autogenerated method: FMOD.SoundGroup.getMuteFadeSpeed
::FMOD::RESULT FMOD::SoundGroup::getMuteFadeSpeed(ByRef<float> speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getMuteFadeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMuteFadeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(speed));
}
// Autogenerated method: FMOD.SoundGroup.setVolume
::FMOD::RESULT FMOD::SoundGroup::setVolume(float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::setVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, volume);
}
// Autogenerated method: FMOD.SoundGroup.getVolume
::FMOD::RESULT FMOD::SoundGroup::getVolume(ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(volume));
}
// Autogenerated method: FMOD.SoundGroup.stop
::FMOD::RESULT FMOD::SoundGroup::stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.SoundGroup.getName
::FMOD::RESULT FMOD::SoundGroup::getName(ByRef<::StringW> name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(name), namelen);
}
// Autogenerated method: FMOD.SoundGroup.getNumSounds
::FMOD::RESULT FMOD::SoundGroup::getNumSounds(ByRef<int> numsounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getNumSounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumSounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numsounds));
}
// Autogenerated method: FMOD.SoundGroup.getSound
::FMOD::RESULT FMOD::SoundGroup::getSound(int index, ByRef<::FMOD::Sound> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::Sound&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(sound));
}
// Autogenerated method: FMOD.SoundGroup.getNumPlaying
::FMOD::RESULT FMOD::SoundGroup::getNumPlaying(ByRef<int> numplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getNumPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numplaying));
}
// Autogenerated method: FMOD.SoundGroup.setUserData
::FMOD::RESULT FMOD::SoundGroup::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.SoundGroup.getUserData
::FMOD::RESULT FMOD::SoundGroup::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_Release
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_Release(::System::IntPtr soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetSystemObject
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetSystemObject(::System::IntPtr soundgroup, ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(system));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_SetMaxAudible
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_SetMaxAudible(::System::IntPtr soundgroup, int maxaudible) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_SetMaxAudible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_SetMaxAudible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(maxaudible)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, maxaudible);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetMaxAudible
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetMaxAudible(::System::IntPtr soundgroup, ByRef<int> maxaudible) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetMaxAudible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetMaxAudible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(maxaudible));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_SetMaxAudibleBehavior
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_SetMaxAudibleBehavior(::System::IntPtr soundgroup, ::FMOD::SOUNDGROUP_BEHAVIOR behavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_SetMaxAudibleBehavior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_SetMaxAudibleBehavior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(behavior)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, behavior);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetMaxAudibleBehavior
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetMaxAudibleBehavior(::System::IntPtr soundgroup, ByRef<::FMOD::SOUNDGROUP_BEHAVIOR> behavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetMaxAudibleBehavior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetMaxAudibleBehavior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<::FMOD::SOUNDGROUP_BEHAVIOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(behavior));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_SetMuteFadeSpeed
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_SetMuteFadeSpeed(::System::IntPtr soundgroup, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_SetMuteFadeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_SetMuteFadeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, speed);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetMuteFadeSpeed
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetMuteFadeSpeed(::System::IntPtr soundgroup, ByRef<float> speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetMuteFadeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetMuteFadeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(speed));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_SetVolume
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_SetVolume(::System::IntPtr soundgroup, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_SetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_SetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, volume);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetVolume
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetVolume(::System::IntPtr soundgroup, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(volume));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_Stop
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_Stop(::System::IntPtr soundgroup) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetName
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetName(::System::IntPtr soundgroup, ::System::IntPtr name, int namelen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(namelen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, name, namelen);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetNumSounds
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetNumSounds(::System::IntPtr soundgroup, ByRef<int> numsounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetNumSounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetNumSounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(numsounds));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetSound
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetSound(::System::IntPtr soundgroup, int index, ByRef<::System::IntPtr> sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, index, byref(sound));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetNumPlaying
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetNumPlaying(::System::IntPtr soundgroup, ByRef<int> numplaying) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetNumPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetNumPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(numplaying));
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_SetUserData
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_SetUserData(::System::IntPtr soundgroup, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, userdata);
}
// Autogenerated method: FMOD.SoundGroup.FMOD5_SoundGroup_GetUserData
::FMOD::RESULT FMOD::SoundGroup::FMOD5_SoundGroup_GetUserData(::System::IntPtr soundgroup, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::FMOD5_SoundGroup_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "SoundGroup", "FMOD5_SoundGroup_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundgroup), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, soundgroup, byref(userdata));
}
// Autogenerated method: FMOD.SoundGroup.hasHandle
bool FMOD::SoundGroup::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.SoundGroup.clearHandle
void FMOD::SoundGroup::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::SoundGroup::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.System
#include "FMOD/System.hpp"
// Including type: FMOD.DSPConnection
#include "FMOD/DSPConnection.hpp"
// Including type: FMOD.DSPCONNECTION_TYPE
#include "FMOD/DSPCONNECTION_TYPE.hpp"
// Including type: FMOD.CHANNELMASK
#include "FMOD/CHANNELMASK.hpp"
// Including type: FMOD.SPEAKERMODE
#include "FMOD/SPEAKERMODE.hpp"
// Including type: FMOD.DSP_PARAMETER_DESC
#include "FMOD/DSP_PARAMETER_DESC.hpp"
// Including type: FMOD.DSP_TYPE
#include "FMOD/DSP_TYPE.hpp"
// Including type: FMOD.DSP_METERING_INFO
#include "FMOD/DSP_METERING_INFO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::DSP::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.DSP.release
::FMOD::RESULT FMOD::DSP::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.DSP.getSystemObject
::FMOD::RESULT FMOD::DSP::getSystemObject(ByRef<::FMOD::System> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::System&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(system));
}
// Autogenerated method: FMOD.DSP.addInput
::FMOD::RESULT FMOD::DSP::addInput(::FMOD::DSP target, ByRef<::FMOD::DSPConnection> connection, ::FMOD::DSPCONNECTION_TYPE type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::addInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "addInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSPConnection&>(), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, target, byref(connection), type);
}
// Autogenerated method: FMOD.DSP.disconnectFrom
::FMOD::RESULT FMOD::DSP::disconnectFrom(::FMOD::DSP target, ::FMOD::DSPConnection connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::disconnectFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "disconnectFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, target, connection);
}
// Autogenerated method: FMOD.DSP.disconnectAll
::FMOD::RESULT FMOD::DSP::disconnectAll(bool inputs, bool outputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::disconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "disconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputs), ::il2cpp_utils::ExtractType(outputs)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, inputs, outputs);
}
// Autogenerated method: FMOD.DSP.getNumInputs
::FMOD::RESULT FMOD::DSP::getNumInputs(ByRef<int> numinputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getNumInputs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumInputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numinputs));
}
// Autogenerated method: FMOD.DSP.getNumOutputs
::FMOD::RESULT FMOD::DSP::getNumOutputs(ByRef<int> numoutputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getNumOutputs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumOutputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numoutputs));
}
// Autogenerated method: FMOD.DSP.getInput
::FMOD::RESULT FMOD::DSP::getInput(int index, ByRef<::FMOD::DSP> input, ByRef<::FMOD::DSPConnection> inputconnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSPConnection&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(input), byref(inputconnection));
}
// Autogenerated method: FMOD.DSP.getOutput
::FMOD::RESULT FMOD::DSP::getOutput(int index, ByRef<::FMOD::DSP> output, ByRef<::FMOD::DSPConnection> outputconnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSPConnection&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(output), byref(outputconnection));
}
// Autogenerated method: FMOD.DSP.setActive
::FMOD::RESULT FMOD::DSP::setActive(bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, active);
}
// Autogenerated method: FMOD.DSP.getActive
::FMOD::RESULT FMOD::DSP::getActive(ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(active));
}
// Autogenerated method: FMOD.DSP.setBypass
::FMOD::RESULT FMOD::DSP::setBypass(bool bypass) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bypass)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, bypass);
}
// Autogenerated method: FMOD.DSP.getBypass
::FMOD::RESULT FMOD::DSP::getBypass(ByRef<bool> bypass) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(bypass));
}
// Autogenerated method: FMOD.DSP.setWetDryMix
::FMOD::RESULT FMOD::DSP::setWetDryMix(float prewet, float postwet, float dry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setWetDryMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setWetDryMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prewet), ::il2cpp_utils::ExtractType(postwet), ::il2cpp_utils::ExtractType(dry)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, prewet, postwet, dry);
}
// Autogenerated method: FMOD.DSP.getWetDryMix
::FMOD::RESULT FMOD::DSP::getWetDryMix(ByRef<float> prewet, ByRef<float> postwet, ByRef<float> dry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getWetDryMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getWetDryMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(prewet), byref(postwet), byref(dry));
}
// Autogenerated method: FMOD.DSP.setChannelFormat
::FMOD::RESULT FMOD::DSP::setChannelFormat(::FMOD::CHANNELMASK channelmask, int numchannels, ::FMOD::SPEAKERMODE source_speakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelmask), ::il2cpp_utils::ExtractType(numchannels), ::il2cpp_utils::ExtractType(source_speakermode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, channelmask, numchannels, source_speakermode);
}
// Autogenerated method: FMOD.DSP.getChannelFormat
::FMOD::RESULT FMOD::DSP::getChannelFormat(ByRef<::FMOD::CHANNELMASK> channelmask, ByRef<int> numchannels, ByRef<::FMOD::SPEAKERMODE> source_speakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::CHANNELMASK&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(channelmask), byref(numchannels), byref(source_speakermode));
}
// Autogenerated method: FMOD.DSP.getOutputChannelFormat
::FMOD::RESULT FMOD::DSP::getOutputChannelFormat(::FMOD::CHANNELMASK inmask, int inchannels, ::FMOD::SPEAKERMODE inspeakermode, ByRef<::FMOD::CHANNELMASK> outmask, ByRef<int> outchannels, ByRef<::FMOD::SPEAKERMODE> outspeakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getOutputChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutputChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inmask), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inspeakermode), ::il2cpp_utils::ExtractIndependentType<::FMOD::CHANNELMASK&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, inmask, inchannels, inspeakermode, byref(outmask), byref(outchannels), byref(outspeakermode));
}
// Autogenerated method: FMOD.DSP.reset
::FMOD::RESULT FMOD::DSP::reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.DSP.setParameterFloat
::FMOD::RESULT FMOD::DSP::setParameterFloat(int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setParameterFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setParameterFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, value);
}
// Autogenerated method: FMOD.DSP.setParameterInt
::FMOD::RESULT FMOD::DSP::setParameterInt(int index, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setParameterInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setParameterInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, value);
}
// Autogenerated method: FMOD.DSP.setParameterBool
::FMOD::RESULT FMOD::DSP::setParameterBool(int index, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setParameterBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setParameterBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, value);
}
// Autogenerated method: FMOD.DSP.setParameterData
::FMOD::RESULT FMOD::DSP::setParameterData(int index, ::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setParameterData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setParameterData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, data);
}
// Autogenerated method: FMOD.DSP.getParameterFloat
::FMOD::RESULT FMOD::DSP::getParameterFloat(int index, ByRef<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getParameterFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParameterFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(value));
}
// Autogenerated method: FMOD.DSP.getParameterInt
::FMOD::RESULT FMOD::DSP::getParameterInt(int index, ByRef<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getParameterInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParameterInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(value));
}
// Autogenerated method: FMOD.DSP.getParameterBool
::FMOD::RESULT FMOD::DSP::getParameterBool(int index, ByRef<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getParameterBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParameterBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(value));
}
// Autogenerated method: FMOD.DSP.getParameterData
::FMOD::RESULT FMOD::DSP::getParameterData(int index, ByRef<::System::IntPtr> data, ByRef<uint> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getParameterData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParameterData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(data), byref(length));
}
// Autogenerated method: FMOD.DSP.getNumParameters
::FMOD::RESULT FMOD::DSP::getNumParameters(ByRef<int> numparams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getNumParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numparams));
}
// Autogenerated method: FMOD.DSP.getParameterInfo
::FMOD::RESULT FMOD::DSP::getParameterInfo(int index, ByRef<::FMOD::DSP_PARAMETER_DESC> desc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getParameterInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getParameterInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_PARAMETER_DESC&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(desc));
}
// Autogenerated method: FMOD.DSP.getDataParameterIndex
::FMOD::RESULT FMOD::DSP::getDataParameterIndex(int datatype, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getDataParameterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getDataParameterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(datatype), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, datatype, byref(index));
}
// Autogenerated method: FMOD.DSP.showConfigDialog
::FMOD::RESULT FMOD::DSP::showConfigDialog(::System::IntPtr hwnd, bool show) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::showConfigDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "showConfigDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hwnd), ::il2cpp_utils::ExtractType(show)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, hwnd, show);
}
// Autogenerated method: FMOD.DSP.getInfo
::FMOD::RESULT FMOD::DSP::getInfo(ByRef<::StringW> name, ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(name), byref(version), byref(channels), byref(configwidth), byref(configheight));
}
// Autogenerated method: FMOD.DSP.getInfo
::FMOD::RESULT FMOD::DSP::getInfo(ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(version), byref(channels), byref(configwidth), byref(configheight));
}
// Autogenerated method: FMOD.DSP.getType
::FMOD::RESULT FMOD::DSP::getType(ByRef<::FMOD::DSP_TYPE> type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_TYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(type));
}
// Autogenerated method: FMOD.DSP.getIdle
::FMOD::RESULT FMOD::DSP::getIdle(ByRef<bool> idle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getIdle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getIdle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(idle));
}
// Autogenerated method: FMOD.DSP.setUserData
::FMOD::RESULT FMOD::DSP::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.DSP.getUserData
::FMOD::RESULT FMOD::DSP::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.DSP.setMeteringEnabled
::FMOD::RESULT FMOD::DSP::setMeteringEnabled(bool inputEnabled, bool outputEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::setMeteringEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMeteringEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputEnabled), ::il2cpp_utils::ExtractType(outputEnabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, inputEnabled, outputEnabled);
}
// Autogenerated method: FMOD.DSP.getMeteringEnabled
::FMOD::RESULT FMOD::DSP::getMeteringEnabled(ByRef<bool> inputEnabled, ByRef<bool> outputEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getMeteringEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMeteringEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(inputEnabled), byref(outputEnabled));
}
// Autogenerated method: FMOD.DSP.getMeteringInfo
::FMOD::RESULT FMOD::DSP::getMeteringInfo(::System::IntPtr zero, ByRef<::FMOD::DSP_METERING_INFO> outputInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getMeteringInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMeteringInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zero), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_METERING_INFO&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, zero, byref(outputInfo));
}
// Autogenerated method: FMOD.DSP.getMeteringInfo
::FMOD::RESULT FMOD::DSP::getMeteringInfo(ByRef<::FMOD::DSP_METERING_INFO> inputInfo, ::System::IntPtr zero) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getMeteringInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMeteringInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_METERING_INFO&>(), ::il2cpp_utils::ExtractType(zero)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(inputInfo), zero);
}
// Autogenerated method: FMOD.DSP.getCPUUsage
::FMOD::RESULT FMOD::DSP::getCPUUsage(ByRef<uint> exclusive, ByRef<uint> inclusive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::getCPUUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getCPUUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(exclusive), byref(inclusive));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_Release
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_Release(::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetSystemObject
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetSystemObject(::System::IntPtr dsp, ByRef<::System::IntPtr> system) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetSystemObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetSystemObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(system));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_AddInput
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_AddInput(::System::IntPtr dsp, ::System::IntPtr target, ByRef<::System::IntPtr> connection, ::FMOD::DSPCONNECTION_TYPE type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_AddInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_AddInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, target, byref(connection), type);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_DisconnectFrom
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_DisconnectFrom(::System::IntPtr dsp, ::System::IntPtr target, ::System::IntPtr connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_DisconnectFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_DisconnectFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, target, connection);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_DisconnectAll
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_DisconnectAll(::System::IntPtr dsp, bool inputs, bool outputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(inputs), ::il2cpp_utils::ExtractType(outputs)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, inputs, outputs);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetNumInputs
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetNumInputs(::System::IntPtr dsp, ByRef<int> numinputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetNumInputs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetNumInputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(numinputs));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetNumOutputs
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetNumOutputs(::System::IntPtr dsp, ByRef<int> numoutputs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetNumOutputs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetNumOutputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(numoutputs));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetInput
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetInput(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> input, ByRef<::System::IntPtr> inputconnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(input), byref(inputconnection));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetOutput
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetOutput(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> output, ByRef<::System::IntPtr> outputconnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(output), byref(outputconnection));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetActive
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetActive(::System::IntPtr dsp, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, active);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetActive
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetActive(::System::IntPtr dsp, ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(active));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetBypass
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetBypass(::System::IntPtr dsp, bool bypass) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(bypass)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, bypass);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetBypass
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetBypass(::System::IntPtr dsp, ByRef<bool> bypass) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetBypass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetBypass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(bypass));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetWetDryMix
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetWetDryMix(::System::IntPtr dsp, float prewet, float postwet, float dry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetWetDryMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetWetDryMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(prewet), ::il2cpp_utils::ExtractType(postwet), ::il2cpp_utils::ExtractType(dry)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, prewet, postwet, dry);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetWetDryMix
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetWetDryMix(::System::IntPtr dsp, ByRef<float> prewet, ByRef<float> postwet, ByRef<float> dry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetWetDryMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetWetDryMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(prewet), byref(postwet), byref(dry));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetChannelFormat
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetChannelFormat(::System::IntPtr dsp, ::FMOD::CHANNELMASK channelmask, int numchannels, ::FMOD::SPEAKERMODE source_speakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(channelmask), ::il2cpp_utils::ExtractType(numchannels), ::il2cpp_utils::ExtractType(source_speakermode)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, channelmask, numchannels, source_speakermode);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetChannelFormat
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetChannelFormat(::System::IntPtr dsp, ByRef<::FMOD::CHANNELMASK> channelmask, ByRef<int> numchannels, ByRef<::FMOD::SPEAKERMODE> source_speakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<::FMOD::CHANNELMASK&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(channelmask), byref(numchannels), byref(source_speakermode));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetOutputChannelFormat
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetOutputChannelFormat(::System::IntPtr dsp, ::FMOD::CHANNELMASK inmask, int inchannels, ::FMOD::SPEAKERMODE inspeakermode, ByRef<::FMOD::CHANNELMASK> outmask, ByRef<int> outchannels, ByRef<::FMOD::SPEAKERMODE> outspeakermode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetOutputChannelFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetOutputChannelFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(inmask), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inspeakermode), ::il2cpp_utils::ExtractIndependentType<::FMOD::CHANNELMASK&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::SPEAKERMODE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, inmask, inchannels, inspeakermode, byref(outmask), byref(outchannels), byref(outspeakermode));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_Reset
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_Reset(::System::IntPtr dsp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetParameterFloat
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetParameterFloat(::System::IntPtr dsp, int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetParameterFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetParameterFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, value);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetParameterInt
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetParameterInt(::System::IntPtr dsp, int index, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetParameterInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetParameterInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, value);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetParameterBool
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetParameterBool(::System::IntPtr dsp, int index, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetParameterBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetParameterBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, value);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetParameterData
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetParameterData(::System::IntPtr dsp, int index, ::System::IntPtr data, uint length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetParameterData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetParameterData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, data, length);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetParameterFloat
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetParameterFloat(::System::IntPtr dsp, int index, ByRef<float> value, ::System::IntPtr valuestr, int valuestrlen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetParameterFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetParameterFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractType(valuestr), ::il2cpp_utils::ExtractType(valuestrlen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(value), valuestr, valuestrlen);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetParameterInt
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetParameterInt(::System::IntPtr dsp, int index, ByRef<int> value, ::System::IntPtr valuestr, int valuestrlen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetParameterInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetParameterInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(valuestr), ::il2cpp_utils::ExtractType(valuestrlen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(value), valuestr, valuestrlen);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetParameterBool
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetParameterBool(::System::IntPtr dsp, int index, ByRef<bool> value, ::System::IntPtr valuestr, int valuestrlen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetParameterBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetParameterBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractType(valuestr), ::il2cpp_utils::ExtractType(valuestrlen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(value), valuestr, valuestrlen);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetParameterData
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetParameterData(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> data, ByRef<uint> length, ::System::IntPtr valuestr, int valuestrlen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetParameterData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetParameterData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractType(valuestr), ::il2cpp_utils::ExtractType(valuestrlen)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(data), byref(length), valuestr, valuestrlen);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetNumParameters
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetNumParameters(::System::IntPtr dsp, ByRef<int> numparams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetNumParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetNumParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(numparams));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetParameterInfo
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetParameterInfo(::System::IntPtr dsp, int index, ByRef<::FMOD::DSP_PARAMETER_DESC> desc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetParameterInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetParameterInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_PARAMETER_DESC&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, index, byref(desc));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetDataParameterIndex
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetDataParameterIndex(::System::IntPtr dsp, int datatype, ByRef<int> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetDataParameterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetDataParameterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(datatype), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, datatype, byref(index));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_ShowConfigDialog
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_ShowConfigDialog(::System::IntPtr dsp, ::System::IntPtr hwnd, bool show) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_ShowConfigDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_ShowConfigDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(hwnd), ::il2cpp_utils::ExtractType(show)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, hwnd, show);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetInfo
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetInfo(::System::IntPtr dsp, ::System::IntPtr name, ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, name, byref(version), byref(channels), byref(configwidth), byref(configheight));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetType
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetType(::System::IntPtr dsp, ByRef<::FMOD::DSP_TYPE> type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_TYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(type));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetIdle
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetIdle(::System::IntPtr dsp, ByRef<bool> idle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetIdle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetIdle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(idle));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetUserData
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetUserData(::System::IntPtr dsp, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, userdata);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetUserData
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetUserData(::System::IntPtr dsp, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(userdata));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_SetMeteringEnabled
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_SetMeteringEnabled(::System::IntPtr dsp, bool inputEnabled, bool outputEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_SetMeteringEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_SetMeteringEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(inputEnabled), ::il2cpp_utils::ExtractType(outputEnabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, inputEnabled, outputEnabled);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetMeteringEnabled
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetMeteringEnabled(::System::IntPtr dsp, ByRef<bool> inputEnabled, ByRef<bool> outputEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetMeteringEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetMeteringEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(inputEnabled), byref(outputEnabled));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetMeteringInfo
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetMeteringInfo(::System::IntPtr dsp, ::System::IntPtr zero, ByRef<::FMOD::DSP_METERING_INFO> outputInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetMeteringInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetMeteringInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractType(zero), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_METERING_INFO&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, zero, byref(outputInfo));
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetMeteringInfo
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetMeteringInfo(::System::IntPtr dsp, ByRef<::FMOD::DSP_METERING_INFO> inputInfo, ::System::IntPtr zero) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetMeteringInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetMeteringInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSP_METERING_INFO&>(), ::il2cpp_utils::ExtractType(zero)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(inputInfo), zero);
}
// Autogenerated method: FMOD.DSP.FMOD5_DSP_GetCPUUsage
::FMOD::RESULT FMOD::DSP::FMOD5_DSP_GetCPUUsage(::System::IntPtr dsp, ByRef<uint> exclusive, ByRef<uint> inclusive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::FMOD5_DSP_GetCPUUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSP", "FMOD5_DSP_GetCPUUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dsp), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dsp, byref(exclusive), byref(inclusive));
}
// Autogenerated method: FMOD.DSP.hasHandle
bool FMOD::DSP::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.DSP.clearHandle
void FMOD::DSP::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSP::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.DSPConnection
#include "FMOD/DSPConnection.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
// Including type: FMOD.DSPCONNECTION_TYPE
#include "FMOD/DSPCONNECTION_TYPE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::DSPConnection::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.DSPConnection.getInput
::FMOD::RESULT FMOD::DSPConnection::getInput(ByRef<::FMOD::DSP> input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(input));
}
// Autogenerated method: FMOD.DSPConnection.getOutput
::FMOD::RESULT FMOD::DSPConnection::getOutput(ByRef<::FMOD::DSP> output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::DSP&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(output));
}
// Autogenerated method: FMOD.DSPConnection.setMix
::FMOD::RESULT FMOD::DSPConnection::setMix(float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::setMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, volume);
}
// Autogenerated method: FMOD.DSPConnection.getMix
::FMOD::RESULT FMOD::DSPConnection::getMix(ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(volume));
}
// Autogenerated method: FMOD.DSPConnection.setMixMatrix
::FMOD::RESULT FMOD::DSPConnection::setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::setMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(outchannels), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.DSPConnection.getMixMatrix
::FMOD::RESULT FMOD::DSPConnection::getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.DSPConnection.getType
::FMOD::RESULT FMOD::DSPConnection::getType(ByRef<::FMOD::DSPCONNECTION_TYPE> type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::DSPCONNECTION_TYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(type));
}
// Autogenerated method: FMOD.DSPConnection.setUserData
::FMOD::RESULT FMOD::DSPConnection::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.DSPConnection.getUserData
::FMOD::RESULT FMOD::DSPConnection::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetInput
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetInput(::System::IntPtr dspconnection, ByRef<::System::IntPtr> input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, byref(input));
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetOutput
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetOutput(::System::IntPtr dspconnection, ByRef<::System::IntPtr> output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, byref(output));
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_SetMix
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_SetMix(::System::IntPtr dspconnection, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_SetMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_SetMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractType(volume)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, volume);
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetMix
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetMix(::System::IntPtr dspconnection, ByRef<float> volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, byref(volume));
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_SetMixMatrix
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_SetMixMatrix(::System::IntPtr dspconnection, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_SetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_SetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(outchannels), ::il2cpp_utils::ExtractType(inchannels), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, matrix, outchannels, inchannels, inchannel_hop);
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetMixMatrix
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetMixMatrix(::System::IntPtr dspconnection, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetMixMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetMixMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(inchannel_hop)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, matrix, byref(outchannels), byref(inchannels), inchannel_hop);
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetType
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetType(::System::IntPtr dspconnection, ByRef<::FMOD::DSPCONNECTION_TYPE> type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractIndependentType<::FMOD::DSPCONNECTION_TYPE&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, byref(type));
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_SetUserData
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_SetUserData(::System::IntPtr dspconnection, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, userdata);
}
// Autogenerated method: FMOD.DSPConnection.FMOD5_DSPConnection_GetUserData
::FMOD::RESULT FMOD::DSPConnection::FMOD5_DSPConnection_GetUserData(::System::IntPtr dspconnection, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::FMOD5_DSPConnection_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "DSPConnection", "FMOD5_DSPConnection_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dspconnection), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dspconnection, byref(userdata));
}
// Autogenerated method: FMOD.DSPConnection.hasHandle
bool FMOD::DSPConnection::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.DSPConnection.clearHandle
void FMOD::DSPConnection::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DSPConnection::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Geometry
#include "FMOD/Geometry.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::Geometry::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.Geometry.release
::FMOD::RESULT FMOD::Geometry::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Geometry.addPolygon
::FMOD::RESULT FMOD::Geometry::addPolygon(float directocclusion, float reverbocclusion, bool doublesided, int numvertices, ::ArrayW<::FMOD::VECTOR> vertices, ByRef<int> polygonindex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::addPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "addPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion), ::il2cpp_utils::ExtractType(doublesided), ::il2cpp_utils::ExtractType(numvertices), ::il2cpp_utils::ExtractType(vertices), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, directocclusion, reverbocclusion, doublesided, numvertices, vertices, byref(polygonindex));
}
// Autogenerated method: FMOD.Geometry.getNumPolygons
::FMOD::RESULT FMOD::Geometry::getNumPolygons(ByRef<int> numpolygons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getNumPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getNumPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(numpolygons));
}
// Autogenerated method: FMOD.Geometry.getMaxPolygons
::FMOD::RESULT FMOD::Geometry::getMaxPolygons(ByRef<int> maxpolygons, ByRef<int> maxvertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getMaxPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getMaxPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(maxpolygons), byref(maxvertices));
}
// Autogenerated method: FMOD.Geometry.getPolygonNumVertices
::FMOD::RESULT FMOD::Geometry::getPolygonNumVertices(int index, ByRef<int> numvertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getPolygonNumVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPolygonNumVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(numvertices));
}
// Autogenerated method: FMOD.Geometry.setPolygonVertex
::FMOD::RESULT FMOD::Geometry::setPolygonVertex(int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setPolygonVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPolygonVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(vertexindex), ::il2cpp_utils::ExtractType(vertex)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, vertexindex, byref(vertex));
}
// Autogenerated method: FMOD.Geometry.getPolygonVertex
::FMOD::RESULT FMOD::Geometry::getPolygonVertex(int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getPolygonVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPolygonVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(vertexindex), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, vertexindex, byref(vertex));
}
// Autogenerated method: FMOD.Geometry.setPolygonAttributes
::FMOD::RESULT FMOD::Geometry::setPolygonAttributes(int index, float directocclusion, float reverbocclusion, bool doublesided) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setPolygonAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPolygonAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion), ::il2cpp_utils::ExtractType(doublesided)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, directocclusion, reverbocclusion, doublesided);
}
// Autogenerated method: FMOD.Geometry.getPolygonAttributes
::FMOD::RESULT FMOD::Geometry::getPolygonAttributes(int index, ByRef<float> directocclusion, ByRef<float> reverbocclusion, ByRef<bool> doublesided) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getPolygonAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPolygonAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, index, byref(directocclusion), byref(reverbocclusion), byref(doublesided));
}
// Autogenerated method: FMOD.Geometry.setActive
::FMOD::RESULT FMOD::Geometry::setActive(bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, active);
}
// Autogenerated method: FMOD.Geometry.getActive
::FMOD::RESULT FMOD::Geometry::getActive(ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(active));
}
// Autogenerated method: FMOD.Geometry.setRotation
::FMOD::RESULT FMOD::Geometry::setRotation(ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(forward), byref(up));
}
// Autogenerated method: FMOD.Geometry.getRotation
::FMOD::RESULT FMOD::Geometry::getRotation(ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(forward), byref(up));
}
// Autogenerated method: FMOD.Geometry.setPosition
::FMOD::RESULT FMOD::Geometry::setPosition(ByRef<::FMOD::VECTOR> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(position));
}
// Autogenerated method: FMOD.Geometry.getPosition
::FMOD::RESULT FMOD::Geometry::getPosition(ByRef<::FMOD::VECTOR> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(position));
}
// Autogenerated method: FMOD.Geometry.setScale
::FMOD::RESULT FMOD::Geometry::setScale(ByRef<::FMOD::VECTOR> scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(scale));
}
// Autogenerated method: FMOD.Geometry.getScale
::FMOD::RESULT FMOD::Geometry::getScale(ByRef<::FMOD::VECTOR> scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(scale));
}
// Autogenerated method: FMOD.Geometry.save
::FMOD::RESULT FMOD::Geometry::save(::System::IntPtr data, ByRef<int> datasize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, data, byref(datasize));
}
// Autogenerated method: FMOD.Geometry.setUserData
::FMOD::RESULT FMOD::Geometry::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.Geometry.getUserData
::FMOD::RESULT FMOD::Geometry::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_Release
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_Release(::System::IntPtr geometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry);
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_AddPolygon
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_AddPolygon(::System::IntPtr geometry, float directocclusion, float reverbocclusion, bool doublesided, int numvertices, ::ArrayW<::FMOD::VECTOR> vertices, ByRef<int> polygonindex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_AddPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_AddPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion), ::il2cpp_utils::ExtractType(doublesided), ::il2cpp_utils::ExtractType(numvertices), ::il2cpp_utils::ExtractType(vertices), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, directocclusion, reverbocclusion, doublesided, numvertices, vertices, byref(polygonindex));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetNumPolygons
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetNumPolygons(::System::IntPtr geometry, ByRef<int> numpolygons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetNumPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetNumPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(numpolygons));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetMaxPolygons
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetMaxPolygons(::System::IntPtr geometry, ByRef<int> maxpolygons, ByRef<int> maxvertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetMaxPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetMaxPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(maxpolygons), byref(maxvertices));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetPolygonNumVertices
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetPolygonNumVertices(::System::IntPtr geometry, int index, ByRef<int> numvertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetPolygonNumVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetPolygonNumVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, index, byref(numvertices));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetPolygonVertex
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetPolygonVertex(::System::IntPtr geometry, int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetPolygonVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetPolygonVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(vertexindex), ::il2cpp_utils::ExtractType(vertex)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, index, vertexindex, byref(vertex));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetPolygonVertex
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetPolygonVertex(::System::IntPtr geometry, int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetPolygonVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetPolygonVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(vertexindex), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, index, vertexindex, byref(vertex));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetPolygonAttributes
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetPolygonAttributes(::System::IntPtr geometry, int index, float directocclusion, float reverbocclusion, bool doublesided) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetPolygonAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetPolygonAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(directocclusion), ::il2cpp_utils::ExtractType(reverbocclusion), ::il2cpp_utils::ExtractType(doublesided)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, index, directocclusion, reverbocclusion, doublesided);
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetPolygonAttributes
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetPolygonAttributes(::System::IntPtr geometry, int index, ByRef<float> directocclusion, ByRef<float> reverbocclusion, ByRef<bool> doublesided) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetPolygonAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetPolygonAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, index, byref(directocclusion), byref(reverbocclusion), byref(doublesided));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetActive
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetActive(::System::IntPtr geometry, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, active);
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetActive
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetActive(::System::IntPtr geometry, ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(active));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetRotation
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetRotation(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(forward), byref(up));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetRotation
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetRotation(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>(), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(forward), byref(up));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetPosition
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetPosition(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(position)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(position));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetPosition
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetPosition(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> position) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(position));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetScale
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetScale(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(scale));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetScale
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetScale(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<::FMOD::VECTOR&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(scale));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_Save
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_Save(::System::IntPtr geometry, ::System::IntPtr data, ByRef<int> datasize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, data, byref(datasize));
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_SetUserData
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_SetUserData(::System::IntPtr geometry, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, userdata);
}
// Autogenerated method: FMOD.Geometry.FMOD5_Geometry_GetUserData
::FMOD::RESULT FMOD::Geometry::FMOD5_Geometry_GetUserData(::System::IntPtr geometry, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::FMOD5_Geometry_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Geometry", "FMOD5_Geometry_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(geometry), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, geometry, byref(userdata));
}
// Autogenerated method: FMOD.Geometry.hasHandle
bool FMOD::Geometry::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Geometry.clearHandle
void FMOD::Geometry::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Geometry::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.Reverb3D
#include "FMOD/Reverb3D.hpp"
// Including type: FMOD.RESULT
#include "FMOD/RESULT.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
// Including type: FMOD.REVERB_PROPERTIES
#include "FMOD/REVERB_PROPERTIES.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::Reverb3D::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::dyn_handle");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.Reverb3D.release
::FMOD::RESULT FMOD::Reverb3D::release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Reverb3D.set3DAttributes
::FMOD::RESULT FMOD::Reverb3D::set3DAttributes(ByRef<::FMOD::VECTOR> position, float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::set3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(position), mindistance, maxdistance);
}
// Autogenerated method: FMOD.Reverb3D.get3DAttributes
::FMOD::RESULT FMOD::Reverb3D::get3DAttributes(ByRef<::FMOD::VECTOR> position, ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::get3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(position), byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.Reverb3D.setProperties
::FMOD::RESULT FMOD::Reverb3D::setProperties(ByRef<::FMOD::REVERB_PROPERTIES> properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::setProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(properties)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(properties));
}
// Autogenerated method: FMOD.Reverb3D.getProperties
::FMOD::RESULT FMOD::Reverb3D::getProperties(ByRef<::FMOD::REVERB_PROPERTIES> properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::getProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(properties)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(properties));
}
// Autogenerated method: FMOD.Reverb3D.setActive
::FMOD::RESULT FMOD::Reverb3D::setActive(bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::setActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, active);
}
// Autogenerated method: FMOD.Reverb3D.getActive
::FMOD::RESULT FMOD::Reverb3D::getActive(ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::getActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(active));
}
// Autogenerated method: FMOD.Reverb3D.setUserData
::FMOD::RESULT FMOD::Reverb3D::setUserData(::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::setUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, userdata);
}
// Autogenerated method: FMOD.Reverb3D.getUserData
::FMOD::RESULT FMOD::Reverb3D::getUserData(ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::getUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "getUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(this, ___internal__method, byref(userdata));
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_Release
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_Release(::System::IntPtr reverb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb);
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_Set3DAttributes
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_Set3DAttributes(::System::IntPtr reverb, ByRef<::FMOD::VECTOR> position, float mindistance, float maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_Set3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_Set3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(position), mindistance, maxdistance);
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_Get3DAttributes
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_Get3DAttributes(::System::IntPtr reverb, ByRef<::FMOD::VECTOR> position, ByRef<float> mindistance, ByRef<float> maxdistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_Get3DAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_Get3DAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(mindistance), ::il2cpp_utils::ExtractType(maxdistance)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(position), byref(mindistance), byref(maxdistance));
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_SetProperties
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_SetProperties(::System::IntPtr reverb, ByRef<::FMOD::REVERB_PROPERTIES> properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_SetProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_SetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(properties)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(properties));
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_GetProperties
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_GetProperties(::System::IntPtr reverb, ByRef<::FMOD::REVERB_PROPERTIES> properties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_GetProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_GetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(properties)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(properties));
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_SetActive
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_SetActive(::System::IntPtr reverb, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(active)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, active);
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_GetActive
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_GetActive(::System::IntPtr reverb, ByRef<bool> active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_GetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_GetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(active));
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_SetUserData
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_SetUserData(::System::IntPtr reverb, ::System::IntPtr userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_SetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_SetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractType(userdata)})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, userdata);
}
// Autogenerated method: FMOD.Reverb3D.FMOD5_Reverb3D_GetUserData
::FMOD::RESULT FMOD::Reverb3D::FMOD5_Reverb3D_GetUserData(::System::IntPtr reverb, ByRef<::System::IntPtr> userdata) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::FMOD5_Reverb3D_GetUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "Reverb3D", "FMOD5_Reverb3D_GetUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reverb), ::il2cpp_utils::ExtractIndependentType<::System::IntPtr&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::RESULT, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, reverb, byref(userdata));
}
// Autogenerated method: FMOD.Reverb3D.hasHandle
bool FMOD::Reverb3D::hasHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::hasHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "hasHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.Reverb3D.clearHandle
void FMOD::Reverb3D::clearHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Reverb3D::clearHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "clearHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.IntPtr nativeUtf8Ptr
[[deprecated("Use field access instead!")]] ::System::IntPtr& FMOD::StringWrapper::dyn_nativeUtf8Ptr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringWrapper::dyn_nativeUtf8Ptr");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nativeUtf8Ptr"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.StringHelper
#include "FMOD/StringHelper.hpp"
// Including type: FMOD.StringHelper/ThreadSafeEncoding
#include "FMOD/StringHelper_ThreadSafeEncoding.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<FMOD.StringHelper/ThreadSafeEncoding> encoders
::System::Collections::Generic::List_1<::FMOD::StringHelper::ThreadSafeEncoding*>* FMOD::StringHelper::_get_encoders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::_get_encoders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::FMOD::StringHelper::ThreadSafeEncoding*>*>("FMOD", "StringHelper", "encoders"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<FMOD.StringHelper/ThreadSafeEncoding> encoders
void FMOD::StringHelper::_set_encoders(::System::Collections::Generic::List_1<::FMOD::StringHelper::ThreadSafeEncoding*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::_set_encoders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("FMOD", "StringHelper", "encoders", value));
}
// Autogenerated method: FMOD.StringHelper.GetFreeHelper
::FMOD::StringHelper::ThreadSafeEncoding* FMOD::StringHelper::GetFreeHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::GetFreeHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "StringHelper", "GetFreeHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::FMOD::StringHelper::ThreadSafeEncoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FMOD.StringHelper..cctor
void FMOD::StringHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("FMOD", "StringHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FMOD.StringHelper/ThreadSafeEncoding
#include "FMOD/StringHelper_ThreadSafeEncoding.hpp"
// Including type: System.Text.UTF8Encoding
#include "System/Text/UTF8Encoding.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Text.UTF8Encoding encoding
[[deprecated("Use field access instead!")]] ::System::Text::UTF8Encoding*& FMOD::StringHelper::ThreadSafeEncoding::dyn_encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::dyn_encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encoding"))->offset;
  return *reinterpret_cast<::System::Text::UTF8Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] encodedBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& FMOD::StringHelper::ThreadSafeEncoding::dyn_encodedBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::dyn_encodedBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encodedBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Char[] decodedBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& FMOD::StringHelper::ThreadSafeEncoding::dyn_decodedBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::dyn_decodedBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "decodedBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean inUse
[[deprecated("Use field access instead!")]] bool& FMOD::StringHelper::ThreadSafeEncoding::dyn_inUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::dyn_inUse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inUse"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.InUse
bool FMOD::StringHelper::ThreadSafeEncoding::InUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::InUse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InUse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.SetInUse
void FMOD::StringHelper::ThreadSafeEncoding::SetInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::SetInUse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInUse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.roundUpPowerTwo
int FMOD::StringHelper::ThreadSafeEncoding::roundUpPowerTwo(int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::roundUpPowerTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "roundUpPowerTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, number);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.byteFromStringUTF8
::ArrayW<uint8_t> FMOD::StringHelper::ThreadSafeEncoding::byteFromStringUTF8(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::byteFromStringUTF8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "byteFromStringUTF8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method, s);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.stringFromNative
::StringW FMOD::StringHelper::ThreadSafeEncoding::stringFromNative(::System::IntPtr nativePtr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::stringFromNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "stringFromNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nativePtr)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, nativePtr);
}
// Autogenerated method: FMOD.StringHelper/ThreadSafeEncoding.Dispose
void FMOD::StringHelper::ThreadSafeEncoding::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::FMOD::StringHelper::ThreadSafeEncoding*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
