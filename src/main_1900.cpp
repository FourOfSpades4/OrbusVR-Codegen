// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand/<>c
#include "Valve/VR/InteractionSystem/Hand_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Valve.VR.InteractionSystem.Hand/<>c <>9
::Valve::VR::InteractionSystem::Hand::$$c* Valve::VR::InteractionSystem::Hand::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::$$c*>("Valve.VR.InteractionSystem", "Hand/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Valve.VR.InteractionSystem.Hand/<>c <>9
void Valve::VR::InteractionSystem::Hand::$$c::_set_$$9(::Valve::VR::InteractionSystem::Hand::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<Valve.VR.InteractionSystem.Hand/AttachedObject> <>9__45_0
::System::Predicate_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>* Valve::VR::InteractionSystem::Hand::$$c::_get_$$9__45_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::_get_$$9__45_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Predicate_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>*>("Valve.VR.InteractionSystem", "Hand/<>c", "<>9__45_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<Valve.VR.InteractionSystem.Hand/AttachedObject> <>9__45_0
void Valve::VR::InteractionSystem::Hand::$$c::_set_$$9__45_0(::System::Predicate_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::_set_$$9__45_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/<>c", "<>9__45_0", value)));
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<>c..cctor
void Valve::VR::InteractionSystem::Hand::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Hand/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<>c.<CleanUpAttachedObjectStack>b__45_0
bool Valve::VR::InteractionSystem::Hand::$$c::$CleanUpAttachedObjectStack$b__45_0(::Valve::VR::InteractionSystem::Hand::AttachedObject l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c::<CleanUpAttachedObjectStack>b__45_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CleanUpAttachedObjectStack>b__45_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, l);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Hand/<Start>d__47
#include "Valve/VR/InteractionSystem/Hand_-Start-d__47.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<Start>d__47.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::Hand::$Start$d__47::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Hand::$Start$d__47*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<Start>d__47.MoveNext
bool Valve::VR::InteractionSystem::Hand::$Start$d__47::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Hand::$Start$d__47*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<Start>d__47.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Hand::$Start$d__47::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Hand::$Start$d__47*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<Start>d__47.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::Hand::$Start$d__47::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Hand::$Start$d__47*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<Start>d__47.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Hand::$Start$d__47::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$Start$d__47::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Hand::$Start$d__47*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass48_0
#include "Valve/VR/InteractionSystem/Hand_--c__DisplayClass48_0.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/AttachedObject
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Interactable contacting
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable*& Valve::VR::InteractionSystem::Hand::$$c__DisplayClass48_0::dyn_contacting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass48_0::dyn_contacting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "contacting"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass48_0.<UpdateHovering>b__0
bool Valve::VR::InteractionSystem::Hand::$$c__DisplayClass48_0::$UpdateHovering$b__0(::Valve::VR::InteractionSystem::Hand::AttachedObject l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass48_0::<UpdateHovering>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateHovering>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, l);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.HapticRack
#include "Valve/VR/InteractionSystem/HapticRack.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::HapticRack::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 teethCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::HapticRack::dyn_teethCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_teethCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teethCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 minimumPulseDuration
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::HapticRack::dyn_minimumPulseDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_minimumPulseDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minimumPulseDuration"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 maximumPulseDuration
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::HapticRack::dyn_maximumPulseDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_maximumPulseDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximumPulseDuration"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onPulse
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::HapticRack::dyn_onPulse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_onPulse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPulse"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::HapticRack::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 previousToothIndex
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::HapticRack::dyn_previousToothIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::dyn_previousToothIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousToothIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.HapticRack.Awake
void Valve::VR::InteractionSystem::HapticRack::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.HapticRack.OnHandHoverBegin
void Valve::VR::InteractionSystem::HapticRack::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.HapticRack.OnHandHoverEnd
void Valve::VR::InteractionSystem::HapticRack::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.HapticRack.Update
void Valve::VR::InteractionSystem::HapticRack::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.HapticRack.Pulse
void Valve::VR::InteractionSystem::HapticRack::Pulse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HapticRack::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.HideOnHandFocusLost
#include "Valve/VR/InteractionSystem/HideOnHandFocusLost.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.HideOnHandFocusLost.OnHandFocusLost
void Valve::VR::InteractionSystem::HideOnHandFocusLost::OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::HideOnHandFocusLost::OnHandFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.IgnoreHovering
#include "Valve/VR/InteractionSystem/IgnoreHovering.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand onlyIgnoreHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::IgnoreHovering::dyn_onlyIgnoreHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::IgnoreHovering::dyn_onlyIgnoreHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onlyIgnoreHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.InputModule
#include "Valve/VR/InteractionSystem/InputModule.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Valve.VR.InteractionSystem.InputModule _instance
::Valve::VR::InteractionSystem::InputModule* Valve::VR::InteractionSystem::InputModule::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::InputModule*>("Valve.VR.InteractionSystem", "InputModule", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.InteractionSystem.InputModule _instance
void Valve::VR::InteractionSystem::InputModule::_set__instance(::Valve::VR::InteractionSystem::InputModule* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "InputModule", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject submitObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::InputModule::dyn_submitObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::dyn_submitObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "submitObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.get_instance
::Valve::VR::InteractionSystem::InputModule* Valve::VR::InteractionSystem::InputModule::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "InputModule", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::InputModule*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.HoverBegin
void Valve::VR::InteractionSystem::InputModule::HoverBegin(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::HoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.HoverEnd
void Valve::VR::InteractionSystem::InputModule::HoverEnd(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::HoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.Submit
void Valve::VR::InteractionSystem::InputModule::Submit(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::Submit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.ShouldActivateModule
bool Valve::VR::InteractionSystem::InputModule::ShouldActivateModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::ShouldActivateModule");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::BaseInputModule*), 21));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.InputModule.Process
void Valve::VR::InteractionSystem::InputModule::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InputModule::Process");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::EventSystems::BaseInputModule*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate
#include "Valve/VR/InteractionSystem/Interactable_OnAttachedToHandDelegate.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate
#include "Valve/VR/InteractionSystem/Interactable_OnDetachedFromHandDelegate.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate onAttachedToHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate*& Valve::VR::InteractionSystem::Interactable::dyn_onAttachedToHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::dyn_onAttachedToHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onAttachedToHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate onDetachedFromHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate*& Valve::VR::InteractionSystem::Interactable::dyn_onDetachedFromHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::dyn_onDetachedFromHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDetachedFromHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.add_onAttachedToHand
void Valve::VR::InteractionSystem::Interactable::add_onAttachedToHand(::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::add_onAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.remove_onAttachedToHand
void Valve::VR::InteractionSystem::Interactable::remove_onAttachedToHand(::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::remove_onAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.add_onDetachedFromHand
void Valve::VR::InteractionSystem::Interactable::add_onDetachedFromHand(::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::add_onDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.remove_onDetachedFromHand
void Valve::VR::InteractionSystem::Interactable::remove_onDetachedFromHand(::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::remove_onDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.OnAttachedToHand
void Valve::VR::InteractionSystem::Interactable::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable.OnDetachedFromHand
void Valve::VR::InteractionSystem::Interactable::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate
#include "Valve/VR/InteractionSystem/Interactable_OnAttachedToHandDelegate.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate.Invoke
void Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::Invoke(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate.BeginInvoke
::System::IAsyncResult* Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::BeginInvoke(::Valve::VR::InteractionSystem::Hand* hand, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, hand, callback, object);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnAttachedToHandDelegate.EndInvoke
void Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnAttachedToHandDelegate*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate
#include "Valve/VR/InteractionSystem/Interactable_OnDetachedFromHandDelegate.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate.Invoke
void Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::Invoke(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate.BeginInvoke
::System::IAsyncResult* Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::BeginInvoke(::Valve::VR::InteractionSystem::Hand* hand, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, hand, callback, object);
}
// Autogenerated method: Valve.VR.InteractionSystem.Interactable/OnDetachedFromHandDelegate.EndInvoke
void Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Interactable::OnDetachedFromHandDelegate*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.InteractableButtonEvents
#include "Valve/VR/InteractionSystem/InteractableButtonEvents.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTriggerDown
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTriggerDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTriggerDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTriggerDown"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTriggerUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTriggerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTriggerUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTriggerUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onGripDown
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onGripDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onGripDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onGripDown"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onGripUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onGripUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onGripUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onGripUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTouchpadDown
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTouchpadDown"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTouchpadUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTouchpadUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTouchpadTouch
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadTouch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTouchpadTouch"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTouchpadRelease
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadRelease() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::dyn_onTouchpadRelease");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTouchpadRelease"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableButtonEvents.Update
void Valve::VR::InteractionSystem::InteractableButtonEvents::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableButtonEvents::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.InteractableHoverEvents
#include "Valve/VR/InteractionSystem/InteractableHoverEvents.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onHandHoverBegin
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onHandHoverBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onHandHoverBegin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onHandHoverBegin"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onHandHoverEnd
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onHandHoverEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onHandHoverEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onHandHoverEnd"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onAttachedToHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onAttachedToHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onAttachedToHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onAttachedToHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onDetachedFromHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onDetachedFromHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::dyn_onDetachedFromHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDetachedFromHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableHoverEvents.OnHandHoverBegin
void Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableHoverEvents.OnHandHoverEnd
void Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableHoverEvents.OnAttachedToHand
void Valve::VR::InteractionSystem::InteractableHoverEvents::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableHoverEvents.OnDetachedFromHand
void Valve::VR::InteractionSystem::InteractableHoverEvents::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableHoverEvents::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ItemPackage
#include "Valve/VR/InteractionSystem/ItemPackage.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String name
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::ItemPackage::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType packageType
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType& Valve::VR::InteractionSystem::ItemPackage::dyn_packageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_packageType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "packageType"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject itemPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackage::dyn_itemPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_itemPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject otherHandItemPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackage::dyn_otherHandItemPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_otherHandItemPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otherHandItemPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject previewPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackage::dyn_previewPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_previewPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject fadedPreviewPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackage::dyn_fadedPreviewPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::dyn_fadedPreviewPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadedPreviewPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ItemPackage/ItemPackageType
#include "Valve/VR/InteractionSystem/ItemPackage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType Unrestricted
::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_Unrestricted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_Unrestricted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType>("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "Unrestricted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType Unrestricted
void Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_Unrestricted(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_Unrestricted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "Unrestricted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType OneHanded
::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_OneHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_OneHanded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType>("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "OneHanded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType OneHanded
void Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_OneHanded(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_OneHanded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "OneHanded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType TwoHanded
::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_TwoHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_get_TwoHanded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType>("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "TwoHanded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ItemPackage/ItemPackageType TwoHanded
void Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_TwoHanded(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::_set_TwoHanded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ItemPackage/ItemPackageType", "TwoHanded", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ItemPackageReference
#include "Valve/VR/InteractionSystem/ItemPackageReference.hpp"
// Including type: Valve.VR.InteractionSystem.ItemPackage
#include "Valve/VR/InteractionSystem/ItemPackage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ItemPackage itemPackage
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage*& Valve::VR::InteractionSystem::ItemPackageReference::dyn_itemPackage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageReference::dyn_itemPackage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemPackage"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ItemPackage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ItemPackageSpawner
#include "Valve/VR/InteractionSystem/ItemPackageSpawner.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ItemPackage _itemPackage
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage*& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn__itemPackage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn__itemPackage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_itemPackage"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ItemPackage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useItemPackagePreview
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_useItemPackagePreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_useItemPackagePreview");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useItemPackagePreview"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useFadedPreview
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_useFadedPreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_useFadedPreview");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useFadedPreview"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject previewObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_previewObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_previewObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previewObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean requireTriggerPressToTake
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_requireTriggerPressToTake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_requireTriggerPressToTake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "requireTriggerPressToTake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean requireTriggerPressToReturn
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_requireTriggerPressToReturn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_requireTriggerPressToReturn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "requireTriggerPressToReturn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showTriggerHint
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_showTriggerHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_showTriggerHint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showTriggerHint"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_attachmentFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_attachmentFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentFlags"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand::AttachmentFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String attachmentPoint
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_attachmentPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_attachmentPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentPoint"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean takeBackItem
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_takeBackItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_takeBackItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "takeBackItem"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean acceptDifferentItems
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_acceptDifferentItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_acceptDifferentItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "acceptDifferentItems"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject spawnedItem
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_spawnedItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_spawnedItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnedItem"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean itemIsSpawned
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_itemIsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_itemIsSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemIsSpawned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent pickupEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_pickupEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_pickupEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pickupEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent dropEvent
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_dropEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_dropEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dropEvent"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean justPickedUpItem
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_justPickedUpItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::dyn_justPickedUpItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "justPickedUpItem"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.get_itemPackage
::Valve::VR::InteractionSystem::ItemPackage* Valve::VR::InteractionSystem::ItemPackageSpawner::get_itemPackage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::get_itemPackage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_itemPackage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::ItemPackage*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.set_itemPackage
void Valve::VR::InteractionSystem::ItemPackageSpawner::set_itemPackage(::Valve::VR::InteractionSystem::ItemPackage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::set_itemPackage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_itemPackage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.CreatePreviewObject
void Valve::VR::InteractionSystem::ItemPackageSpawner::CreatePreviewObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::CreatePreviewObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePreviewObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.Start
void Valve::VR::InteractionSystem::ItemPackageSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.VerifyItemPackage
void Valve::VR::InteractionSystem::ItemPackageSpawner::VerifyItemPackage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::VerifyItemPackage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyItemPackage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.ItemPackageNotValid
void Valve::VR::InteractionSystem::ItemPackageSpawner::ItemPackageNotValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::ItemPackageNotValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ItemPackageNotValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.ClearPreview
void Valve::VR::InteractionSystem::ItemPackageSpawner::ClearPreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::ClearPreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.Update
void Valve::VR::InteractionSystem::ItemPackageSpawner::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.OnHandHoverBegin
void Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.TakeBackItem
void Valve::VR::InteractionSystem::ItemPackageSpawner::TakeBackItem(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::TakeBackItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeBackItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.GetAttachedItemPackage
::Valve::VR::InteractionSystem::ItemPackage* Valve::VR::InteractionSystem::ItemPackageSpawner::GetAttachedItemPackage(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::GetAttachedItemPackage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttachedItemPackage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::ItemPackage*, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.HandHoverUpdate
void Valve::VR::InteractionSystem::ItemPackageSpawner::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.OnHandHoverEnd
void Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.RemoveMatchingItemsFromHandStack
void Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemsFromHandStack(::Valve::VR::InteractionSystem::ItemPackage* package, ::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemsFromHandStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveMatchingItemsFromHandStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(package), ::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, package, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.RemoveMatchingItemTypesFromHand
void Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemTypesFromHand(::Valve::VR::InteractionSystem::ItemPackage::ItemPackageType packageType, ::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::RemoveMatchingItemTypesFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveMatchingItemTypesFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packageType), ::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packageType, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ItemPackageSpawner.SpawnAndAttachObject
void Valve::VR::InteractionSystem::ItemPackageSpawner::SpawnAndAttachObject(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ItemPackageSpawner::SpawnAndAttachObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnAndAttachObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearAnimation
#include "Valve/VR/InteractionSystem/LinearAnimation.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.AnimationState
#include "UnityEngine/AnimationState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearAnimation::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animation animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& Valve::VR::InteractionSystem::LinearAnimation::dyn_animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::dyn_animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationState animState
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationState*& Valve::VR::InteractionSystem::LinearAnimation::dyn_animState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::dyn_animState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animState"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single animLength
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearAnimation::dyn_animLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::dyn_animLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastValue
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearAnimation::dyn_lastValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::dyn_lastValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAnimation.Awake
void Valve::VR::InteractionSystem::LinearAnimation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAnimation.Update
void Valve::VR::InteractionSystem::LinearAnimation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearAnimator
#include "Valve/VR/InteractionSystem/LinearAnimator.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearAnimator::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& Valve::VR::InteractionSystem::LinearAnimator::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentLinearMapping
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearAnimator::dyn_currentLinearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::dyn_currentLinearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentLinearMapping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 framesUnchanged
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::LinearAnimator::dyn_framesUnchanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::dyn_framesUnchanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framesUnchanged"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAnimator.Awake
void Valve::VR::InteractionSystem::LinearAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAnimator.Update
void Valve::VR::InteractionSystem::LinearAnimator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAnimator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearAudioPitch
#include "Valve/VR/InteractionSystem/LinearAudioPitch.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve pitchCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_pitchCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_pitchCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minPitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_minPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_minPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxPitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_maxPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_maxPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean applyContinuously
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_applyContinuously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_applyContinuously");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyContinuously"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::LinearAudioPitch::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAudioPitch.Awake
void Valve::VR::InteractionSystem::LinearAudioPitch::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAudioPitch.Update
void Valve::VR::InteractionSystem::LinearAudioPitch::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearAudioPitch.Apply
void Valve::VR::InteractionSystem::LinearAudioPitch::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearAudioPitch::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearBlendshape
#include "Valve/VR/InteractionSystem/LinearBlendshape.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearBlendshape::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearBlendshape::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer skinnedMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& Valve::VR::InteractionSystem::LinearBlendshape::dyn_skinnedMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearBlendshape::dyn_skinnedMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skinnedMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastValue
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearBlendshape::dyn_lastValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearBlendshape::dyn_lastValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearBlendshape.Awake
void Valve::VR::InteractionSystem::LinearBlendshape::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearBlendshape::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearBlendshape.Update
void Valve::VR::InteractionSystem::LinearBlendshape::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearBlendshape::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearDisplacement
#include "Valve/VR/InteractionSystem/LinearDisplacement.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 displacement
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::LinearDisplacement::dyn_displacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDisplacement::dyn_displacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "displacement"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearDisplacement::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDisplacement::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 initialPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::LinearDisplacement::dyn_initialPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDisplacement::dyn_initialPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDisplacement.Start
void Valve::VR::InteractionSystem::LinearDisplacement::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDisplacement::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDisplacement.Update
void Valve::VR::InteractionSystem::LinearDisplacement::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDisplacement::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearDrive
#include "Valve/VR/InteractionSystem/LinearDrive.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform startPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::LinearDrive::dyn_startPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_startPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform endPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::LinearDrive::dyn_endPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_endPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::LinearDrive::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean repositionGameObject
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::LinearDrive::dyn_repositionGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_repositionGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "repositionGameObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean maintainMomemntum
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::LinearDrive::dyn_maintainMomemntum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_maintainMomemntum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainMomemntum"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single momemtumDampenRate
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearDrive::dyn_momemtumDampenRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_momemtumDampenRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "momemtumDampenRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialMappingOffset
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearDrive::dyn_initialMappingOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_initialMappingOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialMappingOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numMappingChangeSamples
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::LinearDrive::dyn_numMappingChangeSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_numMappingChangeSamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numMappingChangeSamples"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] mappingChangeSamples
[[deprecated("Use field access instead!")]] ::ArrayW<float>& Valve::VR::InteractionSystem::LinearDrive::dyn_mappingChangeSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_mappingChangeSamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mappingChangeSamples"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single prevMapping
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearDrive::dyn_prevMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_prevMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevMapping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mappingChangeRate
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearDrive::dyn_mappingChangeRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_mappingChangeRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mappingChangeRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 sampleCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::LinearDrive::dyn_sampleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::dyn_sampleCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sampleCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.Awake
void Valve::VR::InteractionSystem::LinearDrive::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.Start
void Valve::VR::InteractionSystem::LinearDrive::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.HandHoverUpdate
void Valve::VR::InteractionSystem::LinearDrive::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.CalculateMappingChangeRate
void Valve::VR::InteractionSystem::LinearDrive::CalculateMappingChangeRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::CalculateMappingChangeRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateMappingChangeRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.UpdateLinearMapping
void Valve::VR::InteractionSystem::LinearDrive::UpdateLinearMapping(::UnityEngine::Transform* tr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::UpdateLinearMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLinearMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tr);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.CalculateLinearMapping
float Valve::VR::InteractionSystem::LinearDrive::CalculateLinearMapping(::UnityEngine::Transform* tr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::CalculateLinearMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLinearMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tr)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, tr);
}
// Autogenerated method: Valve.VR.InteractionSystem.LinearDrive.Update
void Valve::VR::InteractionSystem::LinearDrive::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearDrive::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single value
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::LinearMapping::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::LinearMapping::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Valve.VR.InteractionSystem.Player _instance
::Valve::VR::InteractionSystem::Player* Valve::VR::InteractionSystem::Player::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Player*>("Valve.VR.InteractionSystem", "Player", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.InteractionSystem.Player _instance
void Valve::VR::InteractionSystem::Player::_set__instance(::Valve::VR::InteractionSystem::Player* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Player", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform trackingOriginTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Player::dyn_trackingOriginTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_trackingOriginTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingOriginTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] hmdTransforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& Valve::VR::InteractionSystem::Player::dyn_hmdTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_hmdTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hmdTransforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand[] hands
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::InteractionSystem::Hand*>& Valve::VR::InteractionSystem::Player::dyn_hands() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_hands");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hands"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::InteractionSystem::Hand*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider headCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& Valve::VR::InteractionSystem::Player::dyn_headCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_headCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rigSteamVR
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Player::dyn_rigSteamVR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_rigSteamVR");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigSteamVR"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rig2DFallback
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Player::dyn_rig2DFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_rig2DFallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rig2DFallback"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform audioListener
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Player::dyn_audioListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_audioListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioListener"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowToggleTo2D
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Player::dyn_allowToggleTo2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::dyn_allowToggleTo2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowToggleTo2D"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_instance
::Valve::VR::InteractionSystem::Player* Valve::VR::InteractionSystem::Player::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Player", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Player*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_handCount
int Valve::VR::InteractionSystem::Player::get_handCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_handCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.GetHand
::Valve::VR::InteractionSystem::Hand* Valve::VR::InteractionSystem::Player::GetHand(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::GetHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Hand*, false>(this, ___internal__method, i);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_leftHand
::Valve::VR::InteractionSystem::Hand* Valve::VR::InteractionSystem::Player::get_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_leftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Hand*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_rightHand
::Valve::VR::InteractionSystem::Hand* Valve::VR::InteractionSystem::Player::get_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_rightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Hand*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_leftController
::GlobalNamespace::SteamVR_Controller::Device* Valve::VR::InteractionSystem::Player::get_leftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_leftController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Controller::Device*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_rightController
::GlobalNamespace::SteamVR_Controller::Device* Valve::VR::InteractionSystem::Player::get_rightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_rightController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Controller::Device*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_hmdTransform
::UnityEngine::Transform* Valve::VR::InteractionSystem::Player::get_hmdTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_hmdTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hmdTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_eyeHeight
float Valve::VR::InteractionSystem::Player::get_eyeHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_eyeHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyeHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_feetPositionGuess
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Player::get_feetPositionGuess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_feetPositionGuess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_feetPositionGuess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.get_bodyDirectionGuess
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Player::get_bodyDirectionGuess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::get_bodyDirectionGuess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bodyDirectionGuess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.Awake
void Valve::VR::InteractionSystem::Player::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.OnEnable
void Valve::VR::InteractionSystem::Player::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.OnDrawGizmos
void Valve::VR::InteractionSystem::Player::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.Draw2DDebug
void Valve::VR::InteractionSystem::Player::Draw2DDebug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::Draw2DDebug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Draw2DDebug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.ActivateRig
void Valve::VR::InteractionSystem::Player::ActivateRig(::UnityEngine::GameObject* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::ActivateRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig);
}
// Autogenerated method: Valve.VR.InteractionSystem.Player.PlayerShotSelf
void Valve::VR::InteractionSystem::Player::PlayerShotSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Player::PlayerShotSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerShotSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.PlaySound
#include "Valve/VR/InteractionSystem/PlaySound.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] waveFile
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& Valve::VR::InteractionSystem::PlaySound::dyn_waveFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_waveFile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waveFile"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean stopOnPlay
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_stopOnPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_stopOnPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stopOnPlay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableOnEnd
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_disableOnEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_disableOnEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableOnEnd"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean looping
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_looping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_looping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "looping"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean stopOnEnd
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_stopOnEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_stopOnEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stopOnEnd"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean playOnAwakeWithDelay
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_playOnAwakeWithDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_playOnAwakeWithDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playOnAwakeWithDelay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useRandomVolume
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_useRandomVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_useRandomVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useRandomVolume"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single volMin
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_volMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_volMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single volMax
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_volMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_volMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useRandomPitch
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_useRandomPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_useRandomPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useRandomPitch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchMin
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_pitchMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_pitchMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchMax
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_pitchMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_pitchMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useRetriggerTime
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_useRetriggerTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_useRetriggerTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useRetriggerTime"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeInitial
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_timeInitial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_timeInitial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeInitial"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeMin
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_timeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_timeMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeMax
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_timeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_timeMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useRandomSilence
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::PlaySound::dyn_useRandomSilence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_useRandomSilence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useRandomSilence"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single percentToNotPlay
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_percentToNotPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_percentToNotPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "percentToNotPlay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delayOffsetTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::PlaySound::dyn_delayOffsetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_delayOffsetTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delayOffsetTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::PlaySound::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip clip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::PlaySound::dyn_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::dyn_clip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.Awake
void Valve::VR::InteractionSystem::PlaySound::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.Play
void Valve::VR::InteractionSystem::PlaySound::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.PlayWithDelay
void Valve::VR::InteractionSystem::PlaySound::PlayWithDelay(float delayTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::PlayWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delayTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delayTime);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.PlayOneShotSound
::UnityEngine::AudioClip* Valve::VR::InteractionSystem::PlaySound::PlayOneShotSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::PlayOneShotSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayOneShotSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.PlayLooping
::UnityEngine::AudioClip* Valve::VR::InteractionSystem::PlaySound::PlayLooping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::PlayLooping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayLooping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.Disable
void Valve::VR::InteractionSystem::PlaySound::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.Stop
void Valve::VR::InteractionSystem::PlaySound::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.PlaySound.SetAudioSource
void Valve::VR::InteractionSystem::PlaySound::SetAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::PlaySound::SetAudioSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAudioSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SeeThru
#include "Valve/VR/InteractionSystem/SeeThru.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material seeThruMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::SeeThru::dyn_seeThruMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::dyn_seeThruMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seeThruMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject seeThru
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::SeeThru::dyn_seeThru() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::dyn_seeThru");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seeThru"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Interactable interactable
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable*& Valve::VR::InteractionSystem::SeeThru::dyn_interactable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::dyn_interactable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactable"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer sourceRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& Valve::VR::InteractionSystem::SeeThru::dyn_sourceRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::dyn_sourceRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer destRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& Valve::VR::InteractionSystem::SeeThru::dyn_destRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::dyn_destRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.Awake
void Valve::VR::InteractionSystem::SeeThru::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.OnEnable
void Valve::VR::InteractionSystem::SeeThru::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.OnDisable
void Valve::VR::InteractionSystem::SeeThru::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.AttachedToHand
void Valve::VR::InteractionSystem::SeeThru::AttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::AttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.DetachedFromHand
void Valve::VR::InteractionSystem::SeeThru::DetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::DetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.SeeThru.Update
void Valve::VR::InteractionSystem::SeeThru::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SeeThru::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SleepOnAwake
#include "Valve/VR/InteractionSystem/SleepOnAwake.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.SleepOnAwake.Awake
void Valve::VR::InteractionSystem::SleepOnAwake::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SleepOnAwake::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SoundDeparent
#include "Valve/VR/InteractionSystem/SoundDeparent.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean destroyAfterPlayOnce
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::SoundDeparent::dyn_destroyAfterPlayOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundDeparent::dyn_destroyAfterPlayOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destroyAfterPlayOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource thisAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::SoundDeparent::dyn_thisAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundDeparent::dyn_thisAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundDeparent.Awake
void Valve::VR::InteractionSystem::SoundDeparent::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundDeparent::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundDeparent.Start
void Valve::VR::InteractionSystem::SoundDeparent::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundDeparent::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] waveFiles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_waveFiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_waveFiles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waveFiles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource thisAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_thisAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_thisAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single volMin
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_volMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_volMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single volMax
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_volMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_volMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchMin
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_pitchMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_pitchMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchMax
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_pitchMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_pitchMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean playOnAwake
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_playOnAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::dyn_playOnAwake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playOnAwake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundPlayOneshot.Awake
void Valve::VR::InteractionSystem::SoundPlayOneshot::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundPlayOneshot.Play
void Valve::VR::InteractionSystem::SoundPlayOneshot::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundPlayOneshot.Pause
void Valve::VR::InteractionSystem::SoundPlayOneshot::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundPlayOneshot.UnPause
void Valve::VR::InteractionSystem::SoundPlayOneshot::UnPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundPlayOneshot::UnPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SpawnAndAttachAfterControllerIsTracking
#include "Valve/VR/InteractionSystem/SpawnAndAttachAfterControllerIsTracking.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject itemPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::dyn_itemPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::dyn_itemPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnAndAttachAfterControllerIsTracking.Start
void Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnAndAttachAfterControllerIsTracking.Update
void Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachAfterControllerIsTracking::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SpawnAndAttachToHand
#include "Valve/VR/InteractionSystem/SpawnAndAttachToHand.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::SpawnAndAttachToHand::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachToHand::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject prefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::SpawnAndAttachToHand::dyn_prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachToHand::dyn_prefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnAndAttachToHand.SpawnAndAttach
void Valve::VR::InteractionSystem::SpawnAndAttachToHand::SpawnAndAttach(::Valve::VR::InteractionSystem::Hand* passedInhand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnAndAttachToHand::SpawnAndAttach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnAndAttach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(passedInhand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, passedInhand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SpawnRenderModel
#include "Valve/VR/InteractionSystem/SpawnRenderModel.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.SpawnRenderModel> spawnRenderModels
::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::SpawnRenderModel*>* Valve::VR::InteractionSystem::SpawnRenderModel::_get_spawnRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_get_spawnRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::SpawnRenderModel*>*>("Valve.VR.InteractionSystem", "SpawnRenderModel", "spawnRenderModels"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.SpawnRenderModel> spawnRenderModels
void Valve::VR::InteractionSystem::SpawnRenderModel::_set_spawnRenderModels(::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::SpawnRenderModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_set_spawnRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "SpawnRenderModel", "spawnRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 lastFrameUpdated
int Valve::VR::InteractionSystem::SpawnRenderModel::_get_lastFrameUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_get_lastFrameUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Valve.VR.InteractionSystem", "SpawnRenderModel", "lastFrameUpdated"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lastFrameUpdated
void Valve::VR::InteractionSystem::SpawnRenderModel::_set_lastFrameUpdated(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_set_lastFrameUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "SpawnRenderModel", "lastFrameUpdated", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 spawnRenderModelUpdateIndex
int Valve::VR::InteractionSystem::SpawnRenderModel::_get_spawnRenderModelUpdateIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_get_spawnRenderModelUpdateIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Valve.VR.InteractionSystem", "SpawnRenderModel", "spawnRenderModelUpdateIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 spawnRenderModelUpdateIndex
void Valve::VR::InteractionSystem::SpawnRenderModel::_set_spawnRenderModelUpdateIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::_set_spawnRenderModelUpdateIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "SpawnRenderModel", "spawnRenderModelUpdateIndex", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material[] materials
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& Valve::VR::InteractionSystem::SpawnRenderModel::dyn_materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::dyn_materials");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materials"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_RenderModel[] renderModels
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SteamVR_RenderModel*>& Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderModels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModels"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SteamVR_RenderModel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::SpawnRenderModel::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action renderModelLoadedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderModelLoadedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::dyn_renderModelLoadedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModelLoadedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.Awake
void Valve::VR::InteractionSystem::SpawnRenderModel::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.OnEnable
void Valve::VR::InteractionSystem::SpawnRenderModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.OnDisable
void Valve::VR::InteractionSystem::SpawnRenderModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.OnAttachedToHand
void Valve::VR::InteractionSystem::SpawnRenderModel::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.OnDetachedFromHand
void Valve::VR::InteractionSystem::SpawnRenderModel::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.Update
void Valve::VR::InteractionSystem::SpawnRenderModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.ShowController
void Valve::VR::InteractionSystem::SpawnRenderModel::ShowController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::ShowController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.HideController
void Valve::VR::InteractionSystem::SpawnRenderModel::HideController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::HideController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel.OnRenderModelLoaded
void Valve::VR::InteractionSystem::SpawnRenderModel::OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool success) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::OnRenderModelLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderModelLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModel), ::il2cpp_utils::ExtractType(success)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderModel, success);
}
// Autogenerated method: Valve.VR.InteractionSystem.SpawnRenderModel..cctor
void Valve::VR::InteractionSystem::SpawnRenderModel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SpawnRenderModel::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "SpawnRenderModel", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Throwable
#include "Valve/VR/InteractionSystem/Throwable.hpp"
// Including type: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24
#include "Valve/VR/InteractionSystem/Throwable_-LateDetach-d__24.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: Valve.VR.InteractionSystem.VelocityEstimator
#include "Valve/VR/InteractionSystem/VelocityEstimator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& Valve::VR::InteractionSystem::Throwable::dyn_attachmentFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachmentFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentFlags"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand::AttachmentFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String attachmentPoint
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::Throwable::dyn_attachmentPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachmentPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentPoint"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single catchSpeedThreshold
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Throwable::dyn_catchSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_catchSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "catchSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean restoreOriginalParent
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Throwable::dyn_restoreOriginalParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_restoreOriginalParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "restoreOriginalParent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean attachEaseIn
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Throwable::dyn_attachEaseIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachEaseIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachEaseIn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve snapAttachEaseInCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "snapAttachEaseInCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single snapAttachEaseInTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "snapAttachEaseInTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] attachEaseInAttachmentNames
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& Valve::VR::InteractionSystem::Throwable::dyn_attachEaseInAttachmentNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachEaseInAttachmentNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachEaseInAttachmentNames"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.VelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::VelocityEstimator*& Valve::VR::InteractionSystem::Throwable::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::VelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean attached
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Throwable::dyn_attached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attached"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single attachTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Throwable::dyn_attachTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 attachPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Throwable::dyn_attachPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion attachRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Throwable::dyn_attachRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform attachEaseInTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Throwable::dyn_attachEaseInTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_attachEaseInTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachEaseInTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onPickUp
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::Throwable::dyn_onPickUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_onPickUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPickUp"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onDetachFromHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::Throwable::dyn_onDetachFromHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_onDetachFromHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDetachFromHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean snapAttachEaseInCompleted
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::dyn_snapAttachEaseInCompleted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "snapAttachEaseInCompleted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.Awake
void Valve::VR::InteractionSystem::Throwable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnHandHoverBegin
void Valve::VR::InteractionSystem::Throwable::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnHandHoverEnd
void Valve::VR::InteractionSystem::Throwable::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.HandHoverUpdate
void Valve::VR::InteractionSystem::Throwable::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnAttachedToHand
void Valve::VR::InteractionSystem::Throwable::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnDetachedFromHand
void Valve::VR::InteractionSystem::Throwable::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.HandAttachedUpdate
void Valve::VR::InteractionSystem::Throwable::HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::HandAttachedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandAttachedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.LateDetach
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::Throwable::LateDetach(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::LateDetach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDetach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnHandFocusAcquired
void Valve::VR::InteractionSystem::Throwable::OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnHandFocusAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable.OnHandFocusLost
void Valve::VR::InteractionSystem::Throwable::OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::OnHandFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24
#include "Valve/VR/InteractionSystem/Throwable_-LateDetach-d__24.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Throwable <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Throwable*& Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Throwable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24.MoveNext
bool Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Throwable/<LateDetach>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Throwable::$LateDetach$d__24*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.UIElement
#include "Valve/VR/InteractionSystem/UIElement.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: Valve.VR.InteractionSystem.CustomEvents/UnityEventHand
#include "Valve/VR/InteractionSystem/CustomEvents_UnityEventHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.CustomEvents/UnityEventHand onHandClick
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::CustomEvents::UnityEventHand*& Valve::VR::InteractionSystem::UIElement::dyn_onHandClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::dyn_onHandClick");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onHandClick"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::CustomEvents::UnityEventHand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand currentHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::UIElement::dyn_currentHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::dyn_currentHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.UIElement.Awake
void Valve::VR::InteractionSystem::UIElement::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.UIElement.OnHandHoverBegin
void Valve::VR::InteractionSystem::UIElement::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.UIElement.OnHandHoverEnd
void Valve::VR::InteractionSystem::UIElement::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.UIElement.HandHoverUpdate
void Valve::VR::InteractionSystem::UIElement::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.UIElement.OnButtonClick
void Valve::VR::InteractionSystem::UIElement::OnButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::UIElement::OnButtonClick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnButtonClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Unparent
#include "Valve/VR/InteractionSystem/Unparent.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform oldParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Unparent::dyn_oldParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Unparent::dyn_oldParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Unparent.Start
void Valve::VR::InteractionSystem::Unparent::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Unparent::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Unparent.Update
void Valve::VR::InteractionSystem::Unparent::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Unparent::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Unparent.GetOldParent
::UnityEngine::Transform* Valve::VR::InteractionSystem::Unparent::GetOldParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Unparent::GetOldParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOldParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Util
#include "Valve/VR/InteractionSystem/Util.hpp"
// Including type: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43
#include "Valve/VR/InteractionSystem/Util_-WrapCoroutine-d__43.hpp"
// Including type: Valve.VR.InteractionSystem.Util/<>c__47`1
#include "Valve/VR/InteractionSystem/Util_--c__47_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.SendMessageOptions
#include "UnityEngine/SendMessageOptions.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.AI.NavMeshPath
#include "UnityEngine/AI/NavMeshPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single FeetToMeters
float Valve::VR::InteractionSystem::Util::_get_FeetToMeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_FeetToMeters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "FeetToMeters"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FeetToMeters
void Valve::VR::InteractionSystem::Util::_set_FeetToMeters(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_FeetToMeters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "FeetToMeters", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single FeetToCentimeters
float Valve::VR::InteractionSystem::Util::_get_FeetToCentimeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_FeetToCentimeters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "FeetToCentimeters"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FeetToCentimeters
void Valve::VR::InteractionSystem::Util::_set_FeetToCentimeters(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_FeetToCentimeters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "FeetToCentimeters", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single InchesToMeters
float Valve::VR::InteractionSystem::Util::_get_InchesToMeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_InchesToMeters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "InchesToMeters"));
}
// Autogenerated static field setter
// Set static field: static public System.Single InchesToMeters
void Valve::VR::InteractionSystem::Util::_set_InchesToMeters(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_InchesToMeters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "InchesToMeters", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single InchesToCentimeters
float Valve::VR::InteractionSystem::Util::_get_InchesToCentimeters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_InchesToCentimeters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "InchesToCentimeters"));
}
// Autogenerated static field setter
// Set static field: static public System.Single InchesToCentimeters
void Valve::VR::InteractionSystem::Util::_set_InchesToCentimeters(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_InchesToCentimeters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "InchesToCentimeters", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single MetersToFeet
float Valve::VR::InteractionSystem::Util::_get_MetersToFeet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_MetersToFeet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "MetersToFeet"));
}
// Autogenerated static field setter
// Set static field: static public System.Single MetersToFeet
void Valve::VR::InteractionSystem::Util::_set_MetersToFeet(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_MetersToFeet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "MetersToFeet", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single MetersToInches
float Valve::VR::InteractionSystem::Util::_get_MetersToInches() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_MetersToInches");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "MetersToInches"));
}
// Autogenerated static field setter
// Set static field: static public System.Single MetersToInches
void Valve::VR::InteractionSystem::Util::_set_MetersToInches(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_MetersToInches");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "MetersToInches", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single CentimetersToFeet
float Valve::VR::InteractionSystem::Util::_get_CentimetersToFeet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_CentimetersToFeet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "CentimetersToFeet"));
}
// Autogenerated static field setter
// Set static field: static public System.Single CentimetersToFeet
void Valve::VR::InteractionSystem::Util::_set_CentimetersToFeet(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_CentimetersToFeet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "CentimetersToFeet", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single CentimetersToInches
float Valve::VR::InteractionSystem::Util::_get_CentimetersToInches() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_CentimetersToInches");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "CentimetersToInches"));
}
// Autogenerated static field setter
// Set static field: static public System.Single CentimetersToInches
void Valve::VR::InteractionSystem::Util::_set_CentimetersToInches(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_CentimetersToInches");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "CentimetersToInches", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single KilometersToMiles
float Valve::VR::InteractionSystem::Util::_get_KilometersToMiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_KilometersToMiles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "KilometersToMiles"));
}
// Autogenerated static field setter
// Set static field: static public System.Single KilometersToMiles
void Valve::VR::InteractionSystem::Util::_set_KilometersToMiles(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_KilometersToMiles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "KilometersToMiles", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single MilesToKilometers
float Valve::VR::InteractionSystem::Util::_get_MilesToKilometers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_get_MilesToKilometers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Util", "MilesToKilometers"));
}
// Autogenerated static field setter
// Set static field: static public System.Single MilesToKilometers
void Valve::VR::InteractionSystem::Util::_set_MilesToKilometers(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::_set_MilesToKilometers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Util", "MilesToKilometers", value));
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.RemapNumber
float Valve::VR::InteractionSystem::Util::RemapNumber(float num, float low1, float high1, float low2, float high2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::RemapNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "RemapNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num), ::il2cpp_utils::ExtractType(low1), ::il2cpp_utils::ExtractType(high1), ::il2cpp_utils::ExtractType(low2), ::il2cpp_utils::ExtractType(high2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, num, low1, high1, low2, high2);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.RemapNumberClamped
float Valve::VR::InteractionSystem::Util::RemapNumberClamped(float num, float low1, float high1, float low2, float high2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::RemapNumberClamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "RemapNumberClamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num), ::il2cpp_utils::ExtractType(low1), ::il2cpp_utils::ExtractType(high1), ::il2cpp_utils::ExtractType(low2), ::il2cpp_utils::ExtractType(high2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, num, low1, high1, low2, high2);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Approach
float Valve::VR::InteractionSystem::Util::Approach(float target, float value, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Approach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Approach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target, value, speed);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.BezierInterpolate3
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Util::BezierInterpolate3(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 c0, ::UnityEngine::Vector3 p1, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::BezierInterpolate3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "BezierInterpolate3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(c0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, c0, p1, t);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.BezierInterpolate4
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Util::BezierInterpolate4(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 c0, ::UnityEngine::Vector3 c1, ::UnityEngine::Vector3 p1, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::BezierInterpolate4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "BezierInterpolate4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(c0), ::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, c0, c1, p1, t);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Vector3FromString
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Util::Vector3FromString(::StringW szString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Vector3FromString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Vector3FromString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(szString)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, szString);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Vector2FromString
::UnityEngine::Vector2 Valve::VR::InteractionSystem::Util::Vector2FromString(::StringW szString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Vector2FromString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Vector2FromString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(szString)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, szString);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Normalize
float Valve::VR::InteractionSystem::Util::Normalize(float value, float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, min, max);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Vector2AsVector3
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Util::Vector2AsVector3(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Vector2AsVector3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Vector2AsVector3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Vector3AsVector2
::UnityEngine::Vector2 Valve::VR::InteractionSystem::Util::Vector3AsVector2(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Vector3AsVector2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Vector3AsVector2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.AngleOf
float Valve::VR::InteractionSystem::Util::AngleOf(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::AngleOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "AngleOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.YawOf
float Valve::VR::InteractionSystem::Util::YawOf(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::YawOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "YawOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.RandomWithLookback
int Valve::VR::InteractionSystem::Util::RandomWithLookback(int min, int max, ::System::Collections::Generic::List_1<int>* history, int historyCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::RandomWithLookback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "RandomWithLookback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(history), ::il2cpp_utils::ExtractType(historyCount)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, min, max, history, historyCount);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.FindChild
::UnityEngine::Transform* Valve::VR::InteractionSystem::Util::FindChild(::UnityEngine::Transform* parent, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FindChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FindChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, parent, name);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.SwitchLayerRecursively
void Valve::VR::InteractionSystem::Util::SwitchLayerRecursively(::UnityEngine::Transform* transform, int fromLayer, int toLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::SwitchLayerRecursively");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "SwitchLayerRecursively", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(fromLayer), ::il2cpp_utils::ExtractType(toLayer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, fromLayer, toLayer);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.DrawCross
void Valve::VR::InteractionSystem::Util::DrawCross(::UnityEngine::Vector3 origin, ::UnityEngine::Color crossColor, float size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::DrawCross");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "DrawCross", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(crossColor), ::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, origin, crossColor, size);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.ResetTransform
void Valve::VR::InteractionSystem::Util::ResetTransform(::UnityEngine::Transform* t, bool resetScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::ResetTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "ResetTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(resetScale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, resetScale);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.ClosestPointOnLine
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Util::ClosestPointOnLine(::UnityEngine::Vector3 vA, ::UnityEngine::Vector3 vB, ::UnityEngine::Vector3 vPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::ClosestPointOnLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "ClosestPointOnLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vA), ::il2cpp_utils::ExtractType(vB), ::il2cpp_utils::ExtractType(vPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vA, vB, vPoint);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.AfterTimer
void Valve::VR::InteractionSystem::Util::AfterTimer(::UnityEngine::GameObject* go, float _time, ::System::Action* callback, bool trigger_if_destroyed_early) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::AfterTimer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "AfterTimer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(_time), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(trigger_if_destroyed_early)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, go, _time, callback, trigger_if_destroyed_early);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.SendPhysicsMessage
void Valve::VR::InteractionSystem::Util::SendPhysicsMessage(::UnityEngine::Collider* collider, ::StringW message, ::UnityEngine::SendMessageOptions sendMessageOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::SendPhysicsMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "SendPhysicsMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(sendMessageOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, collider, message, sendMessageOptions);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.SendPhysicsMessage
void Valve::VR::InteractionSystem::Util::SendPhysicsMessage(::UnityEngine::Collider* collider, ::StringW message, ::Il2CppObject* arg, ::UnityEngine::SendMessageOptions sendMessageOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::SendPhysicsMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "SendPhysicsMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(sendMessageOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, collider, message, arg, sendMessageOptions);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.IgnoreCollisions
void Valve::VR::InteractionSystem::Util::IgnoreCollisions(::UnityEngine::GameObject* goA, ::UnityEngine::GameObject* goB) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::IgnoreCollisions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "IgnoreCollisions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goA), ::il2cpp_utils::ExtractType(goB)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, goA, goB);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.WrapCoroutine
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::Util::WrapCoroutine(::System::Collections::IEnumerator* coroutine, ::System::Action* onCoroutineFinished) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::WrapCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "WrapCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(coroutine), ::il2cpp_utils::ExtractType(onCoroutineFinished)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, coroutine, onCoroutineFinished);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.ColorWithAlpha
::UnityEngine::Color Valve::VR::InteractionSystem::Util::ColorWithAlpha(::UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::ColorWithAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "ColorWithAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, color, alpha);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.Quit
void Valve::VR::InteractionSystem::Util::Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::Quit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "Quit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.FloatToDecimal
::System::Decimal Valve::VR::InteractionSystem::Util::FloatToDecimal(float value, int decimalPlaces) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FloatToDecimal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FloatToDecimal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(decimalPlaces)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Decimal, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, decimalPlaces);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.FixupNewlines
::StringW Valve::VR::InteractionSystem::Util::FixupNewlines(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::FixupNewlines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "FixupNewlines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.PathLength
float Valve::VR::InteractionSystem::Util::PathLength(::UnityEngine::AI::NavMeshPath* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::PathLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "PathLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, path);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.HasCommandLineArgument
bool Valve::VR::InteractionSystem::Util::HasCommandLineArgument(::StringW argumentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::HasCommandLineArgument");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "HasCommandLineArgument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argumentName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, argumentName);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.GetCommandLineArgValue
int Valve::VR::InteractionSystem::Util::GetCommandLineArgValue(::StringW argumentName, int nDefaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::GetCommandLineArgValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "GetCommandLineArgValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argumentName), ::il2cpp_utils::ExtractType(nDefaultValue)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, argumentName, nDefaultValue);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.GetCommandLineArgValue
float Valve::VR::InteractionSystem::Util::GetCommandLineArgValue(::StringW argumentName, float flDefaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::GetCommandLineArgValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "GetCommandLineArgValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argumentName), ::il2cpp_utils::ExtractType(flDefaultValue)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, argumentName, flDefaultValue);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.SetActive
void Valve::VR::InteractionSystem::Util::SetActive(::UnityEngine::GameObject* gameObject, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject, active);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util.CombinePaths
::StringW Valve::VR::InteractionSystem::Util::CombinePaths(::ArrayW<::StringW> paths) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::CombinePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Util", "CombinePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(paths)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, paths);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43
#include "Valve/VR/InteractionSystem/Util_-WrapCoroutine-d__43.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.IEnumerator coroutine
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_coroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_coroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "coroutine"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action onCoroutineFinished
[[deprecated("Use field access instead!")]] ::System::Action*& Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_onCoroutineFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::dyn_onCoroutineFinished");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onCoroutineFinished"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43.MoveNext
bool Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Util/<WrapCoroutine>d__43.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Util::$WrapCoroutine$d__43*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.AfterTimer_Component
#include "Valve/VR/InteractionSystem/AfterTimer_Component.hpp"
// Including type: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5
#include "Valve/VR/InteractionSystem/AfterTimer_Component_-Wait-d__5.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Action callback
[[deprecated("Use field access instead!")]] ::System::Action*& Valve::VR::InteractionSystem::AfterTimer_Component::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single triggerTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::AfterTimer_Component::dyn_triggerTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::dyn_triggerTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean timerActive
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::AfterTimer_Component::dyn_timerActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::dyn_timerActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timerActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean triggerOnEarlyDestroy
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::AfterTimer_Component::dyn_triggerOnEarlyDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::dyn_triggerOnEarlyDestroy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerOnEarlyDestroy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component.Init
void Valve::VR::InteractionSystem::AfterTimer_Component::Init(float _time, ::System::Action* _callback, bool earlydestroy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_time), ::il2cpp_utils::ExtractType(_callback), ::il2cpp_utils::ExtractType(earlydestroy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, _time, _callback, earlydestroy);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component.Wait
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::AfterTimer_Component::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component.OnDestroy
void Valve::VR::InteractionSystem::AfterTimer_Component::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5
#include "Valve/VR/InteractionSystem/AfterTimer_Component_-Wait-d__5.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.AfterTimer_Component <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::AfterTimer_Component*& Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::AfterTimer_Component**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5.MoveNext
bool Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.AfterTimer_Component/<Wait>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::AfterTimer_Component::$Wait$d__5*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.VelocityEstimator
#include "Valve/VR/InteractionSystem/VelocityEstimator.hpp"
// Including type: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13
#include "Valve/VR/InteractionSystem/VelocityEstimator_-EstimateVelocityCoroutine-d__13.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 velocityAverageFrames
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::VelocityEstimator::dyn_velocityAverageFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_velocityAverageFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityAverageFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 angularVelocityAverageFrames
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::VelocityEstimator::dyn_angularVelocityAverageFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_angularVelocityAverageFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angularVelocityAverageFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean estimateOnAwake
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::VelocityEstimator::dyn_estimateOnAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_estimateOnAwake");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "estimateOnAwake"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine routine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& Valve::VR::InteractionSystem::VelocityEstimator::dyn_routine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_routine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "routine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 sampleCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::VelocityEstimator::dyn_sampleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_sampleCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sampleCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] velocitySamples
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& Valve::VR::InteractionSystem::VelocityEstimator::dyn_velocitySamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_velocitySamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocitySamples"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] angularVelocitySamples
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& Valve::VR::InteractionSystem::VelocityEstimator::dyn_angularVelocitySamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::dyn_angularVelocitySamples");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angularVelocitySamples"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.BeginEstimatingVelocity
void Valve::VR::InteractionSystem::VelocityEstimator::BeginEstimatingVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::BeginEstimatingVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginEstimatingVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.FinishEstimatingVelocity
void Valve::VR::InteractionSystem::VelocityEstimator::FinishEstimatingVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::FinishEstimatingVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishEstimatingVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.GetVelocityEstimate
::UnityEngine::Vector3 Valve::VR::InteractionSystem::VelocityEstimator::GetVelocityEstimate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::GetVelocityEstimate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVelocityEstimate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.GetAngularVelocityEstimate
::UnityEngine::Vector3 Valve::VR::InteractionSystem::VelocityEstimator::GetAngularVelocityEstimate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::GetAngularVelocityEstimate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAngularVelocityEstimate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.GetAccelerationEstimate
::UnityEngine::Vector3 Valve::VR::InteractionSystem::VelocityEstimator::GetAccelerationEstimate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::GetAccelerationEstimate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAccelerationEstimate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.Awake
void Valve::VR::InteractionSystem::VelocityEstimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator.EstimateVelocityCoroutine
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::VelocityEstimator::EstimateVelocityCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::EstimateVelocityCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EstimateVelocityCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13
#include "Valve/VR/InteractionSystem/VelocityEstimator_-EstimateVelocityCoroutine-d__13.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.VelocityEstimator <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::VelocityEstimator*& Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::VelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <previousPosition>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$previousPosition$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$previousPosition$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<previousPosition>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion <previousRotation>5__3
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$previousRotation$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::dyn_$previousRotation$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<previousRotation>5__3"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13.MoveNext
bool Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.VelocityEstimator/<EstimateVelocityCoroutine>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::VelocityEstimator::$EstimateVelocityCoroutine$d__13*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints
#include "Valve/VR/InteractionSystem/ControllerButtonHints.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType
#include "Valve/VR/InteractionSystem/ControllerButtonHints_OffsetType.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo
#include "Valve/VR/InteractionSystem/ControllerButtonHints_ButtonHintInfo.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36
#include "Valve/VR/InteractionSystem/ControllerButtonHints_-TestButtonHints-d__36.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37
#include "Valve/VR/InteractionSystem/ControllerButtonHints_-TestTextHints-d__37.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material controllerMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_controllerMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_controllerMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color flashColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_flashColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_flashColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject textHintPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_textHintPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_textHintPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textHintPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean debugHints
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_debugHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_debugHints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugHints"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_RenderModel renderModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_RenderModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Player player
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.MeshRenderer> flashingRenderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_flashingRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_flashingRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashingRenderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single startTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_startTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single tickCount
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_tickCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_tickCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickCount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<Valve.VR.EVRButtonId,Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo> buttonHintInfos
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Valve::VR::EVRButtonId, ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*>*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_buttonHintInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_buttonHintInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonHintInfos"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Valve::VR::EVRButtonId, ::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform textHintParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_textHintParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_textHintParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textHintParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.String,System.UInt64>> componentButtonMasks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::StringW, uint64_t>>*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_componentButtonMasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_componentButtonMasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentButtonMasks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::StringW, uint64_t>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 colorID
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_colorID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_$initialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_$initialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 centerPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_centerPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_centerPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action renderModelLoadedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderModelLoadedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::dyn_renderModelLoadedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModelLoadedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.get_initialized
bool Valve::VR::InteractionSystem::ControllerButtonHints::get_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::get_initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.set_initialized
void Valve::VR::InteractionSystem::ControllerButtonHints::set_initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::set_initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.Awake
void Valve::VR::InteractionSystem::ControllerButtonHints::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.Start
void Valve::VR::InteractionSystem::ControllerButtonHints::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HintDebugLog
void Valve::VR::InteractionSystem::ControllerButtonHints::HintDebugLog(::StringW msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HintDebugLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HintDebugLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.OnEnable
void Valve::VR::InteractionSystem::ControllerButtonHints::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.OnDisable
void Valve::VR::InteractionSystem::ControllerButtonHints::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.OnParentHandInputFocusLost
void Valve::VR::InteractionSystem::ControllerButtonHints::OnParentHandInputFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OnParentHandInputFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParentHandInputFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.OnHandInitialized
void Valve::VR::InteractionSystem::ControllerButtonHints::OnHandInitialized(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OnHandInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deviceIndex);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.OnRenderModelLoaded
void Valve::VR::InteractionSystem::ControllerButtonHints::OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool succeess) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OnRenderModelLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderModelLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModel), ::il2cpp_utils::ExtractType(succeess)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderModel, succeess);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.CreateAndAddButtonInfo
void Valve::VR::InteractionSystem::ControllerButtonHints::CreateAndAddButtonInfo(::Valve::VR::EVRButtonId buttonID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::CreateAndAddButtonInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndAddButtonInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttonID);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.ComputeTextEndTransforms
void Valve::VR::InteractionSystem::ControllerButtonHints::ComputeTextEndTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ComputeTextEndTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeTextEndTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.ShowButtonHint
void Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint(::ArrayW<::Valve::VR::EVRButtonId> buttons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowButtonHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttons)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttons);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideAllButtonHints
void Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideButtonHint
void Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint(::ArrayW<::Valve::VR::EVRButtonId> buttons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideButtonHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttons)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttons);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.IsButtonHintActive
bool Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive(::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsButtonHintActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, button);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.TestButtonHints
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ControllerButtonHints::TestButtonHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::TestButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.TestTextHints
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ControllerButtonHints::TestTextHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::TestTextHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestTextHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.Update
void Valve::VR::InteractionSystem::ControllerButtonHints::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.UpdateTextHint
void Valve::VR::InteractionSystem::ControllerButtonHints::UpdateTextHint(::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo* hintInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::UpdateTextHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTextHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hintInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hintInfo);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.Clear
void Valve::VR::InteractionSystem::ControllerButtonHints::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.ShowText
void Valve::VR::InteractionSystem::ControllerButtonHints::ShowText(::Valve::VR::EVRButtonId button, ::StringW text, bool highlightButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ShowText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(highlightButton)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, text, highlightButton);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideText
void Valve::VR::InteractionSystem::ControllerButtonHints::HideText(::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideAllText
void Valve::VR::InteractionSystem::ControllerButtonHints::HideAllText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideAllText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.GetActiveHintText
::StringW Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText(::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActiveHintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, button);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.GetControllerButtonHints
::Valve::VR::InteractionSystem::ControllerButtonHints* Valve::VR::InteractionSystem::ControllerButtonHints::GetControllerButtonHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::GetControllerButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "GetControllerButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::ControllerButtonHints*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.ShowButtonHint
void Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint(::Valve::VR::InteractionSystem::Hand* hand, ::ArrayW<::Valve::VR::EVRButtonId> buttons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ShowButtonHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "ShowButtonHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(buttons)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, buttons);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideButtonHint
void Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint(::Valve::VR::InteractionSystem::Hand* hand, ::ArrayW<::Valve::VR::EVRButtonId> buttons) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideButtonHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "HideButtonHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(buttons)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, buttons);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideAllButtonHints
void Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideAllButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "HideAllButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.IsButtonHintActive
bool Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::IsButtonHintActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "IsButtonHintActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(button)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, button);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.ShowTextHint
void Valve::VR::InteractionSystem::ControllerButtonHints::ShowTextHint(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button, ::StringW text, bool highlightButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ShowTextHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "ShowTextHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(highlightButton)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, button, text, highlightButton);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideTextHint
void Valve::VR::InteractionSystem::ControllerButtonHints::HideTextHint(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideTextHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "HideTextHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(button)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, button);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.HideAllTextHints
void Valve::VR::InteractionSystem::ControllerButtonHints::HideAllTextHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::HideAllTextHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "HideAllTextHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints.GetActiveHintText
::StringW Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText(::Valve::VR::InteractionSystem::Hand* hand, ::Valve::VR::EVRButtonId button) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::GetActiveHintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ControllerButtonHints", "GetActiveHintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(button)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hand, button);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType
#include "Valve/VR/InteractionSystem/ControllerButtonHints_OffsetType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Up
::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType>("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Up
void Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Up(::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Right
::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType>("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Right
void Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Right(::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Forward
::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Forward");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType>("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Forward"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Forward
void Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Forward(::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Forward");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Forward", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Back
::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Back() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_get_Back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType>("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Back"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ControllerButtonHints/OffsetType Back
void Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Back(::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::_set_Back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ControllerButtonHints/OffsetType", "Back", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::OffsetType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/ButtonHintInfo
#include "Valve/VR/InteractionSystem/ControllerButtonHints_ButtonHintInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String componentName
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_componentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_componentName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.MeshRenderer> renderers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::MeshRenderer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform localTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_localTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_localTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject textHintObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textHintObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textHintObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textHintObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform textStartAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textStartAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textStartAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textStartAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform textEndAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textEndAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textEndAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textEndAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 textEndOffsetDir
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textEndOffsetDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textEndOffsetDir");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textEndOffsetDir"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform canvasOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_canvasOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_canvasOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvasOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text text
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TextMesh textMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::TextMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Canvas textCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::Canvas**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LineRenderer line
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_line() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_line");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "line"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single distanceFromCenter
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_distanceFromCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_distanceFromCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distanceFromCenter"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean textHintActive
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textHintActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::ButtonHintInfo::dyn_textHintActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textHintActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36
#include "Valve/VR/InteractionSystem/ControllerButtonHints_-TestButtonHints-d__36.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ControllerButtonHints <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ControllerButtonHints*& Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ControllerButtonHints**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36.MoveNext
bool Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestButtonHints>d__36.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestButtonHints$d__36*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37
#include "Valve/VR/InteractionSystem/ControllerButtonHints_-TestTextHints-d__37.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ControllerButtonHints <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ControllerButtonHints*& Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ControllerButtonHints**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37.MoveNext
bool Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerButtonHints/<TestTextHints>d__37.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerButtonHints::$TestTextHints$d__37*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ArcheryTarget
#include "Valve/VR/InteractionSystem/ArcheryTarget.hpp"
// Including type: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11
#include "Valve/VR/InteractionSystem/ArcheryTarget_-FallDown-d__11.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single targetRadius
float Valve::VR::InteractionSystem::ArcheryTarget::_get_targetRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::_get_targetRadius");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "ArcheryTarget", "targetRadius"));
}
// Autogenerated static field setter
// Set static field: static private System.Single targetRadius
void Valve::VR::InteractionSystem::ArcheryTarget::_set_targetRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::_set_targetRadius");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ArcheryTarget", "targetRadius", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onTakeDamage
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::ArcheryTarget::dyn_onTakeDamage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_onTakeDamage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTakeDamage"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean onceOnly
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArcheryTarget::dyn_onceOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_onceOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onceOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform targetCenter
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ArcheryTarget::dyn_targetCenter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_targetCenter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetCenter"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform baseTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ArcheryTarget::dyn_baseTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_baseTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fallenDownTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ArcheryTarget::dyn_fallenDownTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_fallenDownTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fallenDownTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fallTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArcheryTarget::dyn_fallTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_fallTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fallTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean targetEnabled
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArcheryTarget::dyn_targetEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::dyn_targetEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget.ApplyDamage
void Valve::VR::InteractionSystem::ArcheryTarget::ApplyDamage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::ApplyDamage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyDamage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget.FireExposure
void Valve::VR::InteractionSystem::ArcheryTarget::FireExposure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::FireExposure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireExposure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget.OnDamageTaken
void Valve::VR::InteractionSystem::ArcheryTarget::OnDamageTaken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::OnDamageTaken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDamageTaken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget.FallDown
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ArcheryTarget::FallDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::FallDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FallDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11
#include "Valve/VR/InteractionSystem/ArcheryTarget_-FallDown-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ArcheryTarget <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ArcheryTarget*& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ArcheryTarget**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion <startingRot>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$startingRot$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$startingRot$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startingRot>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>5__3
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$startTime$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$startTime$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <rotLerp>5__4
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$rotLerp$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::dyn_$rotLerp$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<rotLerp>5__4"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11.MoveNext
bool Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArcheryTarget/<FallDown>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArcheryTarget::$FallDown$d__11*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Arrow
#include "Valve/VR/InteractionSystem/Arrow.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.PhysicMaterial
#include "UnityEngine/PhysicMaterial.hpp"
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: Valve.VR.InteractionSystem.PlaySound
#include "Valve/VR/InteractionSystem/PlaySound.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem glintParticle
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& Valve::VR::InteractionSystem::Arrow::dyn_glintParticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_glintParticle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "glintParticle"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody arrowHeadRB
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Valve::VR::InteractionSystem::Arrow::dyn_arrowHeadRB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_arrowHeadRB");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowHeadRB"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody shaftRB
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Valve::VR::InteractionSystem::Arrow::dyn_shaftRB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_shaftRB");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shaftRB"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.PhysicMaterial targetPhysMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::PhysicMaterial*& Valve::VR::InteractionSystem::Arrow::dyn_targetPhysMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_targetPhysMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetPhysMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::PhysicMaterial**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 prevPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Arrow::dyn_prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_prevPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion prevRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Arrow::dyn_prevRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_prevRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 prevVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Arrow::dyn_prevVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_prevVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 prevHeadPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Arrow::dyn_prevHeadPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_prevHeadPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevHeadPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot fireReleaseSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Arrow::dyn_fireReleaseSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_fireReleaseSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fireReleaseSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot airReleaseSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Arrow::dyn_airReleaseSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_airReleaseSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "airReleaseSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot hitTargetSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Arrow::dyn_hitTargetSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_hitTargetSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitTargetSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.PlaySound hitGroundSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::PlaySound*& Valve::VR::InteractionSystem::Arrow::dyn_hitGroundSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_hitGroundSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitGroundSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::PlaySound**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean inFlight
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Arrow::dyn_inFlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_inFlight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inFlight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean released
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Arrow::dyn_released() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_released");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "released"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasSpreadFire
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Arrow::dyn_hasSpreadFire() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_hasSpreadFire");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasSpreadFire"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 travelledFrames
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Arrow::dyn_travelledFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_travelledFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "travelledFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject scaleParentObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Arrow::dyn_scaleParentObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::dyn_scaleParentObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleParentObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.Start
void Valve::VR::InteractionSystem::Arrow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.FixedUpdate
void Valve::VR::InteractionSystem::Arrow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.ArrowReleased
void Valve::VR::InteractionSystem::Arrow::ArrowReleased(float inputVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::ArrowReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ArrowReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inputVelocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inputVelocity);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.OnCollisionEnter
void Valve::VR::InteractionSystem::Arrow::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.StickInTarget
void Valve::VR::InteractionSystem::Arrow::StickInTarget(::UnityEngine::Collision* collision, bool bSkipRayCast) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::StickInTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StickInTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision), ::il2cpp_utils::ExtractType(bSkipRayCast)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision, bSkipRayCast);
}
// Autogenerated method: Valve.VR.InteractionSystem.Arrow.OnDestroy
void Valve::VR::InteractionSystem::Arrow::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Arrow::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ArrowHand
#include "Valve/VR/InteractionSystem/ArrowHand.hpp"
// Including type: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24
#include "Valve/VR/InteractionSystem/ArrowHand_-ArrowReleaseHaptics-d__24.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: Valve.VR.InteractionSystem.Longbow
#include "Valve/VR/InteractionSystem/Longbow.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand
#include "Valve/VR/InteractionSystem/AllowTeleportWhileAttachedToHand.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::ArrowHand::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Longbow bow
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Longbow*& Valve::VR::InteractionSystem::ArrowHand::dyn_bow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_bow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bow"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Longbow**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject currentArrow
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ArrowHand::dyn_currentArrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_currentArrow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentArrow"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject arrowPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::ArrowHand::dyn_arrowPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_arrowPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform arrowNockTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::ArrowHand::dyn_arrowNockTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_arrowNockTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowNockTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single nockDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArrowHand::dyn_nockDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_nockDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lerpCompleteDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArrowHand::dyn_lerpCompleteDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_lerpCompleteDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpCompleteDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationLerpThreshold
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArrowHand::dyn_rotationLerpThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_rotationLerpThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationLerpThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionLerpThreshold
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ArrowHand::dyn_positionLerpThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_positionLerpThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionLerpThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean allowArrowSpawn
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArrowHand::dyn_allowArrowSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_allowArrowSpawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowArrowSpawn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean nocked
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArrowHand::dyn_nocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_nocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nocked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean inNockRange
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArrowHand::dyn_inNockRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_inNockRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inNockRange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean arrowLerpComplete
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ArrowHand::dyn_arrowLerpComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_arrowLerpComplete");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowLerpComplete"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot arrowSpawnSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::ArrowHand::dyn_arrowSpawnSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_arrowSpawnSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowSpawnSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleport
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*& Valve::VR::InteractionSystem::ArrowHand::dyn_allowTeleport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_allowTeleport");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowTeleport"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 maxArrowCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ArrowHand::dyn_maxArrowCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_maxArrowCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxArrowCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.GameObject> arrowList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& Valve::VR::InteractionSystem::ArrowHand::dyn_arrowList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::dyn_arrowList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.Awake
void Valve::VR::InteractionSystem::ArrowHand::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.OnAttachedToHand
void Valve::VR::InteractionSystem::ArrowHand::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* attachedHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attachedHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attachedHand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.InstantiateArrow
::UnityEngine::GameObject* Valve::VR::InteractionSystem::ArrowHand::InstantiateArrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::InstantiateArrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateArrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.HandAttachedUpdate
void Valve::VR::InteractionSystem::ArrowHand::HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::HandAttachedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandAttachedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.OnDetachedFromHand
void Valve::VR::InteractionSystem::ArrowHand::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.FireArrow
void Valve::VR::InteractionSystem::ArrowHand::FireArrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::FireArrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireArrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.EnableArrowSpawn
void Valve::VR::InteractionSystem::ArrowHand::EnableArrowSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::EnableArrowSpawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableArrowSpawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.ArrowReleaseHaptics
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ArrowHand::ArrowReleaseHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::ArrowReleaseHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ArrowReleaseHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.OnHandFocusLost
void Valve::VR::InteractionSystem::ArrowHand::OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::OnHandFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.OnHandFocusAcquired
void Valve::VR::InteractionSystem::ArrowHand::OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::OnHandFocusAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand.FindBow
void Valve::VR::InteractionSystem::ArrowHand::FindBow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::FindBow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindBow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24
#include "Valve/VR/InteractionSystem/ArrowHand_-ArrowReleaseHaptics-d__24.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ArrowHand <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ArrowHand*& Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ArrowHand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24.MoveNext
bool Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ArrowHand/<ArrowReleaseHaptics>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ArrowHand::$ArrowReleaseHaptics$d__24*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ArrowheadRotation
#include "Valve/VR/InteractionSystem/ArrowheadRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.ArrowheadRotation.Start
void Valve::VR::InteractionSystem::ArrowheadRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ArrowheadRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Balloon
#include "Valve/VR/InteractionSystem/Balloon.hpp"
// Including type: Valve.VR.InteractionSystem.Balloon/BalloonColor
#include "Valve/VR/InteractionSystem/Balloon_BalloonColor.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single s_flLastDeathSound
float Valve::VR::InteractionSystem::Balloon::_get_s_flLastDeathSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::_get_s_flLastDeathSound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Balloon", "s_flLastDeathSound"));
}
// Autogenerated static field setter
// Set static field: static private System.Single s_flLastDeathSound
void Valve::VR::InteractionSystem::Balloon::_set_s_flLastDeathSound(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::_set_s_flLastDeathSound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon", "s_flLastDeathSound", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Balloon::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject popPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Balloon::dyn_popPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_popPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "popPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxVelocity
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_maxVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_maxVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lifetime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_lifetime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_lifetime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lifetime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean burstOnLifetimeEnd
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Balloon::dyn_burstOnLifetimeEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_burstOnLifetimeEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "burstOnLifetimeEnd"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject lifetimeEndParticlePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Balloon::dyn_lifetimeEndParticlePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_lifetimeEndParticlePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lifetimeEndParticlePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot lifetimeEndSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Balloon::dyn_lifetimeEndSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_lifetimeEndSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lifetimeEndSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single destructTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_destructTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_destructTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destructTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single releaseTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_releaseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_releaseTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot collisionSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Balloon::dyn_collisionSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_collisionSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastSoundTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_lastSoundTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_lastSoundTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastSoundTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single soundDelay
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Balloon::dyn_soundDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_soundDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody balloonRigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Valve::VR::InteractionSystem::Balloon::dyn_balloonRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_balloonRigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonRigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean bParticlesSpawned
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Balloon::dyn_bParticlesSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::dyn_bParticlesSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bParticlesSpawned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.Start
void Valve::VR::InteractionSystem::Balloon::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.Update
void Valve::VR::InteractionSystem::Balloon::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.SpawnParticles
void Valve::VR::InteractionSystem::Balloon::SpawnParticles(::UnityEngine::GameObject* particlePrefab, ::Valve::VR::InteractionSystem::SoundPlayOneshot* sound) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::SpawnParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particlePrefab), ::il2cpp_utils::ExtractType(sound)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, particlePrefab, sound);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.FixedUpdate
void Valve::VR::InteractionSystem::Balloon::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.ApplyDamage
void Valve::VR::InteractionSystem::Balloon::ApplyDamage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::ApplyDamage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyDamage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.OnCollisionEnter
void Valve::VR::InteractionSystem::Balloon::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.SetColor
void Valve::VR::InteractionSystem::Balloon::SetColor(::Valve::VR::InteractionSystem::Balloon::BalloonColor color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon.BalloonColorToRGB
::UnityEngine::Color Valve::VR::InteractionSystem::Balloon::BalloonColorToRGB(::Valve::VR::InteractionSystem::Balloon::BalloonColor balloonColorVar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColorToRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BalloonColorToRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(balloonColorVar)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, balloonColorVar);
}
// Autogenerated method: Valve.VR.InteractionSystem.Balloon..cctor
void Valve::VR::InteractionSystem::Balloon::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Balloon", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Balloon/BalloonColor
#include "Valve/VR/InteractionSystem/Balloon_BalloonColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Red
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Red");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Red"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Red
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Red(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Red");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Red", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor OrangeRed
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_OrangeRed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_OrangeRed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "OrangeRed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor OrangeRed
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_OrangeRed(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_OrangeRed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "OrangeRed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Orange
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Orange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Orange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Orange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Orange
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Orange(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Orange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Orange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor YellowOrange
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_YellowOrange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_YellowOrange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "YellowOrange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor YellowOrange
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_YellowOrange(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_YellowOrange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "YellowOrange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Yellow
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Yellow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Yellow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Yellow"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Yellow
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Yellow(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Yellow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Yellow", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor GreenYellow
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_GreenYellow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_GreenYellow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "GreenYellow"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor GreenYellow
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_GreenYellow(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_GreenYellow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "GreenYellow", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Green
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Green() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Green");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Green"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Green
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Green(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Green");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Green", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor BlueGreen
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_BlueGreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_BlueGreen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "BlueGreen"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor BlueGreen
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_BlueGreen(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_BlueGreen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "BlueGreen", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Blue
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Blue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Blue"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Blue
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Blue(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Blue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Blue", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor VioletBlue
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_VioletBlue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_VioletBlue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "VioletBlue"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor VioletBlue
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_VioletBlue(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_VioletBlue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "VioletBlue", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Violet
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Violet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Violet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Violet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Violet
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Violet(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Violet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Violet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor RedViolet
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_RedViolet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_RedViolet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "RedViolet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor RedViolet
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_RedViolet(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_RedViolet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "RedViolet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor LightGray
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_LightGray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_LightGray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "LightGray"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor LightGray
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_LightGray(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_LightGray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "LightGray", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor DarkGray
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_DarkGray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_DarkGray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "DarkGray"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor DarkGray
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_DarkGray(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_DarkGray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "DarkGray", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Random
::Valve::VR::InteractionSystem::Balloon::BalloonColor Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_get_Random");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Balloon::BalloonColor>("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Random"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Balloon/BalloonColor Random
void Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Random(::Valve::VR::InteractionSystem::Balloon::BalloonColor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::_set_Random");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Balloon/BalloonColor", "Random", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Balloon::BalloonColor::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Balloon::BalloonColor::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.BalloonColliders
#include "Valve/VR/InteractionSystem/BalloonColliders.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] colliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& Valve::VR::InteractionSystem::BalloonColliders::dyn_colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::dyn_colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] colliderLocalPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& Valve::VR::InteractionSystem::BalloonColliders::dyn_colliderLocalPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::dyn_colliderLocalPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderLocalPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] colliderLocalRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& Valve::VR::InteractionSystem::BalloonColliders::dyn_colliderLocalRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::dyn_colliderLocalRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderLocalRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& Valve::VR::InteractionSystem::BalloonColliders::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonColliders.Awake
void Valve::VR::InteractionSystem::BalloonColliders::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonColliders.OnEnable
void Valve::VR::InteractionSystem::BalloonColliders::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonColliders.OnDisable
void Valve::VR::InteractionSystem::BalloonColliders::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonColliders.OnDestroy
void Valve::VR::InteractionSystem::BalloonColliders::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonColliders::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.BalloonHapticBump
#include "Valve/VR/InteractionSystem/BalloonHapticBump.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject physParent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::BalloonHapticBump::dyn_physParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonHapticBump::dyn_physParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "physParent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonHapticBump.OnCollisionEnter
void Valve::VR::InteractionSystem::BalloonHapticBump::OnCollisionEnter(::UnityEngine::Collision* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonHapticBump::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.BalloonSpawner
#include "Valve/VR/InteractionSystem/BalloonSpawner.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single minSpawnTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::BalloonSpawner::dyn_minSpawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_minSpawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minSpawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxSpawnTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::BalloonSpawner::dyn_maxSpawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_maxSpawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSpawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextSpawnTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::BalloonSpawner::dyn_nextSpawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_nextSpawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextSpawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject balloonPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::BalloonSpawner::dyn_balloonPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_balloonPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoSpawn
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::BalloonSpawner::dyn_autoSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_autoSpawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoSpawn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean spawnAtStartup
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnAtStartup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnAtStartup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnAtStartup"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean playSounds
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::BalloonSpawner::dyn_playSounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_playSounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playSounds"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot inflateSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::BalloonSpawner::dyn_inflateSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_inflateSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inflateSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot stretchSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::BalloonSpawner::dyn_stretchSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_stretchSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stretchSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean sendSpawnMessageToParent
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::BalloonSpawner::dyn_sendSpawnMessageToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_sendSpawnMessageToParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sendSpawnMessageToParent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scale
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::BalloonSpawner::dyn_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform spawnDirectionTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnDirectionTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnDirectionTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnDirectionTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spawnForce
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_spawnForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean attachBalloon
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::BalloonSpawner::dyn_attachBalloon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_attachBalloon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachBalloon"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Balloon/BalloonColor color
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Balloon::BalloonColor& Valve::VR::InteractionSystem::BalloonSpawner::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Balloon::BalloonColor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonSpawner.Start
void Valve::VR::InteractionSystem::BalloonSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonSpawner.Update
void Valve::VR::InteractionSystem::BalloonSpawner::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonSpawner.SpawnBalloon
::UnityEngine::GameObject* Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloon(::Valve::VR::InteractionSystem::Balloon::BalloonColor color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.InteractionSystem.BalloonSpawner.SpawnBalloonFromEvent
void Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloonFromEvent(int color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BalloonSpawner::SpawnBalloonFromEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBalloonFromEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ExplosionWobble
#include "Valve/VR/InteractionSystem/ExplosionWobble.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.ExplosionWobble.ExplosionEvent
void Valve::VR::InteractionSystem::ExplosionWobble::ExplosionEvent(::UnityEngine::Vector3 explosionPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ExplosionWobble::ExplosionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExplosionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(explosionPos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, explosionPos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.FireSource
#include "Valve/VR/InteractionSystem/FireSource.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject fireParticlePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::FireSource::dyn_fireParticlePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_fireParticlePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fireParticlePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean startActive
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::FireSource::dyn_startActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_startActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject fireObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::FireSource::dyn_fireObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_fireObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fireObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem customParticles
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& Valve::VR::InteractionSystem::FireSource::dyn_customParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_customParticles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "customParticles"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isBurning
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::FireSource::dyn_isBurning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_isBurning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isBurning"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single burnTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FireSource::dyn_burnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_burnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "burnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ignitionDelay
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FireSource::dyn_ignitionDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_ignitionDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ignitionDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single ignitionTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FireSource::dyn_ignitionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_ignitionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ignitionTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::FireSource::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource ignitionSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::FireSource::dyn_ignitionSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_ignitionSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ignitionSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canSpreadFromThisSource
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::FireSource::dyn_canSpreadFromThisSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::dyn_canSpreadFromThisSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canSpreadFromThisSource"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.FireSource.Start
void Valve::VR::InteractionSystem::FireSource::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.FireSource.Update
void Valve::VR::InteractionSystem::FireSource::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.FireSource.OnTriggerEnter
void Valve::VR::InteractionSystem::FireSource::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Valve.VR.InteractionSystem.FireSource.FireExposure
void Valve::VR::InteractionSystem::FireSource::FireExposure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::FireExposure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireExposure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.FireSource.StartBurning
void Valve::VR::InteractionSystem::FireSource::StartBurning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FireSource::StartBurning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartBurning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Longbow
#include "Valve/VR/InteractionSystem/Longbow.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55
#include "Valve/VR/InteractionSystem/Longbow_-ResetDrawAnim-d__55.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: Valve.VR.InteractionSystem.ArrowHand
#include "Valve/VR/InteractionSystem/ArrowHand.hpp"
// Including type: Valve.VR.InteractionSystem.ItemPackage
#include "Valve/VR/InteractionSystem/ItemPackage.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: Valve.VR.InteractionSystem.SoundBowClick
#include "Valve/VR/InteractionSystem/SoundBowClick.hpp"
// Including type: Valve.VR.InteractionSystem.SoundPlayOneshot
#include "Valve/VR/InteractionSystem/SoundPlayOneshot.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single minPull
float Valve::VR::InteractionSystem::Longbow::_get_minPull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_get_minPull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Longbow", "minPull"));
}
// Autogenerated static field setter
// Set static field: static private System.Single minPull
void Valve::VR::InteractionSystem::Longbow::_set_minPull(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_set_minPull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow", "minPull", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single maxPull
float Valve::VR::InteractionSystem::Longbow::_get_maxPull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_get_maxPull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Longbow", "maxPull"));
}
// Autogenerated static field setter
// Set static field: static private System.Single maxPull
void Valve::VR::InteractionSystem::Longbow::_set_maxPull(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_set_maxPull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow", "maxPull", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single bowPullPulseStrengthLow
float Valve::VR::InteractionSystem::Longbow::_get_bowPullPulseStrengthLow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_get_bowPullPulseStrengthLow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Longbow", "bowPullPulseStrengthLow"));
}
// Autogenerated static field setter
// Set static field: static private System.Single bowPullPulseStrengthLow
void Valve::VR::InteractionSystem::Longbow::_set_bowPullPulseStrengthLow(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_set_bowPullPulseStrengthLow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow", "bowPullPulseStrengthLow", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single bowPullPulseStrengthHigh
float Valve::VR::InteractionSystem::Longbow::_get_bowPullPulseStrengthHigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_get_bowPullPulseStrengthHigh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Valve.VR.InteractionSystem", "Longbow", "bowPullPulseStrengthHigh"));
}
// Autogenerated static field setter
// Set static field: static private System.Single bowPullPulseStrengthHigh
void Valve::VR::InteractionSystem::Longbow::_set_bowPullPulseStrengthHigh(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::_set_bowPullPulseStrengthHigh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow", "bowPullPulseStrengthHigh", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Longbow/Handedness currentHandGuess
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Longbow::Handedness& Valve::VR::InteractionSystem::Longbow::dyn_currentHandGuess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_currentHandGuess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentHandGuess"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Longbow::Handedness*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeOfPossibleHandSwitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_timeOfPossibleHandSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_timeOfPossibleHandSwitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeOfPossibleHandSwitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeBeforeConfirmingHandSwitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_timeBeforeConfirmingHandSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_timeBeforeConfirmingHandSwitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeBeforeConfirmingHandSwitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean possibleHandSwitch
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_possibleHandSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_possibleHandSwitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "possibleHandSwitch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pivotTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Longbow::dyn_pivotTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_pivotTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pivotTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform handleTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Longbow::dyn_handleTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_handleTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handleTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Longbow::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.ArrowHand arrowHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ArrowHand*& Valve::VR::InteractionSystem::Longbow::dyn_arrowHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ArrowHand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform nockTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Longbow::dyn_nockTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform nockRestTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Longbow::dyn_nockRestTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockRestTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockRestTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoSpawnArrowHand
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_autoSpawnArrowHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_autoSpawnArrowHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoSpawnArrowHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ItemPackage arrowHandItemPackage
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ItemPackage*& Valve::VR::InteractionSystem::Longbow::dyn_arrowHandItemPackage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowHandItemPackage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowHandItemPackage"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ItemPackage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject arrowHandPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Longbow::dyn_arrowHandPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowHandPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowHandPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean nocked
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_nocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nocked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean pulled
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_pulled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_pulled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pulled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nockDistanceTravelled
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_nockDistanceTravelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockDistanceTravelled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockDistanceTravelled"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hapticDistanceThreshold
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_hapticDistanceThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_hapticDistanceThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticDistanceThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastTickDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_lastTickDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lastTickDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastTickDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 bowLeftVector
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Longbow::dyn_bowLeftVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_bowLeftVector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bowLeftVector"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single arrowMinVelocity
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_arrowMinVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowMinVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowMinVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single arrowMaxVelocity
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_arrowMaxVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowMaxVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowMaxVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single arrowVelocity
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_arrowVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minStrainTickTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_minStrainTickTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_minStrainTickTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minStrainTickTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxStrainTickTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_maxStrainTickTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_maxStrainTickTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxStrainTickTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextStrainTick
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_nextStrainTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nextStrainTick");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextStrainTick"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean lerpBackToZeroRotation
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_lerpBackToZeroRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lerpBackToZeroRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpBackToZeroRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lerpStartTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_lerpStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lerpStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lerpDuration
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_lerpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lerpDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lerpStartRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Longbow::dyn_lerpStartRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lerpStartRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpStartRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nockLerpStartTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_nockLerpStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockLerpStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockLerpStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion nockLerpStartRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Longbow::dyn_nockLerpStartRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockLerpStartRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockLerpStartRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single drawOffset
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_drawOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_drawOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping bowDrawLinearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::Longbow::dyn_bowDrawLinearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_bowDrawLinearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bowDrawLinearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean deferNewPoses
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Longbow::dyn_deferNewPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_deferNewPoses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deferNewPoses"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lateUpdatePos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Longbow::dyn_lateUpdatePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lateUpdatePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lateUpdatePos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lateUpdateRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Longbow::dyn_lateUpdateRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_lateUpdateRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lateUpdateRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundBowClick drawSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundBowClick*& Valve::VR::InteractionSystem::Longbow::dyn_drawSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_drawSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundBowClick**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single drawTension
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::dyn_drawTension() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_drawTension");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawTension"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot arrowSlideSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Longbow::dyn_arrowSlideSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_arrowSlideSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arrowSlideSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot releaseSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Longbow::dyn_releaseSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_releaseSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.SoundPlayOneshot nockSound
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::SoundPlayOneshot*& Valve::VR::InteractionSystem::Longbow::dyn_nockSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_nockSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nockSound"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::SoundPlayOneshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action newPosesAppliedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::Longbow::dyn_newPosesAppliedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::dyn_newPosesAppliedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newPosesAppliedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnAttachedToHand
void Valve::VR::InteractionSystem::Longbow::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* attachedHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attachedHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attachedHand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.Awake
void Valve::VR::InteractionSystem::Longbow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnEnable
void Valve::VR::InteractionSystem::Longbow::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnDisable
void Valve::VR::InteractionSystem::Longbow::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.LateUpdate
void Valve::VR::InteractionSystem::Longbow::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnNewPosesApplied
void Valve::VR::InteractionSystem::Longbow::OnNewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnNewPosesApplied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPosesApplied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.HandAttachedUpdate
void Valve::VR::InteractionSystem::Longbow::HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::HandAttachedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandAttachedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.ArrowReleased
void Valve::VR::InteractionSystem::Longbow::ArrowReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::ArrowReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ArrowReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.ResetDrawAnim
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::Longbow::ResetDrawAnim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::ResetDrawAnim");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetDrawAnim", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.GetArrowVelocity
float Valve::VR::InteractionSystem::Longbow::GetArrowVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::GetArrowVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArrowVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.StartRotationLerp
void Valve::VR::InteractionSystem::Longbow::StartRotationLerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::StartRotationLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartRotationLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.StartNock
void Valve::VR::InteractionSystem::Longbow::StartNock(::Valve::VR::InteractionSystem::ArrowHand* currentArrowHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::StartNock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartNock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentArrowHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentArrowHand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.EvaluateHandedness
void Valve::VR::InteractionSystem::Longbow::EvaluateHandedness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::EvaluateHandedness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateHandedness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.DoHandednessCheck
void Valve::VR::InteractionSystem::Longbow::DoHandednessCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::DoHandednessCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoHandednessCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.ArrowInPosition
void Valve::VR::InteractionSystem::Longbow::ArrowInPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::ArrowInPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ArrowInPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.ReleaseNock
void Valve::VR::InteractionSystem::Longbow::ReleaseNock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::ReleaseNock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseNock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.ShutDown
void Valve::VR::InteractionSystem::Longbow::ShutDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::ShutDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShutDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnHandFocusLost
void Valve::VR::InteractionSystem::Longbow::OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnHandFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnHandFocusAcquired
void Valve::VR::InteractionSystem::Longbow::OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnHandFocusAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnDetachedFromHand
void Valve::VR::InteractionSystem::Longbow::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow.OnDestroy
void Valve::VR::InteractionSystem::Longbow::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Longbow/Handedness
#include "Valve/VR/InteractionSystem/Longbow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Longbow/Handedness Left
::Valve::VR::InteractionSystem::Longbow::Handedness Valve::VR::InteractionSystem::Longbow::Handedness::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Handedness::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Longbow::Handedness>("Valve.VR.InteractionSystem", "Longbow/Handedness", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Longbow/Handedness Left
void Valve::VR::InteractionSystem::Longbow::Handedness::_set_Left(::Valve::VR::InteractionSystem::Longbow::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Handedness::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow/Handedness", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Longbow/Handedness Right
::Valve::VR::InteractionSystem::Longbow::Handedness Valve::VR::InteractionSystem::Longbow::Handedness::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Handedness::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Longbow::Handedness>("Valve.VR.InteractionSystem", "Longbow/Handedness", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Longbow/Handedness Right
void Valve::VR::InteractionSystem::Longbow::Handedness::_set_Right(::Valve::VR::InteractionSystem::Longbow::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Handedness::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Longbow/Handedness", "Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Longbow::Handedness::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::Handedness::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55
#include "Valve/VR/InteractionSystem/Longbow_-ResetDrawAnim-d__55.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Longbow <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Longbow*& Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Longbow**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startTime>5__2
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$startTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$startTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startLerp>5__3
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$startLerp$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::dyn_$startLerp$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startLerp>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55.MoveNext
bool Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Longbow/<ResetDrawAnim>d__55.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Longbow::$ResetDrawAnim$d__55*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.SoundBowClick
#include "Valve/VR/InteractionSystem/SoundBowClick.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip bowClick
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::SoundBowClick::dyn_bowClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::dyn_bowClick");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bowClick"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve pitchTensionCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Valve::VR::InteractionSystem::SoundBowClick::dyn_pitchTensionCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::dyn_pitchTensionCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchTensionCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minPitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundBowClick::dyn_minPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::dyn_minPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxPitch
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::SoundBowClick::dyn_maxPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::dyn_maxPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource thisAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::SoundBowClick::dyn_thisAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::dyn_thisAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundBowClick.Awake
void Valve::VR::InteractionSystem::SoundBowClick::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.SoundBowClick.PlayBowTensionClicks
void Valve::VR::InteractionSystem::SoundBowClick::PlayBowTensionClicks(float normalizedTension) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::SoundBowClick::PlayBowTensionClicks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayBowTensionClicks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedTension)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, normalizedTension);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ControllerHintsExample
#include "Valve/VR/InteractionSystem/ControllerHintsExample.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5
#include "Valve/VR/InteractionSystem/ControllerHintsExample_-TestButtonHints-d__5.hpp"
// Including type: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6
#include "Valve/VR/InteractionSystem/ControllerHintsExample_-TestTextHints-d__6.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine buttonHintCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& Valve::VR::InteractionSystem::ControllerHintsExample::dyn_buttonHintCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::dyn_buttonHintCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonHintCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine textHintCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& Valve::VR::InteractionSystem::ControllerHintsExample::dyn_textHintCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::dyn_textHintCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textHintCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample.ShowButtonHints
void Valve::VR::InteractionSystem::ControllerHintsExample::ShowButtonHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::ShowButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample.ShowTextHints
void Valve::VR::InteractionSystem::ControllerHintsExample::ShowTextHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::ShowTextHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowTextHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample.DisableHints
void Valve::VR::InteractionSystem::ControllerHintsExample::DisableHints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::DisableHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample.TestButtonHints
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ControllerHintsExample::TestButtonHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::TestButtonHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestButtonHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample.TestTextHints
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ControllerHintsExample::TestTextHints(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::TestTextHints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestTextHints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5
#include "Valve/VR/InteractionSystem/ControllerHintsExample_-TestButtonHints-d__5.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5.MoveNext
bool Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestButtonHints>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestButtonHints$d__5*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6
#include "Valve/VR/InteractionSystem/ControllerHintsExample_-TestTextHints-d__6.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6.MoveNext
bool Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHintsExample/<TestTextHints>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ControllerHintsExample::$TestTextHints$d__6*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.InteractableExample
#include "Valve/VR/InteractionSystem/InteractableExample.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.TextMesh textMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& Valve::VR::InteractionSystem::InteractableExample::dyn_textMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::dyn_textMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::TextMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::InteractableExample::dyn_oldPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::dyn_oldPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion oldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::InteractableExample::dyn_oldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::dyn_oldRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single attachTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::InteractableExample::dyn_attachTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::dyn_attachTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& Valve::VR::InteractionSystem::InteractableExample::dyn_attachmentFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::dyn_attachmentFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentFlags"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand::AttachmentFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.Awake
void Valve::VR::InteractionSystem::InteractableExample::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnHandHoverBegin
void Valve::VR::InteractionSystem::InteractableExample::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnHandHoverEnd
void Valve::VR::InteractionSystem::InteractableExample::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.HandHoverUpdate
void Valve::VR::InteractionSystem::InteractableExample::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnAttachedToHand
void Valve::VR::InteractionSystem::InteractableExample::OnAttachedToHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnAttachedToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAttachedToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnDetachedFromHand
void Valve::VR::InteractionSystem::InteractableExample::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.HandAttachedUpdate
void Valve::VR::InteractionSystem::InteractableExample::HandAttachedUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::HandAttachedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandAttachedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnHandFocusAcquired
void Valve::VR::InteractionSystem::InteractableExample::OnHandFocusAcquired(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnHandFocusAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.InteractableExample.OnHandFocusLost
void Valve::VR::InteractionSystem::InteractableExample::OnHandFocusLost(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::InteractableExample::OnHandFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand
#include "Valve/VR/InteractionSystem/AllowTeleportWhileAttachedToHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean teleportAllowed
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::dyn_teleportAllowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::dyn_teleportAllowed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportAllowed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean overrideHoverLock
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::dyn_overrideHoverLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand::dyn_overrideHoverLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideHoverLock"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ChaperoneInfo
#include "Valve/VR/InteractionSystem/ChaperoneInfo.hpp"
// Including type: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21
#include "Valve/VR/InteractionSystem/ChaperoneInfo_-Start-d__21.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event Initialized
::GlobalNamespace::SteamVR_Events::Event* Valve::VR::InteractionSystem::ChaperoneInfo::_get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::_get_Initialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event*>("Valve.VR.InteractionSystem", "ChaperoneInfo", "Initialized"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event Initialized
void Valve::VR::InteractionSystem::ChaperoneInfo::_set_Initialized(::GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::_set_Initialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ChaperoneInfo", "Initialized", value));
}
// Autogenerated static field getter
// Get static field: static private Valve.VR.InteractionSystem.ChaperoneInfo _instance
::Valve::VR::InteractionSystem::ChaperoneInfo* Valve::VR::InteractionSystem::ChaperoneInfo::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ChaperoneInfo*>("Valve.VR.InteractionSystem", "ChaperoneInfo", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.InteractionSystem.ChaperoneInfo _instance
void Valve::VR::InteractionSystem::ChaperoneInfo::_set__instance(::Valve::VR::InteractionSystem::ChaperoneInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ChaperoneInfo", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <initialized>k__BackingField
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$initialized$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$initialized$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<initialized>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <playAreaSizeX>k__BackingField
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$playAreaSizeX$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$playAreaSizeX$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<playAreaSizeX>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <playAreaSizeZ>k__BackingField
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$playAreaSizeZ$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$playAreaSizeZ$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<playAreaSizeZ>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <roomscale>k__BackingField
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$roomscale$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::dyn_$roomscale$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<roomscale>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.get_initialized
bool Valve::VR::InteractionSystem::ChaperoneInfo::get_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::get_initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.set_initialized
void Valve::VR::InteractionSystem::ChaperoneInfo::set_initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::set_initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.get_playAreaSizeX
float Valve::VR::InteractionSystem::ChaperoneInfo::get_playAreaSizeX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::get_playAreaSizeX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playAreaSizeX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.set_playAreaSizeX
void Valve::VR::InteractionSystem::ChaperoneInfo::set_playAreaSizeX(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::set_playAreaSizeX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playAreaSizeX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.get_playAreaSizeZ
float Valve::VR::InteractionSystem::ChaperoneInfo::get_playAreaSizeZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::get_playAreaSizeZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playAreaSizeZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.set_playAreaSizeZ
void Valve::VR::InteractionSystem::ChaperoneInfo::set_playAreaSizeZ(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::set_playAreaSizeZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playAreaSizeZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.get_roomscale
bool Valve::VR::InteractionSystem::ChaperoneInfo::get_roomscale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::get_roomscale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_roomscale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.set_roomscale
void Valve::VR::InteractionSystem::ChaperoneInfo::set_roomscale(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::set_roomscale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_roomscale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.InitializedAction
::GlobalNamespace::SteamVR_Events::Action* Valve::VR::InteractionSystem::ChaperoneInfo::InitializedAction(::UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::InitializedAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ChaperoneInfo", "InitializedAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.get_instance
::Valve::VR::InteractionSystem::ChaperoneInfo* Valve::VR::InteractionSystem::ChaperoneInfo::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ChaperoneInfo", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::ChaperoneInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo.Start
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::ChaperoneInfo::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo..cctor
void Valve::VR::InteractionSystem::ChaperoneInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "ChaperoneInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21
#include "Valve/VR/InteractionSystem/ChaperoneInfo_-Start-d__21.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ChaperoneInfo <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ChaperoneInfo*& Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ChaperoneInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperone <chaperone>5__2
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperone*& Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$chaperone$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::dyn_$chaperone$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<chaperone>5__2"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRChaperone**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21.MoveNext
bool Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ChaperoneInfo/<Start>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::ChaperoneInfo::$Start$d__21*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.IgnoreTeleportTrace
#include "Valve/VR/InteractionSystem/IgnoreTeleportTrace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Teleport
#include "Valve/VR/InteractionSystem/Teleport.hpp"
// Including type: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105
#include "Valve/VR/InteractionSystem/Teleport_-TeleportHintCoroutine-d__105.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
// Including type: Valve.VR.InteractionSystem.TeleportArc
#include "Valve/VR/InteractionSystem/TeleportArc.hpp"
// Including type: Valve.VR.InteractionSystem.TeleportMarkerBase
#include "Valve/VR/InteractionSystem/TeleportMarkerBase.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand
#include "Valve/VR/InteractionSystem/AllowTeleportWhileAttachedToHand.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: SteamVR_Events/Event`1
#include "GlobalNamespace/SteamVR_Events_Event_1.hpp"
// Including type: SteamVR_Events/Action`1
#include "GlobalNamespace/SteamVR_Events_Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> ChangeScene
::GlobalNamespace::SteamVR_Events::Event_1<float>* Valve::VR::InteractionSystem::Teleport::_get_ChangeScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_get_ChangeScene");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<float>*>("Valve.VR.InteractionSystem", "Teleport", "ChangeScene"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> ChangeScene
void Valve::VR::InteractionSystem::Teleport::_set_ChangeScene(::GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_set_ChangeScene");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Teleport", "ChangeScene", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> Player
::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* Valve::VR::InteractionSystem::Teleport::_get_Player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_get_Player");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*>("Valve.VR.InteractionSystem", "Teleport", "Player"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> Player
void Valve::VR::InteractionSystem::Teleport::_set_Player(::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_set_Player");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Teleport", "Player", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerPre
::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* Valve::VR::InteractionSystem::Teleport::_get_PlayerPre() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_get_PlayerPre");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*>("Valve.VR.InteractionSystem", "Teleport", "PlayerPre"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<Valve.VR.InteractionSystem.TeleportMarkerBase> PlayerPre
void Valve::VR::InteractionSystem::Teleport::_set_PlayerPre(::GlobalNamespace::SteamVR_Events::Event_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_set_PlayerPre");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Teleport", "PlayerPre", value));
}
// Autogenerated static field getter
// Get static field: static private Valve.VR.InteractionSystem.Teleport _instance
::Valve::VR::InteractionSystem::Teleport* Valve::VR::InteractionSystem::Teleport::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Teleport*>("Valve.VR.InteractionSystem", "Teleport", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.InteractionSystem.Teleport _instance
void Valve::VR::InteractionSystem::Teleport::_set__instance(::Valve::VR::InteractionSystem::Teleport* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Teleport", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask traceLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Valve::VR::InteractionSystem::Teleport::dyn_traceLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_traceLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "traceLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask floorFixupTraceLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Valve::VR::InteractionSystem::Teleport::dyn_floorFixupTraceLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_floorFixupTraceLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorFixupTraceLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single floorFixupMaximumTraceDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_floorFixupMaximumTraceDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_floorFixupMaximumTraceDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorFixupMaximumTraceDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material areaVisibleMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_areaVisibleMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_areaVisibleMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "areaVisibleMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material areaLockedMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_areaLockedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_areaLockedMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "areaLockedMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material areaHighlightedMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_areaHighlightedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_areaHighlightedMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "areaHighlightedMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material pointVisibleMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_pointVisibleMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointVisibleMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointVisibleMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material pointLockedMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_pointLockedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointLockedMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointLockedMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material pointHighlightedMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::Teleport::dyn_pointHighlightedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointHighlightedMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointHighlightedMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform destinationReticleTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_destinationReticleTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_destinationReticleTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationReticleTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform invalidReticleTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject playAreaPreviewCorner
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewCorner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewCorner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playAreaPreviewCorner"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject playAreaPreviewSide
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewSide");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playAreaPreviewSide"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color pointerValidColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::Teleport::dyn_pointerValidColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerValidColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerValidColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color pointerInvalidColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::Teleport::dyn_pointerInvalidColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerInvalidColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerInvalidColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color pointerLockedColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::Teleport::dyn_pointerLockedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerLockedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerLockedColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showPlayAreaMarker
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_showPlayAreaMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_showPlayAreaMarker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showPlayAreaMarker"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single teleportFadeTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_teleportFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single meshFadeTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_meshFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_meshFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meshFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single arcDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_arcDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_arcDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform onActivateObjectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_onActivateObjectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_onActivateObjectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onActivateObjectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform onDeactivateObjectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_onDeactivateObjectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_onDeactivateObjectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDeactivateObjectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single activateObjectTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_activateObjectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_activateObjectTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activateObjectTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single deactivateObjectTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_deactivateObjectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_deactivateObjectTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivateObjectTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource pointerAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::Teleport::dyn_pointerAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource loopingAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::Teleport::dyn_loopingAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_loopingAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopingAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource headAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::Teleport::dyn_headAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_headAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource reticleAudioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& Valve::VR::InteractionSystem::Teleport::dyn_reticleAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_reticleAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reticleAudioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip teleportSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_teleportSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip pointerStartSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_pointerStartSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerStartSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerStartSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip pointerLoopSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_pointerLoopSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerLoopSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerLoopSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip pointerStopSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_pointerStopSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerStopSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerStopSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip goodHighlightSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_goodHighlightSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_goodHighlightSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "goodHighlightSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip badHighlightSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& Valve::VR::InteractionSystem::Teleport::dyn_badHighlightSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_badHighlightSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badHighlightSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean debugFloor
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_debugFloor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_debugFloor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugFloor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showOffsetReticle
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_showOffsetReticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_showOffsetReticle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showOffsetReticle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform offsetReticleTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_offsetReticleTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_offsetReticleTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsetReticleTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer floorDebugSphere
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::Teleport::dyn_floorDebugSphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_floorDebugSphere");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorDebugSphere"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LineRenderer floorDebugLine
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& Valve::VR::InteractionSystem::Teleport::dyn_floorDebugLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_floorDebugLine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorDebugLine"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer pointerLineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& Valve::VR::InteractionSystem::Teleport::dyn_pointerLineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerLineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerLineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject teleportPointerObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Teleport::dyn_teleportPointerObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportPointerObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportPointerObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform pointerStartTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_pointerStartTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerStartTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerStartTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand pointerHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Teleport::dyn_pointerHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Player player
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& Valve::VR::InteractionSystem::Teleport::dyn_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.TeleportArc teleportArc
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportArc*& Valve::VR::InteractionSystem::Teleport::dyn_teleportArc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportArc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportArc"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::TeleportArc**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean visible
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_visible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_visible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visible"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.TeleportMarkerBase[] teleportMarkers
[[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::InteractionSystem::TeleportMarkerBase*>& Valve::VR::InteractionSystem::Teleport::dyn_teleportMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportMarkers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportMarkers"))->offset;
  return *reinterpret_cast<::ArrayW<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.TeleportMarkerBase pointedAtTeleportMarker
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportMarkerBase*& Valve::VR::InteractionSystem::Teleport::dyn_pointedAtTeleportMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointedAtTeleportMarker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointedAtTeleportMarker"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::TeleportMarkerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.TeleportMarkerBase teleportingToMarker
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportMarkerBase*& Valve::VR::InteractionSystem::Teleport::dyn_teleportingToMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleportingToMarker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportingToMarker"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::TeleportMarkerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 pointedAtPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Teleport::dyn_pointedAtPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointedAtPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointedAtPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 prevPointedAtPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Teleport::dyn_prevPointedAtPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_prevPointedAtPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevPointedAtPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean teleporting
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_teleporting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_teleporting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleporting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentFadeTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_currentFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_currentFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single meshAlphaPercent
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_meshAlphaPercent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_meshAlphaPercent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meshAlphaPercent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pointerShowStartTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_pointerShowStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerShowStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerShowStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pointerHideStartTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_pointerHideStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_pointerHideStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointerHideStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean meshFading
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_meshFading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_meshFading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meshFading"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fullTintAlpha
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_fullTintAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_fullTintAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullTintAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single invalidReticleMinScale
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMinScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMinScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleMinScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single invalidReticleMaxScale
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMaxScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMaxScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleMaxScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single invalidReticleMinScaleDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMinScaleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMinScaleDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleMinScaleDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single invalidReticleMaxScaleDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMaxScaleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleMaxScaleDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleMaxScaleDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 invalidReticleScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion invalidReticleTargetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_invalidReticleTargetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invalidReticleTargetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform playAreaPreviewTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playAreaPreviewTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] playAreaPreviewCorners
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewCorners");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playAreaPreviewCorners"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] playAreaPreviewSides
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewSides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_playAreaPreviewSides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playAreaPreviewSides"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single loopingAudioMaxVolume
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::dyn_loopingAudioMaxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_loopingAudioMaxVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopingAudioMaxVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine hintCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& Valve::VR::InteractionSystem::Teleport::dyn_hintCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_hintCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hintCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean originalHoverLockState
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_originalHoverLockState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_originalHoverLockState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalHoverLockState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Interactable originalHoveringInteractable
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable*& Valve::VR::InteractionSystem::Teleport::dyn_originalHoveringInteractable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_originalHoveringInteractable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalHoveringInteractable"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.AllowTeleportWhileAttachedToHand allowTeleportWhileAttached
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand*& Valve::VR::InteractionSystem::Teleport::dyn_allowTeleportWhileAttached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_allowTeleportWhileAttached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowTeleportWhileAttached"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::AllowTeleportWhileAttachedToHand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingFeetOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::Teleport::dyn_startingFeetOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_startingFeetOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingFeetOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean movedFeetFarEnough
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::dyn_movedFeetFarEnough() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_movedFeetFarEnough");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movedFeetFarEnough"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action chaperoneInfoInitializedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::Teleport::dyn_chaperoneInfoInitializedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::dyn_chaperoneInfoInitializedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chaperoneInfoInitializedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.ChangeSceneAction
::GlobalNamespace::SteamVR_Events::Action_1<float>* Valve::VR::InteractionSystem::Teleport::ChangeSceneAction(::UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::ChangeSceneAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Teleport", "ChangeSceneAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action_1<float>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.PlayerAction
::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* Valve::VR::InteractionSystem::Teleport::PlayerAction(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::PlayerAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Teleport", "PlayerAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.PlayerPreAction
::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* Valve::VR::InteractionSystem::Teleport::PlayerPreAction(::UnityEngine::Events::UnityAction_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::PlayerPreAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Teleport", "PlayerPreAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SteamVR_Events::Action_1<::Valve::VR::InteractionSystem::TeleportMarkerBase*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.get_instance
::Valve::VR::InteractionSystem::Teleport* Valve::VR::InteractionSystem::Teleport::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Teleport", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Teleport*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.Awake
void Valve::VR::InteractionSystem::Teleport::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.Start
void Valve::VR::InteractionSystem::Teleport::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.OnEnable
void Valve::VR::InteractionSystem::Teleport::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.OnDisable
void Valve::VR::InteractionSystem::Teleport::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.CheckForSpawnPoint
void Valve::VR::InteractionSystem::Teleport::CheckForSpawnPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::CheckForSpawnPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForSpawnPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.HideTeleportPointer
void Valve::VR::InteractionSystem::Teleport::HideTeleportPointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::HideTeleportPointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideTeleportPointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.Update
void Valve::VR::InteractionSystem::Teleport::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.UpdatePointer
void Valve::VR::InteractionSystem::Teleport::UpdatePointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::UpdatePointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.FixedUpdate
void Valve::VR::InteractionSystem::Teleport::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.OnChaperoneInfoInitialized
void Valve::VR::InteractionSystem::Teleport::OnChaperoneInfoInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::OnChaperoneInfoInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChaperoneInfoInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.HidePointer
void Valve::VR::InteractionSystem::Teleport::HidePointer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::HidePointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HidePointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.ShowPointer
void Valve::VR::InteractionSystem::Teleport::ShowPointer(::Valve::VR::InteractionSystem::Hand* newPointerHand, ::Valve::VR::InteractionSystem::Hand* oldPointerHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::ShowPointer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowPointer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newPointerHand), ::il2cpp_utils::ExtractType(oldPointerHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newPointerHand, oldPointerHand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.UpdateTeleportColors
void Valve::VR::InteractionSystem::Teleport::UpdateTeleportColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::UpdateTeleportColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTeleportColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.PlayAudioClip
void Valve::VR::InteractionSystem::Teleport::PlayAudioClip(::UnityEngine::AudioSource* source, ::UnityEngine::AudioClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::PlayAudioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, clip);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.PlayPointerHaptic
void Valve::VR::InteractionSystem::Teleport::PlayPointerHaptic(bool validLocation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::PlayPointerHaptic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayPointerHaptic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(validLocation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, validLocation);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.TryTeleportPlayer
void Valve::VR::InteractionSystem::Teleport::TryTeleportPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::TryTeleportPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryTeleportPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.InitiateTeleportFade
void Valve::VR::InteractionSystem::Teleport::InitiateTeleportFade() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::InitiateTeleportFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateTeleportFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.TeleportPlayer
void Valve::VR::InteractionSystem::Teleport::TeleportPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::TeleportPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TeleportPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.HighlightSelected
void Valve::VR::InteractionSystem::Teleport::HighlightSelected(::Valve::VR::InteractionSystem::TeleportMarkerBase* hitTeleportMarker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::HighlightSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitTeleportMarker)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitTeleportMarker);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.ShowTeleportHint
void Valve::VR::InteractionSystem::Teleport::ShowTeleportHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::ShowTeleportHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowTeleportHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.CancelTeleportHint
void Valve::VR::InteractionSystem::Teleport::CancelTeleportHint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::CancelTeleportHint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelTeleportHint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.TeleportHintCoroutine
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::Teleport::TeleportHintCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::TeleportHintCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TeleportHintCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.IsEligibleForTeleport
bool Valve::VR::InteractionSystem::Teleport::IsEligibleForTeleport(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::IsEligibleForTeleport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEligibleForTeleport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.ShouldOverrideHoverLock
bool Valve::VR::InteractionSystem::Teleport::ShouldOverrideHoverLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::ShouldOverrideHoverLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldOverrideHoverLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.WasTeleportButtonReleased
bool Valve::VR::InteractionSystem::Teleport::WasTeleportButtonReleased(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::WasTeleportButtonReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WasTeleportButtonReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.IsTeleportButtonDown
bool Valve::VR::InteractionSystem::Teleport::IsTeleportButtonDown(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::IsTeleportButtonDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTeleportButtonDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.WasTeleportButtonPressed
bool Valve::VR::InteractionSystem::Teleport::WasTeleportButtonPressed(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::WasTeleportButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WasTeleportButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport.GetPointerStartTransform
::UnityEngine::Transform* Valve::VR::InteractionSystem::Teleport::GetPointerStartTransform(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::GetPointerStartTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointerStartTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport..cctor
void Valve::VR::InteractionSystem::Teleport::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "Teleport", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105
#include "Valve/VR/InteractionSystem/Teleport_-TeleportHintCoroutine-d__105.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Teleport <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Teleport*& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Teleport**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <prevBreakTime>5__2
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$prevBreakTime$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$prevBreakTime$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<prevBreakTime>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <prevHapticPulseTime>5__3
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$prevHapticPulseTime$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$prevHapticPulseTime$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<prevHapticPulseTime>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <pulsed>5__4
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$pulsed$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::dyn_$pulsed$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pulsed>5__4"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105.MoveNext
bool Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Teleport/<TeleportHintCoroutine>d__105.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::Teleport::$TeleportHintCoroutine$d__105*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.TeleportArc
#include "Valve/VR/InteractionSystem/TeleportArc.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 segmentCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportArc::dyn_segmentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_segmentCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "segmentCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single thickness
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_thickness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_thickness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thickness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single arcDuration
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_arcDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_arcDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single segmentBreak
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_segmentBreak() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_segmentBreak");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "segmentBreak"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single arcSpeed
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_arcSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_arcSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::TeleportArc::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 traceLayerMask
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportArc::dyn_traceLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_traceLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "traceLayerMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer[] lineRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LineRenderer*>& Valve::VR::InteractionSystem::TeleportArc::dyn_lineRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_lineRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::LineRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single arcTimeOffset
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_arcTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_arcTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single prevThickness
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportArc::dyn_prevThickness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_prevThickness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevThickness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 prevSegmentCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportArc::dyn_prevSegmentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_prevSegmentCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevSegmentCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean showArc
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportArc::dyn_showArc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_showArc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showArc"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::TeleportArc::dyn_startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 projectileVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::TeleportArc::dyn_projectileVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_projectileVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectileVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useGravity
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportArc::dyn_useGravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_useGravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useGravity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform arcObjectsTransfrom
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::TeleportArc::dyn_arcObjectsTransfrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_arcObjectsTransfrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcObjectsTransfrom"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean arcInvalid
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportArc::dyn_arcInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::dyn_arcInvalid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "arcInvalid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.Start
void Valve::VR::InteractionSystem::TeleportArc::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.Update
void Valve::VR::InteractionSystem::TeleportArc::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.CreateLineRendererObjects
void Valve::VR::InteractionSystem::TeleportArc::CreateLineRendererObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::CreateLineRendererObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLineRendererObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.SetArcData
void Valve::VR::InteractionSystem::TeleportArc::SetArcData(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, bool gravity, bool pointerAtBadAngle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::SetArcData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArcData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(gravity), ::il2cpp_utils::ExtractType(pointerAtBadAngle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, velocity, gravity, pointerAtBadAngle);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.Show
void Valve::VR::InteractionSystem::TeleportArc::Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.Hide
void Valve::VR::InteractionSystem::TeleportArc::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.DrawArc
bool Valve::VR::InteractionSystem::TeleportArc::DrawArc(ByRef<::UnityEngine::RaycastHit> hitInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::DrawArc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawArc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::RaycastHit&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(hitInfo));
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.DrawArcSegment
void Valve::VR::InteractionSystem::TeleportArc::DrawArcSegment(int index, float startTime, float endTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::DrawArcSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawArcSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(endTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, startTime, endTime);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.SetColor
void Valve::VR::InteractionSystem::TeleportArc::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.FindProjectileCollision
float Valve::VR::InteractionSystem::TeleportArc::FindProjectileCollision(ByRef<::UnityEngine::RaycastHit> hitInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::FindProjectileCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindProjectileCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::RaycastHit&>()})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, byref(hitInfo));
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.GetArcPositionAtTime
::UnityEngine::Vector3 Valve::VR::InteractionSystem::TeleportArc::GetArcPositionAtTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::GetArcPositionAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArcPositionAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArc.HideLineSegments
void Valve::VR::InteractionSystem::TeleportArc::HideLineSegments(int startSegment, int endSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArc::HideLineSegments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideLineSegments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startSegment), ::il2cpp_utils::ExtractType(endSegment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startSegment, endSegment);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.TeleportArea
#include "Valve/VR/InteractionSystem/TeleportArea.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds <meshBounds>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& Valve::VR::InteractionSystem::TeleportArea::dyn_$meshBounds$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_$meshBounds$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<meshBounds>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer areaMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportArea::dyn_areaMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_areaMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "areaMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tintColorId
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportArea::dyn_tintColorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_tintColorId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tintColorId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color visibleTintColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportArea::dyn_visibleTintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_visibleTintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visibleTintColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color highlightedTintColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportArea::dyn_highlightedTintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_highlightedTintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlightedTintColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color lockedTintColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportArea::dyn_lockedTintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_lockedTintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockedTintColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean highlighted
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportArea::dyn_highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::dyn_highlighted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlighted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.get_meshBounds
::UnityEngine::Bounds Valve::VR::InteractionSystem::TeleportArea::get_meshBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::get_meshBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_meshBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.set_meshBounds
void Valve::VR::InteractionSystem::TeleportArea::set_meshBounds(::UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::set_meshBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_meshBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.Awake
void Valve::VR::InteractionSystem::TeleportArea::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.Start
void Valve::VR::InteractionSystem::TeleportArea::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.UpdateVisualsInEditor
void Valve::VR::InteractionSystem::TeleportArea::UpdateVisualsInEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::UpdateVisualsInEditor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisualsInEditor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.CalculateBounds
bool Valve::VR::InteractionSystem::TeleportArea::CalculateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::CalculateBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.GetTintColor
::UnityEngine::Color Valve::VR::InteractionSystem::TeleportArea::GetTintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::GetTintColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTintColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.ShouldActivate
bool Valve::VR::InteractionSystem::TeleportArea::ShouldActivate(::UnityEngine::Vector3 playerPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::ShouldActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, playerPosition);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.ShouldMovePlayer
bool Valve::VR::InteractionSystem::TeleportArea::ShouldMovePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::ShouldMovePlayer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.Highlight
void Valve::VR::InteractionSystem::TeleportArea::Highlight(bool highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::Highlight");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, highlight);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.SetAlpha
void Valve::VR::InteractionSystem::TeleportArea::SetAlpha(float tintAlpha, float alphaPercent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::SetAlpha");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tintAlpha, alphaPercent);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportArea.UpdateVisuals
void Valve::VR::InteractionSystem::TeleportArea::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportArea::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.TeleportMarkerBase
#include "Valve/VR/InteractionSystem/TeleportMarkerBase.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean locked
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportMarkerBase::dyn_locked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::dyn_locked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "locked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean markerActive
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportMarkerBase::dyn_markerActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::dyn_markerActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "markerActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.get_showReticle
bool Valve::VR::InteractionSystem::TeleportMarkerBase::get_showReticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::get_showReticle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.SetLocked
void Valve::VR::InteractionSystem::TeleportMarkerBase::SetLocked(bool locked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::SetLocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, locked);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.TeleportPlayer
void Valve::VR::InteractionSystem::TeleportMarkerBase::TeleportPlayer(::UnityEngine::Vector3 pointedAtPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::TeleportPlayer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointedAtPosition);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.UpdateVisuals
void Valve::VR::InteractionSystem::TeleportMarkerBase::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.Highlight
void Valve::VR::InteractionSystem::TeleportMarkerBase::Highlight(bool highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::Highlight");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, highlight);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.SetAlpha
void Valve::VR::InteractionSystem::TeleportMarkerBase::SetAlpha(float tintAlpha, float alphaPercent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::SetAlpha");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tintAlpha, alphaPercent);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.ShouldActivate
bool Valve::VR::InteractionSystem::TeleportMarkerBase::ShouldActivate(::UnityEngine::Vector3 playerPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::ShouldActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, playerPosition);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportMarkerBase.ShouldMovePlayer
bool Valve::VR::InteractionSystem::TeleportMarkerBase::ShouldMovePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportMarkerBase::ShouldMovePlayer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.TeleportPoint
#include "Valve/VR/InteractionSystem/TeleportPoint.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String switchSceneAnimation
::StringW Valve::VR::InteractionSystem::TeleportPoint::_get_switchSceneAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_get_switchSceneAnimation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR.InteractionSystem", "TeleportPoint", "switchSceneAnimation"));
}
// Autogenerated static field setter
// Set static field: static private System.String switchSceneAnimation
void Valve::VR::InteractionSystem::TeleportPoint::_set_switchSceneAnimation(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_set_switchSceneAnimation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "TeleportPoint", "switchSceneAnimation", value));
}
// Autogenerated static field getter
// Get static field: static private System.String moveLocationAnimation
::StringW Valve::VR::InteractionSystem::TeleportPoint::_get_moveLocationAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_get_moveLocationAnimation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR.InteractionSystem", "TeleportPoint", "moveLocationAnimation"));
}
// Autogenerated static field setter
// Set static field: static private System.String moveLocationAnimation
void Valve::VR::InteractionSystem::TeleportPoint::_set_moveLocationAnimation(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_set_moveLocationAnimation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "TeleportPoint", "moveLocationAnimation", value));
}
// Autogenerated static field getter
// Get static field: static private System.String lockedAnimation
::StringW Valve::VR::InteractionSystem::TeleportPoint::_get_lockedAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_get_lockedAnimation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR.InteractionSystem", "TeleportPoint", "lockedAnimation"));
}
// Autogenerated static field setter
// Set static field: static private System.String lockedAnimation
void Valve::VR::InteractionSystem::TeleportPoint::_set_lockedAnimation(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::_set_lockedAnimation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "TeleportPoint", "lockedAnimation", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType teleportType
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType& Valve::VR::InteractionSystem::TeleportPoint::dyn_teleportType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_teleportType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportType"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String title
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::TeleportPoint::dyn_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_title");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "title"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String switchToScene
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::TeleportPoint::dyn_switchToScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_switchToScene");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "switchToScene"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color titleVisibleColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportPoint::dyn_titleVisibleColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_titleVisibleColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "titleVisibleColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color titleHighlightedColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportPoint::dyn_titleHighlightedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_titleHighlightedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "titleHighlightedColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color titleLockedColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportPoint::dyn_titleLockedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_titleLockedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "titleLockedColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean playerSpawnPoint
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportPoint::dyn_playerSpawnPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_playerSpawnPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerSpawnPoint"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean gotReleventComponents
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::TeleportPoint::dyn_gotReleventComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_gotReleventComponents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gotReleventComponents"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer markerMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportPoint::dyn_markerMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_markerMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "markerMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer switchSceneIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportPoint::dyn_switchSceneIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_switchSceneIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "switchSceneIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer moveLocationIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportPoint::dyn_moveLocationIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_moveLocationIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moveLocationIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer lockedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportPoint::dyn_lockedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_lockedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer pointIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::TeleportPoint::dyn_pointIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_pointIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform lookAtJointTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::TeleportPoint::dyn_lookAtJointTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_lookAtJointTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookAtJointTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animation animation
[[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& Valve::VR::InteractionSystem::TeleportPoint::dyn_animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_animation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animation"))->offset;
  return *reinterpret_cast<::UnityEngine::Animation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text titleText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& Valve::VR::InteractionSystem::TeleportPoint::dyn_titleText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_titleText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "titleText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Player player
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& Valve::VR::InteractionSystem::TeleportPoint::dyn_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lookAtPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::TeleportPoint::dyn_lookAtPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_lookAtPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookAtPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tintColorID
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportPoint::dyn_tintColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_tintColorID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tintColorID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color tintColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportPoint::dyn_tintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_tintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tintColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color titleColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::TeleportPoint::dyn_titleColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_titleColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "titleColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fullTitleAlpha
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::TeleportPoint::dyn_fullTitleAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::dyn_fullTitleAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullTitleAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.Awake
void Valve::VR::InteractionSystem::TeleportPoint::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.Start
void Valve::VR::InteractionSystem::TeleportPoint::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.Update
void Valve::VR::InteractionSystem::TeleportPoint::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.SetMeshMaterials
void Valve::VR::InteractionSystem::TeleportPoint::SetMeshMaterials(::UnityEngine::Material* material, ::UnityEngine::Color textColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::SetMeshMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMeshMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(textColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, material, textColor);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.TeleportToScene
void Valve::VR::InteractionSystem::TeleportPoint::TeleportToScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportToScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TeleportToScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.GetRelevantComponents
void Valve::VR::InteractionSystem::TeleportPoint::GetRelevantComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::GetRelevantComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRelevantComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.ReleaseRelevantComponents
void Valve::VR::InteractionSystem::TeleportPoint::ReleaseRelevantComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::ReleaseRelevantComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseRelevantComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.UpdateVisualsInEditor
void Valve::VR::InteractionSystem::TeleportPoint::UpdateVisualsInEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::UpdateVisualsInEditor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisualsInEditor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.get_showReticle
bool Valve::VR::InteractionSystem::TeleportPoint::get_showReticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::get_showReticle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.ShouldActivate
bool Valve::VR::InteractionSystem::TeleportPoint::ShouldActivate(::UnityEngine::Vector3 playerPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::ShouldActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, playerPosition);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.ShouldMovePlayer
bool Valve::VR::InteractionSystem::TeleportPoint::ShouldMovePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::ShouldMovePlayer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.Highlight
void Valve::VR::InteractionSystem::TeleportPoint::Highlight(bool highlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::Highlight");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, highlight);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.UpdateVisuals
void Valve::VR::InteractionSystem::TeleportPoint::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.TeleportPoint.SetAlpha
void Valve::VR::InteractionSystem::TeleportPoint::SetAlpha(float tintAlpha, float alphaPercent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::SetAlpha");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::TeleportMarkerBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tintAlpha, alphaPercent);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType
#include "Valve/VR/InteractionSystem/TeleportPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType MoveToLocation
::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_get_MoveToLocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_get_MoveToLocation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType>("Valve.VR.InteractionSystem", "TeleportPoint/TeleportPointType", "MoveToLocation"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType MoveToLocation
void Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_set_MoveToLocation(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_set_MoveToLocation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "TeleportPoint/TeleportPointType", "MoveToLocation", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType SwitchToNewScene
::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_get_SwitchToNewScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_get_SwitchToNewScene");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType>("Valve.VR.InteractionSystem", "TeleportPoint/TeleportPointType", "SwitchToNewScene"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.TeleportPoint/TeleportPointType SwitchToNewScene
void Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_set_SwitchToNewScene(::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::_set_SwitchToNewScene");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "TeleportPoint/TeleportPointType", "SwitchToNewScene", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::TeleportPoint::TeleportPointType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.RestClient
#include "Proyecto26/RestClient.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: RSG.IPromise`1
#include "RSG/IPromise_1.hpp"
// Including type: Proyecto26.ResponseHelper
#include "Proyecto26/ResponseHelper.hpp"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
// Including type: RSG.Promise`1
#include "RSG/Promise_1.hpp"
// Including type: Proyecto26.RequestException
#include "Proyecto26/RequestException.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.String> _defaultRequestHeaders
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Proyecto26::RestClient::_get__defaultRequestHeaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::_get__defaultRequestHeaders");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("Proyecto26", "RestClient", "_defaultRequestHeaders")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.String> _defaultRequestHeaders
void Proyecto26::RestClient::_set__defaultRequestHeaders(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::_set__defaultRequestHeaders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Proyecto26", "RestClient", "_defaultRequestHeaders", value));
}
// Autogenerated method: Proyecto26.RestClient.Request
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Request(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.Get
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Get(::StringW url) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url);
}
// Autogenerated method: Proyecto26.RestClient.Get
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Get(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.Post
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Post(::StringW url, ::Il2CppObject* body) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(body)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, body);
}
// Autogenerated method: Proyecto26.RestClient.Post
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Post(::StringW url, ::StringW bodyString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(bodyString)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, bodyString);
}
// Autogenerated method: Proyecto26.RestClient.Post
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Post(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.Put
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Put(::StringW url, ::Il2CppObject* body) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(body)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, body);
}
// Autogenerated method: Proyecto26.RestClient.Put
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Put(::StringW url, ::StringW bodyString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(bodyString)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, bodyString);
}
// Autogenerated method: Proyecto26.RestClient.Put
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Put(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.Delete
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Delete(::StringW url) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url);
}
// Autogenerated method: Proyecto26.RestClient.Delete
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Delete(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.Head
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Head(::StringW url) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url);
}
// Autogenerated method: Proyecto26.RestClient.Head
::RSG::IPromise_1<::Proyecto26::ResponseHelper*>* Proyecto26::RestClient::Head(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::RSG::IPromise_1<::Proyecto26::ResponseHelper*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.RestClient.get_DefaultRequestHeaders
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Proyecto26::RestClient::get_DefaultRequestHeaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::get_DefaultRequestHeaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "get_DefaultRequestHeaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Proyecto26.RestClient.set_DefaultRequestHeaders
void Proyecto26::RestClient::set_DefaultRequestHeaders(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::set_DefaultRequestHeaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "set_DefaultRequestHeaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Proyecto26.RestClient.CleanDefaultHeaders
void Proyecto26::RestClient::CleanDefaultHeaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::CleanDefaultHeaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "CleanDefaultHeaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Proyecto26.RestClient.Request
void Proyecto26::RestClient::Request(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.RestClient.Get
void Proyecto26::RestClient::Get(::StringW url, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, callback);
}
// Autogenerated method: Proyecto26.RestClient.Get
void Proyecto26::RestClient::Get(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.RestClient.Post
void Proyecto26::RestClient::Post(::StringW url, ::Il2CppObject* body, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(body), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, body, callback);
}
// Autogenerated method: Proyecto26.RestClient.Post
void Proyecto26::RestClient::Post(::StringW url, ::StringW bodyString, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(bodyString), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, bodyString, callback);
}
// Autogenerated method: Proyecto26.RestClient.Post
void Proyecto26::RestClient::Post(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Post");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.RestClient.Put
void Proyecto26::RestClient::Put(::StringW url, ::Il2CppObject* body, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(body), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, body, callback);
}
// Autogenerated method: Proyecto26.RestClient.Put
void Proyecto26::RestClient::Put(::StringW url, ::StringW bodyString, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(bodyString), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, bodyString, callback);
}
// Autogenerated method: Proyecto26.RestClient.Put
void Proyecto26::RestClient::Put(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Put");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Put", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.RestClient.Delete
void Proyecto26::RestClient::Delete(::StringW url, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, callback);
}
// Autogenerated method: Proyecto26.RestClient.Delete
void Proyecto26::RestClient::Delete(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.RestClient.Head
void Proyecto26::RestClient::Head(::StringW url, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, url, callback);
}
// Autogenerated method: Proyecto26.RestClient.Head
void Proyecto26::RestClient::Head(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RestClient::Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "RestClient", "Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.HttpBase
#include "Proyecto26/HttpBase.hpp"
// Including type: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0
#include "Proyecto26/HttpBase_-CreateRequestAndRetry-d__0.hpp"
// Including type: Proyecto26.HttpBase/<>c__DisplayClass5_0`1
#include "Proyecto26/HttpBase_--c__DisplayClass5_0_1.hpp"
// Including type: Proyecto26.HttpBase/<>c__DisplayClass6_0`1
#include "Proyecto26/HttpBase_--c__DisplayClass6_0_1.hpp"
// Including type: Proyecto26.HttpBase/<SendWebRequest>d__7
#include "Proyecto26/HttpBase_-SendWebRequest-d__7.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Proyecto26.RequestException
#include "Proyecto26/RequestException.hpp"
// Including type: Proyecto26.ResponseHelper
#include "Proyecto26/ResponseHelper.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Proyecto26.HttpBase.CreateRequestAndRetry
::System::Collections::IEnumerator* Proyecto26::HttpBase::CreateRequestAndRetry(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::CreateRequestAndRetry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "CreateRequestAndRetry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.HttpBase.CreateRequest
::UnityEngine::Networking::UnityWebRequest* Proyecto26::HttpBase::CreateRequest(::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::CreateRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "CreateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::UnityWebRequest*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options);
}
// Autogenerated method: Proyecto26.HttpBase.CreateException
::Proyecto26::RequestException* Proyecto26::HttpBase::CreateException(::UnityEngine::Networking::UnityWebRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  return ::il2cpp_utils::RunMethodRethrow<::Proyecto26::RequestException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, request);
}
// Autogenerated method: Proyecto26.HttpBase.DebugLog
void Proyecto26::HttpBase::DebugLog(bool debugEnabled, ::Il2CppObject* message, bool isError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::DebugLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "DebugLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(debugEnabled), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(isError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, debugEnabled, message, isError);
}
// Autogenerated method: Proyecto26.HttpBase.DefaultUnityWebRequest
::System::Collections::IEnumerator* Proyecto26::HttpBase::DefaultUnityWebRequest(::Proyecto26::RequestHelper* options, ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::DefaultUnityWebRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "DefaultUnityWebRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, options, callback);
}
// Autogenerated method: Proyecto26.HttpBase.SendWebRequest
::System::Collections::IEnumerator* Proyecto26::HttpBase::SendWebRequest(::UnityEngine::Networking::UnityWebRequest* request, ::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::SendWebRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "HttpBase", "SendWebRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, request, options);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0
#include "Proyecto26/HttpBase_-CreateRequestAndRetry-d__0.hpp"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Proyecto26.RequestException
#include "Proyecto26/RequestException.hpp"
// Including type: Proyecto26.ResponseHelper
#include "Proyecto26/ResponseHelper.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Proyecto26.RequestHelper options
[[deprecated("Use field access instead!")]] ::Proyecto26::RequestHelper*& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_options");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "options"))->offset;
  return *reinterpret_cast<::Proyecto26::RequestHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<Proyecto26.RequestException,Proyecto26.ResponseHelper> callback
[[deprecated("Use field access instead!")]] ::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>*& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Action_2<::Proyecto26::RequestException*, ::Proyecto26::ResponseHelper*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <retries>5__2
[[deprecated("Use field access instead!")]] int& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$retries$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$retries$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<retries>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.UnityWebRequest <request>5__3
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$request$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::dyn_$request$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<request>5__3"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::UnityWebRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.System.IDisposable.Dispose
void Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.MoveNext
bool Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.<>m__Finally1
void Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.System.Collections.IEnumerator.Reset
void Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<CreateRequestAndRetry>d__0.System.Collections.IEnumerator.get_Current
::Il2CppObject* Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$CreateRequestAndRetry$d__0*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.HttpBase/<SendWebRequest>d__7
#include "Proyecto26/HttpBase_-SendWebRequest-d__7.hpp"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Proyecto26.RequestHelper options
[[deprecated("Use field access instead!")]] ::Proyecto26::RequestHelper*& Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_options");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "options"))->offset;
  return *reinterpret_cast<::Proyecto26::RequestHelper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Networking.UnityWebRequest request
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_request() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::dyn_request");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "request"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::UnityWebRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Proyecto26.HttpBase/<SendWebRequest>d__7.System.IDisposable.Dispose
void Proyecto26::HttpBase::$SendWebRequest$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$SendWebRequest$d__7*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<SendWebRequest>d__7.MoveNext
bool Proyecto26::HttpBase::$SendWebRequest$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$SendWebRequest$d__7*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<SendWebRequest>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Proyecto26::HttpBase::$SendWebRequest$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$SendWebRequest$d__7*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<SendWebRequest>d__7.System.Collections.IEnumerator.Reset
void Proyecto26::HttpBase::$SendWebRequest$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$SendWebRequest$d__7*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.HttpBase/<SendWebRequest>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* Proyecto26::HttpBase::$SendWebRequest$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::HttpBase::$SendWebRequest$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Proyecto26::HttpBase::$SendWebRequest$d__7*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Proyecto26.JsonHelper
#include "Proyecto26/JsonHelper.hpp"
// Including type: Proyecto26.JsonHelper/Wrapper`1
#include "Proyecto26/JsonHelper_Wrapper_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.RequestException
#include "Proyecto26/RequestException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isHttpError
[[deprecated("Use field access instead!")]] bool& Proyecto26::RequestException::dyn__isHttpError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::dyn__isHttpError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isHttpError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isNetworkError
[[deprecated("Use field access instead!")]] bool& Proyecto26::RequestException::dyn__isNetworkError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::dyn__isNetworkError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isNetworkError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _statusCode
[[deprecated("Use field access instead!")]] int64_t& Proyecto26::RequestException::dyn__statusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::dyn__statusCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_statusCode"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _serverMessage
[[deprecated("Use field access instead!")]] ::StringW& Proyecto26::RequestException::dyn__serverMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::dyn__serverMessage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serverMessage"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Proyecto26.RequestException.get_IsHttpError
bool Proyecto26::RequestException::get_IsHttpError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::get_IsHttpError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsHttpError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestException.set_IsHttpError
void Proyecto26::RequestException::set_IsHttpError(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::set_IsHttpError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsHttpError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestException.get_IsNetworkError
bool Proyecto26::RequestException::get_IsNetworkError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::get_IsNetworkError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestException.set_IsNetworkError
void Proyecto26::RequestException::set_IsNetworkError(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::set_IsNetworkError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestException.get_StatusCode
int64_t Proyecto26::RequestException::get_StatusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::get_StatusCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StatusCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestException.set_StatusCode
void Proyecto26::RequestException::set_StatusCode(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::set_StatusCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StatusCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestException.get_ServerMessage
::StringW Proyecto26::RequestException::get_ServerMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::get_ServerMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ServerMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestException.set_ServerMessage
void Proyecto26::RequestException::set_ServerMessage(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestException::set_ServerMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ServerMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Proyecto26.RequestException
#include "Proyecto26/RequestException.hpp"
// Including type: UnityEngine.WWWForm
#include "UnityEngine/WWWForm.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Networking.IMultipartFormSection
#include "UnityEngine/Networking/IMultipartFormSection.hpp"
// Including type: UnityEngine.Networking.CertificateHandler
#include "UnityEngine/Networking/CertificateHandler.hpp"
// Including type: UnityEngine.Networking.UploadHandler
#include "UnityEngine/Networking/UploadHandler.hpp"
// Including type: UnityEngine.Networking.DownloadHandler
#include "UnityEngine/Networking/DownloadHandler.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _uri
[[deprecated("Use field access instead!")]] ::StringW& Proyecto26::RequestHelper::dyn__uri() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__uri");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uri"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _method
[[deprecated("Use field access instead!")]] ::StringW& Proyecto26::RequestHelper::dyn__method() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__method");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_method"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _body
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Proyecto26::RequestHelper::dyn__body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_body"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _bodyString
[[deprecated("Use field access instead!")]] ::StringW& Proyecto26::RequestHelper::dyn__bodyString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__bodyString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bodyString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _bodyRaw
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Proyecto26::RequestHelper::dyn__bodyRaw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__bodyRaw");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bodyRaw"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Int32> _timeout
[[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& Proyecto26::RequestHelper::dyn__timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__timeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeout"))->offset;
  return *reinterpret_cast<::System::Nullable_1<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _contentType
[[deprecated("Use field access instead!")]] ::StringW& Proyecto26::RequestHelper::dyn__contentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__contentType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_contentType"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _retries
[[deprecated("Use field access instead!")]] int& Proyecto26::RequestHelper::dyn__retries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__retries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_retries"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _retrySecondsDelay
[[deprecated("Use field access instead!")]] float& Proyecto26::RequestHelper::dyn__retrySecondsDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__retrySecondsDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_retrySecondsDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<Proyecto26.RequestException,System.Int32> _retryCallback
[[deprecated("Use field access instead!")]] ::System::Action_2<::Proyecto26::RequestException*, int>*& Proyecto26::RequestHelper::dyn__retryCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__retryCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_retryCallback"))->offset;
  return *reinterpret_cast<::System::Action_2<::Proyecto26::RequestException*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enableDebug
[[deprecated("Use field access instead!")]] bool& Proyecto26::RequestHelper::dyn__enableDebug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__enableDebug");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enableDebug"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _chunkedTransfer
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& Proyecto26::RequestHelper::dyn__chunkedTransfer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__chunkedTransfer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chunkedTransfer"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _useHttpContinue
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& Proyecto26::RequestHelper::dyn__useHttpContinue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__useHttpContinue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useHttpContinue"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Int32> _redirectLimit
[[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& Proyecto26::RequestHelper::dyn__redirectLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__redirectLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_redirectLimit"))->offset;
  return *reinterpret_cast<::System::Nullable_1<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ignoreHttpException
[[deprecated("Use field access instead!")]] bool& Proyecto26::RequestHelper::dyn__ignoreHttpException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__ignoreHttpException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ignoreHttpException"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.WWWForm _formData
[[deprecated("Use field access instead!")]] ::UnityEngine::WWWForm*& Proyecto26::RequestHelper::dyn__formData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__formData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_formData"))->offset;
  return *reinterpret_cast<::UnityEngine::WWWForm**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,System.String> _simpleForm
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& Proyecto26::RequestHelper::dyn__simpleForm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__simpleForm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_simpleForm"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Networking.IMultipartFormSection> _formSections
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Networking::IMultipartFormSection*>*& Proyecto26::RequestHelper::dyn__formSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__formSections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_formSections"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Networking::IMultipartFormSection*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.CertificateHandler _certificateHandler
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::CertificateHandler*& Proyecto26::RequestHelper::dyn__certificateHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__certificateHandler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_certificateHandler"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::CertificateHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.UploadHandler _uploadHandler
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UploadHandler*& Proyecto26::RequestHelper::dyn__uploadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__uploadHandler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uploadHandler"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::UploadHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.DownloadHandler _downloadHandler
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::DownloadHandler*& Proyecto26::RequestHelper::dyn__downloadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__downloadHandler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_downloadHandler"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::DownloadHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,System.String> _headers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& Proyecto26::RequestHelper::dyn__headers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__headers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.UnityWebRequest <Request>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& Proyecto26::RequestHelper::dyn_$Request$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn_$Request$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Request>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::UnityWebRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isAborted
[[deprecated("Use field access instead!")]] bool& Proyecto26::RequestHelper::dyn__isAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::dyn__isAborted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isAborted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Uri
::StringW Proyecto26::RequestHelper::get_Uri() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Uri
void Proyecto26::RequestHelper::set_Uri(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Method
::StringW Proyecto26::RequestHelper::get_Method() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Method
void Proyecto26::RequestHelper::set_Method(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Body
::Il2CppObject* Proyecto26::RequestHelper::get_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Body");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Body", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Body
void Proyecto26::RequestHelper::set_Body(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Body");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Body", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_BodyString
::StringW Proyecto26::RequestHelper::get_BodyString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_BodyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BodyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_BodyString
void Proyecto26::RequestHelper::set_BodyString(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_BodyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BodyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_BodyRaw
::ArrayW<uint8_t> Proyecto26::RequestHelper::get_BodyRaw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_BodyRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BodyRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_BodyRaw
void Proyecto26::RequestHelper::set_BodyRaw(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_BodyRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BodyRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Timeout
::System::Nullable_1<int> Proyecto26::RequestHelper::get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Timeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Timeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<int>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Timeout
void Proyecto26::RequestHelper::set_Timeout(::System::Nullable_1<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Timeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Timeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_ContentType
::StringW Proyecto26::RequestHelper::get_ContentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_ContentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_ContentType
void Proyecto26::RequestHelper::set_ContentType(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_ContentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Retries
int Proyecto26::RequestHelper::get_Retries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Retries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Retries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Retries
void Proyecto26::RequestHelper::set_Retries(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Retries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Retries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_RetrySecondsDelay
float Proyecto26::RequestHelper::get_RetrySecondsDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_RetrySecondsDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RetrySecondsDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_RetrySecondsDelay
void Proyecto26::RequestHelper::set_RetrySecondsDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_RetrySecondsDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RetrySecondsDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_RetryCallback
::System::Action_2<::Proyecto26::RequestException*, int>* Proyecto26::RequestHelper::get_RetryCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_RetryCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RetryCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Action_2<::Proyecto26::RequestException*, int>*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_RetryCallback
void Proyecto26::RequestHelper::set_RetryCallback(::System::Action_2<::Proyecto26::RequestException*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_RetryCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RetryCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_EnableDebug
bool Proyecto26::RequestHelper::get_EnableDebug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_EnableDebug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableDebug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_EnableDebug
void Proyecto26::RequestHelper::set_EnableDebug(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_EnableDebug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableDebug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_ChunkedTransfer
::System::Nullable_1<bool> Proyecto26::RequestHelper::get_ChunkedTransfer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_ChunkedTransfer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChunkedTransfer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<bool>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_ChunkedTransfer
void Proyecto26::RequestHelper::set_ChunkedTransfer(::System::Nullable_1<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_ChunkedTransfer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChunkedTransfer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_UseHttpContinue
::System::Nullable_1<bool> Proyecto26::RequestHelper::get_UseHttpContinue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_UseHttpContinue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseHttpContinue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<bool>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_UseHttpContinue
void Proyecto26::RequestHelper::set_UseHttpContinue(::System::Nullable_1<bool> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_UseHttpContinue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseHttpContinue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_RedirectLimit
::System::Nullable_1<int> Proyecto26::RequestHelper::get_RedirectLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_RedirectLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RedirectLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<int>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_RedirectLimit
void Proyecto26::RequestHelper::set_RedirectLimit(::System::Nullable_1<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_RedirectLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RedirectLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_IgnoreHttpException
bool Proyecto26::RequestHelper::get_IgnoreHttpException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_IgnoreHttpException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IgnoreHttpException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_IgnoreHttpException
void Proyecto26::RequestHelper::set_IgnoreHttpException(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_IgnoreHttpException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IgnoreHttpException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_FormData
::UnityEngine::WWWForm* Proyecto26::RequestHelper::get_FormData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_FormData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::WWWForm*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_FormData
void Proyecto26::RequestHelper::set_FormData(::UnityEngine::WWWForm* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_FormData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_SimpleForm
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Proyecto26::RequestHelper::get_SimpleForm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_SimpleForm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SimpleForm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_SimpleForm
void Proyecto26::RequestHelper::set_SimpleForm(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_SimpleForm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SimpleForm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_FormSections
::System::Collections::Generic::List_1<::UnityEngine::Networking::IMultipartFormSection*>* Proyecto26::RequestHelper::get_FormSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_FormSections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormSections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Networking::IMultipartFormSection*>*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_FormSections
void Proyecto26::RequestHelper::set_FormSections(::System::Collections::Generic::List_1<::UnityEngine::Networking::IMultipartFormSection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_FormSections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormSections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_CertificateHandler
::UnityEngine::Networking::CertificateHandler* Proyecto26::RequestHelper::get_CertificateHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_CertificateHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CertificateHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::CertificateHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_CertificateHandler
void Proyecto26::RequestHelper::set_CertificateHandler(::UnityEngine::Networking::CertificateHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_CertificateHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CertificateHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_UploadHandler
::UnityEngine::Networking::UploadHandler* Proyecto26::RequestHelper::get_UploadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_UploadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UploadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::UploadHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_UploadHandler
void Proyecto26::RequestHelper::set_UploadHandler(::UnityEngine::Networking::UploadHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_UploadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UploadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_DownloadHandler
::UnityEngine::Networking::DownloadHandler* Proyecto26::RequestHelper::get_DownloadHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_DownloadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DownloadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::DownloadHandler*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_DownloadHandler
void Proyecto26::RequestHelper::set_DownloadHandler(::UnityEngine::Networking::DownloadHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_DownloadHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DownloadHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Headers
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Proyecto26::RequestHelper::get_Headers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Headers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Headers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Headers
void Proyecto26::RequestHelper::set_Headers(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Headers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Headers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.get_UploadProgress
float Proyecto26::RequestHelper::get_UploadProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_UploadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UploadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.get_UploadedBytes
uint64_t Proyecto26::RequestHelper::get_UploadedBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_UploadedBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UploadedBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.get_DownloadProgress
float Proyecto26::RequestHelper::get_DownloadProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_DownloadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DownloadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.get_DownloadedBytes
uint64_t Proyecto26::RequestHelper::get_DownloadedBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_DownloadedBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DownloadedBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.get_Request
::UnityEngine::Networking::UnityWebRequest* Proyecto26::RequestHelper::get_Request() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::UnityWebRequest*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_Request
void Proyecto26::RequestHelper::set_Request(::UnityEngine::Networking::UnityWebRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.GetHeader
::StringW Proyecto26::RequestHelper::GetHeader(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::GetHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, name);
}
// Autogenerated method: Proyecto26.RequestHelper.get_IsAborted
bool Proyecto26::RequestHelper::get_IsAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::get_IsAborted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.RequestHelper.set_IsAborted
void Proyecto26::RequestHelper::set_IsAborted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::set_IsAborted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsAborted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.RequestHelper.Abort
void Proyecto26::RequestHelper::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::RequestHelper::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Proyecto26.ResponseHelper
#include "Proyecto26/ResponseHelper.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Networking.UnityWebRequest <Request>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& Proyecto26::ResponseHelper::dyn_$Request$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::dyn_$Request$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Request>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Networking::UnityWebRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_Request
::UnityEngine::Networking::UnityWebRequest* Proyecto26::ResponseHelper::get_Request() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Networking::UnityWebRequest*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.set_Request
void Proyecto26::ResponseHelper::set_Request(::UnityEngine::Networking::UnityWebRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::set_Request");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Request", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_StatusCode
int64_t Proyecto26::ResponseHelper::get_StatusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_StatusCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StatusCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_Data
::ArrayW<uint8_t> Proyecto26::ResponseHelper::get_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_Data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_Text
::StringW Proyecto26::ResponseHelper::get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_Error
::StringW Proyecto26::ResponseHelper::get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.get_Headers
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Proyecto26::ResponseHelper::get_Headers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::get_Headers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Headers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: Proyecto26.ResponseHelper.ToString
::StringW Proyecto26::ResponseHelper::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::ResponseHelper::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Proyecto26.StaticCoroutine
#include "Proyecto26/StaticCoroutine.hpp"
// Including type: Proyecto26.StaticCoroutine/CoroutineHolder
#include "Proyecto26/StaticCoroutine_CoroutineHolder.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Proyecto26.StaticCoroutine/CoroutineHolder _runner
::Proyecto26::StaticCoroutine::CoroutineHolder* Proyecto26::StaticCoroutine::_get__runner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::StaticCoroutine::_get__runner");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Proyecto26::StaticCoroutine::CoroutineHolder*>("Proyecto26", "StaticCoroutine", "_runner"));
}
// Autogenerated static field setter
// Set static field: static private Proyecto26.StaticCoroutine/CoroutineHolder _runner
void Proyecto26::StaticCoroutine::_set__runner(::Proyecto26::StaticCoroutine::CoroutineHolder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::StaticCoroutine::_set__runner");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Proyecto26", "StaticCoroutine", "_runner", value));
}
// Autogenerated method: Proyecto26.StaticCoroutine.get_runner
::Proyecto26::StaticCoroutine::CoroutineHolder* Proyecto26::StaticCoroutine::get_runner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::StaticCoroutine::get_runner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "StaticCoroutine", "get_runner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Proyecto26::StaticCoroutine::CoroutineHolder*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Proyecto26.StaticCoroutine.StartCoroutine
::UnityEngine::Coroutine* Proyecto26::StaticCoroutine::StartCoroutine(::System::Collections::IEnumerator* coroutine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::StaticCoroutine::StartCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26", "StaticCoroutine", "StartCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(coroutine)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Coroutine*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, coroutine);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Proyecto26.StaticCoroutine/CoroutineHolder
#include "Proyecto26/StaticCoroutine_CoroutineHolder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Proyecto26.Common.Extensions.Extensions
#include "Proyecto26/Common/Extensions/Extensions.hpp"
// Including type: Proyecto26.ResponseHelper
#include "Proyecto26/ResponseHelper.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
// Including type: Proyecto26.RequestHelper
#include "Proyecto26/RequestHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Proyecto26.Common.Extensions.Extensions.CreateWebResponse
::Proyecto26::ResponseHelper* Proyecto26::Common::Extensions::Extensions::CreateWebResponse(::UnityEngine::Networking::UnityWebRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::Common::Extensions::Extensions::CreateWebResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26.Common.Extensions", "Extensions", "CreateWebResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  return ::il2cpp_utils::RunMethodRethrow<::Proyecto26::ResponseHelper*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, request);
}
// Autogenerated method: Proyecto26.Common.Extensions.Extensions.IsValidRequest
bool Proyecto26::Common::Extensions::Extensions::IsValidRequest(::UnityEngine::Networking::UnityWebRequest* request, ::Proyecto26::RequestHelper* options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Proyecto26::Common::Extensions::Extensions::IsValidRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Proyecto26.Common.Extensions", "Extensions", "IsValidRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, request, options);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RainbowMagic.RainbowMagicSoundSpawn
#include "RainbowMagic/RainbowMagicSoundSpawn.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject prefabSound
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& RainbowMagic::RainbowMagicSoundSpawn::dyn_prefabSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::dyn_prefabSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefabSound"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean destroyWhenDone
[[deprecated("Use field access instead!")]] bool& RainbowMagic::RainbowMagicSoundSpawn::dyn_destroyWhenDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::dyn_destroyWhenDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destroyWhenDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean soundPrefabIsChild
[[deprecated("Use field access instead!")]] bool& RainbowMagic::RainbowMagicSoundSpawn::dyn_soundPrefabIsChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::dyn_soundPrefabIsChild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundPrefabIsChild"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchRandomMultiplier
[[deprecated("Use field access instead!")]] float& RainbowMagic::RainbowMagicSoundSpawn::dyn_pitchRandomMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::dyn_pitchRandomMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchRandomMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RainbowMagic.RainbowMagicSoundSpawn.Start
void RainbowMagic::RainbowMagicSoundSpawn::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewColor
#include "PlayfulSystems/ProgressBar/BarViewColor.hpp"
// Including type: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16
#include "PlayfulSystems/ProgressBar/BarViewColor_-DoBarColorAnim-d__16.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.UI.Graphic graphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& PlayfulSystems::ProgressBar::BarViewColor::dyn_graphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_graphic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "graphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean canOverrideColor
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewColor::dyn_canOverrideColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_canOverrideColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canOverrideColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColor::dyn_defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useGradient
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewColor::dyn_useGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_useGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useGradient"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Gradient barGradient
[[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& PlayfulSystems::ProgressBar::BarViewColor::dyn_barGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_barGradient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "barGradient"))->offset;
  return *reinterpret_cast<::UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color flashColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColor::dyn_flashColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_flashColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single flashcolorAlpha
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColor::dyn_flashcolorAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_flashcolorAlpha");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashcolorAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentValue
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColor::dyn_currentValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_currentValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean flashOnGain
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewColor::dyn_flashOnGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_flashOnGain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashOnGain"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color gainColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColor::dyn_gainColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_gainColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gainColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean flashOnLoss
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewColor::dyn_flashOnLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_flashOnLoss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashOnLoss"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color lossColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColor::dyn_lossColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_lossColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lossColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single flashTime
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColor::dyn_flashTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_flashTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine colorAnim
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& PlayfulSystems::ProgressBar::BarViewColor::dyn_colorAnim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::dyn_colorAnim");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorAnim"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.OnEnable
void PlayfulSystems::ProgressBar::BarViewColor::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.DoBarColorAnim
::System::Collections::IEnumerator* PlayfulSystems::ProgressBar::BarViewColor::DoBarColorAnim(::UnityEngine::Color targetColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::DoBarColorAnim");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoBarColorAnim", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, targetColor, duration);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.SetOverrideColor
void PlayfulSystems::ProgressBar::BarViewColor::SetOverrideColor(::UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::SetOverrideColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverrideColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alpha)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color, alpha);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.GetCurrentColor
::UnityEngine::Color PlayfulSystems::ProgressBar::BarViewColor::GetCurrentColor(float percentage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::GetCurrentColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(percentage)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method, percentage);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.NewChangeStarted
void PlayfulSystems::ProgressBar::BarViewColor::NewChangeStarted(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::NewChangeStarted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.SetBarColor
void PlayfulSystems::ProgressBar::BarViewColor::SetBarColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::SetBarColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.UpdateView
void PlayfulSystems::ProgressBar::BarViewColor::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor.UpdateColor
void PlayfulSystems::ProgressBar::BarViewColor::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16
#include "PlayfulSystems/ProgressBar/BarViewColor_-DoBarColorAnim-d__16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlayfulSystems.ProgressBar.BarViewColor <>4__this
[[deprecated("Use field access instead!")]] ::PlayfulSystems::ProgressBar::BarViewColor*& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::PlayfulSystems::ProgressBar::BarViewColor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color targetColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_targetColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_targetColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <time>5__2
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$time$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::dyn_$time$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<time>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16.System.IDisposable.Dispose
void PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16.MoveNext
bool PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16.System.Collections.IEnumerator.Reset
void PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColor/<DoBarColorAnim>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewColorWhileMoving
#include "PlayfulSystems/ProgressBar/BarViewColorWhileMoving.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.UI.Graphic graphic
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_graphic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_graphic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "graphic"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Graphic**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color colorStatic
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_colorStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_colorStatic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorStatic"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color colorMoving
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_colorMoving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_colorMoving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorMoving"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single blendTimeOnMove
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_blendTimeOnMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_blendTimeOnMove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendTimeOnMove"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single blendTimeOnStop
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_blendTimeOnStop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_blendTimeOnStop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendTimeOnStop"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isMoving
[[deprecated("Use field access instead!")]] bool& PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_isMoving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::dyn_isMoving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isMoving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColorWhileMoving.OnEnable
void PlayfulSystems::ProgressBar::BarViewColorWhileMoving::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColorWhileMoving.GetCurrentColor
::UnityEngine::Color PlayfulSystems::ProgressBar::BarViewColorWhileMoving::GetCurrentColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::GetCurrentColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColorWhileMoving.SetDefaultColor
void PlayfulSystems::ProgressBar::BarViewColorWhileMoving::SetDefaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::SetDefaultColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewColorWhileMoving.UpdateView
void PlayfulSystems::ProgressBar::BarViewColorWhileMoving::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewPosAnchors
#include "PlayfulSystems/ProgressBar/BarViewPosAnchors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosAnchors.UpdateView
void PlayfulSystems::ProgressBar::BarViewPosAnchors::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosAnchors::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::BarViewSizeAnchors*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayfulSystems.ProgressBar.BarViewPosImageFill
#include "PlayfulSystems/ProgressBar/BarViewPosImageFill.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform rectTrans
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_rectTrans() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_rectTrans");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rectTrans"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image referenceImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_referenceImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_referenceImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "referenceImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single offset
[[deprecated("Use field access instead!")]] float& PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::dyn_offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.GetAnchor
::UnityEngine::Vector2 PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchor(float currentDisplay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentDisplay)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, currentDisplay);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.GetAnchorHorizontal
::UnityEngine::Vector2 PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorHorizontal(float fillAmount, int fillOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchorHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fillAmount), ::il2cpp_utils::ExtractType(fillOrigin)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, fillAmount, fillOrigin);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.GetAnchorVertical
::UnityEngine::Vector2 PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorVertical(float fillAmount, int fillOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorVertical");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchorVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fillAmount), ::il2cpp_utils::ExtractType(fillOrigin)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, fillAmount, fillOrigin);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.GetAnchorRadial360
::UnityEngine::Vector2 PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorRadial360(float fillAmount, int fillOrigin, bool fillClockwise) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::GetAnchorRadial360");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchorRadial360", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fillAmount), ::il2cpp_utils::ExtractType(fillOrigin), ::il2cpp_utils::ExtractType(fillClockwise)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, fillAmount, fillOrigin, fillClockwise);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.GetPointOnCircle
::UnityEngine::Vector2 PlayfulSystems::ProgressBar::BarViewPosImageFill::GetPointOnCircle(float degrees) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::GetPointOnCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointOnCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(degrees)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, degrees);
}
// Autogenerated method: PlayfulSystems.ProgressBar.BarViewPosImageFill.UpdateView
void PlayfulSystems::ProgressBar::BarViewPosImageFill::UpdateView(float currentValue, float targetValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewPosImageFill::UpdateView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayfulSystems::ProgressBar::ProgressBarProView*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentValue, targetValue);
}
