// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: Valve.VR.Compositor_CumulativeStats
#include "Valve/VR/Compositor_CumulativeStats.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRCompositor FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRCompositor& Valve::VR::CVRCompositor::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRCompositor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetTrackingSpace
void Valve::VR::CVRCompositor::SetTrackingSpace(::Valve::VR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::SetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetTrackingSpace
::Valve::VR::ETrackingUniverseOrigin Valve::VR::CVRCompositor::GetTrackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.WaitGetPoses
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::WaitGetPoses(::ArrayW<::Valve::VR::TrackedDevicePose_t> pRenderPoseArray, ::ArrayW<::Valve::VR::TrackedDevicePose_t> pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::WaitGetPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitGetPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoses
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoses(::ArrayW<::Valve::VR::TrackedDevicePose_t> pRenderPoseArray, ::ArrayW<::Valve::VR::TrackedDevicePose_t> pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetLastPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ByRef<::Valve::VR::TrackedDevicePose_t> pOutputPose, ByRef<::Valve::VR::TrackedDevicePose_t> pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pOutputGamePose)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, byref(pOutputPose), byref(pOutputGamePose));
}
// Autogenerated method: Valve.VR.CVRCompositor.Submit
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::Submit(::Valve::VR::EVREye eEye, ByRef<::Valve::VR::Texture_t> pTexture, ByRef<::Valve::VR::VRTextureBounds_t> pBounds, ::Valve::VR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::Submit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pTexture), ::il2cpp_utils::ExtractType(pBounds), ::il2cpp_utils::ExtractType(nSubmitFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, byref(pTexture), byref(pBounds), nSubmitFlags);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearLastSubmittedFrame
void Valve::VR::CVRCompositor::ClearLastSubmittedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ClearLastSubmittedFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLastSubmittedFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.PostPresentHandoff
void Valve::VR::CVRCompositor::PostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::PostPresentHandoff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostPresentHandoff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTiming
bool Valve::VR::CVRCompositor::GetFrameTiming(ByRef<::Valve::VR::Compositor_FrameTiming> pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetFrameTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(unFramesAgo)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pTiming), unFramesAgo);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimings
uint Valve::VR::CVRCompositor::GetFrameTimings(ByRef<::Valve::VR::Compositor_FrameTiming> pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetFrameTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(nFrames)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(pTiming), nFrames);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimeRemaining
float Valve::VR::CVRCompositor::GetFrameTimeRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetFrameTimeRemaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimeRemaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCumulativeStats
void Valve::VR::CVRCompositor::GetCumulativeStats(ByRef<::Valve::VR::Compositor_CumulativeStats> pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetCumulativeStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCumulativeStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pStats), ::il2cpp_utils::ExtractType(nStatsSizeInBytes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pStats), nStatsSizeInBytes);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeToColor
void Valve::VR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::FadeToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue), ::il2cpp_utils::ExtractType(fAlpha), ::il2cpp_utils::ExtractType(bBackground)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentFadeColor
::Valve::VR::HmdColor_t Valve::VR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetCurrentFadeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bBackground)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeGrid
void Valve::VR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::FadeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(bFadeIn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentGridAlpha
float Valve::VR::CVRCompositor::GetCurrentGridAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetCurrentGridAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentGridAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetSkyboxOverride
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SetSkyboxOverride(::ArrayW<::Valve::VR::Texture_t> pTextures) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::SetSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTextures)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, pTextures);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearSkyboxOverride
void Valve::VR::CVRCompositor::ClearSkyboxOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ClearSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorBringToFront
void Valve::VR::CVRCompositor::CompositorBringToFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::CompositorBringToFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorBringToFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorGoToBack
void Valve::VR::CVRCompositor::CompositorGoToBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::CompositorGoToBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorGoToBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorQuit
void Valve::VR::CVRCompositor::CompositorQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::CompositorQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsFullscreen
bool Valve::VR::CVRCompositor::IsFullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::IsFullscreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFullscreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentSceneFocusProcess
uint Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastFrameRenderer
uint Valve::VR::CVRCompositor::GetLastFrameRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetLastFrameRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastFrameRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CanRenderScene
bool Valve::VR::CVRCompositor::CanRenderScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::CanRenderScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanRenderScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShowMirrorWindow
void Valve::VR::CVRCompositor::ShowMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ShowMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.HideMirrorWindow
void Valve::VR::CVRCompositor::HideMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::HideMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsMirrorWindowVisible
bool Valve::VR::CVRCompositor::IsMirrorWindowVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::IsMirrorWindowVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMirrorWindowVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorDumpImages
void Valve::VR::CVRCompositor::CompositorDumpImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::CompositorDumpImages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorDumpImages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShouldAppRenderWithLowResources
bool Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceInterleavedReprojectionOn
void Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bOverride)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceReconnectProcess
void Valve::VR::CVRCompositor::ForceReconnectProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ForceReconnectProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceReconnectProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SuspendRendering
void Valve::VR::CVRCompositor::SuspendRendering(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::SuspendRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SuspendRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bSuspend)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureD3D11
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureD3D11(::Valve::VR::EVREye eEye, ::System::IntPtr pD3D11DeviceOrResource, ByRef<::System::IntPtr> ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, byref(ppD3D11ShaderResourceView));
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseMirrorTextureD3D11
void Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11(::System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11ShaderResourceView)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureGL
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureGL(::Valve::VR::EVREye eEye, ByRef<uint> pglTextureId, ::System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetMirrorTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pglSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, byref(pglTextureId), pglSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseSharedGLTexture
bool Valve::VR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, ::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::ReleaseSharedGLTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseSharedGLTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glTextureId), ::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.LockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::LockGLSharedTextureForAccess(::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::LockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.UnlockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess(::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired(::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired(::System::IntPtr pPhysicalDevice, ::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPhysicalDevice), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetExplicitTimingMode
void Valve::VR::CVRCompositor::SetExplicitTimingMode(::Valve::VR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::SetExplicitTimingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExplicitTimingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTimingMode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: Valve.VR.CVRCompositor.SubmitExplicitTimingData
::Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SubmitExplicitTimingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::SubmitExplicitTimingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitExplicitTimingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsMotionSmoothingEnabled
bool Valve::VR::CVRCompositor::IsMotionSmoothingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRCompositor::IsMotionSmoothingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMotionSmoothingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVROverlay/_PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.CVROverlay/PollNextOverlayEventUnion
#include "Valve/VR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVROverlay FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVROverlay& Valve::VR::CVROverlay::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVROverlay*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVROverlay.FindOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::FindOverlay(::StringW pchOverlayKey, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::FindOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateOverlay(::StringW pchOverlayKey, ::StringW pchOverlayName, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::CreateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayName), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.DestroyOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::DestroyOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetHighQualityOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetHighQualityOverlay
uint64_t Valve::VR::CVROverlay::GetHighQualityOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayKey
uint Valve::VR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayName
uint Valve::VR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayName
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::StringW pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayImageData
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unBufferSize, ByRef<uint> punWidth, ByRef<uint> punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayImageData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayImageData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(punWidth), ::il2cpp_utils::ExtractType(punHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, byref(punWidth), byref(punHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayErrorNameFromEnum
::StringW Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum(::Valve::VR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderingPid
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unPID)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderingPid
uint Valve::VR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFlag
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(bEnabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlag
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, ByRef<bool> pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(pbEnabled)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, byref(pbEnabled));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayColor
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayColor
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfRed), ::il2cpp_utils::ExtractType(pfGreen), ::il2cpp_utils::ExtractType(pfBlue)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfRed), byref(pfGreen), byref(pfBlue));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAlpha
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fAlpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAlpha
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, ByRef<float> pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfAlpha)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfAlpha));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexelAspect
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fTexelAspect)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexelAspect
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, ByRef<float> pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfTexelAspect)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfTexelAspect));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlaySortOrder
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unSortOrder)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlaySortOrder
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, ByRef<uint> punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punSortOrder)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punSortOrder));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayWidthInMeters
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fWidthInMeters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayWidthInMeters
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, ByRef<float> pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfWidthInMeters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfWidthInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fMinDistanceInMeters), ::il2cpp_utils::ExtractType(fMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfMinDistanceInMeters), ::il2cpp_utils::ExtractType(pfMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfMinDistanceInMeters), byref(pfMaxDistanceInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureColorSpace
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, ::Valve::VR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureColorSpace
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, ByRef<::Valve::VR::EColorSpace> peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTextureColorSpace));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureBounds
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureBounds
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderModel
uint Valve::VR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::HmdColor_t> pColor, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pColor), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pColor), byref(pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderModel
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::StringW pchRenderModel, ByRef<::Valve::VR::HmdColor_t> pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchRenderModel), ::il2cpp_utils::ExtractType(pColor)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, byref(pColor));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformType
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayTransformType> peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTransformType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTransformType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTransformType));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformAbsolute
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformAbsolute
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, ByRef<::Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTrackingOrigin), byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, ByRef<uint> punTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punTrackedDevice), byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, ByRef<uint> punDeviceIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punDeviceIndex), pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformOverlayRelative
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, ByRef<uint64_t> ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(ulOverlayHandleParent), byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformOverlayRelative
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ShowOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.HideOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::HideOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.IsOverlayVisible
bool Valve::VR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::IsOverlayVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOverlayVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetTransformForOverlayCoordinates
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ::Valve::VR::HmdVector2_t coordinatesInOverlay, ByRef<::Valve::VR::HmdMatrix34_t> pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetTransformForOverlayCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(coordinatesInOverlay), ::il2cpp_utils::ExtractType(pmatTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, byref(pmatTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.PollNextOverlayEvent
bool Valve::VR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::PollNextOverlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextOverlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayInputMethod
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayInputMethod> peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peInputMethod)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peInputMethod));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayInputMethod
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMethod)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayMouseScale
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayMouseScale
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.ComputeOverlayIntersection
bool Valve::VR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<::Valve::VR::VROverlayIntersectionResults_t> pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ComputeOverlayIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeOverlayIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pParams), ::il2cpp_utils::ExtractType(pResults)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pParams), byref(pResults));
}
// Autogenerated method: Valve.VR.CVROverlay.IsHoverTargetOverlay
bool Valve::VR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::IsHoverTargetOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsHoverTargetOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetGamepadFocusOverlay
uint64_t Valve::VR::CVROverlay::GetGamepadFocusOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetGamepadFocusOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulNewFocusOverlay)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayNeighbor
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayNeighbor(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom), ::il2cpp_utils::ExtractType(ulTo)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.CVROverlay.MoveGamepadFocusToNeighbor
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayDualAnalogTransform
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(pvCenter), ::il2cpp_utils::ExtractType(fRadius)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), fRadius);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayDualAnalogTransform
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(pvCenter), ::il2cpp_utils::ExtractType(pfRadius)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), byref(pfRadius));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexture
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, ByRef<::Valve::VR::Texture_t> pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pTexture)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pTexture));
}
// Autogenerated method: Valve.VR.CVROverlay.ClearOverlayTexture
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ClearOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRaw
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unWidth), ::il2cpp_utils::ExtractType(unHeight), ::il2cpp_utils::ExtractType(unDepth)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFromFile
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::StringW pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchFilePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexture
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, ByRef<::System::IntPtr> pNativeTextureHandle, ::System::IntPtr pNativeTextureRef, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<::Valve::VR::ETextureType> pAPIType, ByRef<::Valve::VR::EColorSpace> pColorSpace, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle), ::il2cpp_utils::ExtractType(pNativeTextureRef), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight), ::il2cpp_utils::ExtractType(pNativeFormat), ::il2cpp_utils::ExtractType(pAPIType), ::il2cpp_utils::ExtractType(pColorSpace), ::il2cpp_utils::ExtractType(pTextureBounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pNativeTextureHandle), pNativeTextureRef, byref(pWidth), byref(pHeight), byref(pNativeFormat), byref(pAPIType), byref(pColorSpace), byref(pTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.ReleaseNativeOverlayHandle
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, ::System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ReleaseNativeOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureSize
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, ByRef<uint> pWidth, ByRef<uint> pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pWidth), byref(pHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateDashboardOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateDashboardOverlay(::StringW pchOverlayKey, ::StringW pchOverlayFriendlyName, ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::CreateDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayFriendlyName), ::il2cpp_utils::ExtractType(pMainHandle), ::il2cpp_utils::ExtractType(pThumbnailHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, byref(pMainHandle), byref(pThumbnailHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.IsDashboardVisible
bool Valve::VR::CVROverlay::IsDashboardVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::IsDashboardVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDashboardVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.IsActiveDashboardOverlay
bool Valve::VR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::IsActiveDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActiveDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetDashboardOverlaySceneProcess
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unProcessId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.CVROverlay.GetDashboardOverlaySceneProcess
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, ByRef<uint> punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punProcessId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punProcessId));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowDashboard
void Valve::VR::CVROverlay::ShowDashboard(::StringW pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ShowDashboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDashboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayToShow)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.CVROverlay.GetPrimaryDashboardDevice
uint Valve::VR::CVROverlay::GetPrimaryDashboardDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetPrimaryDashboardDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboard
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ShowKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboardForOverlay
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ShowKeyboardForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboardForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetKeyboardText
uint Valve::VR::CVROverlay::GetKeyboardText(::System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetKeyboardText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeyboardText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(cchText)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.CVROverlay.HideKeyboard
void Valve::VR::CVROverlay::HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::HideKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardTransformAbsolute
void Valve::VR::CVROverlay::SetKeyboardTransformAbsolute(::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetKeyboardTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToKeyboardTransform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eTrackingOrigin, byref(pmatTrackingOriginToKeyboardTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardPositionForOverlay
void Valve::VR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, ::Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetKeyboardPositionForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(avoidRect)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayIntersectionMask
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::SetOverlayIntersectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayIntersectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pMaskPrimitives), ::il2cpp_utils::ExtractType(unNumMaskPrimitives), ::il2cpp_utils::ExtractType(unPrimitiveSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pMaskPrimitives), unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlags
::Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, ByRef<uint> pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::GetOverlayFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pFlags));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowMessageOverlay
::Valve::VR::VRMessageOverlayResponse Valve::VR::CVROverlay::ShowMessageOverlay(::StringW pchText, ::StringW pchCaption, ::StringW pchButton0Text, ::StringW pchButton1Text, ::StringW pchButton2Text, ::StringW pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::ShowMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(pchCaption), ::il2cpp_utils::ExtractType(pchButton0Text), ::il2cpp_utils::ExtractType(pchButton1Text), ::il2cpp_utils::ExtractType(pchButton2Text), ::il2cpp_utils::ExtractType(pchButton3Text)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.CVROverlay.CloseMessageOverlay
void Valve::VR::CVROverlay::CloseMessageOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::CloseMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay/_PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.Invoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVROverlay::_PollNextOverlayEventPacked*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.BeginInvoke
::System::IAsyncResult* Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVROverlay::_PollNextOverlayEventPacked*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.EndInvoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke(ByRef<::Valve::VR::VREvent_t_Packed> pEvent, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVROverlay::_PollNextOverlayEventPacked*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRRenderModels/_GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.CVRRenderModels/GetComponentStateUnion
#include "Valve/VR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRRenderModels FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRRenderModels& Valve::VR::CVRRenderModels::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRRenderModels*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadRenderModel_Async
::Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadRenderModel_Async(::StringW pchRenderModelName, ByRef<::System::IntPtr> ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::LoadRenderModel_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(ppRenderModel)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, byref(ppRenderModel));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeRenderModel
void Valve::VR::CVRRenderModels::FreeRenderModel(::System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTexture_Async
::Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTexture_Async(int textureId, ByRef<::System::IntPtr> ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::LoadTexture_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTexture_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(ppTexture)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, byref(ppTexture));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTexture
void Valve::VR::CVRRenderModels::FreeTexture(::System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::FreeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTexture)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTextureD3D11_Async
::Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, ::System::IntPtr pD3D11Device, ByRef<::System::IntPtr> ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::LoadTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pD3D11Device), ::il2cpp_utils::ExtractType(ppD3D11Texture2D)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, byref(ppD3D11Texture2D));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadIntoTextureD3D11_Async
::Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, ::System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pDstTexture)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTextureD3D11
void Valve::VR::CVRRenderModels::FreeTextureD3D11(::System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::FreeTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11Texture2D)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelName
uint Valve::VR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, ::System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unRenderModelIndex), ::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelCount
uint Valve::VR::CVRRenderModels::GetRenderModelCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetRenderModelCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentCount
uint Valve::VR::CVRRenderModels::GetComponentCount(::StringW pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentName
uint Valve::VR::CVRRenderModels::GetComponentName(::StringW pchRenderModelName, uint unComponentIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unComponentIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameLen)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentButtonMask
uint64_t Valve::VR::CVRRenderModels::GetComponentButtonMask(::StringW pchRenderModelName, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentButtonMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentButtonMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentRenderModelName
uint Valve::VR::CVRRenderModels::GetComponentRenderModelName(::StringW pchRenderModelName, ::StringW pchComponentName, ::System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentStateForDevicePath
bool Valve::VR::CVRRenderModels::GetComponentStateForDevicePath(::StringW pchRenderModelName, ::StringW pchComponentName, uint64_t devicePath, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentStateForDevicePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentStateForDevicePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentState
bool Valve::VR::CVRRenderModels::GetComponentState(::StringW pchRenderModelName, ::StringW pchComponentName, ByRef<::Valve::VR::VRControllerState_t> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetComponentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels.RenderModelHasComponent
bool Valve::VR::CVRRenderModels::RenderModelHasComponent(::StringW pchRenderModelName, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::RenderModelHasComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderModelHasComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelThumbnailURL
uint Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, ByRef<::Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelOriginalPath
uint Valve::VR::CVRRenderModels::GetRenderModelOriginalPath(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, ByRef<::Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetRenderModelOriginalPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelOriginalPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::StringW Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum(::Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels/_GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.Invoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRRenderModels::_GetComponentStatePacked*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.BeginInvoke
::System::IAsyncResult* Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRRenderModels::_GetComponentStatePacked*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState), callback, object);
}
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.EndInvoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke(ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRRenderModels::_GetComponentStatePacked*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pControllerState), byref(pState), byref(pComponentState), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRNotifications
#include "Valve/VR/CVRNotifications.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRNotifications FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRNotifications& Valve::VR::CVRNotifications::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRNotifications::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRNotifications*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRNotifications.CreateNotification
::Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::CreateNotification(uint64_t ulOverlayHandle, uint64_t ulUserValue, ::Valve::VR::EVRNotificationType type, ::StringW pchText, ::Valve::VR::EVRNotificationStyle style, ByRef<::Valve::VR::NotificationBitmap_t> pImage, ByRef<uint> pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRNotifications::CreateNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, byref(pImage), byref(pNotificationId));
}
// Autogenerated method: Valve.VR.CVRNotifications.RemoveNotification
::Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::RemoveNotification(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRNotifications::RemoveNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRSettings FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRSettings& Valve::VR::CVRSettings::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRSettings.GetSettingsErrorNameFromEnum
::StringW Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum(::Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.CVRSettings.Sync
bool Valve::VR::CVRSettings::Sync(bool bForce, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::Sync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bForce, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetBool
void Valve::VR::CVRSettings::SetBool(::StringW pchSection, ::StringW pchSettingsKey, bool bValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::SetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetInt32
void Valve::VR::CVRSettings::SetInt32(::StringW pchSection, ::StringW pchSettingsKey, int nValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::SetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetFloat
void Valve::VR::CVRSettings::SetFloat(::StringW pchSection, ::StringW pchSettingsKey, float flValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.SetString
void Valve::VR::CVRSettings::SetString(::StringW pchSection, ::StringW pchSettingsKey, ::StringW pchValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::SetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetBool
bool Valve::VR::CVRSettings::GetBool(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetInt32
int Valve::VR::CVRSettings::GetInt32(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::GetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetFloat
float Valve::VR::CVRSettings::GetFloat(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.GetString
void Valve::VR::CVRSettings::GetString(::StringW pchSection, ::StringW pchSettingsKey, ::System::Text::StringBuilder* pchValue, uint unValueLen, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveSection
void Valve::VR::CVRSettings::RemoveSection(::StringW pchSection, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::RemoveSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, byref(peError));
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveKeyInSection
void Valve::VR::CVRSettings::RemoveKeyInSection(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSettings::RemoveKeyInSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRScreenshots FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRScreenshots& Valve::VR::CVRScreenshots::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRScreenshots*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRScreenshots.RequestScreenshot
::Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::RequestScreenshot(ByRef<uint> pOutScreenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchPreviewFilename, ::StringW pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::RequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.CVRScreenshots.HookScreenshot
::Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::HookScreenshot(::ArrayW<::Valve::VR::EVRScreenshotType> pSupportedTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::HookScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HookScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes);
}
// Autogenerated method: Valve.VR.CVRScreenshots.GetScreenshotPropertyType
::Valve::VR::EVRScreenshotType Valve::VR::CVRScreenshots::GetScreenshotPropertyType(uint screenshotHandle, ByRef<::Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::GetScreenshotPropertyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, byref(pError));
}
// Autogenerated method: Valve.VR.CVRScreenshots.GetScreenshotPropertyFilename
uint Valve::VR::CVRScreenshots::GetScreenshotPropertyFilename(uint screenshotHandle, ::Valve::VR::EVRScreenshotPropertyFilenames filenameType, ::System::Text::StringBuilder* pchFilename, uint cchFilename, ByRef<::Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::GetScreenshotPropertyFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, byref(pError));
}
// Autogenerated method: Valve.VR.CVRScreenshots.UpdateScreenshotProgress
::Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::UpdateScreenshotProgress(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::UpdateScreenshotProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScreenshotProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: Valve.VR.CVRScreenshots.TakeStereoScreenshot
::Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::TakeStereoScreenshot(ByRef<uint> pOutScreenshotHandle, ::StringW pchPreviewFilename, ::StringW pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.CVRScreenshots.SubmitScreenshot
::Valve::VR::EVRScreenshotError Valve::VR::CVRScreenshots::SubmitScreenshot(uint screenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchSourcePreviewFilename, ::StringW pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRScreenshots::SubmitScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRResources
#include "Valve/VR/CVRResources.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRResources FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRResources& Valve::VR::CVRResources::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRResources::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRResources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRResources.LoadSharedResource
uint Valve::VR::CVRResources::LoadSharedResource(::StringW pchResourceName, ::StringW pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRResources::LoadSharedResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSharedResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.CVRResources.GetResourceFullPath
uint Valve::VR::CVRResources::GetResourceFullPath(::StringW pchResourceName, ::StringW pchResourceTypeDirectory, ::System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRResources::GetResourceFullPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResourceFullPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRDriverManager
#include "Valve/VR/CVRDriverManager.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRDriverManager FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRDriverManager& Valve::VR::CVRDriverManager::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRDriverManager::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRDriverManager*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverCount
uint Valve::VR::CVRDriverManager::GetDriverCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRDriverManager::GetDriverCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverName
uint Valve::VR::CVRDriverManager::GetDriverName(uint nDriver, ::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRDriverManager::GetDriverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverHandle
uint64_t Valve::VR::CVRDriverManager::GetDriverHandle(::StringW pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRDriverManager::GetDriverHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRInput
#include "Valve/VR/CVRInput.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.InputDigitalActionData_t
#include "Valve/VR/InputDigitalActionData_t.hpp"
// Including type: Valve.VR.InputAnalogActionData_t
#include "Valve/VR/InputAnalogActionData_t.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.InputPoseActionData_t
#include "Valve/VR/InputPoseActionData_t.hpp"
// Including type: Valve.VR.InputSkeletalActionData_t
#include "Valve/VR/InputSkeletalActionData_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRSkeletalTransformSpace
#include "Valve/VR/EVRSkeletalTransformSpace.hpp"
// Including type: Valve.VR.EVRSkeletalReferencePose
#include "Valve/VR/EVRSkeletalReferencePose.hpp"
// Including type: Valve.VR.EVRSkeletalTrackingLevel
#include "Valve/VR/EVRSkeletalTrackingLevel.hpp"
// Including type: Valve.VR.EVRSkeletalMotionRange
#include "Valve/VR/EVRSkeletalMotionRange.hpp"
// Including type: Valve.VR.VRSkeletalSummaryData_t
#include "Valve/VR/VRSkeletalSummaryData_t.hpp"
// Including type: Valve.VR.InputOriginInfo_t
#include "Valve/VR/InputOriginInfo_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRInput FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRInput& Valve::VR::CVRInput::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRInput*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRInput.SetActionManifestPath
::Valve::VR::EVRInputError Valve::VR::CVRInput::SetActionManifestPath(::StringW pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::SetActionManifestPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActionManifestPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: Valve.VR.CVRInput.GetActionSetHandle
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetActionSetHandle(::StringW pchActionSetName, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetActionSetHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionSetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionSetName, byref(pHandle));
}
// Autogenerated method: Valve.VR.CVRInput.GetActionHandle
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetActionHandle(::StringW pchActionName, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetActionHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionName, byref(pHandle));
}
// Autogenerated method: Valve.VR.CVRInput.GetInputSourceHandle
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetInputSourceHandle(::StringW pchInputSourcePath, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetInputSourceHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputSourceHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, byref(pHandle));
}
// Autogenerated method: Valve.VR.CVRInput.UpdateActionState
::Valve::VR::EVRInputError Valve::VR::CVRInput::UpdateActionState(::ArrayW<::Valve::VR::VRActiveActionSet_t> pSets, uint unSizeOfVRSelectedActionSet_t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::UpdateActionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateActionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t);
}
// Autogenerated method: Valve.VR.CVRInput.GetDigitalActionData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetDigitalActionData(uint64_t action, ByRef<::Valve::VR::InputDigitalActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetDigitalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDigitalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.CVRInput.GetAnalogActionData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetAnalogActionData(uint64_t action, ByRef<::Valve::VR::InputAnalogActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetAnalogActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnalogActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.CVRInput.GetPoseActionData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetPoseActionData(uint64_t action, ::Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ByRef<::Valve::VR::InputPoseActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetPoseActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoseActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalActionData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalActionData(uint64_t action, ByRef<::Valve::VR::InputSkeletalActionData_t> pActionData, uint unActionDataSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize);
}
// Autogenerated method: Valve.VR.CVRInput.GetBoneCount
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetBoneCount(uint64_t action, ByRef<uint> pBoneCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetBoneCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pBoneCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pBoneCount));
}
// Autogenerated method: Valve.VR.CVRInput.GetBoneHierarchy
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetBoneHierarchy(uint64_t action, ::ArrayW<int> pParentIndices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetBoneHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pParentIndices)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, pParentIndices);
}
// Autogenerated method: Valve.VR.CVRInput.GetBoneName
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetBoneName(uint64_t action, int nBoneIndex, ::System::Text::StringBuilder* pchBoneName, uint unNameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetBoneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(nBoneIndex), ::il2cpp_utils::ExtractType(pchBoneName), ::il2cpp_utils::ExtractType(unNameBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, nBoneIndex, pchBoneName, unNameBufferSize);
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalReferenceTransforms
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalReferenceTransforms(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalReferencePose eReferencePose, ::ArrayW<::Valve::VR::VRBoneTransform_t> pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalReferenceTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalReferenceTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eReferencePose), ::il2cpp_utils::ExtractType(pTransformArray)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eReferencePose, pTransformArray);
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalTrackingLevel
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalTrackingLevel(uint64_t action, ByRef<::Valve::VR::EVRSkeletalTrackingLevel> pSkeletalTrackingLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalTrackingLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalTrackingLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pSkeletalTrackingLevel)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pSkeletalTrackingLevel));
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalBoneData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalBoneData(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ::ArrayW<::Valve::VR::VRBoneTransform_t> pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray);
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalSummaryData
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalSummaryData(uint64_t action, ByRef<::Valve::VR::VRSkeletalSummaryData_t> pSkeletalSummaryData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalSummaryData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalSummaryData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pSkeletalSummaryData)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pSkeletalSummaryData));
}
// Autogenerated method: Valve.VR.CVRInput.GetSkeletalBoneDataCompressed
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetSkeletalBoneDataCompressed(uint64_t action, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ::System::IntPtr pvCompressedData, uint unCompressedSize, ByRef<uint> punRequiredCompressedSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetSkeletalBoneDataCompressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneDataCompressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eMotionRange, pvCompressedData, unCompressedSize, byref(punRequiredCompressedSize));
}
// Autogenerated method: Valve.VR.CVRInput.DecompressSkeletalBoneData
::Valve::VR::EVRInputError Valve::VR::CVRInput::DecompressSkeletalBoneData(::System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::ArrayW<::Valve::VR::VRBoneTransform_t> pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::DecompressSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecompressSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, eTransformSpace, pTransformArray);
}
// Autogenerated method: Valve.VR.CVRInput.TriggerHapticVibrationAction
::Valve::VR::EVRInputError Valve::VR::CVRInput::TriggerHapticVibrationAction(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::TriggerHapticVibrationAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticVibrationAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.CVRInput.GetActionOrigins
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetActionOrigins(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::ArrayW<uint64_t> originsOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut);
}
// Autogenerated method: Valve.VR.CVRInput.GetOriginLocalizedName
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetOriginLocalizedName(uint64_t origin, ::System::Text::StringBuilder* pchNameArray, uint unNameArraySize, int unStringSectionsToInclude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetOriginLocalizedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginLocalizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize), ::il2cpp_utils::ExtractType(unStringSectionsToInclude)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize, unStringSectionsToInclude);
}
// Autogenerated method: Valve.VR.CVRInput.GetOriginTrackedDeviceInfo
::Valve::VR::EVRInputError Valve::VR::CVRInput::GetOriginTrackedDeviceInfo(uint64_t origin, ByRef<::Valve::VR::InputOriginInfo_t> pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::GetOriginTrackedDeviceInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginTrackedDeviceInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, origin, byref(pOriginInfo), unOriginInfoSize);
}
// Autogenerated method: Valve.VR.CVRInput.ShowActionOrigins
::Valve::VR::EVRInputError Valve::VR::CVRInput::ShowActionOrigins(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::ShowActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: Valve.VR.CVRInput.ShowBindingsForActionSet
::Valve::VR::EVRInputError Valve::VR::CVRInput::ShowBindingsForActionSet(::ArrayW<::Valve::VR::VRActiveActionSet_t> pSets, uint unSizeOfVRSelectedActionSet_t, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRInput::ShowBindingsForActionSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowBindingsForActionSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(originToHighlight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, originToHighlight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRIOBuffer
#include "Valve/VR/CVRIOBuffer.hpp"
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
// Including type: Valve.VR.EIOBufferMode
#include "Valve/VR/EIOBufferMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRIOBuffer FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRIOBuffer& Valve::VR::CVRIOBuffer::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRIOBuffer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRIOBuffer.Open
::Valve::VR::EIOBufferError Valve::VR::CVRIOBuffer::Open(::StringW pchPath, ::Valve::VR::EIOBufferMode mode, uint unElementSize, uint unElements, ByRef<uint64_t> pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::Open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, byref(pulBuffer));
}
// Autogenerated method: Valve.VR.CVRIOBuffer.Close
::Valve::VR::EIOBufferError Valve::VR::CVRIOBuffer::Close(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: Valve.VR.CVRIOBuffer.Read
::Valve::VR::EIOBufferError Valve::VR::CVRIOBuffer::Read(uint64_t ulBuffer, ::System::IntPtr pDst, uint unBytes, ByRef<uint> punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, byref(punRead));
}
// Autogenerated method: Valve.VR.CVRIOBuffer.Write
::Valve::VR::EIOBufferError Valve::VR::CVRIOBuffer::Write(uint64_t ulBuffer, ::System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: Valve.VR.CVRIOBuffer.PropertyContainer
uint64_t Valve::VR::CVRIOBuffer::PropertyContainer(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRIOBuffer::PropertyContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PropertyContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRSpatialAnchors
#include "Valve/VR/CVRSpatialAnchors.hpp"
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.SpatialAnchorPose_t
#include "Valve/VR/SpatialAnchorPose_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRSpatialAnchors FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRSpatialAnchors& Valve::VR::CVRSpatialAnchors::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSpatialAnchors::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRSpatialAnchors*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRSpatialAnchors.CreateSpatialAnchorFromDescriptor
::Valve::VR::EVRSpatialAnchorError Valve::VR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor(::StringW pchDescriptor, ByRef<uint> pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, byref(pHandleOut));
}
// Autogenerated method: Valve.VR.CVRSpatialAnchors.CreateSpatialAnchorFromPose
::Valve::VR::EVRSpatialAnchorError Valve::VR::CVRSpatialAnchors::CreateSpatialAnchorFromPose(uint unDeviceIndex, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPose, ByRef<uint> pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSpatialAnchors::CreateSpatialAnchorFromPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, byref(pPose), byref(pHandleOut));
}
// Autogenerated method: Valve.VR.CVRSpatialAnchors.GetSpatialAnchorPose
::Valve::VR::EVRSpatialAnchorError Valve::VR::CVRSpatialAnchors::GetSpatialAnchorPose(uint unHandle, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSpatialAnchors::GetSpatialAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, byref(pPoseOut));
}
// Autogenerated method: Valve.VR.CVRSpatialAnchors.GetSpatialAnchorDescriptor
::Valve::VR::EVRSpatialAnchorError Valve::VR::CVRSpatialAnchors::GetSpatialAnchorDescriptor(uint unHandle, ::System::Text::StringBuilder* pchDescriptorOut, ByRef<uint> punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSpatialAnchors::GetSpatialAnchorDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, byref(punDescriptorBufferLenInOut));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.OpenVRInterop
#include "Valve/VR/OpenVRInterop.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.OpenVRInterop.InitInternal
uint Valve::VR::OpenVRInterop::InitInternal(ByRef<::Valve::VR::EVRInitError> peError, ::Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVRInterop.InitInternal2
uint Valve::VR::OpenVRInterop::InitInternal2(ByRef<::Valve::VR::EVRInitError> peError, ::Valve::VR::EVRApplicationType eApplicationType, ByRef<::StringW> pStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::InitInternal2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "InitInternal2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType), ::il2cpp_utils::ExtractType(pStartupInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType, byref(pStartupInfo));
}
// Autogenerated method: Valve.VR.OpenVRInterop.ShutdownInternal
void Valve::VR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsHmdPresent
bool Valve::VR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsRuntimeInstalled
bool Valve::VR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.RuntimePath
::StringW Valve::VR::OpenVRInterop::RuntimePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::RuntimePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "RuntimePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetStringForHmdError
::System::IntPtr Valve::VR::OpenVRInterop::GetStringForHmdError(::Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetGenericInterface
::System::IntPtr Valve::VR::OpenVRInterop::GetGenericInterface(ByRef<::StringW> pchInterfaceVersion, ByRef<::Valve::VR::EVRInitError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(pchInterfaceVersion), byref(peError));
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsInterfaceVersionValid
bool Valve::VR::OpenVRInterop::IsInterfaceVersionValid(ByRef<::StringW> pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(pchInterfaceVersion));
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetInitToken
uint Valve::VR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVRInterop::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Left
::Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREye::_get_Eye_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Left
void Valve::VR::EVREye::_set_Eye_Left(::Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREye::_set_Eye_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Right
::Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREye::_get_Eye_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Right
void Valve::VR::EVREye::_set_Eye_Right(::Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREye::_set_Eye_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVREye::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREye::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType Invalid
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType Invalid
void Valve::VR::ETextureType::_set_Invalid(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_DirectX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX
void Valve::VR::ETextureType::_set_DirectX(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_DirectX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType OpenGL
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_OpenGL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_OpenGL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "OpenGL"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType OpenGL
void Valve::VR::ETextureType::_set_OpenGL(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_OpenGL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "OpenGL", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType Vulkan
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType Vulkan
void Valve::VR::ETextureType::_set_Vulkan(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType IOSurface
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_IOSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_IOSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "IOSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType IOSurface
void Valve::VR::ETextureType::_set_IOSurface(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_IOSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "IOSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX12
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_DirectX12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX12"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX12
void Valve::VR::ETextureType::_set_DirectX12(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_DirectX12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX12", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DXGISharedHandle
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_DXGISharedHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_DXGISharedHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DXGISharedHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DXGISharedHandle
void Valve::VR::ETextureType::_set_DXGISharedHandle(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_DXGISharedHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DXGISharedHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType Metal
::Valve::VR::ETextureType Valve::VR::ETextureType::_get_Metal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_get_Metal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETextureType>("Valve.VR", "ETextureType", "Metal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType Metal
void Valve::VR::ETextureType::_set_Metal(::Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::_set_Metal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "Metal", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETextureType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETextureType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Auto
::Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Auto
void Valve::VR::EColorSpace::_set_Auto(::Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Gamma
::Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Gamma
void Valve::VR::EColorSpace::_set_Gamma(::Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Linear
::Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Linear
void Valve::VR::EColorSpace::_set_Linear(::Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Linear", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EColorSpace::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EColorSpace::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingResult
#include "Valve/VR/ETrackingResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Uninitialized
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Uninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Uninitialized
void Valve::VR::ETrackingResult::_set_Uninitialized(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Uninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_InProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Calibrating_InProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_InProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
void Valve::VR::ETrackingResult::_set_Calibrating_InProgress(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Calibrating_InProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_InProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
void Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OK
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Running_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OK
void Valve::VR::ETrackingResult::_set_Running_OK(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Running_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OutOfRange
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Running_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OutOfRange
void Valve::VR::ETrackingResult::_set_Running_OutOfRange(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Running_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Fallback_RotationOnly
::Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Fallback_RotationOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_get_Fallback_RotationOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Fallback_RotationOnly"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Fallback_RotationOnly
void Valve::VR::ETrackingResult::_set_Fallback_RotationOnly(::Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::_set_Fallback_RotationOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Fallback_RotationOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackingResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Invalid
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Invalid
void Valve::VR::ETrackedDeviceClass::_set_Invalid(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass HMD
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_HMD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_HMD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "HMD"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass HMD
void Valve::VR::ETrackedDeviceClass::_set_HMD(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_HMD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "HMD", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Controller
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_Controller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Controller"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Controller
void Valve::VR::ETrackedDeviceClass::_set_Controller(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_Controller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Controller", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_GenericTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_GenericTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "GenericTracker"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
void Valve::VR::ETrackedDeviceClass::_set_GenericTracker(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_GenericTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "GenericTracker", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
void Valve::VR::ETrackedDeviceClass::_set_TrackingReference(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
void Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Max
::Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Max
void Valve::VR::ETrackedDeviceClass::_set_Max(::Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackedDeviceClass::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceClass::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole Invalid
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole Invalid
void Valve::VR::ETrackedControllerRole::_set_Invalid(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole LeftHand
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole LeftHand
void Valve::VR::ETrackedControllerRole::_set_LeftHand(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole RightHand
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole RightHand
void Valve::VR::ETrackedControllerRole::_set_RightHand(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole OptOut
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_OptOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_OptOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "OptOut"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole OptOut
void Valve::VR::ETrackedControllerRole::_set_OptOut(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_OptOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "OptOut", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole Treadmill
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_Treadmill() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_Treadmill");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "Treadmill"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole Treadmill
void Valve::VR::ETrackedControllerRole::_set_Treadmill(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_Treadmill");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "Treadmill", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole Max
::Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole Max
void Valve::VR::ETrackedControllerRole::_set_Max(::Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackedControllerRole::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedControllerRole::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
::Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated(::Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
::Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding(::Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
::Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated(::Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackingUniverseOrigin::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackingUniverseOrigin::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NeverTracked_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NeverTracked_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NeverTracked_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NeverTracked_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NeverTracked_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NeverTracked_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NeverTracked_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NeverTracked_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NumCameras_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NumCameras_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NumCameras_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NumCameras_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NumCameras_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NumCameras_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NumCameras_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NumCameras_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFrameLayout_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFrameLayout_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFrameLayout_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFrameLayout_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFrameLayout_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFrameLayout_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFrameLayout_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFrameLayout_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraStreamFormat_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraStreamFormat_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraStreamFormat_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraStreamFormat_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraStreamFormat_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraStreamFormat_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraStreamFormat_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraStreamFormat_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AdditionalDeviceSettingsPath_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AdditionalDeviceSettingsPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_AdditionalDeviceSettingsPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AdditionalDeviceSettingsPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AdditionalDeviceSettingsPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AdditionalDeviceSettingsPath_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_AdditionalDeviceSettingsPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AdditionalDeviceSettingsPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Identifiable_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Identifiable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Identifiable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Identifiable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Identifiable_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Identifiable_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Identifiable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Identifiable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DistortionMeshResolution_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DistortionMeshResolution_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DistortionMeshResolution_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DistortionMeshResolution_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DistortionMeshResolution_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DistortionMeshResolution_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DistortionMeshResolution_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DistortionMeshResolution_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_MinimumIpdStepMeters_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_MinimumIpdStepMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_MinimumIpdStepMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_MinimumIpdStepMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_MinimumIpdStepMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_MinimumIpdStepMeters_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_MinimumIpdStepMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_MinimumIpdStepMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioBridgeFirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioBridgeFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioBridgeFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioBridgeFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioBridgeFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioBridgeFirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioBridgeFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioBridgeFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImageBridgeFirmwareVersion_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImageBridgeFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImageBridgeFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImageBridgeFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImageBridgeFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImageBridgeFirmwareVersion_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImageBridgeFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImageBridgeFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuToHeadTransform_Matrix34
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuToHeadTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuToHeadTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuToHeadTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuToHeadTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuToHeadTransform_Matrix34(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuToHeadTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuToHeadTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryGyroBias_Vector3
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryGyroBias_Vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryGyroBias_Vector3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryGyroBias_Vector3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryGyroBias_Vector3
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryGyroBias_Vector3(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryGyroBias_Vector3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryGyroBias_Vector3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryGyroScale_Vector3
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryGyroScale_Vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryGyroScale_Vector3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryGyroScale_Vector3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryGyroScale_Vector3
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryGyroScale_Vector3(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryGyroScale_Vector3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryGyroScale_Vector3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryAccelerometerBias_Vector3
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryAccelerometerBias_Vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryAccelerometerBias_Vector3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryAccelerometerBias_Vector3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryAccelerometerBias_Vector3
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryAccelerometerBias_Vector3(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryAccelerometerBias_Vector3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryAccelerometerBias_Vector3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryAccelerometerScale_Vector3
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryAccelerometerScale_Vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ImuFactoryAccelerometerScale_Vector3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryAccelerometerScale_Vector3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ImuFactoryAccelerometerScale_Vector3
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryAccelerometerScale_Vector3(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ImuFactoryAccelerometerScale_Vector3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ImuFactoryAccelerometerScale_Vector3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConfigurationIncludesLighthouse20Features_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ConfigurationIncludesLighthouse20Features_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ConfigurationIncludesLighthouse20Features_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ConfigurationIncludesLighthouse20Features_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConfigurationIncludesLighthouse20Features_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ConfigurationIncludesLighthouse20Features_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ConfigurationIncludesLighthouse20Features_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ConfigurationIncludesLighthouse20Features_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraCorrectionMode_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraCorrectionMode_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraCorrectionMode_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraCorrectionMode_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraCorrectionMode_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraCorrectionMode_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraCorrectionMode_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraCorrectionMode_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerLeft_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerLeft_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerLeft_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerLeft_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerLeft_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerLeft_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerLeft_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerLeft_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerRight_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerRight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerRight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerRight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerRight_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerRight_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerRight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerRight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerTop_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerTop_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerTop_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerTop_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerTop_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerTop_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerTop_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerTop_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerBottom_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerBottom_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_InnerBottom_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerBottom_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_InnerBottom_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerBottom_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_InnerBottom_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_InnerBottom_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterLeft_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterLeft_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterLeft_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterLeft_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterLeft_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterLeft_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterLeft_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterLeft_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterRight_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterRight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterRight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterRight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterRight_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterRight_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterRight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterRight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterTop_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterTop_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterTop_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterTop_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterTop_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterTop_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterTop_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterTop_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterBottom_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterBottom_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestedMuraFeather_OuterBottom_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterBottom_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestedMuraFeather_OuterBottom_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterBottom_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestedMuraFeather_OuterBottom_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestedMuraFeather_OuterBottom_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasSpatialAnchorsSupport_Bool
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasSpatialAnchorsSupport_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_HasSpatialAnchorsSupport_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasSpatialAnchorsSupport_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasSpatialAnchorsSupport_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasSpatialAnchorsSupport_Bool(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_HasSpatialAnchorsSupport_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasSpatialAnchorsSupport_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerHandSelectionPriority_Int32
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerHandSelectionPriority_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerHandSelectionPriority_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerHandSelectionPriority_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerHandSelectionPriority_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerHandSelectionPriority_Int32(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerHandSelectionPriority_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerHandSelectionPriority_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
::Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max(::Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackedDeviceProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedDeviceProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_IPCReadFailure
::Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_IPCReadFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_get_TrackedProp_IPCReadFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_IPCReadFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_IPCReadFailure
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_IPCReadFailure(::Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::_set_TrackedProp_IPCReadFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_IPCReadFailure", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ETrackedPropertyError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ETrackedPropertyError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Default
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Default"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Default
void Valve::VR::EVRSubmitFlags::_set_Submit_Default(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Default", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
void Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
void Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Reserved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_Reserved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Reserved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
void Valve::VR::EVRSubmitFlags::_set_Submit_Reserved(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_Reserved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Reserved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
::Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth(::Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSubmitFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSubmitFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRState
#include "Valve/VR/EVRState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Undefined
::Valve::VR::EVRState Valve::VR::EVRState::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Undefined
void Valve::VR::EVRState::_set_Undefined(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Undefined", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Off
::Valve::VR::EVRState Valve::VR::EVRState::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Off"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Off
void Valve::VR::EVRState::_set_Off(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching
::Valve::VR::EVRState Valve::VR::EVRState::_get_Searching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Searching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching
void Valve::VR::EVRState::_set_Searching(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Searching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching_Alert
::Valve::VR::EVRState Valve::VR::EVRState::_get_Searching_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Searching_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching_Alert
void Valve::VR::EVRState::_set_Searching_Alert(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Searching_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready
::Valve::VR::EVRState Valve::VR::EVRState::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready
void Valve::VR::EVRState::_set_Ready(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert
::Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Ready_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert
void Valve::VR::EVRState::_set_Ready_Alert(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Ready_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState NotReady
::Valve::VR::EVRState Valve::VR::EVRState::_get_NotReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_NotReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "NotReady"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState NotReady
void Valve::VR::EVRState::_set_NotReady(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_NotReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "NotReady", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Standby
::Valve::VR::EVRState Valve::VR::EVRState::_get_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Standby
void Valve::VR::EVRState::_set_Standby(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Standby", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert_Low
::Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_get_Ready_Alert_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert_Low"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert_Low
void Valve::VR::EVRState::_set_Ready_Alert_Low(::Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::_set_Ready_Alert_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert_Low", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_None
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_None
void Valve::VR::EVREventType::_set_VREvent_None(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_IpdChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_IpdChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_IpdChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_IpdChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_IpdChanged
void Valve::VR::EVREventType::_set_VREvent_IpdChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_IpdChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_IpdChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
void Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
void Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
void Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
void Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PropertyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PropertyChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PropertyChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
void Valve::VR::EVREventType::_set_VREvent_PropertyChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PropertyChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PropertyChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessReconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_WirelessReconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessReconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessReconnect(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_WirelessReconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessReconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonPress
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonPress
void Valve::VR::EVREventType::_set_VREvent_ButtonPress(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUnpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ButtonUnpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUnpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
void Valve::VR::EVREventType::_set_VREvent_ButtonUnpress(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ButtonUnpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUnpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ButtonTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonTouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
void Valve::VR::EVREventType::_set_VREvent_ButtonTouch(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ButtonTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonTouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUntouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ButtonUntouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUntouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
void Valve::VR::EVREventType::_set_VREvent_ButtonUntouch(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ButtonUntouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUntouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseMove
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MouseMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseMove
void Valve::VR::EVREventType::_set_VREvent_MouseMove(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MouseMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MouseButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
void Valve::VR::EVREventType::_set_VREvent_MouseButtonDown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MouseButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MouseButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
void Valve::VR::EVREventType::_set_VREvent_MouseButtonUp(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MouseButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusEnter
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_FocusEnter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusEnter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusEnter
void Valve::VR::EVREventType::_set_VREvent_FocusEnter(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_FocusEnter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusEnter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusLeave
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_FocusLeave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusLeave"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusLeave
void Valve::VR::EVREventType::_set_VREvent_FocusLeave(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_FocusLeave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusLeave", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Scroll
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Scroll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Scroll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Scroll"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Scroll
void Valve::VR::EVREventType::_set_VREvent_Scroll(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Scroll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Scroll", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TouchPadMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TouchPadMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TouchPadMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
void Valve::VR::EVREventType::_set_VREvent_TouchPadMove(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TouchPadMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TouchPadMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
void Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ReloadOverlays
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ReloadOverlays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ReloadOverlays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ReloadOverlays"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ReloadOverlays
void Valve::VR::EVREventType::_set_VREvent_ReloadOverlays(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ReloadOverlays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ReloadOverlays", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
void Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_InputFocusReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusReleased"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
void Valve::VR::EVREventType::_set_VREvent_InputFocusReleased(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_InputFocusReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusReleased", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
void Valve::VR::EVREventType::_set_VREvent_SceneFocusLost(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
void Valve::VR::EVREventType::_set_VREvent_SceneFocusGained(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
void Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_InputFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
void Valve::VR::EVREventType::_set_VREvent_InputFocusChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_InputFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationUsingWrongGraphicsAdapter
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationUsingWrongGraphicsAdapter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SceneApplicationUsingWrongGraphicsAdapter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationUsingWrongGraphicsAdapter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationUsingWrongGraphicsAdapter
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationUsingWrongGraphicsAdapter(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SceneApplicationUsingWrongGraphicsAdapter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationUsingWrongGraphicsAdapter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ActionBindingReloaded
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ActionBindingReloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ActionBindingReloaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ActionBindingReloaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ActionBindingReloaded
void Valve::VR::EVREventType::_set_VREvent_ActionBindingReloaded(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ActionBindingReloaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ActionBindingReloaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
void Valve::VR::EVREventType::_set_VREvent_HideRenderModels(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ShowRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
void Valve::VR::EVREventType::_set_VREvent_ShowRenderModels(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ShowRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleOpened() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ConsoleOpened");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleOpened"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
void Valve::VR::EVREventType::_set_VREvent_ConsoleOpened(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ConsoleOpened");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleOpened", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ConsoleClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
void Valve::VR::EVREventType::_set_VREvent_ConsoleClosed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ConsoleClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayShown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlayShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayShown
void Valve::VR::EVREventType::_set_VREvent_OverlayShown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlayShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlayHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
void Valve::VR::EVREventType::_set_VREvent_OverlayHidden(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlayHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
void Valve::VR::EVREventType::_set_VREvent_DashboardActivated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
void Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
void Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
void Valve::VR::EVREventType::_set_VREvent_DashboardRequested(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ResetDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ResetDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ResetDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
void Valve::VR::EVREventType::_set_VREvent_ResetDashboard(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ResetDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ResetDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RenderToast
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RenderToast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_RenderToast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RenderToast"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RenderToast
void Valve::VR::EVREventType::_set_VREvent_RenderToast(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_RenderToast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RenderToast", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ImageLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
void Valve::VR::EVREventType::_set_VREvent_ImageLoaded(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ImageLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ShowKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
void Valve::VR::EVREventType::_set_VREvent_ShowKeyboard(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ShowKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_HideKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
void Valve::VR::EVREventType::_set_VREvent_HideKeyboard(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_HideKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
void Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageFailed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ImageFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageFailed
void Valve::VR::EVREventType::_set_VREvent_ImageFailed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ImageFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
void Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SwitchGamepadFocus
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SwitchGamepadFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SwitchGamepadFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SwitchGamepadFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SwitchGamepadFocus
void Valve::VR::EVREventType::_set_VREvent_SwitchGamepadFocus(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SwitchGamepadFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SwitchGamepadFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RequestScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_RequestScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RequestScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
void Valve::VR::EVREventType::_set_VREvent_RequestScreenshot(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_RequestScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RequestScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
void Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
void Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
void Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
void Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RoomViewShown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RoomViewShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_RoomViewShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RoomViewShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RoomViewShown
void Valve::VR::EVREventType::_set_VREvent_RoomViewShown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_RoomViewShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RoomViewShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RoomViewHidden
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RoomViewHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_RoomViewHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RoomViewHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RoomViewHidden
void Valve::VR::EVREventType::_set_VREvent_RoomViewHidden(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_RoomViewHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RoomViewHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowUI
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ShowUI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowUI"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowUI
void Valve::VR::EVREventType::_set_VREvent_ShowUI(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ShowUI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowUI", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Shown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Notification_Shown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Shown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
void Valve::VR::EVREventType::_set_VREvent_Notification_Shown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Notification_Shown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Shown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Notification_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Hidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
void Valve::VR::EVREventType::_set_VREvent_Notification_Hidden(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Notification_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
void Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
void Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Quit
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Quit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Quit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Quit
void Valve::VR::EVREventType::_set_VREvent_Quit(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Quit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Quit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ProcessQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
void Valve::VR::EVREventType::_set_VREvent_ProcessQuit(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ProcessQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
void Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
void Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
void Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
void Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneFlushCache
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneFlushCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ChaperoneFlushCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneFlushCache"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneFlushCache
void Valve::VR::EVREventType::_set_VREvent_ChaperoneFlushCache(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ChaperoneFlushCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneFlushCache", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackersSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackersSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackersSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackersSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackersSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_TrackersSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackersSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackersSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LastKnownSectionSettingChanged
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LastKnownSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_LastKnownSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LastKnownSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LastKnownSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_LastKnownSectionSettingChanged(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_LastKnownSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LastKnownSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_StatusUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_StatusUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_StatusUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
void Valve::VR::EVREventType::_set_VREvent_StatusUpdate(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_StatusUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_StatusUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
void Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MCImageUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MCImageUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MCImageUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
void Valve::VR::EVREventType::_set_VREvent_MCImageUpdated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MCImageUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MCImageUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_KeyboardClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
void Valve::VR::EVREventType::_set_VREvent_KeyboardClosed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_KeyboardClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
void Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_KeyboardDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardDone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
void Valve::VR::EVREventType::_set_VREvent_KeyboardDone(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_KeyboardDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardDone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
void Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
void Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ProcessConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessConnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
void Valve::VR::EVREventType::_set_VREvent_ProcessConnected(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ProcessConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessConnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
void Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
void Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
void Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
void Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_BindingLoadFailed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_BindingLoadFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_BindingLoadFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_BindingLoadFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_BindingLoadFailed
void Valve::VR::EVREventType::_set_VREvent_Input_BindingLoadFailed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_BindingLoadFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_BindingLoadFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_BindingLoadSuccessful
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_BindingLoadSuccessful() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_BindingLoadSuccessful");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_BindingLoadSuccessful"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_BindingLoadSuccessful
void Valve::VR::EVREventType::_set_VREvent_Input_BindingLoadSuccessful(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_BindingLoadSuccessful");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_BindingLoadSuccessful", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_ActionManifestReloaded
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_ActionManifestReloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_ActionManifestReloaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_ActionManifestReloaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_ActionManifestReloaded
void Valve::VR::EVREventType::_set_VREvent_Input_ActionManifestReloaded(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_ActionManifestReloaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_ActionManifestReloaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_ActionManifestLoadFailed
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_ActionManifestLoadFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_ActionManifestLoadFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_ActionManifestLoadFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_ActionManifestLoadFailed
void Valve::VR::EVREventType::_set_VREvent_Input_ActionManifestLoadFailed(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_ActionManifestLoadFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_ActionManifestLoadFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_ProgressUpdate
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_ProgressUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_ProgressUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_ProgressUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_ProgressUpdate
void Valve::VR::EVREventType::_set_VREvent_Input_ProgressUpdate(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_ProgressUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_ProgressUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_TrackerActivated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_TrackerActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_Input_TrackerActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_TrackerActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_TrackerActivated
void Valve::VR::EVREventType::_set_VREvent_Input_TrackerActivated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_Input_TrackerActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_TrackerActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_PoseUpdated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_PoseUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_PoseUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_PoseUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_PoseUpdated
void Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_PoseUpdated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_PoseUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_PoseUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_DescriptorUpdated
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_DescriptorUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_DescriptorUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_DescriptorUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_DescriptorUpdated
void Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_DescriptorUpdated(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_DescriptorUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_DescriptorUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_RequestPoseUpdate
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_RequestPoseUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_RequestPoseUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_RequestPoseUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_RequestPoseUpdate
void Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_RequestPoseUpdate(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_RequestPoseUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_RequestPoseUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_RequestDescriptorUpdate
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_RequestDescriptorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_SpatialAnchors_RequestDescriptorUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_RequestDescriptorUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SpatialAnchors_RequestDescriptorUpdate
void Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_RequestDescriptorUpdate(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_SpatialAnchors_RequestDescriptorUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SpatialAnchors_RequestDescriptorUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
::Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End(::Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVREventType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVREventType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
::Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown(::Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
::Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle(::Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
::Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction(::Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
::Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout(::Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
::Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby(::Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EDeviceActivityLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDeviceActivityLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_System
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_System"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_System
void Valve::VR::EVRButtonId::_set_k_EButton_System(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_System", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
void Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Grip
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Grip"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Grip
void Valve::VR::EVRButtonId::_set_k_EButton_Grip(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Grip", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_A
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_A"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_A
void Valve::VR::EVRButtonId::_set_k_EButton_A(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_A", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
void Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
void Valve::VR::EVRButtonId::_set_k_EButton_Axis0(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
void Valve::VR::EVRButtonId::_set_k_EButton_Axis1(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
void Valve::VR::EVRButtonId::_set_k_EButton_Axis2(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
void Valve::VR::EVRButtonId::_set_k_EButton_Axis3(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis4"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
void Valve::VR::EVRButtonId::_set_k_EButton_Axis4(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
void Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_A
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_A"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_A
void Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_A(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_A", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_B
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_B"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_B
void Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_B(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_B", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_JoyStick
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_JoyStick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Knuckles_JoyStick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_JoyStick"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Knuckles_JoyStick
void Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_JoyStick(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Knuckles_JoyStick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Knuckles_JoyStick", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Max
::Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_get_k_EButton_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Max
void Valve::VR::EVRButtonId::_set_k_EButton_Max(::Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::_set_k_EButton_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRButtonId::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRButtonId::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRMouseButton
#include "Valve/VR/EVRMouseButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Left
::Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Left
void Valve::VR::EVRMouseButton::_set_Left(::Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Right
::Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Right
void Valve::VR::EVRMouseButton::_set_Right(::Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Middle
::Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Middle
void Valve::VR::EVRMouseButton::_set_Middle(::Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Middle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRMouseButton::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMouseButton::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
::Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left(::Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
::Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right(::Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EDualAnalogWhich::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EDualAnalogWhich::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EShowUIType
#include "Valve/VR/EShowUIType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EShowUIType ShowUI_ControllerBinding
::Valve::VR::EShowUIType Valve::VR::EShowUIType::_get_ShowUI_ControllerBinding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_get_ShowUI_ControllerBinding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EShowUIType>("Valve.VR", "EShowUIType", "ShowUI_ControllerBinding"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EShowUIType ShowUI_ControllerBinding
void Valve::VR::EShowUIType::_set_ShowUI_ControllerBinding(::Valve::VR::EShowUIType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_set_ShowUI_ControllerBinding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EShowUIType", "ShowUI_ControllerBinding", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EShowUIType ShowUI_ManageTrackers
::Valve::VR::EShowUIType Valve::VR::EShowUIType::_get_ShowUI_ManageTrackers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_get_ShowUI_ManageTrackers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EShowUIType>("Valve.VR", "EShowUIType", "ShowUI_ManageTrackers"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EShowUIType ShowUI_ManageTrackers
void Valve::VR::EShowUIType::_set_ShowUI_ManageTrackers(::Valve::VR::EShowUIType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_set_ShowUI_ManageTrackers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EShowUIType", "ShowUI_ManageTrackers", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EShowUIType ShowUI_QuickStart
::Valve::VR::EShowUIType Valve::VR::EShowUIType::_get_ShowUI_QuickStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_get_ShowUI_QuickStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EShowUIType>("Valve.VR", "EShowUIType", "ShowUI_QuickStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EShowUIType ShowUI_QuickStart
void Valve::VR::EShowUIType::_set_ShowUI_QuickStart(::Valve::VR::EShowUIType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::_set_ShowUI_QuickStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EShowUIType", "ShowUI_QuickStart", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EShowUIType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EShowUIType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError None
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError None
void Valve::VR::EVRInputError::_set_None(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NameNotFound
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NameNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_NameNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NameNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NameNotFound
void Valve::VR::EVRInputError::_set_NameNotFound(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_NameNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NameNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError WrongType
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_WrongType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_WrongType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "WrongType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError WrongType
void Valve::VR::EVRInputError::_set_WrongType(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_WrongType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "WrongType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidHandle
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidHandle
void Valve::VR::EVRInputError::_set_InvalidHandle(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidParam
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidParam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidParam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidParam
void Valve::VR::EVRInputError::_set_InvalidParam(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidParam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidParam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoSteam
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoSteam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_NoSteam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoSteam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoSteam
void Valve::VR::EVRInputError::_set_NoSteam(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_NoSteam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoSteam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MaxCapacityReached
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MaxCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_MaxCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MaxCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MaxCapacityReached
void Valve::VR::EVRInputError::_set_MaxCapacityReached(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_MaxCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MaxCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError IPCError
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_IPCError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_IPCError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "IPCError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError IPCError
void Valve::VR::EVRInputError::_set_IPCError(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_IPCError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "IPCError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoActiveActionSet
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoActiveActionSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_NoActiveActionSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoActiveActionSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoActiveActionSet
void Valve::VR::EVRInputError::_set_NoActiveActionSet(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_NoActiveActionSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoActiveActionSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidDevice
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidDevice
void Valve::VR::EVRInputError::_set_InvalidDevice(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidSkeleton
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidSkeleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidSkeleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidSkeleton"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidSkeleton
void Valve::VR::EVRInputError::_set_InvalidSkeleton(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidSkeleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidSkeleton", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidBoneCount
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidBoneCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidBoneCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidBoneCount"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidBoneCount
void Valve::VR::EVRInputError::_set_InvalidBoneCount(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidBoneCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidBoneCount", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidCompressedData
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidCompressedData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidCompressedData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidCompressedData"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidCompressedData
void Valve::VR::EVRInputError::_set_InvalidCompressedData(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidCompressedData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidCompressedData", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoData
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_NoData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoData"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoData
void Valve::VR::EVRInputError::_set_NoData(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_NoData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoData", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError BufferTooSmall
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError BufferTooSmall
void Valve::VR::EVRInputError::_set_BufferTooSmall(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MismatchedActionManifest
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MismatchedActionManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_MismatchedActionManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MismatchedActionManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MismatchedActionManifest
void Valve::VR::EVRInputError::_set_MismatchedActionManifest(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_MismatchedActionManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MismatchedActionManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MissingSkeletonData
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MissingSkeletonData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_MissingSkeletonData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MissingSkeletonData"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MissingSkeletonData
void Valve::VR::EVRInputError::_set_MissingSkeletonData(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_MissingSkeletonData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MissingSkeletonData", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidBoneIndex
::Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidBoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_get_InvalidBoneIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidBoneIndex"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidBoneIndex
void Valve::VR::EVRInputError::_set_InvalidBoneIndex(::Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::_set_InvalidBoneIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidBoneIndex", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRInputError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError Success
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError Success
void Valve::VR::EVRSpatialAnchorError::_set_Success(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError Internal
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "Internal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError Internal
void Valve::VR::EVRSpatialAnchorError::_set_Internal(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "Internal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError UnknownHandle
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_UnknownHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_UnknownHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "UnknownHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError UnknownHandle
void Valve::VR::EVRSpatialAnchorError::_set_UnknownHandle(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_UnknownHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "UnknownHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError ArrayTooSmall
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_ArrayTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_ArrayTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "ArrayTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError ArrayTooSmall
void Valve::VR::EVRSpatialAnchorError::_set_ArrayTooSmall(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_ArrayTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "ArrayTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError InvalidDescriptorChar
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_InvalidDescriptorChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_InvalidDescriptorChar");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "InvalidDescriptorChar"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError InvalidDescriptorChar
void Valve::VR::EVRSpatialAnchorError::_set_InvalidDescriptorChar(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_InvalidDescriptorChar");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "InvalidDescriptorChar", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError NotYetAvailable
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_NotYetAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_NotYetAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "NotYetAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError NotYetAvailable
void Valve::VR::EVRSpatialAnchorError::_set_NotYetAvailable(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_NotYetAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "NotYetAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError NotAvailableInThisUniverse
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_NotAvailableInThisUniverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_NotAvailableInThisUniverse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "NotAvailableInThisUniverse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError NotAvailableInThisUniverse
void Valve::VR::EVRSpatialAnchorError::_set_NotAvailableInThisUniverse(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_NotAvailableInThisUniverse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "NotAvailableInThisUniverse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError PermanentlyUnavailable
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_PermanentlyUnavailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_PermanentlyUnavailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "PermanentlyUnavailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError PermanentlyUnavailable
void Valve::VR::EVRSpatialAnchorError::_set_PermanentlyUnavailable(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_PermanentlyUnavailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "PermanentlyUnavailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError WrongDriver
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_WrongDriver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_WrongDriver");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "WrongDriver"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError WrongDriver
void Valve::VR::EVRSpatialAnchorError::_set_WrongDriver(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_WrongDriver");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "WrongDriver", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError DescriptorTooLong
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_DescriptorTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_DescriptorTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "DescriptorTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError DescriptorTooLong
void Valve::VR::EVRSpatialAnchorError::_set_DescriptorTooLong(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_DescriptorTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "DescriptorTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError Unknown
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError Unknown
void Valve::VR::EVRSpatialAnchorError::_set_Unknown(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError NoRoomCalibration
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_NoRoomCalibration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_NoRoomCalibration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "NoRoomCalibration"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError NoRoomCalibration
void Valve::VR::EVRSpatialAnchorError::_set_NoRoomCalibration(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_NoRoomCalibration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "NoRoomCalibration", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError InvalidArgument
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_InvalidArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_InvalidArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError InvalidArgument
void Valve::VR::EVRSpatialAnchorError::_set_InvalidArgument(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_InvalidArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSpatialAnchorError UnknownDriver
::Valve::VR::EVRSpatialAnchorError Valve::VR::EVRSpatialAnchorError::_get_UnknownDriver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_get_UnknownDriver");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSpatialAnchorError>("Valve.VR", "EVRSpatialAnchorError", "UnknownDriver"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSpatialAnchorError UnknownDriver
void Valve::VR::EVRSpatialAnchorError::_set_UnknownDriver(::Valve::VR::EVRSpatialAnchorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::_set_UnknownDriver");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSpatialAnchorError", "UnknownDriver", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSpatialAnchorError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSpatialAnchorError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
::Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard(::Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
::Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse(::Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
::Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop(::Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
::Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max(::Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EHiddenAreaMeshType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EHiddenAreaMeshType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
::Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None(::Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
::Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad(::Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
::Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick(::Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
::Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger(::Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRControllerAxisType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerAxisType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerEventOutputType
#include "Valve/VR/EVRControllerEventOutputType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
::Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents(::Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
::Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents(::Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRControllerEventOutputType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRControllerEventOutputType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ECollisionBoundsStyle
#include "Valve/VR/ECollisionBoundsStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
::Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT(::Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ECollisionBoundsStyle::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ECollisionBoundsStyle::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError None
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError None
void Valve::VR::EVROverlayError::_set_None(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnknownOverlay
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnknownOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_UnknownOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnknownOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnknownOverlay
void Valve::VR::EVROverlayError::_set_UnknownOverlay(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_UnknownOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnknownOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidHandle
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidHandle
void Valve::VR::EVROverlayError::_set_InvalidHandle(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError PermissionDenied
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError PermissionDenied
void Valve::VR::EVROverlayError::_set_PermissionDenied(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_OverlayLimitExceeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_OverlayLimitExceeded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "OverlayLimitExceeded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
void Valve::VR::EVROverlayError::_set_OverlayLimitExceeded(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_OverlayLimitExceeded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "OverlayLimitExceeded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongVisibilityType
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongVisibilityType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_WrongVisibilityType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongVisibilityType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongVisibilityType
void Valve::VR::EVROverlayError::_set_WrongVisibilityType(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_WrongVisibilityType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongVisibilityType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyTooLong
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_KeyTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyTooLong
void Valve::VR::EVROverlayError::_set_KeyTooLong(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_KeyTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NameTooLong
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NameTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_NameTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NameTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NameTooLong
void Valve::VR::EVROverlayError::_set_NameTooLong(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_NameTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NameTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyInUse
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_KeyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyInUse
void Valve::VR::EVROverlayError::_set_KeyInUse(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_KeyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongTransformType
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongTransformType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_WrongTransformType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongTransformType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongTransformType
void Valve::VR::EVROverlayError::_set_WrongTransformType(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_WrongTransformType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongTransformType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTrackedDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_InvalidTrackedDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTrackedDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
void Valve::VR::EVROverlayError::_set_InvalidTrackedDevice(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_InvalidTrackedDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTrackedDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidParameter
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidParameter
void Valve::VR::EVROverlayError::_set_InvalidParameter(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidParameter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
void Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ArrayTooSmall
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ArrayTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_ArrayTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ArrayTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ArrayTooSmall
void Valve::VR::EVROverlayError::_set_ArrayTooSmall(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_ArrayTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ArrayTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError RequestFailed
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError RequestFailed
void Valve::VR::EVROverlayError::_set_RequestFailed(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTexture
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTexture
void Valve::VR::EVROverlayError::_set_InvalidTexture(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnableToLoadFile
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnableToLoadFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_UnableToLoadFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnableToLoadFile"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnableToLoadFile
void Valve::VR::EVROverlayError::_set_UnableToLoadFile(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_UnableToLoadFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnableToLoadFile", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
void Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NoNeighbor
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NoNeighbor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_NoNeighbor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NoNeighbor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NoNeighbor
void Valve::VR::EVROverlayError::_set_NoNeighbor(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_NoNeighbor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NoNeighbor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
void Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_BadMaskPrimitive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_BadMaskPrimitive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "BadMaskPrimitive"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
void Valve::VR::EVROverlayError::_set_BadMaskPrimitive(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_BadMaskPrimitive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "BadMaskPrimitive", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureAlreadyLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_TextureAlreadyLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureAlreadyLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
void Valve::VR::EVROverlayError::_set_TextureAlreadyLocked(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_TextureAlreadyLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureAlreadyLocked", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureLockCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_TextureLockCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureLockCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
void Valve::VR::EVROverlayError::_set_TextureLockCapacityReached(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_TextureLockCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureLockCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureNotLocked
::Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureNotLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_get_TextureNotLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureNotLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureNotLocked
void Valve::VR::EVROverlayError::_set_TextureNotLocked(::Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::_set_TextureNotLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureNotLocked", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVROverlayError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Other
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Other"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Other
void Valve::VR::EVRApplicationType::_set_VRApplication_Other(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Other", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Scene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Scene");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Scene"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
void Valve::VR::EVRApplicationType::_set_VRApplication_Scene(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Scene");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Scene", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Overlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Overlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
void Valve::VR::EVRApplicationType::_set_VRApplication_Overlay(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Overlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Overlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Background
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Background"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Background
void Valve::VR::EVRApplicationType::_set_VRApplication_Background(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Background", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Utility() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Utility");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Utility"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
void Valve::VR::EVRApplicationType::_set_VRApplication_Utility(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Utility");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Utility", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
void Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
void Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
void Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_WebHelper
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_WebHelper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_WebHelper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_WebHelper"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_WebHelper
void Valve::VR::EVRApplicationType::_set_VRApplication_WebHelper(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_WebHelper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_WebHelper", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Max
::Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_get_VRApplication_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Max
void Valve::VR::EVRApplicationType::_set_VRApplication_Max(::Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::_set_VRApplication_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRApplicationType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError None
::Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError None
void Valve::VR::EVRFirmwareError::_set_None(::Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Success
::Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Success
void Valve::VR::EVRFirmwareError::_set_Success(::Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Fail
::Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Fail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_get_Fail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Fail"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Fail
void Valve::VR::EVRFirmwareError::_set_Fail(::Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::_set_Fail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Fail", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRFirmwareError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFirmwareError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError OK
::Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError OK
void Valve::VR::EVRNotificationError::_set_OK(::Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
::Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidNotificationId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_get_InvalidNotificationId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidNotificationId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
void Valve::VR::EVRNotificationError::_set_InvalidNotificationId(::Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_set_InvalidNotificationId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidNotificationId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
::Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_NotificationQueueFull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_get_NotificationQueueFull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "NotificationQueueFull"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
void Valve::VR::EVRNotificationError::_set_NotificationQueueFull(::Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_set_NotificationQueueFull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "NotificationQueueFull", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
::Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
void Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle(::Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
::Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
void Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists(::Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRNotificationError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSkeletalMotionRange
#include "Valve/VR/EVRSkeletalMotionRange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalMotionRange WithController
::Valve::VR::EVRSkeletalMotionRange Valve::VR::EVRSkeletalMotionRange::_get_WithController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalMotionRange::_get_WithController");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalMotionRange>("Valve.VR", "EVRSkeletalMotionRange", "WithController"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalMotionRange WithController
void Valve::VR::EVRSkeletalMotionRange::_set_WithController(::Valve::VR::EVRSkeletalMotionRange value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalMotionRange::_set_WithController");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalMotionRange", "WithController", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalMotionRange WithoutController
::Valve::VR::EVRSkeletalMotionRange Valve::VR::EVRSkeletalMotionRange::_get_WithoutController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalMotionRange::_get_WithoutController");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalMotionRange>("Valve.VR", "EVRSkeletalMotionRange", "WithoutController"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalMotionRange WithoutController
void Valve::VR::EVRSkeletalMotionRange::_set_WithoutController(::Valve::VR::EVRSkeletalMotionRange value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalMotionRange::_set_WithoutController");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalMotionRange", "WithoutController", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSkeletalMotionRange::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalMotionRange::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSkeletalTrackingLevel
#include "Valve/VR/EVRSkeletalTrackingLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Estimated
::Valve::VR::EVRSkeletalTrackingLevel Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Estimated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Estimated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTrackingLevel>("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Estimated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Estimated
void Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Estimated(::Valve::VR::EVRSkeletalTrackingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Estimated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Estimated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Partial
::Valve::VR::EVRSkeletalTrackingLevel Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Partial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Partial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTrackingLevel>("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Partial"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Partial
void Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Partial(::Valve::VR::EVRSkeletalTrackingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Partial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Partial", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Full
::Valve::VR::EVRSkeletalTrackingLevel Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Full() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_get_VRSkeletalTracking_Full");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTrackingLevel>("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Full"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTrackingLevel VRSkeletalTracking_Full
void Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Full(::Valve::VR::EVRSkeletalTrackingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_set_VRSkeletalTracking_Full");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTrackingLevel", "VRSkeletalTracking_Full", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTrackingLevel Count
::Valve::VR::EVRSkeletalTrackingLevel Valve::VR::EVRSkeletalTrackingLevel::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTrackingLevel>("Valve.VR", "EVRSkeletalTrackingLevel", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTrackingLevel Count
void Valve::VR::EVRSkeletalTrackingLevel::_set_Count(::Valve::VR::EVRSkeletalTrackingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTrackingLevel", "Count", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTrackingLevel Max
::Valve::VR::EVRSkeletalTrackingLevel Valve::VR::EVRSkeletalTrackingLevel::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTrackingLevel>("Valve.VR", "EVRSkeletalTrackingLevel", "Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTrackingLevel Max
void Valve::VR::EVRSkeletalTrackingLevel::_set_Max(::Valve::VR::EVRSkeletalTrackingLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTrackingLevel", "Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSkeletalTrackingLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTrackingLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError None
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError None
void Valve::VR::EVRInitError::_set_None(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Unknown
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Unknown
void Valve::VR::EVRInitError::_set_Unknown(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
void Valve::VR::EVRInitError::_set_Init_InstallationNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationCorrupt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InstallationCorrupt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationCorrupt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
void Valve::VR::EVRInitError::_set_Init_InstallationCorrupt(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InstallationCorrupt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationCorrupt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
void Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FileNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FileNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_FileNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FileNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FileNotFound
void Valve::VR::EVRInitError::_set_Init_FileNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_FileNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FileNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FactoryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_FactoryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FactoryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
void Valve::VR::EVRInitError::_set_Init_FactoryNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_FactoryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FactoryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InterfaceNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InterfaceNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InterfaceNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
void Valve::VR::EVRInitError::_set_Init_InterfaceNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InterfaceNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InterfaceNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidInterface
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InvalidInterface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidInterface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidInterface
void Valve::VR::EVRInitError::_set_Init_InvalidInterface(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InvalidInterface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidInterface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
void Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_HmdNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFound
void Valve::VR::EVRInitError::_set_Init_HmdNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_HmdNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotInitialized
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NotInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotInitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotInitialized
void Valve::VR::EVRInitError::_set_Init_NotInitialized(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NotInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoConfigPath
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoConfigPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NoConfigPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoConfigPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoConfigPath
void Valve::VR::EVRInitError::_set_Init_NoConfigPath(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NoConfigPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoConfigPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoLogPath
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoLogPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NoLogPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoLogPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoLogPath
void Valve::VR::EVRInitError::_set_Init_NoLogPath(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NoLogPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoLogPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
void Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Retry
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Retry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_Retry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Retry"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Retry
void Valve::VR::EVRInitError::_set_Init_Retry(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_Retry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Retry", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InitCanceledByUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InitCanceledByUser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InitCanceledByUser"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
void Valve::VR::EVRInitError::_set_Init_InitCanceledByUser(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InitCanceledByUser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InitCanceledByUser", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
void Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_SettingsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_SettingsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_SettingsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
void Valve::VR::EVRInitError::_set_Init_SettingsInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_SettingsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_SettingsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_ShuttingDown
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_ShuttingDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_ShuttingDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_ShuttingDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_ShuttingDown
void Valve::VR::EVRInitError::_set_Init_ShuttingDown(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_ShuttingDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_ShuttingDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_TooManyObjects
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_TooManyObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_TooManyObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_TooManyObjects"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_TooManyObjects
void Valve::VR::EVRInitError::_set_Init_TooManyObjects(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_TooManyObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_TooManyObjects", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
void Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
void Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Internal
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Internal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Internal
void Valve::VR::EVRInitError::_set_Init_Internal(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Internal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
void Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
void Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
void Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
void Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidApplicationType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_InvalidApplicationType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidApplicationType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
void Valve::VR::EVRInitError::_set_Init_InvalidApplicationType(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_InvalidApplicationType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidApplicationType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
void Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
void Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRHomeNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
void Valve::VR::EVRInitError::_set_Init_VRHomeNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRHomeNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_RebootingBusy
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_RebootingBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_RebootingBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_RebootingBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_RebootingBusy
void Valve::VR::EVRInitError::_set_Init_RebootingBusy(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_RebootingBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_RebootingBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_USBServiceBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_USBServiceBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_USBServiceBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
void Valve::VR::EVRInitError::_set_Init_USBServiceBusy(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_USBServiceBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_USBServiceBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRWebHelperStartupFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRWebHelperStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_VRWebHelperStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRWebHelperStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRWebHelperStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRWebHelperStartupFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_VRWebHelperStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRWebHelperStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_TrackerManagerInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_TrackerManagerInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Init_TrackerManagerInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_TrackerManagerInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_TrackerManagerInitFailed
void Valve::VR::EVRInitError::_set_Init_TrackerManagerInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Init_TrackerManagerInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_TrackerManagerInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Failed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Failed
void Valve::VR::EVRInitError::_set_Driver_Failed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Unknown
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Unknown
void Valve::VR::EVRInitError::_set_Driver_Unknown(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_HmdUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
void Valve::VR::EVRInitError::_set_Driver_HmdUnknown(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_HmdUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotLoaded
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_NotLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotLoaded
void Valve::VR::EVRInitError::_set_Driver_NotLoaded(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_NotLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
void Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdInUse
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_HmdInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdInUse
void Valve::VR::EVRInitError::_set_Driver_HmdInUse(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_HmdInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotCalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_NotCalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotCalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
void Valve::VR::EVRInitError::_set_Driver_NotCalibrated(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_NotCalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotCalibrated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
void Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
void Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
void Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ServerInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_ServerInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ServerInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
void Valve::VR::EVRInitError::_set_IPC_ServerInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_ServerInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ServerInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_ConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
void Valve::VR::EVRInitError::_set_IPC_ConnectFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_ConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
void Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_MutexInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_MutexInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_MutexInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
void Valve::VR::EVRInitError::_set_IPC_MutexInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_MutexInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_MutexInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_Failed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_Failed
void Valve::VR::EVRInitError::_set_IPC_Failed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
void Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
void Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_Failed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_Failed
void Valve::VR::EVRInitError::_set_Compositor_Failed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
void Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
void Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
void Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
void Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
void Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
void Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
void Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
::Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
void Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound(::Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRInitError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInitError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType None
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType None
void Valve::VR::EVRScreenshotType::_set_None(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Mono
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Mono
void Valve::VR::EVRScreenshotType::_set_Mono(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Stereo
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Stereo
void Valve::VR::EVRScreenshotType::_set_Stereo(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Cubemap
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_Cubemap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Cubemap"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Cubemap
void Valve::VR::EVRScreenshotType::_set_Cubemap(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_Cubemap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Cubemap", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType MonoPanorama
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_MonoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_MonoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "MonoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType MonoPanorama
void Valve::VR::EVRScreenshotType::_set_MonoPanorama(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_MonoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "MonoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType StereoPanorama
::Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType StereoPanorama
void Valve::VR::EVRScreenshotType::_set_StereoPanorama(::Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "StereoPanorama", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRScreenshotType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
::Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
void Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview(::Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
::Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_VR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotPropertyFilenames::_get_VR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "VR"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
void Valve::VR::EVRScreenshotPropertyFilenames::_set_VR(::Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotPropertyFilenames::_set_VR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "VR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRScreenshotPropertyFilenames::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotPropertyFilenames::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError None
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError None
void Valve::VR::EVRTrackedCameraError::_set_None(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OperationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_OperationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OperationFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
void Valve::VR::EVRTrackedCameraError::_set_OperationFailed(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_OperationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OperationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidHandle(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OutOfHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_OutOfHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OutOfHandles"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
void Valve::VR::EVRTrackedCameraError::_set_OutOfHandles(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_OutOfHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OutOfHandles", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_IPCFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_IPCFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "IPCFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
void Valve::VR::EVRTrackedCameraError::_set_IPCFailure(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_IPCFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "IPCFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
void Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
void Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
void Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
void Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
void Valve::VR::EVRTrackedCameraError::_set_InvalidArgument(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
::Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize(::Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRTrackedCameraError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraFrameLayout
#include "Valve/VR/EVRTrackedCameraFrameLayout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameLayout Mono
::Valve::VR::EVRTrackedCameraFrameLayout Valve::VR::EVRTrackedCameraFrameLayout::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameLayout>("Valve.VR", "EVRTrackedCameraFrameLayout", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameLayout Mono
void Valve::VR::EVRTrackedCameraFrameLayout::_set_Mono(::Valve::VR::EVRTrackedCameraFrameLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameLayout", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameLayout Stereo
::Valve::VR::EVRTrackedCameraFrameLayout Valve::VR::EVRTrackedCameraFrameLayout::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameLayout>("Valve.VR", "EVRTrackedCameraFrameLayout", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameLayout Stereo
void Valve::VR::EVRTrackedCameraFrameLayout::_set_Stereo(::Valve::VR::EVRTrackedCameraFrameLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameLayout", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameLayout VerticalLayout
::Valve::VR::EVRTrackedCameraFrameLayout Valve::VR::EVRTrackedCameraFrameLayout::_get_VerticalLayout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_get_VerticalLayout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameLayout>("Valve.VR", "EVRTrackedCameraFrameLayout", "VerticalLayout"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameLayout VerticalLayout
void Valve::VR::EVRTrackedCameraFrameLayout::_set_VerticalLayout(::Valve::VR::EVRTrackedCameraFrameLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_set_VerticalLayout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameLayout", "VerticalLayout", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameLayout HorizontalLayout
::Valve::VR::EVRTrackedCameraFrameLayout Valve::VR::EVRTrackedCameraFrameLayout::_get_HorizontalLayout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_get_HorizontalLayout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameLayout>("Valve.VR", "EVRTrackedCameraFrameLayout", "HorizontalLayout"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameLayout HorizontalLayout
void Valve::VR::EVRTrackedCameraFrameLayout::_set_HorizontalLayout(::Valve::VR::EVRTrackedCameraFrameLayout value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::_set_HorizontalLayout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameLayout", "HorizontalLayout", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRTrackedCameraFrameLayout::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameLayout::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
::Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_get_Distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Distorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Distorted(::Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_set_Distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Distorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
::Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted(::Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
::Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted(::Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
::Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
void Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES(::Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRTrackedCameraFrameType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRTrackedCameraFrameType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRDistortionFunctionType
#include "Valve/VR/EVRDistortionFunctionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRDistortionFunctionType None
::Valve::VR::EVRDistortionFunctionType Valve::VR::EVRDistortionFunctionType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRDistortionFunctionType>("Valve.VR", "EVRDistortionFunctionType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRDistortionFunctionType None
void Valve::VR::EVRDistortionFunctionType::_set_None(::Valve::VR::EVRDistortionFunctionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRDistortionFunctionType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRDistortionFunctionType FTheta
::Valve::VR::EVRDistortionFunctionType Valve::VR::EVRDistortionFunctionType::_get_FTheta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_get_FTheta");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRDistortionFunctionType>("Valve.VR", "EVRDistortionFunctionType", "FTheta"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRDistortionFunctionType FTheta
void Valve::VR::EVRDistortionFunctionType::_set_FTheta(::Valve::VR::EVRDistortionFunctionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_set_FTheta");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRDistortionFunctionType", "FTheta", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRDistortionFunctionType VRDistortionFucntionType_Extended_FTheta
::Valve::VR::EVRDistortionFunctionType Valve::VR::EVRDistortionFunctionType::_get_VRDistortionFucntionType_Extended_FTheta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_get_VRDistortionFucntionType_Extended_FTheta");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRDistortionFunctionType>("Valve.VR", "EVRDistortionFunctionType", "VRDistortionFucntionType_Extended_FTheta"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRDistortionFunctionType VRDistortionFucntionType_Extended_FTheta
void Valve::VR::EVRDistortionFunctionType::_set_VRDistortionFucntionType_Extended_FTheta(::Valve::VR::EVRDistortionFunctionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_set_VRDistortionFucntionType_Extended_FTheta");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRDistortionFunctionType", "VRDistortionFucntionType_Extended_FTheta", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRDistortionFunctionType MAX_DISTORTION_FUNCTION_TYPES
::Valve::VR::EVRDistortionFunctionType Valve::VR::EVRDistortionFunctionType::_get_MAX_DISTORTION_FUNCTION_TYPES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_get_MAX_DISTORTION_FUNCTION_TYPES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRDistortionFunctionType>("Valve.VR", "EVRDistortionFunctionType", "MAX_DISTORTION_FUNCTION_TYPES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRDistortionFunctionType MAX_DISTORTION_FUNCTION_TYPES
void Valve::VR::EVRDistortionFunctionType::_set_MAX_DISTORTION_FUNCTION_TYPES(::Valve::VR::EVRDistortionFunctionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::_set_MAX_DISTORTION_FUNCTION_TYPES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRDistortionFunctionType", "MAX_DISTORTION_FUNCTION_TYPES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRDistortionFunctionType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRDistortionFunctionType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVSync
#include "Valve/VR/EVSync.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVSync None
::Valve::VR::EVSync Valve::VR::EVSync::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVSync>("Valve.VR", "EVSync", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVSync None
void Valve::VR::EVSync::_set_None(::Valve::VR::EVSync value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVSync", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVSync WaitRender
::Valve::VR::EVSync Valve::VR::EVSync::_get_WaitRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_get_WaitRender");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVSync>("Valve.VR", "EVSync", "WaitRender"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVSync WaitRender
void Valve::VR::EVSync::_set_WaitRender(::Valve::VR::EVSync value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_set_WaitRender");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVSync", "WaitRender", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVSync NoWaitRender
::Valve::VR::EVSync Valve::VR::EVSync::_get_NoWaitRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_get_NoWaitRender");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVSync>("Valve.VR", "EVSync", "NoWaitRender"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVSync NoWaitRender
void Valve::VR::EVSync::_set_NoWaitRender(::Valve::VR::EVSync value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::_set_NoWaitRender");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVSync", "NoWaitRender", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVSync::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVSync::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRMuraCorrectionMode
#include "Valve/VR/EVRMuraCorrectionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMuraCorrectionMode Default
::Valve::VR::EVRMuraCorrectionMode Valve::VR::EVRMuraCorrectionMode::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMuraCorrectionMode::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRMuraCorrectionMode>("Valve.VR", "EVRMuraCorrectionMode", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMuraCorrectionMode Default
void Valve::VR::EVRMuraCorrectionMode::_set_Default(::Valve::VR::EVRMuraCorrectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMuraCorrectionMode::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMuraCorrectionMode", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMuraCorrectionMode NoCorrection
::Valve::VR::EVRMuraCorrectionMode Valve::VR::EVRMuraCorrectionMode::_get_NoCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMuraCorrectionMode::_get_NoCorrection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRMuraCorrectionMode>("Valve.VR", "EVRMuraCorrectionMode", "NoCorrection"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMuraCorrectionMode NoCorrection
void Valve::VR::EVRMuraCorrectionMode::_set_NoCorrection(::Valve::VR::EVRMuraCorrectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMuraCorrectionMode::_set_NoCorrection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMuraCorrectionMode", "NoCorrection", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRMuraCorrectionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRMuraCorrectionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.Imu_OffScaleFlags
#include "Valve/VR/Imu_OffScaleFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelX
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelX"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelX
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelX(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelX", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelY
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelY"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelY
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelY(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelY", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelZ
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_AccelZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelZ"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_AccelZ
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelZ(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_AccelZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_AccelZ", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroX
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroX"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroX
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroX(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroX", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroY
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroY"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroY
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroY(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroY", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroZ
::Valve::VR::Imu_OffScaleFlags Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_get_OffScale_GyroZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::Imu_OffScaleFlags>("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroZ"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.Imu_OffScaleFlags OffScale_GyroZ
void Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroZ(::Valve::VR::Imu_OffScaleFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::_set_OffScale_GyroZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "Imu_OffScaleFlags", "OffScale_GyroZ", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::Imu_OffScaleFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::Imu_OffScaleFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError None
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError None
void Valve::VR::EVRApplicationError::_set_None(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
void Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoManifest
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_NoManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoManifest
void Valve::VR::EVRApplicationError::_set_NoManifest(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_NoManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoApplication
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_NoApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoApplication
void Valve::VR::EVRApplicationError::_set_NoApplication(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_NoApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidIndex
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_InvalidIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidIndex"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidIndex
void Valve::VR::EVRApplicationError::_set_InvalidIndex(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_InvalidIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidIndex", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownApplication
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_UnknownApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownApplication
void Valve::VR::EVRApplicationError::_set_UnknownApplication(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_UnknownApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IPCFailed
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IPCFailed
void Valve::VR::EVRApplicationError::_set_IPCFailed(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidManifest
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_InvalidManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidManifest
void Valve::VR::EVRApplicationError::_set_InvalidManifest(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_InvalidManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidApplication
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_InvalidApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidApplication
void Valve::VR::EVRApplicationError::_set_InvalidApplication(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_InvalidApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchFailed
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_LaunchFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchFailed
void Valve::VR::EVRApplicationError::_set_LaunchFailed(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_LaunchFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchInProgress
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_LaunchInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchInProgress
void Valve::VR::EVRApplicationError::_set_LaunchInProgress(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_LaunchInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_OldApplicationQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_OldApplicationQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "OldApplicationQuitting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
void Valve::VR::EVRApplicationError::_set_OldApplicationQuitting(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_OldApplicationQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "OldApplicationQuitting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError TransitionAborted
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_TransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_TransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "TransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError TransitionAborted
void Valve::VR::EVRApplicationError::_set_TransitionAborted(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_TransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "TransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IsTemplate
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IsTemplate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_IsTemplate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IsTemplate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IsTemplate
void Valve::VR::EVRApplicationError::_set_IsTemplate(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_IsTemplate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IsTemplate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_SteamVRIsExiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_SteamVRIsExiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "SteamVRIsExiting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
void Valve::VR::EVRApplicationError::_set_SteamVRIsExiting(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_SteamVRIsExiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "SteamVRIsExiting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError BufferTooSmall
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError BufferTooSmall
void Valve::VR::EVRApplicationError::_set_BufferTooSmall(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError PropertyNotSet
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_PropertyNotSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_PropertyNotSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "PropertyNotSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError PropertyNotSet
void Valve::VR::EVRApplicationError::_set_PropertyNotSet(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_PropertyNotSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "PropertyNotSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownProperty
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownProperty
void Valve::VR::EVRApplicationError::_set_UnknownProperty(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidParameter
::Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidParameter
void Valve::VR::EVRApplicationError::_set_InvalidParameter(::Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidParameter", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRApplicationError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Name_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Name_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_Name_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Name_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Name_String
void Valve::VR::EVRApplicationProperty::_set_Name_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_Name_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Name_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LaunchType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_LaunchType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LaunchType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
void Valve::VR::EVRApplicationProperty::_set_LaunchType_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_LaunchType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LaunchType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
void Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_BinaryPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_BinaryPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "BinaryPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
void Valve::VR::EVRApplicationProperty::_set_BinaryPath_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_BinaryPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "BinaryPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Arguments_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Arguments_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_Arguments_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Arguments_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Arguments_String
void Valve::VR::EVRApplicationProperty::_set_Arguments_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_Arguments_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Arguments_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty URL_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_URL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_URL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "URL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty URL_String
void Valve::VR::EVRApplicationProperty::_set_URL_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_URL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "URL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Description_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Description_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_Description_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Description_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Description_String
void Valve::VR::EVRApplicationProperty::_set_Description_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_Description_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Description_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_NewsURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_NewsURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "NewsURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
void Valve::VR::EVRApplicationProperty::_set_NewsURL_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_NewsURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "NewsURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ImagePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_ImagePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ImagePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
void Valve::VR::EVRApplicationProperty::_set_ImagePath_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_ImagePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ImagePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Source_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Source_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_Source_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Source_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Source_String
void Valve::VR::EVRApplicationProperty::_set_Source_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_Source_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Source_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
void Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
void Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
void Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
void Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
::Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
void Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64(::Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRApplicationProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
::Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None(::Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
::Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent(::Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
::Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch(::Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
::Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched(::Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRApplicationTransitionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRApplicationTransitionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState OK
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState OK
void Valve::VR::ChaperoneCalibrationState::_set_OK(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning
void Valve::VR::ChaperoneCalibrationState::_set_Warning(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error
void Valve::VR::ChaperoneCalibrationState::_set_Error(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
::Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid(::Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::ChaperoneCalibrationState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::ChaperoneCalibrationState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Live
::Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Live() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneConfigFile::_get_Live");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Live"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Live
void Valve::VR::EChaperoneConfigFile::_set_Live(::Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneConfigFile::_set_Live");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Live", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Temp
::Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Temp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneConfigFile::_get_Temp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Temp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Temp
void Valve::VR::EChaperoneConfigFile::_set_Temp(::Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneConfigFile::_set_Temp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Temp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EChaperoneConfigFile::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneConfigFile::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneImportFlags
#include "Valve/VR/EChaperoneImportFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
::Valve::VR::EChaperoneImportFlags Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EChaperoneImportFlags>("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
void Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly(::Valve::VR::EChaperoneImportFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EChaperoneImportFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EChaperoneImportFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError None
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError None
void Valve::VR::EVRCompositorError::_set_None(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError RequestFailed
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError RequestFailed
void Valve::VR::EVRCompositorError::_set_RequestFailed(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
void Valve::VR::EVRCompositorError::_set_IncompatibleVersion(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_DoNotHaveFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_DoNotHaveFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "DoNotHaveFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
void Valve::VR::EVRCompositorError::_set_DoNotHaveFocus(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_DoNotHaveFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "DoNotHaveFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidTexture
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidTexture
void Valve::VR::EVRCompositorError::_set_InvalidTexture(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IsNotSceneApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_IsNotSceneApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IsNotSceneApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
void Valve::VR::EVRCompositorError::_set_IsNotSceneApplication(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_IsNotSceneApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IsNotSceneApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
void Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
void Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
void Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IndexOutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_IndexOutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IndexOutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
void Valve::VR::EVRCompositorError::_set_IndexOutOfRange(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_IndexOutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IndexOutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_AlreadySubmitted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_AlreadySubmitted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "AlreadySubmitted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
void Valve::VR::EVRCompositorError::_set_AlreadySubmitted(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_AlreadySubmitted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "AlreadySubmitted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidBounds
::Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_get_InvalidBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidBounds
void Valve::VR::EVRCompositorError::_set_InvalidBounds(::Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::_set_InvalidBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidBounds", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRCompositorError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Implicit
::Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Implicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_get_Implicit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Implicit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Implicit
void Valve::VR::EVRCompositorTimingMode::_set_Implicit(::Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_set_Implicit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Implicit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
::Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff(::Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
::Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff(::Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRCompositorTimingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRCompositorTimingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod None
::Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod None
void Valve::VR::VROverlayInputMethod::_set_None(::Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod Mouse
::Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_Mouse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_get_Mouse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "Mouse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod Mouse
void Valve::VR::VROverlayInputMethod::_set_Mouse(::Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_set_Mouse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "Mouse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod DualAnalog
::Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_DualAnalog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_get_DualAnalog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "DualAnalog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod DualAnalog
void Valve::VR::VROverlayInputMethod::_set_DualAnalog(::Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::_set_DualAnalog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "DualAnalog", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::VROverlayInputMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayInputMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
::Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute(::Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
::Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative(::Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
::Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay(::Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
::Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent(::Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::VROverlayTransformType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayTransformType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags None
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags None
void Valve::VR::VROverlayFlags::_set_None(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Curved
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Curved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_Curved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Curved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Curved
void Valve::VR::VROverlayFlags::_set_Curved(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_Curved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Curved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags RGSS4X
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_RGSS4X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_RGSS4X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "RGSS4X"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags RGSS4X
void Valve::VR::VROverlayFlags::_set_RGSS4X(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_RGSS4X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "RGSS4X", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags NoDashboardTab
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_NoDashboardTab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_NoDashboardTab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "NoDashboardTab"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags NoDashboardTab
void Valve::VR::VROverlayFlags::_set_NoDashboardTab(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_NoDashboardTab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "NoDashboardTab", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
void Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowGamepadFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_ShowGamepadFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowGamepadFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
void Valve::VR::VROverlayFlags::_set_ShowGamepadFocus(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_ShowGamepadFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowGamepadFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRScrollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_SendVRScrollEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRScrollEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
void Valve::VR::VROverlayFlags::_set_SendVRScrollEvents(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_SendVRScrollEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRScrollEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
void Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
void Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
void Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Parallel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_SideBySide_Parallel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Parallel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
void Valve::VR::VROverlayFlags::_set_SideBySide_Parallel(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_SideBySide_Parallel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Parallel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Crossed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_SideBySide_Crossed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Crossed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
void Valve::VR::VROverlayFlags::_set_SideBySide_Crossed(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_SideBySide_Crossed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Crossed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Panorama
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Panorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_Panorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Panorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Panorama
void Valve::VR::VROverlayFlags::_set_Panorama(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_Panorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Panorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags StereoPanorama
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags StereoPanorama
void Valve::VR::VROverlayFlags::_set_StereoPanorama(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "StereoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
void Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_VisibleInDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_VisibleInDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "VisibleInDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
void Valve::VR::VROverlayFlags::_set_VisibleInDashboard(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_VisibleInDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "VisibleInDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags MakeOverlaysInteractiveIfVisible
::Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_MakeOverlaysInteractiveIfVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_get_MakeOverlaysInteractiveIfVisible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "MakeOverlaysInteractiveIfVisible"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags MakeOverlaysInteractiveIfVisible
void Valve::VR::VROverlayFlags::_set_MakeOverlaysInteractiveIfVisible(::Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::_set_MakeOverlaysInteractiveIfVisible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "MakeOverlaysInteractiveIfVisible", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::VROverlayFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VROverlayFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
::Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
void Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit(::Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::VRMessageOverlayResponse::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRMessageOverlayResponse::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputMode
#include "Valve/VR/EGamepadTextInputMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
::Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal(::Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
::Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword(::Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
::Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit(::Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EGamepadTextInputMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputLineMode
#include "Valve/VR/EGamepadTextInputLineMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
::Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine(::Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
::Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines(::Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EGamepadTextInputLineMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EGamepadTextInputLineMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Up
::Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Up
void Valve::VR::EOverlayDirection::_set_Up(::Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Down
::Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Down
void Valve::VR::EOverlayDirection::_set_Down(::Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Left
::Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Left
void Valve::VR::EOverlayDirection::_set_Left(::Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Right
::Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Right
void Valve::VR::EOverlayDirection::_set_Right(::Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Count
::Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Count
void Valve::VR::EOverlayDirection::_set_Count(::Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EOverlayDirection::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EOverlayDirection::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayIntersectionMaskPrimitiveType
#include "Valve/VR/EVROverlayIntersectionMaskPrimitiveType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
::Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle(::Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
::Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle(::Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVROverlayIntersectionMaskPrimitiveType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVROverlayIntersectionMaskPrimitiveType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError None
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError None
void Valve::VR::EVRRenderModelError::_set_None(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError Loading
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError Loading
void Valve::VR::EVRRenderModelError::_set_Loading(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotSupported
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_NotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotSupported
void Valve::VR::EVRRenderModelError::_set_NotSupported(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_NotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidArg
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_InvalidArg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidArg"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidArg
void Valve::VR::EVRRenderModelError::_set_InvalidArg(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_InvalidArg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidArg", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidModel
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_InvalidModel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidModel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidModel
void Valve::VR::EVRRenderModelError::_set_InvalidModel(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_InvalidModel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidModel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NoShapes
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NoShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_NoShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NoShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NoShapes
void Valve::VR::EVRRenderModelError::_set_NoShapes(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_NoShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NoShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleShapes
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_MultipleShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleShapes
void Valve::VR::EVRRenderModelError::_set_MultipleShapes(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_MultipleShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError TooManyVertices
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_TooManyVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_TooManyVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "TooManyVertices"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError TooManyVertices
void Valve::VR::EVRRenderModelError::_set_TooManyVertices(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_TooManyVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "TooManyVertices", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleTextures
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_MultipleTextures");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleTextures"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleTextures
void Valve::VR::EVRRenderModelError::_set_MultipleTextures(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_MultipleTextures");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleTextures", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
void Valve::VR::EVRRenderModelError::_set_BufferTooSmall(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_NotEnoughNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughNormals"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
void Valve::VR::EVRRenderModelError::_set_NotEnoughNormals(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_NotEnoughNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughNormals", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
void Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidTexture
::Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidTexture
void Valve::VR::EVRRenderModelError::_set_InvalidTexture(::Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidTexture", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRRenderModelError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRRenderModelError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRComponentProperty
#include "Valve/VR/EVRComponentProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsStatic
::Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_get_IsStatic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsStatic"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsStatic
void Valve::VR::EVRComponentProperty::_set_IsStatic(::Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_set_IsStatic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsStatic", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsVisible
::Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_get_IsVisible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsVisible"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsVisible
void Valve::VR::EVRComponentProperty::_set_IsVisible(::Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_set_IsVisible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsVisible", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsTouched
::Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_get_IsTouched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsTouched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsTouched
void Valve::VR::EVRComponentProperty::_set_IsTouched(::Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_set_IsTouched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsTouched", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsPressed
::Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_get_IsPressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsPressed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsPressed
void Valve::VR::EVRComponentProperty::_set_IsPressed(::Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_set_IsPressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsPressed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsScrolled
::Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsScrolled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_get_IsScrolled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsScrolled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsScrolled
void Valve::VR::EVRComponentProperty::_set_IsScrolled(::Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::_set_IsScrolled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsScrolled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRComponentProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRComponentProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient
::Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_get_Transient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient
void Valve::VR::EVRNotificationType::_set_Transient(::Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_set_Transient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Persistent
::Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Persistent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_get_Persistent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Persistent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Persistent
void Valve::VR::EVRNotificationType::_set_Persistent(::Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_set_Persistent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Persistent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
::Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
void Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue(::Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRNotificationType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle None
::Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle None
void Valve::VR::EVRNotificationStyle::_set_None(::Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Application
::Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Application() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_get_Application");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Application"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Application
void Valve::VR::EVRNotificationStyle::_set_Application(::Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_set_Application");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Application", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
::Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_get_Contact_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Disabled(::Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_set_Contact_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
::Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_get_Contact_Enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Enabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Enabled(::Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_set_Contact_Enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Enabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Active
::Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_get_Contact_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Active"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Active
void Valve::VR::EVRNotificationStyle::_set_Contact_Active(::Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::_set_Contact_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Active", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRNotificationStyle::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRNotificationStyle::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError None
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError None
void Valve::VR::EVRSettingsError::_set_None(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError IPCFailed
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError IPCFailed
void Valve::VR::EVRSettingsError::_set_IPCFailed(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError WriteFailed
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_WriteFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_WriteFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "WriteFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError WriteFailed
void Valve::VR::EVRSettingsError::_set_WriteFailed(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_WriteFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "WriteFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError ReadFailed
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_ReadFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_ReadFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "ReadFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError ReadFailed
void Valve::VR::EVRSettingsError::_set_ReadFailed(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_ReadFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "ReadFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError JsonParseFailed
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_JsonParseFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_JsonParseFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "JsonParseFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError JsonParseFailed
void Valve::VR::EVRSettingsError::_set_JsonParseFailed(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_JsonParseFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "JsonParseFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
::Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
void Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault(::Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSettingsError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSettingsError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError None
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError None
void Valve::VR::EVRScreenshotError::_set_None(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError RequestFailed
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError RequestFailed
void Valve::VR::EVRScreenshotError::_set_RequestFailed(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
void Valve::VR::EVRScreenshotError::_set_IncompatibleVersion(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError NotFound
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_NotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_NotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "NotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError NotFound
void Valve::VR::EVRScreenshotError::_set_NotFound(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_NotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "NotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
void Valve::VR::EVRScreenshotError::_set_BufferTooSmall(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
::Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
void Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress(::Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRScreenshotError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRScreenshotError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSkeletalTransformSpace
#include "Valve/VR/EVRSkeletalTransformSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTransformSpace Model
::Valve::VR::EVRSkeletalTransformSpace Valve::VR::EVRSkeletalTransformSpace::_get_Model() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTransformSpace::_get_Model");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTransformSpace>("Valve.VR", "EVRSkeletalTransformSpace", "Model"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTransformSpace Model
void Valve::VR::EVRSkeletalTransformSpace::_set_Model(::Valve::VR::EVRSkeletalTransformSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTransformSpace::_set_Model");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTransformSpace", "Model", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalTransformSpace Parent
::Valve::VR::EVRSkeletalTransformSpace Valve::VR::EVRSkeletalTransformSpace::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTransformSpace::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalTransformSpace>("Valve.VR", "EVRSkeletalTransformSpace", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalTransformSpace Parent
void Valve::VR::EVRSkeletalTransformSpace::_set_Parent(::Valve::VR::EVRSkeletalTransformSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTransformSpace::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalTransformSpace", "Parent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSkeletalTransformSpace::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalTransformSpace::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSkeletalReferencePose
#include "Valve/VR/EVRSkeletalReferencePose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalReferencePose BindPose
::Valve::VR::EVRSkeletalReferencePose Valve::VR::EVRSkeletalReferencePose::_get_BindPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_get_BindPose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalReferencePose>("Valve.VR", "EVRSkeletalReferencePose", "BindPose"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalReferencePose BindPose
void Valve::VR::EVRSkeletalReferencePose::_set_BindPose(::Valve::VR::EVRSkeletalReferencePose value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_set_BindPose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalReferencePose", "BindPose", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalReferencePose OpenHand
::Valve::VR::EVRSkeletalReferencePose Valve::VR::EVRSkeletalReferencePose::_get_OpenHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_get_OpenHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalReferencePose>("Valve.VR", "EVRSkeletalReferencePose", "OpenHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalReferencePose OpenHand
void Valve::VR::EVRSkeletalReferencePose::_set_OpenHand(::Valve::VR::EVRSkeletalReferencePose value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_set_OpenHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalReferencePose", "OpenHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalReferencePose Fist
::Valve::VR::EVRSkeletalReferencePose Valve::VR::EVRSkeletalReferencePose::_get_Fist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_get_Fist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalReferencePose>("Valve.VR", "EVRSkeletalReferencePose", "Fist"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalReferencePose Fist
void Valve::VR::EVRSkeletalReferencePose::_set_Fist(::Valve::VR::EVRSkeletalReferencePose value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_set_Fist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalReferencePose", "Fist", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSkeletalReferencePose GripLimit
::Valve::VR::EVRSkeletalReferencePose Valve::VR::EVRSkeletalReferencePose::_get_GripLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_get_GripLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRSkeletalReferencePose>("Valve.VR", "EVRSkeletalReferencePose", "GripLimit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSkeletalReferencePose GripLimit
void Valve::VR::EVRSkeletalReferencePose::_set_GripLimit(::Valve::VR::EVRSkeletalReferencePose value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::_set_GripLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSkeletalReferencePose", "GripLimit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRSkeletalReferencePose::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRSkeletalReferencePose::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRFinger
#include "Valve/VR/EVRFinger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Thumb
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Thumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Thumb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Thumb"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Thumb
void Valve::VR::EVRFinger::_set_Thumb(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Thumb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Thumb", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Index
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Index"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Index
void Valve::VR::EVRFinger::_set_Index(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Index", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Middle
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Middle
void Valve::VR::EVRFinger::_set_Middle(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Ring
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Ring"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Ring
void Valve::VR::EVRFinger::_set_Ring(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Ring", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Pinky
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Pinky"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Pinky
void Valve::VR::EVRFinger::_set_Pinky(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Pinky", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFinger Count
::Valve::VR::EVRFinger Valve::VR::EVRFinger::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFinger>("Valve.VR", "EVRFinger", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFinger Count
void Valve::VR::EVRFinger::_set_Count(::Valve::VR::EVRFinger value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFinger", "Count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRFinger::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFinger::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRFingerSplay
#include "Valve/VR/EVRFingerSplay.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFingerSplay Thumb_Index
::Valve::VR::EVRFingerSplay Valve::VR::EVRFingerSplay::_get_Thumb_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_get_Thumb_Index");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFingerSplay>("Valve.VR", "EVRFingerSplay", "Thumb_Index"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFingerSplay Thumb_Index
void Valve::VR::EVRFingerSplay::_set_Thumb_Index(::Valve::VR::EVRFingerSplay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_set_Thumb_Index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFingerSplay", "Thumb_Index", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFingerSplay Index_Middle
::Valve::VR::EVRFingerSplay Valve::VR::EVRFingerSplay::_get_Index_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_get_Index_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFingerSplay>("Valve.VR", "EVRFingerSplay", "Index_Middle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFingerSplay Index_Middle
void Valve::VR::EVRFingerSplay::_set_Index_Middle(::Valve::VR::EVRFingerSplay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_set_Index_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFingerSplay", "Index_Middle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFingerSplay Middle_Ring
::Valve::VR::EVRFingerSplay Valve::VR::EVRFingerSplay::_get_Middle_Ring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_get_Middle_Ring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFingerSplay>("Valve.VR", "EVRFingerSplay", "Middle_Ring"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFingerSplay Middle_Ring
void Valve::VR::EVRFingerSplay::_set_Middle_Ring(::Valve::VR::EVRFingerSplay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_set_Middle_Ring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFingerSplay", "Middle_Ring", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFingerSplay Ring_Pinky
::Valve::VR::EVRFingerSplay Valve::VR::EVRFingerSplay::_get_Ring_Pinky() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_get_Ring_Pinky");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFingerSplay>("Valve.VR", "EVRFingerSplay", "Ring_Pinky"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFingerSplay Ring_Pinky
void Valve::VR::EVRFingerSplay::_set_Ring_Pinky(::Valve::VR::EVRFingerSplay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_set_Ring_Pinky");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFingerSplay", "Ring_Pinky", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFingerSplay Count
::Valve::VR::EVRFingerSplay Valve::VR::EVRFingerSplay::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRFingerSplay>("Valve.VR", "EVRFingerSplay", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFingerSplay Count
void Valve::VR::EVRFingerSplay::_set_Count(::Valve::VR::EVRFingerSplay value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFingerSplay", "Count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRFingerSplay::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRFingerSplay::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInputFilterCancelType
#include "Valve/VR/EVRInputFilterCancelType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputFilterCancelType VRInputFilterCancel_Timers
::Valve::VR::EVRInputFilterCancelType Valve::VR::EVRInputFilterCancelType::_get_VRInputFilterCancel_Timers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputFilterCancelType::_get_VRInputFilterCancel_Timers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputFilterCancelType>("Valve.VR", "EVRInputFilterCancelType", "VRInputFilterCancel_Timers"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputFilterCancelType VRInputFilterCancel_Timers
void Valve::VR::EVRInputFilterCancelType::_set_VRInputFilterCancel_Timers(::Valve::VR::EVRInputFilterCancelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputFilterCancelType::_set_VRInputFilterCancel_Timers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputFilterCancelType", "VRInputFilterCancel_Timers", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputFilterCancelType VRInputFilterCancel_Momentum
::Valve::VR::EVRInputFilterCancelType Valve::VR::EVRInputFilterCancelType::_get_VRInputFilterCancel_Momentum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputFilterCancelType::_get_VRInputFilterCancel_Momentum");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputFilterCancelType>("Valve.VR", "EVRInputFilterCancelType", "VRInputFilterCancel_Momentum"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputFilterCancelType VRInputFilterCancel_Momentum
void Valve::VR::EVRInputFilterCancelType::_set_VRInputFilterCancel_Momentum(::Valve::VR::EVRInputFilterCancelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputFilterCancelType::_set_VRInputFilterCancel_Momentum");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputFilterCancelType", "VRInputFilterCancel_Momentum", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRInputFilterCancelType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputFilterCancelType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInputStringBits
#include "Valve/VR/EVRInputStringBits.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputStringBits VRInputString_Hand
::Valve::VR::EVRInputStringBits Valve::VR::EVRInputStringBits::_get_VRInputString_Hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_get_VRInputString_Hand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputStringBits>("Valve.VR", "EVRInputStringBits", "VRInputString_Hand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputStringBits VRInputString_Hand
void Valve::VR::EVRInputStringBits::_set_VRInputString_Hand(::Valve::VR::EVRInputStringBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_set_VRInputString_Hand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputStringBits", "VRInputString_Hand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputStringBits VRInputString_ControllerType
::Valve::VR::EVRInputStringBits Valve::VR::EVRInputStringBits::_get_VRInputString_ControllerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_get_VRInputString_ControllerType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputStringBits>("Valve.VR", "EVRInputStringBits", "VRInputString_ControllerType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputStringBits VRInputString_ControllerType
void Valve::VR::EVRInputStringBits::_set_VRInputString_ControllerType(::Valve::VR::EVRInputStringBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_set_VRInputString_ControllerType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputStringBits", "VRInputString_ControllerType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputStringBits VRInputString_InputSource
::Valve::VR::EVRInputStringBits Valve::VR::EVRInputStringBits::_get_VRInputString_InputSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_get_VRInputString_InputSource");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputStringBits>("Valve.VR", "EVRInputStringBits", "VRInputString_InputSource"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputStringBits VRInputString_InputSource
void Valve::VR::EVRInputStringBits::_set_VRInputString_InputSource(::Valve::VR::EVRInputStringBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_set_VRInputString_InputSource");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputStringBits", "VRInputString_InputSource", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputStringBits VRInputString_All
::Valve::VR::EVRInputStringBits Valve::VR::EVRInputStringBits::_get_VRInputString_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_get_VRInputString_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EVRInputStringBits>("Valve.VR", "EVRInputStringBits", "VRInputString_All"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputStringBits VRInputString_All
void Valve::VR::EVRInputStringBits::_set_VRInputString_All(::Valve::VR::EVRInputStringBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::_set_VRInputString_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputStringBits", "VRInputString_All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EVRInputStringBits::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EVRInputStringBits::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_Success
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_Success
void Valve::VR::EIOBufferError::_set_IOBuffer_Success(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_OperationFailed
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_OperationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_OperationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_OperationFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_OperationFailed
void Valve::VR::EIOBufferError::_set_IOBuffer_OperationFailed(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_OperationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_OperationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_InvalidHandle
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_InvalidHandle
void Valve::VR::EIOBufferError::_set_IOBuffer_InvalidHandle(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_InvalidArgument
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_InvalidArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_InvalidArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_InvalidArgument
void Valve::VR::EIOBufferError::_set_IOBuffer_InvalidArgument(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_InvalidArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_PathExists
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_PathExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_PathExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_PathExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_PathExists
void Valve::VR::EIOBufferError::_set_IOBuffer_PathExists(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_PathExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_PathExists", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_PathDoesNotExist
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_PathDoesNotExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_PathDoesNotExist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_PathDoesNotExist"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_PathDoesNotExist
void Valve::VR::EIOBufferError::_set_IOBuffer_PathDoesNotExist(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_PathDoesNotExist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_PathDoesNotExist", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferError IOBuffer_Permission
::Valve::VR::EIOBufferError Valve::VR::EIOBufferError::_get_IOBuffer_Permission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_get_IOBuffer_Permission");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferError>("Valve.VR", "EIOBufferError", "IOBuffer_Permission"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferError IOBuffer_Permission
void Valve::VR::EIOBufferError::_set_IOBuffer_Permission(::Valve::VR::EIOBufferError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::_set_IOBuffer_Permission");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferError", "IOBuffer_Permission", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EIOBufferError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EIOBufferMode
#include "Valve/VR/EIOBufferMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferMode Read
::Valve::VR::EIOBufferMode Valve::VR::EIOBufferMode::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferMode>("Valve.VR", "EIOBufferMode", "Read"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferMode Read
void Valve::VR::EIOBufferMode::_set_Read(::Valve::VR::EIOBufferMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferMode", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferMode Write
::Valve::VR::EIOBufferMode Valve::VR::EIOBufferMode::_get_Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_get_Write");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferMode>("Valve.VR", "EIOBufferMode", "Write"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferMode Write
void Valve::VR::EIOBufferMode::_set_Write(::Valve::VR::EIOBufferMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_set_Write");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferMode", "Write", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EIOBufferMode Create
::Valve::VR::EIOBufferMode Valve::VR::EIOBufferMode::_get_Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_get_Create");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::EIOBufferMode>("Valve.VR", "EIOBufferMode", "Create"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EIOBufferMode Create
void Valve::VR::EIOBufferMode::_set_Create(::Valve::VR::EIOBufferMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::_set_Create");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EIOBufferMode", "Create", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::EIOBufferMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::EIOBufferMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VREvent_Keyboard_t
#include "Valve/VR/VREvent_Keyboard_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput0
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput0"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput1
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput1"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput2
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput2"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput3
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput3"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput4
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput4"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput5
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput5");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput5"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput6
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput6");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput6"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte cNewInput7
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::VREvent_Keyboard_t::dyn_cNewInput7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_cNewInput7");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cNewInput7"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 uUserValue
[[deprecated("Use field access instead!")]] uint64_t& Valve::VR::VREvent_Keyboard_t::dyn_uUserValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::dyn_uUserValue");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uUserValue"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.VREvent_Keyboard_t.get_cNewInput
::StringW Valve::VR::VREvent_Keyboard_t::get_cNewInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_Keyboard_t::get_cNewInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_cNewInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt32 eventType
[[deprecated("Use field access instead!")]] uint& Valve::VR::VREvent_t_Packed::dyn_eventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::dyn_eventType");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventType"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 trackedDeviceIndex
[[deprecated("Use field access instead!")]] uint& Valve::VR::VREvent_t_Packed::dyn_trackedDeviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::dyn_trackedDeviceIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackedDeviceIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single eventAgeSeconds
[[deprecated("Use field access instead!")]] float& Valve::VR::VREvent_t_Packed::dyn_eventAgeSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::dyn_eventAgeSeconds");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventAgeSeconds"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VREvent_Data_t data
[[deprecated("Use field access instead!")]] ::Valve::VR::VREvent_Data_t& Valve::VR::VREvent_t_Packed::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::dyn_data");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::Valve::VR::VREvent_Data_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.VREvent_t_Packed..ctor
Valve::VR::VREvent_t_Packed::VREvent_t_Packed(::Valve::VR::VREvent_t unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unpacked);
}
// Autogenerated method: Valve.VR.VREvent_t_Packed.Unpack
void Valve::VR::VREvent_t_Packed::Unpack(ByRef<::Valve::VR::VREvent_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VREvent_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unPacketNum
[[deprecated("Use field access instead!")]] uint& Valve::VR::VRControllerState_t_Packed::dyn_unPacketNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_unPacketNum");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unPacketNum"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 ulButtonPressed
[[deprecated("Use field access instead!")]] uint64_t& Valve::VR::VRControllerState_t_Packed::dyn_ulButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_ulButtonPressed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ulButtonPressed"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 ulButtonTouched
[[deprecated("Use field access instead!")]] uint64_t& Valve::VR::VRControllerState_t_Packed::dyn_ulButtonTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_ulButtonTouched");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ulButtonTouched"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis0
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerAxis_t& Valve::VR::VRControllerState_t_Packed::dyn_rAxis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_rAxis0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rAxis0"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerAxis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis1
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerAxis_t& Valve::VR::VRControllerState_t_Packed::dyn_rAxis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_rAxis1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rAxis1"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerAxis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis2
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerAxis_t& Valve::VR::VRControllerState_t_Packed::dyn_rAxis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_rAxis2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rAxis2"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerAxis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis3
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerAxis_t& Valve::VR::VRControllerState_t_Packed::dyn_rAxis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_rAxis3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rAxis3"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerAxis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.VRControllerAxis_t rAxis4
[[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerAxis_t& Valve::VR::VRControllerState_t_Packed::dyn_rAxis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::dyn_rAxis4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rAxis4"))->offset;
  return *reinterpret_cast<::Valve::VR::VRControllerAxis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.VRControllerState_t_Packed..ctor
Valve::VR::VRControllerState_t_Packed::VRControllerState_t_Packed(::Valve::VR::VRControllerState_t unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unpacked);
}
// Autogenerated method: Valve.VR.VRControllerState_t_Packed.Unpack
void Valve::VR::VRControllerState_t_Packed::Unpack(ByRef<::Valve::VR::VRControllerState_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::VRControllerState_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.RenderModel_TextureMap_t_Packed
#include "Valve/VR/RenderModel_TextureMap_t_Packed.hpp"
// Including type: Valve.VR.RenderModel_TextureMap_t
#include "Valve/VR/RenderModel_TextureMap_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt16 unWidth
[[deprecated("Use field access instead!")]] uint16_t& Valve::VR::RenderModel_TextureMap_t_Packed::dyn_unWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_TextureMap_t_Packed::dyn_unWidth");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unWidth"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt16 unHeight
[[deprecated("Use field access instead!")]] uint16_t& Valve::VR::RenderModel_TextureMap_t_Packed::dyn_unHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_TextureMap_t_Packed::dyn_unHeight");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unHeight"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rubTextureMapData
[[deprecated("Use field access instead!")]] ::System::IntPtr& Valve::VR::RenderModel_TextureMap_t_Packed::dyn_rubTextureMapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_TextureMap_t_Packed::dyn_rubTextureMapData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rubTextureMapData"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.RenderModel_TextureMap_t_Packed..ctor
Valve::VR::RenderModel_TextureMap_t_Packed::RenderModel_TextureMap_t_Packed(::Valve::VR::RenderModel_TextureMap_t unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_TextureMap_t_Packed::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unpacked);
}
// Autogenerated method: Valve.VR.RenderModel_TextureMap_t_Packed.Unpack
void Valve::VR::RenderModel_TextureMap_t_Packed::Unpack(ByRef<::Valve::VR::RenderModel_TextureMap_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_TextureMap_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.RenderModel_t_Packed
#include "Valve/VR/RenderModel_t_Packed.hpp"
// Including type: Valve.VR.RenderModel_t
#include "Valve/VR/RenderModel_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rVertexData
[[deprecated("Use field access instead!")]] ::System::IntPtr& Valve::VR::RenderModel_t_Packed::dyn_rVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::dyn_rVertexData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rVertexData"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unVertexCount
[[deprecated("Use field access instead!")]] uint& Valve::VR::RenderModel_t_Packed::dyn_unVertexCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::dyn_unVertexCount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unVertexCount"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IntPtr rIndexData
[[deprecated("Use field access instead!")]] ::System::IntPtr& Valve::VR::RenderModel_t_Packed::dyn_rIndexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::dyn_rIndexData");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rIndexData"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 unTriangleCount
[[deprecated("Use field access instead!")]] uint& Valve::VR::RenderModel_t_Packed::dyn_unTriangleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::dyn_unTriangleCount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unTriangleCount"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 diffuseTextureId
[[deprecated("Use field access instead!")]] int& Valve::VR::RenderModel_t_Packed::dyn_diffuseTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::dyn_diffuseTextureId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "diffuseTextureId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.RenderModel_t_Packed..ctor
Valve::VR::RenderModel_t_Packed::RenderModel_t_Packed(::Valve::VR::RenderModel_t unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unpacked);
}
// Autogenerated method: Valve.VR.RenderModel_t_Packed.Unpack
void Valve::VR::RenderModel_t_Packed::Unpack(ByRef<::Valve::VR::RenderModel_t> unpacked) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::RenderModel_t_Packed::Unpack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unpack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unpacked)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(unpacked));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InputOriginInfo_t
#include "Valve/VR/InputOriginInfo_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.UInt64 devicePath
[[deprecated("Use field access instead!")]] uint64_t& Valve::VR::InputOriginInfo_t::dyn_devicePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_devicePath");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "devicePath"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 trackedDeviceIndex
[[deprecated("Use field access instead!")]] uint& Valve::VR::InputOriginInfo_t::dyn_trackedDeviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_trackedDeviceIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackedDeviceIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName0
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName0"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName1
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName1"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName2
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName2"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName3
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName3"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName4
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName4"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName5
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName5");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName5"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName6
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName6");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName6"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName7
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName7");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName7"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName8
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName8");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName8"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName9
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName9");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName9"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName10
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName10");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName10"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName11
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName11() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName11");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName11"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName12
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName12() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName12");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName12"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName13
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName13() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName13");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName13"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName14
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName14");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName14"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName15
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName15() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName15");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName15"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName16
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName16");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName16"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName17
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName17() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName17");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName17"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName18
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName18() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName18");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName18"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName19
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName19() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName19");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName19"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName20
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName20() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName20");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName20"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName21
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName21() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName21");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName21"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName22
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName22() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName22");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName22"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName23
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName23() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName23");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName23"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName24
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName24() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName24");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName24"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName25
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName25() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName25");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName25"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName26
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName26() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName26");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName26"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName27
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName27() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName27");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName27"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName28
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName28() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName28");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName28"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName29
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName29() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName29");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName29"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName30
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName30() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName30");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName30"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName31
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName31() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName31");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName31"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName32
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName32");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName32"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName33
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName33() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName33");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName33"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName34
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName34() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName34");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName34"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName35
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName35() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName35");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName35"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName36
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName36() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName36");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName36"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName37
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName37() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName37");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName37"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName38
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName38() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName38");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName38"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName39
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName39() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName39");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName39"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName40
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName40() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName40");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName40"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName41
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName41() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName41");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName41"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName42
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName42() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName42");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName42"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName43
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName43() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName43");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName43"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName44
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName44() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName44");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName44"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName45
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName45() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName45");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName45"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName46
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName46() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName46");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName46"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName47
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName47() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName47");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName47"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName48
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName48() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName48");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName48"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName49
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName49() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName49");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName49"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName50
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName50() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName50");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName50"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName51
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName51() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName51");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName51"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName52
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName52() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName52");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName52"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName53
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName53() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName53");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName53"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName54
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName54() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName54");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName54"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName55
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName55() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName55");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName55"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName56
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName56() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName56");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName56"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName57
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName57() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName57");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName57"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName58
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName58() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName58");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName58"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName59
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName59() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName59");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName59"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName60
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName60() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName60");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName60"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName61
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName61() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName61");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName61"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName62
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName62() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName62");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName62"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName63
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName63() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName63");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName63"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName64
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName64");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName64"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName65
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName65() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName65");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName65"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName66
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName66() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName66");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName66"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName67
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName67() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName67");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName67"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName68
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName68() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName68");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName68"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName69
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName69() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName69");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName69"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName70
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName70() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName70");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName70"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName71
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName71() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName71");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName71"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName72
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName72() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName72");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName72"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName73
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName73() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName73");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName73"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName74
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName74() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName74");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName74"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName75
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName75() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName75");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName75"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName76
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName76() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName76");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName76"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName77
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName77() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName77");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName77"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName78
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName78() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName78");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName78"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName79
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName79() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName79");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName79"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName80
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName80() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName80");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName80"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName81
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName81() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName81");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName81"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName82
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName82() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName82");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName82"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName83
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName83() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName83");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName83"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName84
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName84() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName84");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName84"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName85
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName85() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName85");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName85"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName86
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName86() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName86");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName86"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName87
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName87() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName87");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName87"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName88
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName88() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName88");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName88"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName89
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName89() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName89");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName89"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName90
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName90() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName90");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName90"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName91
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName91() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName91");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName91"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName92
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName92() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName92");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName92"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName93
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName93() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName93");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName93"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName94
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName94() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName94");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName94"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName95
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName95() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName95");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName95"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName96
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName96() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName96");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName96"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName97
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName97() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName97");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName97"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName98
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName98() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName98");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName98"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName99
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName99() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName99");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName99"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName100
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName100() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName100");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName100"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName101
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName101() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName101");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName101"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName102
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName102() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName102");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName102"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName103
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName103() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName103");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName103"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName104
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName104() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName104");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName104"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName105
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName105() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName105");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName105"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName106
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName106() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName106");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName106"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName107
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName107() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName107");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName107"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName108
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName108() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName108");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName108"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName109
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName109() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName109");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName109"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName110
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName110() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName110");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName110"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName111
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName111() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName111");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName111"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName112
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName112() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName112");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName112"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName113
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName113() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName113");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName113"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName114
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName114() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName114");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName114"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName115
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName115() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName115");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName115"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName116
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName116() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName116");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName116"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName117
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName117() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName117");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName117"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName118
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName118() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName118");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName118"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName119
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName119() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName119");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName119"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName120
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName120() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName120");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName120"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName121
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName121() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName121");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName121"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName122
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName122() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName122");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName122"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName123
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName123() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName123");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName123"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName124
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName124() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName124");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName124"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName125
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName125() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName125");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName125"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName126
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName126() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName126");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName126"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte rchRenderModelComponentName127
[[deprecated("Use field access instead!")]] uint8_t& Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName127() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::dyn_rchRenderModelComponentName127");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rchRenderModelComponentName127"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InputOriginInfo_t.get_rchRenderModelComponentName
::StringW Valve::VR::InputOriginInfo_t::get_rchRenderModelComponentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InputOriginInfo_t::get_rchRenderModelComponentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_rchRenderModelComponentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
// Including type: Valve.VR.OpenVR/COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
// Including type: Valve.VR.CVRInput
#include "Valve/VR/CVRInput.hpp"
// Including type: Valve.VR.CVRSpatialAnchors
#include "Valve/VR/CVRSpatialAnchors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_nDriverNone
uint Valve::VR::OpenVR::_get_k_nDriverNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_nDriverNone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_nDriverNone"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_nDriverNone
void Valve::VR::OpenVR::_set_k_nDriverNone(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_nDriverNone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_nDriverNone", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
uint Valve::VR::OpenVR::_get_k_unMaxDriverDebugResponseSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxDriverDebugResponseSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
void Valve::VR::OpenVR::_set_k_unMaxDriverDebugResponseSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxDriverDebugResponseSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndex_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unTrackedDeviceIndex_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndex_Hmd(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unTrackedDeviceIndex_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxTrackedDeviceCount
uint Valve::VR::OpenVR::_get_k_unMaxTrackedDeviceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxTrackedDeviceCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxTrackedDeviceCount
void Valve::VR::OpenVR::_set_k_unMaxTrackedDeviceCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxTrackedDeviceCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexOther
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexOther() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexOther");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexOther
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexOther(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexOther");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexInvalid(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidPropertyContainer
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidPropertyContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidPropertyContainer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidPropertyContainer
void Valve::VR::OpenVR::_set_k_ulInvalidPropertyContainer(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidPropertyContainer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInvalidPropertyTag
uint Valve::VR::OpenVR::_get_k_unInvalidPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unInvalidPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInvalidPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInvalidPropertyTag
void Valve::VR::OpenVR::_set_k_unInvalidPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unInvalidPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInvalidPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidDriverHandle
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidDriverHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidDriverHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidDriverHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidDriverHandle
void Valve::VR::OpenVR::_set_k_ulInvalidDriverHandle(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidDriverHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidDriverHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unFloatPropertyTag
uint Valve::VR::OpenVR::_get_k_unFloatPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unFloatPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unFloatPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unFloatPropertyTag
void Valve::VR::OpenVR::_set_k_unFloatPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unFloatPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unFloatPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInt32PropertyTag
uint Valve::VR::OpenVR::_get_k_unInt32PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unInt32PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInt32PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInt32PropertyTag
void Valve::VR::OpenVR::_set_k_unInt32PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unInt32PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInt32PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unUint64PropertyTag
uint Valve::VR::OpenVR::_get_k_unUint64PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unUint64PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unUint64PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unUint64PropertyTag
void Valve::VR::OpenVR::_set_k_unUint64PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unUint64PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unUint64PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unBoolPropertyTag
uint Valve::VR::OpenVR::_get_k_unBoolPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unBoolPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unBoolPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unBoolPropertyTag
void Valve::VR::OpenVR::_set_k_unBoolPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unBoolPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unBoolPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unStringPropertyTag
uint Valve::VR::OpenVR::_get_k_unStringPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unStringPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unStringPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unStringPropertyTag
void Valve::VR::OpenVR::_set_k_unStringPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unStringPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unStringPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix34PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdMatrix34PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix34PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdMatrix34PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix44PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdMatrix44PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix44PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdMatrix44PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector3PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector3PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdVector3PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector3PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector3PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdVector3PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector4PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector4PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdVector4PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector4PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector4PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdVector4PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector2PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector2PropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdVector2PropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector2PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector2PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector2PropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdVector2PropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector2PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdQuadPropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdQuadPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHmdQuadPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdQuadPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdQuadPropertyTag
void Valve::VR::OpenVR::_set_k_unHmdQuadPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHmdQuadPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdQuadPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHiddenAreaPropertyTag
uint Valve::VR::OpenVR::_get_k_unHiddenAreaPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHiddenAreaPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHiddenAreaPropertyTag
void Valve::VR::OpenVR::_set_k_unHiddenAreaPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHiddenAreaPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unPathHandleInfoTag
uint Valve::VR::OpenVR::_get_k_unPathHandleInfoTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unPathHandleInfoTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unPathHandleInfoTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unPathHandleInfoTag
void Valve::VR::OpenVR::_set_k_unPathHandleInfoTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unPathHandleInfoTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unPathHandleInfoTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unActionPropertyTag
uint Valve::VR::OpenVR::_get_k_unActionPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unActionPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unActionPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unActionPropertyTag
void Valve::VR::OpenVR::_set_k_unActionPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unActionPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unActionPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInputValuePropertyTag
uint Valve::VR::OpenVR::_get_k_unInputValuePropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unInputValuePropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInputValuePropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInputValuePropertyTag
void Valve::VR::OpenVR::_set_k_unInputValuePropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unInputValuePropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInputValuePropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unWildcardPropertyTag
uint Valve::VR::OpenVR::_get_k_unWildcardPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unWildcardPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unWildcardPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unWildcardPropertyTag
void Valve::VR::OpenVR::_set_k_unWildcardPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unWildcardPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unWildcardPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHapticVibrationPropertyTag
uint Valve::VR::OpenVR::_get_k_unHapticVibrationPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unHapticVibrationPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHapticVibrationPropertyTag
void Valve::VR::OpenVR::_set_k_unHapticVibrationPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unHapticVibrationPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unSkeletonPropertyTag
uint Valve::VR::OpenVR::_get_k_unSkeletonPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unSkeletonPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unSkeletonPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unSkeletonPropertyTag
void Valve::VR::OpenVR::_set_k_unSkeletonPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unSkeletonPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unSkeletonPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unSpatialAnchorPosePropertyTag
uint Valve::VR::OpenVR::_get_k_unSpatialAnchorPosePropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unSpatialAnchorPosePropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unSpatialAnchorPosePropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unSpatialAnchorPosePropertyTag
void Valve::VR::OpenVR::_set_k_unSpatialAnchorPosePropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unSpatialAnchorPosePropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unSpatialAnchorPosePropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unJsonPropertyTag
uint Valve::VR::OpenVR::_get_k_unJsonPropertyTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unJsonPropertyTag");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unJsonPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unJsonPropertyTag
void Valve::VR::OpenVR::_set_k_unJsonPropertyTag(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unJsonPropertyTag");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unJsonPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_Start(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_End
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_End
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_End(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxPropertyStringSize
uint Valve::VR::OpenVR::_get_k_unMaxPropertyStringSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxPropertyStringSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxPropertyStringSize
void Valve::VR::OpenVR::_set_k_unMaxPropertyStringSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxPropertyStringSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidActionHandle
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidActionHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidActionHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidActionHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidActionHandle
void Valve::VR::OpenVR::_set_k_ulInvalidActionHandle(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidActionHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidActionHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidActionSetHandle
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidActionSetHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidActionSetHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidActionSetHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidActionSetHandle
void Valve::VR::OpenVR::_set_k_ulInvalidActionSetHandle(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidActionSetHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidActionSetHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidInputValueHandle
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidInputValueHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidInputValueHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidInputValueHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidInputValueHandle
void Valve::VR::OpenVR::_set_k_ulInvalidInputValueHandle(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidInputValueHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidInputValueHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unControllerStateAxisCount
uint Valve::VR::OpenVR::_get_k_unControllerStateAxisCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unControllerStateAxisCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unControllerStateAxisCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unControllerStateAxisCount
void Valve::VR::OpenVR::_set_k_unControllerStateAxisCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unControllerStateAxisCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unControllerStateAxisCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulOverlayHandleInvalid
uint64_t Valve::VR::OpenVR::_get_k_ulOverlayHandleInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulOverlayHandleInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulOverlayHandleInvalid
void Valve::VR::OpenVR::_set_k_ulOverlayHandleInvalid(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulOverlayHandleInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxDistortionFunctionParameters
uint Valve::VR::OpenVR::_get_k_unMaxDistortionFunctionParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxDistortionFunctionParameters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxDistortionFunctionParameters"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxDistortionFunctionParameters
void Valve::VR::OpenVR::_set_k_unMaxDistortionFunctionParameters(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxDistortionFunctionParameters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxDistortionFunctionParameters", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unScreenshotHandleInvalid
uint Valve::VR::OpenVR::_get_k_unScreenshotHandleInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unScreenshotHandleInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unScreenshotHandleInvalid
void Valve::VR::OpenVR::_set_k_unScreenshotHandleInvalid(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unScreenshotHandleInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSystem_Version
::StringW Valve::VR::OpenVR::_get_IVRSystem_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRSystem_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRSystem_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSystem_Version
void Valve::VR::OpenVR::_set_IVRSystem_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRSystem_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSystem_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRExtendedDisplay_Version
::StringW Valve::VR::OpenVR::_get_IVRExtendedDisplay_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRExtendedDisplay_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRExtendedDisplay_Version
void Valve::VR::OpenVR::_set_IVRExtendedDisplay_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRExtendedDisplay_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRTrackedCamera_Version
::StringW Valve::VR::OpenVR::_get_IVRTrackedCamera_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRTrackedCamera_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRTrackedCamera_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRTrackedCamera_Version
void Valve::VR::OpenVR::_set_IVRTrackedCamera_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRTrackedCamera_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRTrackedCamera_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxApplicationKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxApplicationKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxApplicationKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxApplicationKeyLength
void Valve::VR::OpenVR::_set_k_unMaxApplicationKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxApplicationKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_HomeApp
::StringW Valve::VR::OpenVR::_get_k_pch_MimeType_HomeApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_MimeType_HomeApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_HomeApp
void Valve::VR::OpenVR::_set_k_pch_MimeType_HomeApp(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_MimeType_HomeApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_GameTheater
::StringW Valve::VR::OpenVR::_get_k_pch_MimeType_GameTheater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_MimeType_GameTheater");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_GameTheater
void Valve::VR::OpenVR::_set_k_pch_MimeType_GameTheater(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_MimeType_GameTheater");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRApplications_Version
::StringW Valve::VR::OpenVR::_get_IVRApplications_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRApplications_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRApplications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRApplications_Version
void Valve::VR::OpenVR::_set_IVRApplications_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRApplications_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRApplications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperone_Version
::StringW Valve::VR::OpenVR::_get_IVRChaperone_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRChaperone_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRChaperone_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperone_Version
void Valve::VR::OpenVR::_set_IVRChaperone_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRChaperone_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperone_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperoneSetup_Version
::StringW Valve::VR::OpenVR::_get_IVRChaperoneSetup_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRChaperoneSetup_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperoneSetup_Version
void Valve::VR::OpenVR::_set_IVRChaperoneSetup_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRChaperoneSetup_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRCompositor_Version
::StringW Valve::VR::OpenVR::_get_IVRCompositor_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRCompositor_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRCompositor_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRCompositor_Version
void Valve::VR::OpenVR::_set_IVRCompositor_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRCompositor_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRCompositor_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxKeyLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unVROverlayMaxKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxKeyLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unVROverlayMaxKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxNameLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxNameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unVROverlayMaxNameLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxNameLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxNameLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unVROverlayMaxNameLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxOverlayCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxOverlayCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayIntersectionMaskPrimitivesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxOverlayIntersectionMaskPrimitivesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayIntersectionMaskPrimitivesCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxOverlayIntersectionMaskPrimitivesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVROverlay_Version
::StringW Valve::VR::OpenVR::_get_IVROverlay_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVROverlay_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVROverlay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVROverlay_Version
void Valve::VR::OpenVR::_set_IVROverlay_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVROverlay_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVROverlay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_GDC2015
::StringW Valve::VR::OpenVR::_get_k_pch_Controller_Component_GDC2015() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Controller_Component_GDC2015");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_GDC2015
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_GDC2015(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Controller_Component_GDC2015");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Base
::StringW Valve::VR::OpenVR::_get_k_pch_Controller_Component_Base() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Controller_Component_Base");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Base
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Base(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Controller_Component_Base");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Tip
::StringW Valve::VR::OpenVR::_get_k_pch_Controller_Component_Tip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Controller_Component_Tip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Tip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Tip(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Controller_Component_Tip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_HandGrip
::StringW Valve::VR::OpenVR::_get_k_pch_Controller_Component_HandGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Controller_Component_HandGrip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_HandGrip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_HandGrip(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Controller_Component_HandGrip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Status
::StringW Valve::VR::OpenVR::_get_k_pch_Controller_Component_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Controller_Component_Status");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Status
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Status(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Controller_Component_Status");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRRenderModels_Version
::StringW Valve::VR::OpenVR::_get_IVRRenderModels_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRRenderModels_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRRenderModels_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRRenderModels_Version
void Valve::VR::OpenVR::_set_IVRRenderModels_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRRenderModels_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRRenderModels_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unNotificationTextMaxSize
uint Valve::VR::OpenVR::_get_k_unNotificationTextMaxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unNotificationTextMaxSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unNotificationTextMaxSize
void Valve::VR::OpenVR::_set_k_unNotificationTextMaxSize(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unNotificationTextMaxSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRNotifications_Version
::StringW Valve::VR::OpenVR::_get_IVRNotifications_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRNotifications_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRNotifications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRNotifications_Version
void Valve::VR::OpenVR::_set_IVRNotifications_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRNotifications_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRNotifications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxSettingsKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxSettingsKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxSettingsKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxSettingsKeyLength
void Valve::VR::OpenVR::_set_k_unMaxSettingsKeyLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxSettingsKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSettings_Version
::StringW Valve::VR::OpenVR::_get_IVRSettings_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRSettings_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRSettings_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSettings_Version
void Valve::VR::OpenVR::_set_IVRSettings_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRSettings_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSettings_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Section
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Section
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RequireHmd_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_RequireHmd_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_RequireHmd_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RequireHmd_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RequireHmd_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_RequireHmd_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedDriverKey_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedDriverKey_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedDriverKey_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedDriverKey_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedHmdKey_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedHmdKey_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedHmdKey_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedHmdKey_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebug_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebug_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebug_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebug_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugProcessPipe_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugProcessPipe_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugProcessPipe_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugProcessPipe_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugX_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugX_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugX_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugX_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugY_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugY_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugY_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugY_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_SendSystemButtonToAllApps_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_SendSystemButtonToAllApps_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SendSystemButtonToAllApps_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_SendSystemButtonToAllApps_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_LogLevel_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_LogLevel_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_LogLevel_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_LogLevel_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_LogLevel_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_LogLevel_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IPD_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_IPD_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_IPD_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IPD_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IPD_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_IPD_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Background_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_Background_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_Background_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Background_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Background_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_Background_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundUseDomeProjection_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundUseDomeProjection_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundUseDomeProjection_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundUseDomeProjection_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundCameraHeight_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundCameraHeight_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundCameraHeight_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundCameraHeight_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundDomeRadius_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundDomeRadius_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundDomeRadius_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundDomeRadius_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_GridColor_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_GridColor_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_GridColor_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_GridColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_GridColor_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_GridColor_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_PlayAreaColor_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_PlayAreaColor_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_PlayAreaColor_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_PlayAreaColor_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowStage_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowStage_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowStage_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowStage_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowStage_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowStage_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ActivateMultipleDrivers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ActivateMultipleDrivers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ActivateMultipleDrivers_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ActivateMultipleDrivers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_UsingSpeakers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_UsingSpeakers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_UsingSpeakers_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_UsingSpeakers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_BaseStationPowerManagement_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_BaseStationPowerManagement_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BaseStationPowerManagement_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_BaseStationPowerManagement_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_NeverKillProcesses_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_NeverKillProcesses_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_NeverKillProcesses_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_NeverKillProcesses_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleScale_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MaxRecommendedResolution_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_MaxRecommendedResolution_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_MaxRecommendedResolution_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_MaxRecommendedResolution_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MaxRecommendedResolution_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MaxRecommendedResolution_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_MaxRecommendedResolution_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MaxRecommendedResolution_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MotionSmoothing_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_MotionSmoothing_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_MotionSmoothing_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_MotionSmoothing_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MotionSmoothing_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MotionSmoothing_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_MotionSmoothing_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MotionSmoothing_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MotionSmoothingOverride_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_MotionSmoothingOverride_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_MotionSmoothingOverride_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_MotionSmoothingOverride_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MotionSmoothingOverride_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MotionSmoothingOverride_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_MotionSmoothingOverride_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MotionSmoothingOverride_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceFadeOnBadTracking_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceFadeOnBadTracking_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceFadeOnBadTracking_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceFadeOnBadTracking_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DefaultMirrorView_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DefaultMirrorView_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DefaultMirrorView_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DefaultMirrorView_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowMirrorView_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowMirrorView_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowMirrorView_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowMirrorView_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometry_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometry_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometry_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometry_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MirrorViewGeometryMaximized_String
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometryMaximized_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometryMaximized_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometryMaximized_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MirrorViewGeometryMaximized_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometryMaximized_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometryMaximized_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometryMaximized_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_StartMonitorFromAppLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_StartMonitorFromAppLaunch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartMonitorFromAppLaunch(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_StartMonitorFromAppLaunch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableHomeApp
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableHomeApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableHomeApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableHomeApp
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableHomeApp(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableHomeApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_RetailDemo_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_RetailDemo_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RetailDemo_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_RetailDemo_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IpdOffset_Float
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_IpdOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_IpdOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IpdOffset_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IpdOffset_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_IpdOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowSupersampleFiltering_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowSupersampleFiltering_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowSupersampleFiltering_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowSupersampleFiltering_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SupersampleManualOverride_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleManualOverride_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleManualOverride_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleManualOverride_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SupersampleManualOverride_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleManualOverride_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleManualOverride_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleManualOverride_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowDisplayLockedMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowDisplayLockedMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowDisplayLockedMode_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowDisplayLockedMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceWindows32bitVRMonitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceWindows32bitVRMonitor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceWindows32bitVRMonitor(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceWindows32bitVRMonitor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DebugInput
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugInput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugInput"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DebugInput
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugInput(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugInput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugInput", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_LegacyInputRebinding
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_LegacyInputRebinding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_LegacyInputRebinding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_LegacyInputRebinding"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_LegacyInputRebinding
void Valve::VR::OpenVR::_set_k_pch_SteamVR_LegacyInputRebinding(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_LegacyInputRebinding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_LegacyInputRebinding", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DebugInputBinding
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugInputBinding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugInputBinding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugInputBinding"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DebugInputBinding
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugInputBinding(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugInputBinding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugInputBinding", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_InputBindingUIBlock
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_InputBindingUIBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_InputBindingUIBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_InputBindingUIBlock"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_InputBindingUIBlock
void Valve::VR::OpenVR::_set_k_pch_SteamVR_InputBindingUIBlock(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_InputBindingUIBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_InputBindingUIBlock", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RenderCameraMode
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_RenderCameraMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_RenderCameraMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_RenderCameraMode"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RenderCameraMode
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RenderCameraMode(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_RenderCameraMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RenderCameraMode", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableSharedResourceJournaling
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableSharedResourceJournaling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableSharedResourceJournaling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableSharedResourceJournaling"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableSharedResourceJournaling
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableSharedResourceJournaling(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableSharedResourceJournaling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableSharedResourceJournaling", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableSafeMode
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableSafeMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableSafeMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableSafeMode"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableSafeMode
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableSafeMode(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableSafeMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableSafeMode", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_PreferredRefreshRate
::StringW Valve::VR::OpenVR::_get_k_pch_SteamVR_PreferredRefreshRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_SteamVR_PreferredRefreshRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_SteamVR_PreferredRefreshRate"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_PreferredRefreshRate
void Valve::VR::OpenVR::_set_k_pch_SteamVR_PreferredRefreshRate(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_SteamVR_PreferredRefreshRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_PreferredRefreshRate", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DirectMode_Section
::StringW Valve::VR::OpenVR::_get_k_pch_DirectMode_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DirectMode_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DirectMode_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DirectMode_Section
void Valve::VR::OpenVR::_set_k_pch_DirectMode_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DirectMode_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DirectMode_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DirectMode_Enable_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_DirectMode_Enable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DirectMode_Enable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DirectMode_Enable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DirectMode_Enable_Bool
void Valve::VR::OpenVR::_set_k_pch_DirectMode_Enable_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DirectMode_Enable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DirectMode_Enable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DirectMode_Count_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_DirectMode_Count_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DirectMode_Count_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DirectMode_Count_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DirectMode_Count_Int32
void Valve::VR::OpenVR::_set_k_pch_DirectMode_Count_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DirectMode_Count_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DirectMode_Count_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DirectMode_EdidVid_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_DirectMode_EdidVid_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DirectMode_EdidVid_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DirectMode_EdidVid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DirectMode_EdidVid_Int32
void Valve::VR::OpenVR::_set_k_pch_DirectMode_EdidVid_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DirectMode_EdidVid_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DirectMode_EdidVid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DirectMode_EdidPid_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_DirectMode_EdidPid_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DirectMode_EdidPid_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DirectMode_EdidPid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DirectMode_EdidPid_Int32
void Valve::VR::OpenVR::_set_k_pch_DirectMode_EdidPid_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DirectMode_EdidPid_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DirectMode_EdidPid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_Section
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMU_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMU_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMU_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMU_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMUExceptHMD_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMUExceptHMD_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMUExceptHMD_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMUExceptHMD_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_UseDisambiguation_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_UseDisambiguation_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_UseDisambiguation_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_UseDisambiguation_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisambiguationDebug_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisambiguationDebug_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisambiguationDebug_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisambiguationDebug_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_PrimaryBasestation_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_PrimaryBasestation_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_PrimaryBasestation_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_PrimaryBasestation_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_DBHistory_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_DBHistory_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DBHistory_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_DBHistory_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableBluetooth_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableBluetooth_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableBluetooth_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableBluetooth_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_PowerManagedBaseStations_String
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_PowerManagedBaseStations_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_PowerManagedBaseStations_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_PowerManagedBaseStations_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_PowerManagedBaseStations_String
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_PowerManagedBaseStations_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_PowerManagedBaseStations_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_PowerManagedBaseStations_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_PowerManagedBaseStations2_String
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_PowerManagedBaseStations2_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_PowerManagedBaseStations2_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_PowerManagedBaseStations2_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_PowerManagedBaseStations2_String
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_PowerManagedBaseStations2_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_PowerManagedBaseStations2_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_PowerManagedBaseStations2_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_EnableImuFallback_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableImuFallback_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableImuFallback_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableImuFallback_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_EnableImuFallback_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableImuFallback_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableImuFallback_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableImuFallback_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Null_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_Section
void Valve::VR::OpenVR::_set_k_pch_Null_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SerialNumber_String
::StringW Valve::VR::OpenVR::_get_k_pch_Null_SerialNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_SerialNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SerialNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_SerialNumber_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_SerialNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_ModelNumber_String
::StringW Valve::VR::OpenVR::_get_k_pch_Null_ModelNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_ModelNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_ModelNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_ModelNumber_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_ModelNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowX_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_WindowX_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_WindowX_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowX_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowX_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_WindowX_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowY_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_WindowY_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_WindowY_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowY_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowY_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_WindowY_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowWidth_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_WindowWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_WindowWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowWidth_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_WindowWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowHeight_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_WindowHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_WindowHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowHeight_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_WindowHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderWidth_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_RenderWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_RenderWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderWidth_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_RenderWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderHeight_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Null_RenderHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_RenderHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderHeight_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_RenderHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Null_SecondsFromVsyncToPhotons_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_SecondsFromVsyncToPhotons_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
void Valve::VR::OpenVR::_set_k_pch_Null_SecondsFromVsyncToPhotons_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_SecondsFromVsyncToPhotons_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_DisplayFrequency_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Null_DisplayFrequency_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Null_DisplayFrequency_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_DisplayFrequency_Float
void Valve::VR::OpenVR::_set_k_pch_Null_DisplayFrequency_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Null_DisplayFrequency_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Section
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Section
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_StatusAlwaysOnTop_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_StatusAlwaysOnTop_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_StatusAlwaysOnTop_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_StatusAlwaysOnTop_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_MinimizeToTray_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_MinimizeToTray_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_MinimizeToTray_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_MinimizeToTray_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Screenshots_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_Screenshots_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_Screenshots_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Screenshots_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Screenshots_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_Screenshots_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
::StringW Valve::VR::OpenVR::_get_k_pch_UserInterface_ScreenshotType_Int() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_UserInterface_ScreenshotType_Int");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
void Valve::VR::OpenVR::_set_k_pch_UserInterface_ScreenshotType_Int(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_UserInterface_ScreenshotType_Int");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Notifications_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Notifications_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Notifications_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_Section
void Valve::VR::OpenVR::_set_k_pch_Notifications_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Notifications_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Notifications_DoNotDisturb_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Notifications_DoNotDisturb_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
void Valve::VR::OpenVR::_set_k_pch_Notifications_DoNotDisturb_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Notifications_DoNotDisturb_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Section
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_TutorialCompletions
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_TutorialCompletions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_TutorialCompletions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_TutorialCompletions
void Valve::VR::OpenVR::_set_k_pch_Keyboard_TutorialCompletions(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_TutorialCompletions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleX
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleX(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleY
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleY(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetLeftX
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetLeftX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetLeftX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetLeftX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetLeftX(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetLeftX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetRightX
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetRightX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetRightX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetRightX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetRightX(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetRightX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetY
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetY(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Smoothing
::StringW Valve::VR::OpenVR::_get_k_pch_Keyboard_Smoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Keyboard_Smoothing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Smoothing
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Smoothing(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Keyboard_Smoothing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_Section
void Valve::VR::OpenVR::_set_k_pch_Perf_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_PerfGraphInHMD_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_PerfGraphInHMD_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_PerfGraphInHMD_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_PerfGraphInHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_PerfGraphInHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_PerfGraphInHMD_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_PerfGraphInHMD_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_PerfGraphInHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_AllowTimingStore_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_AllowTimingStore_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_AllowTimingStore_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_AllowTimingStore_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_SaveTimingsOnExit_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_SaveTimingsOnExit_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_SaveTimingsOnExit_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_SaveTimingsOnExit_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_TestData_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_TestData_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_TestData_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_TestData_Float
void Valve::VR::OpenVR::_set_k_pch_Perf_TestData_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_TestData_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Perf_LinuxGPUProfiling_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Perf_LinuxGPUProfiling_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_LinuxGPUProfiling_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Perf_LinuxGPUProfiling_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Section
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Section
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Style_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Style_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Style_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Style_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Style_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Style_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_GroundPerimeterOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_GroundPerimeterOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_GroundPerimeterOn_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_GroundPerimeterOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_CenterMarkerOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_CenterMarkerOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_CenterMarkerOn_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_CenterMarkerOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_PlaySpaceOn_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_PlaySpaceOn_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_PlaySpaceOn_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_PlaySpaceOn_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_FadeDistance_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_FadeDistance_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_FadeDistance_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_FadeDistance_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaR_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaR_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaR_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaR_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaG_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaG_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaG_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaG_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaB_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaB_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaB_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaB_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaA_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaA_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaA_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaA_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_Section
void Valve::VR::OpenVR::_set_k_pch_Camera_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCamera_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_EnableCamera_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_EnableCamera_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCamera_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCamera_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_EnableCamera_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraInDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraInDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraInDashboard_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraInDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForCollisionBounds_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForCollisionBounds_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForCollisionBounds_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForCollisionBounds_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForRoomView_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForRoomView_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForRoomView_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForRoomView_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaR_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaR_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaR_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaR_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaG_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaG_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaG_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaG_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaB_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaB_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaB_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaB_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaA_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaA_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaA_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaA_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsStrength_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_BoundsStrength_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_BoundsStrength_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsStrength_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsStrength_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_BoundsStrength_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_RoomViewMode_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_Camera_RoomViewMode_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Camera_RoomViewMode_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Camera_RoomViewMode_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_RoomViewMode_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_RoomViewMode_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Camera_RoomViewMode_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_RoomViewMode_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_Section
::StringW Valve::VR::OpenVR::_get_k_pch_audio_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_Section
void Valve::VR::OpenVR::_set_k_pch_audio_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackDevice_String
::StringW Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackDevice_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnRecordDevice_String
::StringW Valve::VR::OpenVR::_get_k_pch_audio_OnRecordDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_OnRecordDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnRecordDevice_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_OnRecordDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
::StringW Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackMirrorDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackMirrorDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackMirrorDevice_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackMirrorDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffPlaybackDevice_String
::StringW Valve::VR::OpenVR::_get_k_pch_audio_OffPlaybackDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_OffPlaybackDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffPlaybackDevice_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_OffPlaybackDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffRecordDevice_String
::StringW Valve::VR::OpenVR::_get_k_pch_audio_OffRecordDevice_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_OffRecordDevice_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffRecordDevice_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_OffRecordDevice_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_VIVEHDMIGain
::StringW Valve::VR::OpenVR::_get_k_pch_audio_VIVEHDMIGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_audio_VIVEHDMIGain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_VIVEHDMIGain
void Valve::VR::OpenVR::_set_k_pch_audio_VIVEHDMIGain(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_audio_VIVEHDMIGain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Power_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_Section
void Valve::VR::OpenVR::_set_k_pch_Power_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Power_PowerOffOnExit_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_PowerOffOnExit_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PowerOffOnExit_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_PowerOffOnExit_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Power_TurnOffScreensTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_TurnOffScreensTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffScreensTimeout_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_TurnOffScreensTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Power_TurnOffControllersTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_TurnOffControllersTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffControllersTimeout_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_TurnOffControllersTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
::StringW Valve::VR::OpenVR::_get_k_pch_Power_ReturnToWatchdogTimeout_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_ReturnToWatchdogTimeout_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_ReturnToWatchdogTimeout_Float(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_ReturnToWatchdogTimeout_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
::StringW Valve::VR::OpenVR::_get_k_pch_Power_AutoLaunchSteamVROnButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_AutoLaunchSteamVROnButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
void Valve::VR::OpenVR::_set_k_pch_Power_AutoLaunchSteamVROnButtonPress(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_AutoLaunchSteamVROnButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Power_PauseCompositorOnStandby_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Power_PauseCompositorOnStandby_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PauseCompositorOnStandby_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Power_PauseCompositorOnStandby_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_Section
void Valve::VR::OpenVR::_set_k_pch_Dashboard_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableDashboard_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableDashboard_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableDashboard_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableDashboard_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_ArcadeMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_ArcadeMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_ArcadeMode_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_ArcadeMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableWebUI
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUI"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableWebUI
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUI(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUI", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableWebUIDevTools
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUIDevTools() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUIDevTools");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUIDevTools"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableWebUIDevTools
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUIDevTools(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUIDevTools");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUIDevTools", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableWebUIDashboardReplacement
::StringW Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUIDashboardReplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableWebUIDashboardReplacement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUIDashboardReplacement"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableWebUIDashboardReplacement
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUIDashboardReplacement(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableWebUIDashboardReplacement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableWebUIDashboardReplacement", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_modelskin_Section
::StringW Valve::VR::OpenVR::_get_k_pch_modelskin_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_modelskin_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_modelskin_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_modelskin_Section
void Valve::VR::OpenVR::_set_k_pch_modelskin_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_modelskin_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_modelskin_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Driver_Enable_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_Driver_Enable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Driver_Enable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Driver_Enable_Bool
void Valve::VR::OpenVR::_set_k_pch_Driver_Enable_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Driver_Enable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_WebInterface_Section
::StringW Valve::VR::OpenVR::_get_k_pch_WebInterface_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_WebInterface_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_WebInterface_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_WebInterface_Section
void Valve::VR::OpenVR::_set_k_pch_WebInterface_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_WebInterface_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_WebInterface_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_WebInterface_WebEnable_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_WebInterface_WebEnable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_WebInterface_WebEnable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_WebInterface_WebEnable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_WebInterface_WebEnable_Bool
void Valve::VR::OpenVR::_set_k_pch_WebInterface_WebEnable_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_WebInterface_WebEnable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_WebInterface_WebEnable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_WebInterface_WebPort_String
::StringW Valve::VR::OpenVR::_get_k_pch_WebInterface_WebPort_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_WebInterface_WebPort_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_WebInterface_WebPort_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_WebInterface_WebPort_String
void Valve::VR::OpenVR::_set_k_pch_WebInterface_WebPort_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_WebInterface_WebPort_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_WebInterface_WebPort_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_VRWebHelper_Section
::StringW Valve::VR::OpenVR::_get_k_pch_VRWebHelper_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_VRWebHelper_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_VRWebHelper_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_VRWebHelper_Section
void Valve::VR::OpenVR::_set_k_pch_VRWebHelper_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_VRWebHelper_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_VRWebHelper_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_VRWebHelper_DebuggerEnabled_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_VRWebHelper_DebuggerEnabled_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_VRWebHelper_DebuggerEnabled_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_VRWebHelper_DebuggerEnabled_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_VRWebHelper_DebuggerEnabled_Bool
void Valve::VR::OpenVR::_set_k_pch_VRWebHelper_DebuggerEnabled_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_VRWebHelper_DebuggerEnabled_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_VRWebHelper_DebuggerEnabled_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_VRWebHelper_DebuggerPort_Int32
::StringW Valve::VR::OpenVR::_get_k_pch_VRWebHelper_DebuggerPort_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_VRWebHelper_DebuggerPort_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_VRWebHelper_DebuggerPort_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_VRWebHelper_DebuggerPort_Int32
void Valve::VR::OpenVR::_set_k_pch_VRWebHelper_DebuggerPort_Int32(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_VRWebHelper_DebuggerPort_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_VRWebHelper_DebuggerPort_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_TrackingOverride_Section
::StringW Valve::VR::OpenVR::_get_k_pch_TrackingOverride_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_TrackingOverride_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_TrackingOverride_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_TrackingOverride_Section
void Valve::VR::OpenVR::_set_k_pch_TrackingOverride_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_TrackingOverride_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_TrackingOverride_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_App_BindingAutosaveURLSuffix_String
::StringW Valve::VR::OpenVR::_get_k_pch_App_BindingAutosaveURLSuffix_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_App_BindingAutosaveURLSuffix_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_App_BindingAutosaveURLSuffix_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_App_BindingAutosaveURLSuffix_String
void Valve::VR::OpenVR::_set_k_pch_App_BindingAutosaveURLSuffix_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_App_BindingAutosaveURLSuffix_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_App_BindingAutosaveURLSuffix_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_App_BindingCurrentURLSuffix_String
::StringW Valve::VR::OpenVR::_get_k_pch_App_BindingCurrentURLSuffix_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_App_BindingCurrentURLSuffix_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_App_BindingCurrentURLSuffix_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_App_BindingCurrentURLSuffix_String
void Valve::VR::OpenVR::_set_k_pch_App_BindingCurrentURLSuffix_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_App_BindingCurrentURLSuffix_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_App_BindingCurrentURLSuffix_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_App_NeedToUpdateAutosaveSuffix_Bool
::StringW Valve::VR::OpenVR::_get_k_pch_App_NeedToUpdateAutosaveSuffix_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_App_NeedToUpdateAutosaveSuffix_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_App_NeedToUpdateAutosaveSuffix_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_App_NeedToUpdateAutosaveSuffix_Bool
void Valve::VR::OpenVR::_set_k_pch_App_NeedToUpdateAutosaveSuffix_Bool(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_App_NeedToUpdateAutosaveSuffix_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_App_NeedToUpdateAutosaveSuffix_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_App_ActionManifestURL_String
::StringW Valve::VR::OpenVR::_get_k_pch_App_ActionManifestURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_App_ActionManifestURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_App_ActionManifestURL_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_App_ActionManifestURL_String
void Valve::VR::OpenVR::_set_k_pch_App_ActionManifestURL_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_App_ActionManifestURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_App_ActionManifestURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Trackers_Section
::StringW Valve::VR::OpenVR::_get_k_pch_Trackers_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_Trackers_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_Trackers_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Trackers_Section
void Valve::VR::OpenVR::_set_k_pch_Trackers_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_Trackers_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Trackers_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_DesktopUI_Section
::StringW Valve::VR::OpenVR::_get_k_pch_DesktopUI_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_DesktopUI_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_DesktopUI_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_DesktopUI_Section
void Valve::VR::OpenVR::_set_k_pch_DesktopUI_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_DesktopUI_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_DesktopUI_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_LastKnown_Section
::StringW Valve::VR::OpenVR::_get_k_pch_LastKnown_Section() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_LastKnown_Section");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_LastKnown_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_LastKnown_Section
void Valve::VR::OpenVR::_set_k_pch_LastKnown_Section(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_LastKnown_Section");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_LastKnown_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_LastKnown_HMDManufacturer_String
::StringW Valve::VR::OpenVR::_get_k_pch_LastKnown_HMDManufacturer_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_LastKnown_HMDManufacturer_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_LastKnown_HMDManufacturer_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_LastKnown_HMDManufacturer_String
void Valve::VR::OpenVR::_set_k_pch_LastKnown_HMDManufacturer_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_LastKnown_HMDManufacturer_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_LastKnown_HMDManufacturer_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_LastKnown_HMDModel_String
::StringW Valve::VR::OpenVR::_get_k_pch_LastKnown_HMDModel_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_pch_LastKnown_HMDModel_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "k_pch_LastKnown_HMDModel_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_LastKnown_HMDModel_String
void Valve::VR::OpenVR::_set_k_pch_LastKnown_HMDModel_String(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_pch_LastKnown_HMDModel_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_LastKnown_HMDModel_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRScreenshots_Version
::StringW Valve::VR::OpenVR::_get_IVRScreenshots_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRScreenshots_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRScreenshots_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRScreenshots_Version
void Valve::VR::OpenVR::_set_IVRScreenshots_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRScreenshots_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRScreenshots_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRResources_Version
::StringW Valve::VR::OpenVR::_get_IVRResources_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRResources_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRResources_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRResources_Version
void Valve::VR::OpenVR::_set_IVRResources_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRResources_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRResources_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRDriverManager_Version
::StringW Valve::VR::OpenVR::_get_IVRDriverManager_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRDriverManager_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRDriverManager_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRDriverManager_Version
void Valve::VR::OpenVR::_set_IVRDriverManager_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRDriverManager_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRDriverManager_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxActionNameLength
uint Valve::VR::OpenVR::_get_k_unMaxActionNameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxActionNameLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxActionNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxActionNameLength
void Valve::VR::OpenVR::_set_k_unMaxActionNameLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxActionNameLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxActionNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxActionSetNameLength
uint Valve::VR::OpenVR::_get_k_unMaxActionSetNameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxActionSetNameLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxActionSetNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxActionSetNameLength
void Valve::VR::OpenVR::_set_k_unMaxActionSetNameLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxActionSetNameLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxActionSetNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxActionOriginCount
uint Valve::VR::OpenVR::_get_k_unMaxActionOriginCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxActionOriginCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxActionOriginCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxActionOriginCount
void Valve::VR::OpenVR::_set_k_unMaxActionOriginCount(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxActionOriginCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxActionOriginCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxBoneNameLength
uint Valve::VR::OpenVR::_get_k_unMaxBoneNameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_unMaxBoneNameLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxBoneNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxBoneNameLength
void Valve::VR::OpenVR::_set_k_unMaxBoneNameLength(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_unMaxBoneNameLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxBoneNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRInput_Version
::StringW Valve::VR::OpenVR::_get_IVRInput_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRInput_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRInput_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRInput_Version
void Valve::VR::OpenVR::_set_IVRInput_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRInput_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRInput_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidIOBufferHandle
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidIOBufferHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidIOBufferHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidIOBufferHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidIOBufferHandle
void Valve::VR::OpenVR::_set_k_ulInvalidIOBufferHandle(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidIOBufferHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidIOBufferHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRIOBuffer_Version
::StringW Valve::VR::OpenVR::_get_IVRIOBuffer_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRIOBuffer_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRIOBuffer_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRIOBuffer_Version
void Valve::VR::OpenVR::_set_IVRIOBuffer_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRIOBuffer_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRIOBuffer_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_ulInvalidSpatialAnchorHandle
uint Valve::VR::OpenVR::_get_k_ulInvalidSpatialAnchorHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_k_ulInvalidSpatialAnchorHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_ulInvalidSpatialAnchorHandle"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_ulInvalidSpatialAnchorHandle
void Valve::VR::OpenVR::_set_k_ulInvalidSpatialAnchorHandle(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_k_ulInvalidSpatialAnchorHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidSpatialAnchorHandle", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSpatialAnchors_Version
::StringW Valve::VR::OpenVR::_get_IVRSpatialAnchors_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_IVRSpatialAnchors_Version");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "IVRSpatialAnchors_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSpatialAnchors_Version
void Valve::VR::OpenVR::_set_IVRSpatialAnchors_Version(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_IVRSpatialAnchors_Version");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSpatialAnchors_Version", value));
}
// [CompilerGeneratedAttribute] Offset: 0xADD828
// Autogenerated static field getter
// Get static field: static private System.UInt32 <VRToken>k__BackingField
uint Valve::VR::OpenVR::_get_$VRToken$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_$VRToken$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "<VRToken>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 <VRToken>k__BackingField
void Valve::VR::OpenVR::_set_$VRToken$k__BackingField(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_$VRToken$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "<VRToken>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String FnTable_Prefix
::StringW Valve::VR::OpenVR::_get_FnTable_Prefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get_FnTable_Prefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Valve.VR", "OpenVR", "FnTable_Prefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String FnTable_Prefix
void Valve::VR::OpenVR::_set_FnTable_Prefix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set_FnTable_Prefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "FnTable_Prefix", value));
}
// Autogenerated static field getter
// Get static field: static private Valve.VR.OpenVR/COpenVRContext _OpenVRInternal_ModuleContext
::Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::_get__OpenVRInternal_ModuleContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_get__OpenVRInternal_ModuleContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::OpenVR::COpenVRContext*>("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.OpenVR/COpenVRContext _OpenVRInternal_ModuleContext
void Valve::VR::OpenVR::_set__OpenVRInternal_ModuleContext(::Valve::VR::OpenVR::COpenVRContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::_set__OpenVRInternal_ModuleContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext", value));
}
// Autogenerated method: Valve.VR.OpenVR.InitInternal
uint Valve::VR::OpenVR::InitInternal(ByRef<::Valve::VR::EVRInitError> peError, ::Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVR.InitInternal2
uint Valve::VR::OpenVR::InitInternal2(ByRef<::Valve::VR::EVRInitError> peError, ::Valve::VR::EVRApplicationType eApplicationType, ::StringW pchStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::InitInternal2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "InitInternal2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType), ::il2cpp_utils::ExtractType(pchStartupInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType, pchStartupInfo);
}
// Autogenerated method: Valve.VR.OpenVR.ShutdownInternal
void Valve::VR::OpenVR::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.IsHmdPresent
bool Valve::VR::OpenVR::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.IsRuntimeInstalled
bool Valve::VR::OpenVR::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.RuntimePath
::StringW Valve::VR::OpenVR::RuntimePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::RuntimePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "RuntimePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.GetStringForHmdError
::StringW Valve::VR::OpenVR::GetStringForHmdError(::Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Valve.VR.OpenVR.GetGenericInterface
::System::IntPtr Valve::VR::OpenVR::GetGenericInterface(::StringW pchInterfaceVersion, ByRef<::Valve::VR::EVRInitError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pchInterfaceVersion, byref(peError));
}
// Autogenerated method: Valve.VR.OpenVR.IsInterfaceVersionValid
bool Valve::VR::OpenVR::IsInterfaceVersionValid(::StringW pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: Valve.VR.OpenVR.GetInitToken
uint Valve::VR::OpenVR::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_VRToken
uint Valve::VR::OpenVR::get_VRToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_VRToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_VRToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.set_VRToken
void Valve::VR::OpenVR::set_VRToken(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::set_VRToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "set_VRToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Valve.VR.OpenVR.get_OpenVRInternal_ModuleContext
::Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::get_OpenVRInternal_ModuleContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_OpenVRInternal_ModuleContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_OpenVRInternal_ModuleContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::OpenVR::COpenVRContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_System
::Valve::VR::CVRSystem* Valve::VR::OpenVR::get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_System");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_System", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSystem*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Chaperone
::Valve::VR::CVRChaperone* Valve::VR::OpenVR::get_Chaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Chaperone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Chaperone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRChaperone*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_ChaperoneSetup
::Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::get_ChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_ChaperoneSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_ChaperoneSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRChaperoneSetup*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Compositor
::Valve::VR::CVRCompositor* Valve::VR::OpenVR::get_Compositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Compositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Compositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRCompositor*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Overlay
::Valve::VR::CVROverlay* Valve::VR::OpenVR::get_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Overlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Overlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVROverlay*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_RenderModels
::Valve::VR::CVRRenderModels* Valve::VR::OpenVR::get_RenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_RenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_RenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRRenderModels*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_ExtendedDisplay
::Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::get_ExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_ExtendedDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_ExtendedDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRExtendedDisplay*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Settings
::Valve::VR::CVRSettings* Valve::VR::OpenVR::get_Settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Settings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Settings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSettings*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Applications
::Valve::VR::CVRApplications* Valve::VR::OpenVR::get_Applications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Applications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Applications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRApplications*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Screenshots
::Valve::VR::CVRScreenshots* Valve::VR::OpenVR::get_Screenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Screenshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Screenshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRScreenshots*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_TrackedCamera
::Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::get_TrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_TrackedCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_TrackedCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRTrackedCamera*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_Input
::Valve::VR::CVRInput* Valve::VR::OpenVR::get_Input() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_Input");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_Input", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRInput*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.get_SpatialAnchors
::Valve::VR::CVRSpatialAnchors* Valve::VR::OpenVR::get_SpatialAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::get_SpatialAnchors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "get_SpatialAnchors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSpatialAnchors*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR.Init
::Valve::VR::CVRSystem* Valve::VR::OpenVR::Init(ByRef<::Valve::VR::EVRInitError> peError, ::Valve::VR::EVRApplicationType eApplicationType, ::StringW pchStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType), ::il2cpp_utils::ExtractType(pchStartupInfo)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSystem*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType, pchStartupInfo);
}
// Autogenerated method: Valve.VR.OpenVR.Shutdown
void Valve::VR::OpenVR::Shutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR..cctor
void Valve::VR::OpenVR::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVR", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.OpenVR/COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
// Including type: Valve.VR.CVRInput
#include "Valve/VR/CVRInput.hpp"
// Including type: Valve.VR.CVRSpatialAnchors
#include "Valve/VR/CVRSpatialAnchors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSystem m_pVRSystem
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRSystem*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRSystem"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperone m_pVRChaperone
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperone*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRChaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRChaperone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRChaperone"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRChaperone**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRChaperoneSetup*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRChaperoneSetup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRChaperoneSetup"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRChaperoneSetup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRCompositor m_pVRCompositor
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRCompositor*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRCompositor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRCompositor"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRCompositor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVROverlay m_pVROverlay
[[deprecated("Use field access instead!")]] ::Valve::VR::CVROverlay*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVROverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVROverlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVROverlay"))->offset;
  return *reinterpret_cast<::Valve::VR::CVROverlay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRRenderModels m_pVRRenderModels
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRRenderModels*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRRenderModels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRRenderModels"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRRenderModels**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRExtendedDisplay*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRExtendedDisplay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRExtendedDisplay"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRExtendedDisplay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSettings m_pVRSettings
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRSettings*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRSettings"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRApplications m_pVRApplications
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRApplications*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRApplications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRApplications");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRApplications"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRApplications**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRScreenshots m_pVRScreenshots
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRScreenshots*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRScreenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRScreenshots");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRScreenshots"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRScreenshots**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRTrackedCamera*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRTrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRTrackedCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRTrackedCamera"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRTrackedCamera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRInput m_pVRInput
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRInput*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRInput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRInput"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRInput**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.CVRSpatialAnchors m_pVRSpatialAnchors
[[deprecated("Use field access instead!")]] ::Valve::VR::CVRSpatialAnchors*& Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSpatialAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::dyn_m_pVRSpatialAnchors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_pVRSpatialAnchors"))->offset;
  return *reinterpret_cast<::Valve::VR::CVRSpatialAnchors**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.Clear
void Valve::VR::OpenVR::COpenVRContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.CheckClear
void Valve::VR::OpenVR::COpenVRContext::CheckClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::CheckClear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckClear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRSystem
::Valve::VR::CVRSystem* Valve::VR::OpenVR::COpenVRContext::VRSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRChaperone
::Valve::VR::CVRChaperone* Valve::VR::OpenVR::COpenVRContext::VRChaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRChaperone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRChaperone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRChaperone*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRChaperoneSetup
::Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRChaperoneSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRChaperoneSetup*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRCompositor
::Valve::VR::CVRCompositor* Valve::VR::OpenVR::COpenVRContext::VRCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRCompositor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRCompositor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VROverlay
::Valve::VR::CVROverlay* Valve::VR::OpenVR::COpenVRContext::VROverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VROverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VROverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRRenderModels
::Valve::VR::CVRRenderModels* Valve::VR::OpenVR::COpenVRContext::VRRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRRenderModels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRRenderModels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRExtendedDisplay
::Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRExtendedDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRExtendedDisplay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRSettings
::Valve::VR::CVRSettings* Valve::VR::OpenVR::COpenVRContext::VRSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRApplications
::Valve::VR::CVRApplications* Valve::VR::OpenVR::COpenVRContext::VRApplications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRApplications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRApplications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRApplications*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRScreenshots
::Valve::VR::CVRScreenshots* Valve::VR::OpenVR::COpenVRContext::VRScreenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRScreenshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRScreenshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRScreenshots*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRTrackedCamera
::Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRTrackedCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRTrackedCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRInput
::Valve::VR::CVRInput* Valve::VR::OpenVR::COpenVRContext::VRInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRInput*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRSpatialAnchors
::Valve::VR::CVRSpatialAnchors* Valve::VR::OpenVR::COpenVRContext::VRSpatialAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::OpenVR::COpenVRContext::VRSpatialAnchors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRSpatialAnchors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::CVRSpatialAnchors*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.BodyCollider
#include "Valve/VR/InteractionSystem/BodyCollider.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::BodyCollider::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BodyCollider::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CapsuleCollider capsuleCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& Valve::VR::InteractionSystem::BodyCollider::dyn_capsuleCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BodyCollider::dyn_capsuleCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "capsuleCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::CapsuleCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.BodyCollider.Awake
void Valve::VR::InteractionSystem::BodyCollider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BodyCollider::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.BodyCollider.FixedUpdate
void Valve::VR::InteractionSystem::BodyCollider::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::BodyCollider::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.CircularDrive
#include "Valve/VR/InteractionSystem/CircularDrive.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43
#include "Valve/VR/InteractionSystem/CircularDrive_-HapticPulses-d__43.hpp"
// Including type: Valve.VR.InteractionSystem.LinearMapping
#include "Valve/VR/InteractionSystem/LinearMapping.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.CircularDrive/Axis_t axisOfRotation
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::CircularDrive::Axis_t& Valve::VR::InteractionSystem::CircularDrive::dyn_axisOfRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_axisOfRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "axisOfRotation"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::CircularDrive::Axis_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider childCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& Valve::VR::InteractionSystem::CircularDrive::dyn_childCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_childCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "childCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.LinearMapping linearMapping
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::LinearMapping*& Valve::VR::InteractionSystem::CircularDrive::dyn_linearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_linearMapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearMapping"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::LinearMapping**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean hoverLock
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_hoverLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_hoverLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverLock"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean limited
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_limited() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_limited");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "limited"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 frozenDistanceMinMaxThreshold
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Valve::VR::InteractionSystem::CircularDrive::dyn_frozenDistanceMinMaxThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_frozenDistanceMinMaxThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frozenDistanceMinMaxThreshold"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onFrozenDistanceThreshold
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::CircularDrive::dyn_onFrozenDistanceThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_onFrozenDistanceThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onFrozenDistanceThreshold"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minAngle
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_minAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_minAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean freezeOnMin
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_freezeOnMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_freezeOnMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "freezeOnMin"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onMinAngle
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::CircularDrive::dyn_onMinAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_onMinAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onMinAngle"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxAngle
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_maxAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_maxAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean freezeOnMax
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_freezeOnMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_freezeOnMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "freezeOnMax"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onMaxAngle
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& Valve::VR::InteractionSystem::CircularDrive::dyn_onMaxAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_onMaxAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onMaxAngle"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forceStart
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_forceStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_forceStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forceStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startAngle
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_startAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_startAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean rotateGameObject
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_rotateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_rotateGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotateGameObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean debugPath
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_debugPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_debugPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugPath"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 dbgPathLimit
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgPathLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgPathLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgPathLimit"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TextMesh debugText
[[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& Valve::VR::InteractionSystem::CircularDrive::dyn_debugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_debugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugText"))->offset;
  return *reinterpret_cast<::UnityEngine::TextMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single outAngle
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_outAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_outAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion start
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Valve::VR::InteractionSystem::CircularDrive::dyn_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "start"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 worldPlaneNormal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::CircularDrive::dyn_worldPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_worldPlaneNormal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "worldPlaneNormal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localPlaneNormal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::CircularDrive::dyn_localPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_localPlaneNormal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPlaneNormal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastHandProjected
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::CircularDrive::dyn_lastHandProjected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_lastHandProjected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastHandProjected"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color red
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::CircularDrive::dyn_red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_red");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "red"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color green
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& Valve::VR::InteractionSystem::CircularDrive::dyn_green() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_green");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "green"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] dbgHandObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgHandObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgHandObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgHandObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] dbgProjObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgProjObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgProjObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgProjObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject dbgObjectsParent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectsParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectsParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgObjectsParent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 dbgObjectCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgObjectCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 dbgObjectIndex
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_dbgObjectIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgObjectIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean driving
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_driving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_driving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "driving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minMaxAngularThreshold
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_minMaxAngularThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_minMaxAngularThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minMaxAngularThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean frozen
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::CircularDrive::dyn_frozen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_frozen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frozen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single frozenAngle
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::dyn_frozenAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_frozenAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frozenAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 frozenHandWorldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::CircularDrive::dyn_frozenHandWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_frozenHandWorldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frozenHandWorldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 frozenSqDistanceMinMaxThreshold
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& Valve::VR::InteractionSystem::CircularDrive::dyn_frozenSqDistanceMinMaxThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_frozenSqDistanceMinMaxThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frozenSqDistanceMinMaxThreshold"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand handHoverLocked
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::CircularDrive::dyn_handHoverLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::dyn_handHoverLocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handHoverLocked"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.Freeze
void Valve::VR::InteractionSystem::CircularDrive::Freeze(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Freeze");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Freeze", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.UnFreeze
void Valve::VR::InteractionSystem::CircularDrive::UnFreeze() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::UnFreeze");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnFreeze", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.Start
void Valve::VR::InteractionSystem::CircularDrive::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.OnDisable
void Valve::VR::InteractionSystem::CircularDrive::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.HapticPulses
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::CircularDrive::HapticPulses(::GlobalNamespace::SteamVR_Controller::Device* controller, float flMagnitude, int nCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::HapticPulses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HapticPulses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(flMagnitude), ::il2cpp_utils::ExtractType(nCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, controller, flMagnitude, nCount);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.OnHandHoverBegin
void Valve::VR::InteractionSystem::CircularDrive::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.OnHandHoverEnd
void Valve::VR::InteractionSystem::CircularDrive::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.HandHoverUpdate
void Valve::VR::InteractionSystem::CircularDrive::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.ComputeToTransformProjected
::UnityEngine::Vector3 Valve::VR::InteractionSystem::CircularDrive::ComputeToTransformProjected(::UnityEngine::Transform* xForm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::ComputeToTransformProjected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeToTransformProjected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xForm)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, xForm);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.DrawDebugPath
void Valve::VR::InteractionSystem::CircularDrive::DrawDebugPath(::UnityEngine::Transform* xForm, ::UnityEngine::Vector3 toTransformProjected) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::DrawDebugPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawDebugPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xForm), ::il2cpp_utils::ExtractType(toTransformProjected)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, xForm, toTransformProjected);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.UpdateLinearMapping
void Valve::VR::InteractionSystem::CircularDrive::UpdateLinearMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::UpdateLinearMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLinearMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.UpdateGameObject
void Valve::VR::InteractionSystem::CircularDrive::UpdateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::UpdateGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.UpdateDebugText
void Valve::VR::InteractionSystem::CircularDrive::UpdateDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::UpdateDebugText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDebugText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.UpdateAll
void Valve::VR::InteractionSystem::CircularDrive::UpdateAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::UpdateAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive.ComputeAngle
void Valve::VR::InteractionSystem::CircularDrive::ComputeAngle(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::ComputeAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.CircularDrive/Axis_t
#include "Valve/VR/InteractionSystem/CircularDrive.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t XAxis
::Valve::VR::InteractionSystem::CircularDrive::Axis_t Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_XAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::CircularDrive::Axis_t>("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "XAxis"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t XAxis
void Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_XAxis(::Valve::VR::InteractionSystem::CircularDrive::Axis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_XAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "XAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t YAxis
::Valve::VR::InteractionSystem::CircularDrive::Axis_t Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_YAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::CircularDrive::Axis_t>("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "YAxis"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t YAxis
void Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_YAxis(::Valve::VR::InteractionSystem::CircularDrive::Axis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_YAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "YAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t ZAxis
::Valve::VR::InteractionSystem::CircularDrive::Axis_t Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_get_ZAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::CircularDrive::Axis_t>("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "ZAxis"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.CircularDrive/Axis_t ZAxis
void Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_ZAxis(::Valve::VR::InteractionSystem::CircularDrive::Axis_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::_set_ZAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "CircularDrive/Axis_t", "ZAxis", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::Axis_t::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::Axis_t::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43
#include "Valve/VR/InteractionSystem/CircularDrive_-HapticPulses-d__43.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_Controller/Device controller
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Controller::Device*& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controller"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Controller::Device**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flMagnitude
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_flMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_flMagnitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flMagnitude"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 nCount
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_nCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_nCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <nRangeMax>5__2
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$nRangeMax$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$nRangeMax$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<nRangeMax>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 <i>5__3
[[deprecated("Use field access instead!")]] uint16_t& Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$i$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::dyn_$i$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__3"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43.MoveNext
bool Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.CircularDrive/<HapticPulses>d__43.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::CircularDrive::$HapticPulses$d__43*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ComplexThrowable
#include "Valve/VR/InteractionSystem/ComplexThrowable.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single attachForce
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single attachForceDamper
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachForceDamper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachForceDamper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachForceDamper"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.ComplexThrowable/AttachMode attachMode
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode& Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachMode"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand/AttachmentFlags attachmentFlags
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::AttachmentFlags& Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachmentFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_attachmentFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentFlags"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand::AttachmentFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.Hand> holdingHands
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::Hand*>*& Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingHands() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingHands");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingHands"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::Hand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Rigidbody> holdingBodies
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rigidbody*>*& Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingBodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingBodies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingBodies"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Rigidbody*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Vector3> holdingPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_holdingPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Rigidbody> rigidBodies
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Rigidbody*>*& Valve::VR::InteractionSystem::ComplexThrowable::dyn_rigidBodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::dyn_rigidBodies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigidBodies"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Rigidbody*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.Awake
void Valve::VR::InteractionSystem::ComplexThrowable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.Update
void Valve::VR::InteractionSystem::ComplexThrowable::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.OnHandHoverBegin
void Valve::VR::InteractionSystem::ComplexThrowable::OnHandHoverBegin(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::OnHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.OnHandHoverEnd
void Valve::VR::InteractionSystem::ComplexThrowable::OnHandHoverEnd(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::OnHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.HandHoverUpdate
void Valve::VR::InteractionSystem::ComplexThrowable::HandHoverUpdate(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::HandHoverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandHoverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.PhysicsAttach
void Valve::VR::InteractionSystem::ComplexThrowable::PhysicsAttach(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::PhysicsAttach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PhysicsAttach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.PhysicsDetach
bool Valve::VR::InteractionSystem::ComplexThrowable::PhysicsDetach(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::PhysicsDetach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PhysicsDetach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: Valve.VR.InteractionSystem.ComplexThrowable.FixedUpdate
void Valve::VR::InteractionSystem::ComplexThrowable::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ComplexThrowable/AttachMode
#include "Valve/VR/InteractionSystem/ComplexThrowable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ComplexThrowable/AttachMode FixedJoint
::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_get_FixedJoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_get_FixedJoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode>("Valve.VR.InteractionSystem", "ComplexThrowable/AttachMode", "FixedJoint"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ComplexThrowable/AttachMode FixedJoint
void Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_set_FixedJoint(::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_set_FixedJoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ComplexThrowable/AttachMode", "FixedJoint", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.ComplexThrowable/AttachMode Force
::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_get_Force() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_get_Force");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode>("Valve.VR.InteractionSystem", "ComplexThrowable/AttachMode", "Force"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.ComplexThrowable/AttachMode Force
void Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_set_Force(::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::_set_Force");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "ComplexThrowable/AttachMode", "Force", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ComplexThrowable::AttachMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.ControllerHoverHighlight
#include "Valve/VR/InteractionSystem/ControllerHoverHighlight.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material highLightMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_highLightMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_highLightMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highLightMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean fireHapticsOnHightlight
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_fireHapticsOnHightlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_fireHapticsOnHightlight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fireHapticsOnHightlight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Hand hand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_hand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer bodyMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_bodyMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_bodyMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer trackingHatMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_trackingHatMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_trackingHatMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingHatMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_RenderModel renderModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_RenderModel*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_RenderModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean renderModelLoaded
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModelLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModelLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModelLoaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action renderModelLoadedAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModelLoadedAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::dyn_renderModelLoadedAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderModelLoadedAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.Start
void Valve::VR::InteractionSystem::ControllerHoverHighlight::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.Awake
void Valve::VR::InteractionSystem::ControllerHoverHighlight::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnEnable
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnDisable
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnHandInitialized
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnHandInitialized(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnHandInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnHandInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deviceIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deviceIndex);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnRenderModelLoaded
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnRenderModelLoaded(::GlobalNamespace::SteamVR_RenderModel* renderModel, bool success) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnRenderModelLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRenderModelLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderModel), ::il2cpp_utils::ExtractType(success)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderModel, success);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnParentHandHoverBegin
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverBegin(::Valve::VR::InteractionSystem::Interactable* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParentHandHoverBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnParentHandHoverEnd
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverEnd(::Valve::VR::InteractionSystem::Interactable* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandHoverEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParentHandHoverEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnParentHandInputFocusAcquired
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusAcquired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusAcquired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParentHandInputFocusAcquired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.OnParentHandInputFocusLost
void Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::OnParentHandInputFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParentHandInputFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.ShowHighlight
void Valve::VR::InteractionSystem::ControllerHoverHighlight::ShowHighlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::ShowHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.ControllerHoverHighlight.HideHighlight
void Valve::VR::InteractionSystem::ControllerHoverHighlight::HideHighlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::ControllerHoverHighlight::HideHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.CustomEvents/UnityEventSingleFloat
#include "Valve/VR/InteractionSystem/CustomEvents_UnityEventSingleFloat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.CustomEvents/UnityEventHand
#include "Valve/VR/InteractionSystem/CustomEvents_UnityEventHand.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DebugUI
#include "Valve/VR/InteractionSystem/DebugUI.hpp"
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Valve.VR.InteractionSystem.DebugUI _instance
::Valve::VR::InteractionSystem::DebugUI* Valve::VR::InteractionSystem::DebugUI::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DebugUI::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::DebugUI*>("Valve.VR.InteractionSystem", "DebugUI", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.InteractionSystem.DebugUI _instance
void Valve::VR::InteractionSystem::DebugUI::_set__instance(::Valve::VR::InteractionSystem::DebugUI* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DebugUI::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "DebugUI", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Player player
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& Valve::VR::InteractionSystem::DebugUI::dyn_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DebugUI::dyn_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.DebugUI.get_instance
::Valve::VR::InteractionSystem::DebugUI* Valve::VR::InteractionSystem::DebugUI::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DebugUI::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR.InteractionSystem", "DebugUI", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::DebugUI*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DebugUI.Start
void Valve::VR::InteractionSystem::DebugUI::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DebugUI::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DestroyOnDetachedFromHand
#include "Valve/VR/InteractionSystem/DestroyOnDetachedFromHand.hpp"
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.DestroyOnDetachedFromHand.OnDetachedFromHand
void Valve::VR::InteractionSystem::DestroyOnDetachedFromHand::OnDetachedFromHand(::Valve::VR::InteractionSystem::Hand* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnDetachedFromHand::OnDetachedFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDetachedFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DestroyOnParticleSystemDeath
#include "Valve/VR/InteractionSystem/DestroyOnParticleSystemDeath.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem particles
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::dyn_particles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::dyn_particles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particles"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.DestroyOnParticleSystemDeath.Awake
void Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DestroyOnParticleSystemDeath.CheckParticleSystem
void Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::CheckParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnParticleSystemDeath::CheckParticleSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckParticleSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DestroyOnTriggerEnter
#include "Valve/VR/InteractionSystem/DestroyOnTriggerEnter.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String tagFilter
[[deprecated("Use field access instead!")]] ::StringW& Valve::VR::InteractionSystem::DestroyOnTriggerEnter::dyn_tagFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnTriggerEnter::dyn_tagFilter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagFilter"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean useTag
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::DestroyOnTriggerEnter::dyn_useTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnTriggerEnter::dyn_useTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useTag"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.DestroyOnTriggerEnter.Start
void Valve::VR::InteractionSystem::DestroyOnTriggerEnter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnTriggerEnter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DestroyOnTriggerEnter.OnTriggerEnter
void Valve::VR::InteractionSystem::DestroyOnTriggerEnter::OnTriggerEnter(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DestroyOnTriggerEnter::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DistanceHaptics
#include "Valve/VR/InteractionSystem/DistanceHaptics.hpp"
// Including type: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4
#include "Valve/VR/InteractionSystem/DistanceHaptics_-Start-d__4.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform firstTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::DistanceHaptics::dyn_firstTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::dyn_firstTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform secondTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::DistanceHaptics::dyn_secondTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::dyn_secondTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "secondTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve distanceIntensityCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Valve::VR::InteractionSystem::DistanceHaptics::dyn_distanceIntensityCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::dyn_distanceIntensityCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distanceIntensityCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve pulseIntervalCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Valve::VR::InteractionSystem::DistanceHaptics::dyn_pulseIntervalCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::dyn_pulseIntervalCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pulseIntervalCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics.Start
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::DistanceHaptics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4
#include "Valve/VR/InteractionSystem/DistanceHaptics_-Start-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.DistanceHaptics <>4__this
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::DistanceHaptics*& Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::DistanceHaptics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4.System.IDisposable.Dispose
void Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4.MoveNext
bool Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4.System.Collections.IEnumerator.Reset
void Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.DistanceHaptics/<Start>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::InteractionSystem::DistanceHaptics::$Start$d__4*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.DontDestroyOnLoad
#include "Valve/VR/InteractionSystem/DontDestroyOnLoad.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.InteractionSystem.DontDestroyOnLoad.Awake
void Valve::VR::InteractionSystem::DontDestroyOnLoad::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::DontDestroyOnLoad::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.EnumFlags
#include "Valve/VR/InteractionSystem/EnumFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.FallbackCameraController
#include "Valve/VR/InteractionSystem/FallbackCameraController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single speed
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FallbackCameraController::dyn_speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single shiftSpeed
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FallbackCameraController::dyn_shiftSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_shiftSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shiftSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showInstructions
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::FallbackCameraController::dyn_showInstructions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_showInstructions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showInstructions"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startEulerAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::FallbackCameraController::dyn_startEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_startEulerAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startEulerAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startMousePosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Valve::VR::InteractionSystem::FallbackCameraController::dyn_startMousePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_startMousePosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startMousePosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single realTime
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::FallbackCameraController::dyn_realTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::dyn_realTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "realTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.FallbackCameraController.OnEnable
void Valve::VR::InteractionSystem::FallbackCameraController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.FallbackCameraController.Update
void Valve::VR::InteractionSystem::FallbackCameraController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.FallbackCameraController.OnGUI
void Valve::VR::InteractionSystem::FallbackCameraController::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::FallbackCameraController::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand
#include "Valve/VR/InteractionSystem/Hand.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: Valve.VR.InteractionSystem.Interactable
#include "Valve/VR/InteractionSystem/Interactable.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass42_0
#include "Valve/VR/InteractionSystem/Hand_--c__DisplayClass42_0.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/<>c
#include "Valve/VR/InteractionSystem/Hand_--c.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/<Start>d__47
#include "Valve/VR/InteractionSystem/Hand_-Start-d__47.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass48_0
#include "Valve/VR/InteractionSystem/Hand_--c__DisplayClass48_0.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.TextMesh
#include "UnityEngine/TextMesh.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Valve.VR.InteractionSystem.Player
#include "Valve/VR/InteractionSystem/Player.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags defaultAttachmentFlags
::Valve::VR::InteractionSystem::Hand::AttachmentFlags Valve::VR::InteractionSystem::Hand::_get_defaultAttachmentFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::_get_defaultAttachmentFlags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::AttachmentFlags>("Valve.VR.InteractionSystem", "Hand", "defaultAttachmentFlags"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags defaultAttachmentFlags
void Valve::VR::InteractionSystem::Hand::_set_defaultAttachmentFlags(::Valve::VR::InteractionSystem::Hand::AttachmentFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::_set_defaultAttachmentFlags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand", "defaultAttachmentFlags", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ColliderArraySize
int Valve::VR::InteractionSystem::Hand::_get_ColliderArraySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::_get_ColliderArraySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Valve.VR.InteractionSystem", "Hand", "ColliderArraySize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ColliderArraySize
void Valve::VR::InteractionSystem::Hand::_set_ColliderArraySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::_set_ColliderArraySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand", "ColliderArraySize", value));
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand otherHand
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand*& Valve::VR::InteractionSystem::Hand::dyn_otherHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_otherHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otherHand"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Valve.VR.InteractionSystem.Hand/HandType startingHandType
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Hand::HandType& Valve::VR::InteractionSystem::Hand::dyn_startingHandType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_startingHandType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingHandType"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Hand::HandType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform hoverSphereTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Valve::VR::InteractionSystem::Hand::dyn_hoverSphereTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_hoverSphereTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverSphereTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hoverSphereRadius
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Hand::dyn_hoverSphereRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_hoverSphereRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverSphereRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask hoverLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& Valve::VR::InteractionSystem::Hand::dyn_hoverLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_hoverLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hoverUpdateInterval
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Hand::dyn_hoverUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_hoverUpdateInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hoverUpdateInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera noSteamVRFallbackCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noSteamVRFallbackCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noSteamVRFallbackMaxDistanceNoItem
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackMaxDistanceNoItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackMaxDistanceNoItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noSteamVRFallbackMaxDistanceNoItem"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noSteamVRFallbackMaxDistanceWithItem
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackMaxDistanceWithItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackMaxDistanceWithItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noSteamVRFallbackMaxDistanceWithItem"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single noSteamVRFallbackInteractorDistance
[[deprecated("Use field access instead!")]] float& Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackInteractorDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_noSteamVRFallbackInteractorDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noSteamVRFallbackInteractorDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SteamVR_Controller/Device controller
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Controller::Device*& Valve::VR::InteractionSystem::Hand::dyn_controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controller"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Controller::Device**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject controllerPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Hand::dyn_controllerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_controllerPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject controllerObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Hand::dyn_controllerObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_controllerObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controllerObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showDebugText
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Hand::dyn_showDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_showDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean spewDebugText
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Hand::dyn_spewDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_spewDebugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spewDebugText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Valve.VR.InteractionSystem.Hand/AttachedObject> attachedObjects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>*& Valve::VR::InteractionSystem::Hand::dyn_attachedObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_attachedObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachedObjects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <hoverLocked>k__BackingField
[[deprecated("Use field access instead!")]] bool& Valve::VR::InteractionSystem::Hand::dyn_$hoverLocked$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_$hoverLocked$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hoverLocked>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Interactable _hoveringInteractable
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Interactable*& Valve::VR::InteractionSystem::Hand::dyn__hoveringInteractable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn__hoveringInteractable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hoveringInteractable"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Interactable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.TextMesh debugText
[[deprecated("Use field access instead!")]] ::UnityEngine::TextMesh*& Valve::VR::InteractionSystem::Hand::dyn_debugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_debugText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugText"))->offset;
  return *reinterpret_cast<::UnityEngine::TextMesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 prevOverlappingColliders
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Hand::dyn_prevOverlappingColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_prevOverlappingColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevOverlappingColliders"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] overlappingColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& Valve::VR::InteractionSystem::Hand::dyn_overlappingColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_overlappingColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlappingColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Valve.VR.InteractionSystem.Player playerInstance
[[deprecated("Use field access instead!")]] ::Valve::VR::InteractionSystem::Player*& Valve::VR::InteractionSystem::Hand::dyn_playerInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_playerInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerInstance"))->offset;
  return *reinterpret_cast<::Valve::VR::InteractionSystem::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject applicationLostFocusObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Hand::dyn_applicationLostFocusObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_applicationLostFocusObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applicationLostFocusObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SteamVR_Events/Action inputFocusAction
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Events::Action*& Valve::VR::InteractionSystem::Hand::dyn_inputFocusAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::dyn_inputFocusAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputFocusAction"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SteamVR_Events::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.get_AttachedObjects
::System::Collections::ObjectModel::ReadOnlyCollection_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>* Valve::VR::InteractionSystem::Hand::get_AttachedObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::get_AttachedObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AttachedObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::Valve::VR::InteractionSystem::Hand::AttachedObject>*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.get_hoverLocked
bool Valve::VR::InteractionSystem::Hand::get_hoverLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::get_hoverLocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hoverLocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.set_hoverLocked
void Valve::VR::InteractionSystem::Hand::set_hoverLocked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::set_hoverLocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hoverLocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.get_hoveringInteractable
::Valve::VR::InteractionSystem::Interactable* Valve::VR::InteractionSystem::Hand::get_hoveringInteractable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::get_hoveringInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hoveringInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Interactable*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.set_hoveringInteractable
void Valve::VR::InteractionSystem::Hand::set_hoveringInteractable(::Valve::VR::InteractionSystem::Interactable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::set_hoveringInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hoveringInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.get_currentAttachedObject
::UnityEngine::GameObject* Valve::VR::InteractionSystem::Hand::get_currentAttachedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::get_currentAttachedObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentAttachedObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetAttachmentTransform
::UnityEngine::Transform* Valve::VR::InteractionSystem::Hand::GetAttachmentTransform(::StringW attachmentPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetAttachmentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttachmentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attachmentPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, attachmentPoint);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GuessCurrentHandType
::Valve::VR::InteractionSystem::Hand::HandType Valve::VR::InteractionSystem::Hand::GuessCurrentHandType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GuessCurrentHandType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessCurrentHandType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::InteractionSystem::Hand::HandType, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.AttachObject
void Valve::VR::InteractionSystem::Hand::AttachObject(::UnityEngine::GameObject* objectToAttach, ::Valve::VR::InteractionSystem::Hand::AttachmentFlags flags, ::StringW attachmentPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectToAttach), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(attachmentPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, objectToAttach, flags, attachmentPoint);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.DetachObject
void Valve::VR::InteractionSystem::Hand::DetachObject(::UnityEngine::GameObject* objectToDetach, bool restoreOriginalParent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::DetachObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetachObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectToDetach), ::il2cpp_utils::ExtractType(restoreOriginalParent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, objectToDetach, restoreOriginalParent);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetTrackedObjectVelocity
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Hand::GetTrackedObjectVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetTrackedObjectVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedObjectVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetTrackedObjectAngularVelocity
::UnityEngine::Vector3 Valve::VR::InteractionSystem::Hand::GetTrackedObjectAngularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetTrackedObjectAngularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedObjectAngularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.CleanUpAttachedObjectStack
void Valve::VR::InteractionSystem::Hand::CleanUpAttachedObjectStack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::CleanUpAttachedObjectStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUpAttachedObjectStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.Awake
void Valve::VR::InteractionSystem::Hand::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.Start
::System::Collections::IEnumerator* Valve::VR::InteractionSystem::Hand::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.UpdateHovering
void Valve::VR::InteractionSystem::Hand::UpdateHovering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::UpdateHovering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHovering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.UpdateNoSteamVRFallback
void Valve::VR::InteractionSystem::Hand::UpdateNoSteamVRFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::UpdateNoSteamVRFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNoSteamVRFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.UpdateDebugText
void Valve::VR::InteractionSystem::Hand::UpdateDebugText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::UpdateDebugText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDebugText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.OnEnable
void Valve::VR::InteractionSystem::Hand::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.OnDisable
void Valve::VR::InteractionSystem::Hand::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.Update
void Valve::VR::InteractionSystem::Hand::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.LateUpdate
void Valve::VR::InteractionSystem::Hand::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.OnInputFocus
void Valve::VR::InteractionSystem::Hand::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.FixedUpdate
void Valve::VR::InteractionSystem::Hand::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.OnDrawGizmos
void Valve::VR::InteractionSystem::Hand::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.HandDebugLog
void Valve::VR::InteractionSystem::Hand::HandDebugLog(::StringW msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandDebugLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandDebugLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.UpdateHandPoses
void Valve::VR::InteractionSystem::Hand::UpdateHandPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::UpdateHandPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.HoverLock
void Valve::VR::InteractionSystem::Hand::HoverLock(::Valve::VR::InteractionSystem::Interactable* interactable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HoverLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HoverLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, interactable);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.HoverUnlock
void Valve::VR::InteractionSystem::Hand::HoverUnlock(::Valve::VR::InteractionSystem::Interactable* interactable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HoverUnlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HoverUnlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, interactable);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetStandardInteractionButtonDown
bool Valve::VR::InteractionSystem::Hand::GetStandardInteractionButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetStandardInteractionButtonDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStandardInteractionButtonDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetStandardInteractionButtonUp
bool Valve::VR::InteractionSystem::Hand::GetStandardInteractionButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetStandardInteractionButtonUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStandardInteractionButtonUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.GetStandardInteractionButton
bool Valve::VR::InteractionSystem::Hand::GetStandardInteractionButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::GetStandardInteractionButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStandardInteractionButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand.InitController
void Valve::VR::InteractionSystem::Hand::InitController(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::InitController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand/HandType
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/HandType Left
::Valve::VR::InteractionSystem::Hand::HandType Valve::VR::InteractionSystem::Hand::HandType::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::HandType>("Valve.VR.InteractionSystem", "Hand/HandType", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/HandType Left
void Valve::VR::InteractionSystem::Hand::HandType::_set_Left(::Valve::VR::InteractionSystem::Hand::HandType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/HandType", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/HandType Right
::Valve::VR::InteractionSystem::Hand::HandType Valve::VR::InteractionSystem::Hand::HandType::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::HandType>("Valve.VR.InteractionSystem", "Hand/HandType", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/HandType Right
void Valve::VR::InteractionSystem::Hand::HandType::_set_Right(::Valve::VR::InteractionSystem::Hand::HandType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/HandType", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/HandType Any
::Valve::VR::InteractionSystem::Hand::HandType Valve::VR::InteractionSystem::Hand::HandType::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::HandType>("Valve.VR.InteractionSystem", "Hand/HandType", "Any"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/HandType Any
void Valve::VR::InteractionSystem::Hand::HandType::_set_Any(::Valve::VR::InteractionSystem::Hand::HandType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/HandType", "Any", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Hand::HandType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::HandType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand/AttachmentFlags
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags SnapOnAttach
::Valve::VR::InteractionSystem::Hand::AttachmentFlags Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_SnapOnAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_SnapOnAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::AttachmentFlags>("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "SnapOnAttach"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags SnapOnAttach
void Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_SnapOnAttach(::Valve::VR::InteractionSystem::Hand::AttachmentFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_SnapOnAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "SnapOnAttach", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags DetachOthers
::Valve::VR::InteractionSystem::Hand::AttachmentFlags Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_DetachOthers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_DetachOthers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::AttachmentFlags>("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "DetachOthers"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags DetachOthers
void Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_DetachOthers(::Valve::VR::InteractionSystem::Hand::AttachmentFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_DetachOthers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "DetachOthers", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags DetachFromOtherHand
::Valve::VR::InteractionSystem::Hand::AttachmentFlags Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_DetachFromOtherHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_DetachFromOtherHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::AttachmentFlags>("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "DetachFromOtherHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags DetachFromOtherHand
void Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_DetachFromOtherHand(::Valve::VR::InteractionSystem::Hand::AttachmentFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_DetachFromOtherHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "DetachFromOtherHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags ParentToHand
::Valve::VR::InteractionSystem::Hand::AttachmentFlags Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_ParentToHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_get_ParentToHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Valve::VR::InteractionSystem::Hand::AttachmentFlags>("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "ParentToHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.InteractionSystem.Hand/AttachmentFlags ParentToHand
void Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_ParentToHand(::Valve::VR::InteractionSystem::Hand::AttachmentFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::_set_ParentToHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR.InteractionSystem", "Hand/AttachmentFlags", "ParentToHand", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Valve::VR::InteractionSystem::Hand::AttachmentFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::AttachmentFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass42_0
#include "Valve/VR/InteractionSystem/Hand_--c__DisplayClass42_0.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.InteractionSystem.Hand/AttachedObject
#include "Valve/VR/InteractionSystem/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject objectToDetach
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::dyn_objectToDetach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::dyn_objectToDetach");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectToDetach"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.InteractionSystem.Hand/<>c__DisplayClass42_0.<DetachObject>b__0
bool Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::$DetachObject$b__0(::Valve::VR::InteractionSystem::Hand::AttachedObject l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::InteractionSystem::Hand::$$c__DisplayClass42_0::<DetachObject>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DetachObject>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, l);
}
