// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_HideMirrorWindow
#include "Valve/VR/IVRCompositor__HideMirrorWindow.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.Invoke
void Valve::VR::IVRCompositor::_HideMirrorWindow::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_HideMirrorWindow::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_HideMirrorWindow*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_HideMirrorWindow::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_HideMirrorWindow::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_HideMirrorWindow*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_HideMirrorWindow.EndInvoke
void Valve::VR::IVRCompositor::_HideMirrorWindow::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_HideMirrorWindow::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_HideMirrorWindow*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_IsMirrorWindowVisible
#include "Valve/VR/IVRCompositor__IsMirrorWindowVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.Invoke
bool Valve::VR::IVRCompositor::_IsMirrorWindowVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMirrorWindowVisible::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMirrorWindowVisible*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_IsMirrorWindowVisible::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMirrorWindowVisible::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMirrorWindowVisible*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMirrorWindowVisible.EndInvoke
bool Valve::VR::IVRCompositor::_IsMirrorWindowVisible::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMirrorWindowVisible::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMirrorWindowVisible*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CompositorDumpImages
#include "Valve/VR/IVRCompositor__CompositorDumpImages.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.Invoke
void Valve::VR::IVRCompositor::_CompositorDumpImages::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_CompositorDumpImages::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_CompositorDumpImages*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_CompositorDumpImages::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_CompositorDumpImages::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_CompositorDumpImages*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorDumpImages.EndInvoke
void Valve::VR::IVRCompositor::_CompositorDumpImages::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_CompositorDumpImages::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_CompositorDumpImages*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources
#include "Valve/VR/IVRCompositor__ShouldAppRenderWithLowResources.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.Invoke
bool Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ShouldAppRenderWithLowResources.EndInvoke
bool Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ShouldAppRenderWithLowResources*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn
#include "Valve/VR/IVRCompositor__ForceInterleavedReprojectionOn.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.Invoke
void Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::Invoke(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::BeginInvoke(bool bOverride, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, bOverride, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceInterleavedReprojectionOn.EndInvoke
void Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceInterleavedReprojectionOn*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ForceReconnectProcess
#include "Valve/VR/IVRCompositor__ForceReconnectProcess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.Invoke
void Valve::VR::IVRCompositor::_ForceReconnectProcess::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceReconnectProcess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceReconnectProcess*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_ForceReconnectProcess::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceReconnectProcess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceReconnectProcess*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ForceReconnectProcess.EndInvoke
void Valve::VR::IVRCompositor::_ForceReconnectProcess::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ForceReconnectProcess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ForceReconnectProcess*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SuspendRendering
#include "Valve/VR/IVRCompositor__SuspendRendering.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.Invoke
void Valve::VR::IVRCompositor::_SuspendRendering::Invoke(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SuspendRendering::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SuspendRendering*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_SuspendRendering::BeginInvoke(bool bSuspend, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SuspendRendering::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SuspendRendering*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, bSuspend, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SuspendRendering.EndInvoke
void Valve::VR::IVRCompositor::_SuspendRendering::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SuspendRendering::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SuspendRendering*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11
#include "Valve/VR/IVRCompositor__GetMirrorTextureD3D11.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.Invoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::Invoke(::Valve::VR::EVREye eEye, ::System::IntPtr pD3D11DeviceOrResource, ByRef<::System::IntPtr> ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, byref(ppD3D11ShaderResourceView));
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::BeginInvoke(::Valve::VR::EVREye eEye, ::System::IntPtr pD3D11DeviceOrResource, ByRef<::System::IntPtr> ppD3D11ShaderResourceView, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, byref(ppD3D11ShaderResourceView), callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureD3D11.EndInvoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::EndInvoke(ByRef<::System::IntPtr> ppD3D11ShaderResourceView, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureD3D11*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, byref(ppD3D11ShaderResourceView), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11
#include "Valve/VR/IVRCompositor__ReleaseMirrorTextureD3D11.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.Invoke
void Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::Invoke(::System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::BeginInvoke(::System::IntPtr pD3D11ShaderResourceView, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pD3D11ShaderResourceView, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseMirrorTextureD3D11.EndInvoke
void Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseMirrorTextureD3D11*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetMirrorTextureGL
#include "Valve/VR/IVRCompositor__GetMirrorTextureGL.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.Invoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureGL::Invoke(::Valve::VR::EVREye eEye, ByRef<uint> pglTextureId, ::System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureGL::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureGL*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, byref(pglTextureId), pglSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_GetMirrorTextureGL::BeginInvoke(::Valve::VR::EVREye eEye, ByRef<uint> pglTextureId, ::System::IntPtr pglSharedTextureHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureGL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureGL*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eEye, byref(pglTextureId), pglSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetMirrorTextureGL.EndInvoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetMirrorTextureGL::EndInvoke(ByRef<uint> pglTextureId, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetMirrorTextureGL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetMirrorTextureGL*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, byref(pglTextureId), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture
#include "Valve/VR/IVRCompositor__ReleaseSharedGLTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.Invoke
bool Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::Invoke(uint glTextureId, ::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::BeginInvoke(uint glTextureId, ::System::IntPtr glSharedTextureHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, glTextureId, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ReleaseSharedGLTexture.EndInvoke
bool Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_ReleaseSharedGLTexture*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess
#include "Valve/VR/IVRCompositor__LockGLSharedTextureForAccess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.Invoke
void Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::Invoke(::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::BeginInvoke(::System::IntPtr glSharedTextureHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_LockGLSharedTextureForAccess.EndInvoke
void Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_LockGLSharedTextureForAccess*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess
#include "Valve/VR/IVRCompositor__UnlockGLSharedTextureForAccess.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.Invoke
void Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::Invoke(::System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::BeginInvoke(::System::IntPtr glSharedTextureHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, glSharedTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_UnlockGLSharedTextureForAccess.EndInvoke
void Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_UnlockGLSharedTextureForAccess*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired
#include "Valve/VR/IVRCompositor__GetVulkanInstanceExtensionsRequired.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.Invoke
uint Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::Invoke(::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::BeginInvoke(::System::Text::StringBuilder* pchValue, uint unBufferSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanInstanceExtensionsRequired.EndInvoke
uint Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanInstanceExtensionsRequired*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired
#include "Valve/VR/IVRCompositor__GetVulkanDeviceExtensionsRequired.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.Invoke
uint Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::Invoke(::System::IntPtr pPhysicalDevice, ::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::BeginInvoke(::System::IntPtr pPhysicalDevice, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetVulkanDeviceExtensionsRequired.EndInvoke
uint Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_GetVulkanDeviceExtensionsRequired*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SetExplicitTimingMode
#include "Valve/VR/IVRCompositor__SetExplicitTimingMode.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.Invoke
void Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke(::Valve::VR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SetExplicitTimingMode*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke(::Valve::VR::EVRCompositorTimingMode eTimingMode, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SetExplicitTimingMode*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eTimingMode, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetExplicitTimingMode.EndInvoke
void Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SetExplicitTimingMode*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SubmitExplicitTimingData
#include "Valve/VR/IVRCompositor__SubmitExplicitTimingData.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.Invoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SubmitExplicitTimingData::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SubmitExplicitTimingData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SubmitExplicitTimingData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_SubmitExplicitTimingData::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SubmitExplicitTimingData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SubmitExplicitTimingData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SubmitExplicitTimingData.EndInvoke
::Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SubmitExplicitTimingData::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_SubmitExplicitTimingData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_SubmitExplicitTimingData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRCompositorError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_IsMotionSmoothingEnabled
#include "Valve/VR/IVRCompositor__IsMotionSmoothingEnabled.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_IsMotionSmoothingEnabled.Invoke
bool Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMotionSmoothingEnabled.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_IsMotionSmoothingEnabled.EndInvoke
bool Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRCompositor::_IsMotionSmoothingEnabled*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_FindOverlay
#include "Valve/VR/IVROverlay__FindOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_FindOverlay::Invoke(::StringW pchOverlayKey, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_FindOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_FindOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_FindOverlay::BeginInvoke(::StringW pchOverlayKey, ByRef<uint64_t> pOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_FindOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_FindOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, byref(pOverlayHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_FindOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_FindOverlay::EndInvoke(ByRef<uint64_t> pOverlayHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_FindOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_FindOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pOverlayHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateOverlay
#include "Valve/VR/IVROverlay__CreateOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateOverlay::Invoke(::StringW pchOverlayKey, ::StringW pchOverlayName, ByRef<uint64_t> pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, byref(pOverlayHandle));
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_CreateOverlay::BeginInvoke(::StringW pchOverlayKey, ::StringW pchOverlayName, ByRef<uint64_t> pOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, byref(pOverlayHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateOverlay::EndInvoke(ByRef<uint64_t> pOverlayHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pOverlayHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_DestroyOverlay
#include "Valve/VR/IVROverlay__DestroyOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_DestroyOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_DestroyOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_DestroyOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_DestroyOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_DestroyOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_DestroyOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_DestroyOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_DestroyOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_DestroyOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_DestroyOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetHighQualityOverlay
#include "Valve/VR/IVROverlay__SetHighQualityOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetHighQualityOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetHighQualityOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetHighQualityOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetHighQualityOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetHighQualityOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetHighQualityOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetHighQualityOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetHighQualityOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetHighQualityOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetHighQualityOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetHighQualityOverlay
#include "Valve/VR/IVROverlay__GetHighQualityOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetHighQualityOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetHighQualityOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetHighQualityOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetHighQualityOverlay::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetHighQualityOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetHighQualityOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetHighQualityOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetHighQualityOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetHighQualityOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetHighQualityOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayKey
#include "Valve/VR/IVROverlay__GetOverlayKey.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.Invoke
uint Valve::VR::IVROverlay::_GetOverlayKey::Invoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayKey::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayKey*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayKey::BeginInvoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayKey::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayKey*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayKey.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayKey::EndInvoke(ByRef<::Valve::VR::EVROverlayError> pError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayKey::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayKey*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(pError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayName
#include "Valve/VR/IVROverlay__GetOverlayName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.Invoke
uint Valve::VR::IVROverlay::_GetOverlayName::Invoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayName::BeginInvoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::EVROverlayError> pError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pError), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayName.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayName::EndInvoke(ByRef<::Valve::VR::EVROverlayError> pError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(pError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayName
#include "Valve/VR/IVROverlay__SetOverlayName.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayName::Invoke(uint64_t ulOverlayHandle, ::StringW pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayName::BeginInvoke(uint64_t ulOverlayHandle, ::StringW pchName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchName, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayName.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayImageData
#include "Valve/VR/IVROverlay__GetOverlayImageData.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayImageData::Invoke(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unBufferSize, ByRef<uint> punWidth, ByRef<uint> punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayImageData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayImageData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, byref(punWidth), byref(punHeight));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayImageData::BeginInvoke(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unBufferSize, ByRef<uint> punWidth, ByRef<uint> punHeight, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayImageData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayImageData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, byref(punWidth), byref(punHeight), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayImageData.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayImageData::EndInvoke(ByRef<uint> punWidth, ByRef<uint> punHeight, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayImageData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayImageData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(punWidth), byref(punHeight), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum
#include "Valve/VR/IVROverlay__GetOverlayErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.Invoke
::System::IntPtr Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::Invoke(::Valve::VR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::BeginInvoke(::Valve::VR::EVROverlayError error, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayErrorNameFromEnum.EndInvoke
::System::IntPtr Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayErrorNameFromEnum*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRenderingPid
#include "Valve/VR/IVROverlay__SetOverlayRenderingPid.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderingPid::Invoke(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderingPid::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderingPid*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRenderingPid::BeginInvoke(uint64_t ulOverlayHandle, uint unPID, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderingPid::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderingPid*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unPID, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderingPid.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderingPid::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderingPid::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderingPid*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayRenderingPid
#include "Valve/VR/IVROverlay__GetOverlayRenderingPid.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.Invoke
uint Valve::VR::IVROverlay::_GetOverlayRenderingPid::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderingPid::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderingPid*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayRenderingPid::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderingPid::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderingPid*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderingPid.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayRenderingPid::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderingPid::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderingPid*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFlag
#include "Valve/VR/IVROverlay__SetOverlayFlag.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFlag::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFlag::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFlag*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFlag::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFlag::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFlag*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFlag.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFlag::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFlag::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFlag*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayFlag
#include "Valve/VR/IVROverlay__GetOverlayFlag.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlag::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, ByRef<bool> pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlag::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlag*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, byref(pbEnabled));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayFlag::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayFlags eOverlayFlag, ByRef<bool> pbEnabled, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlag::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlag*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, byref(pbEnabled), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlag.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlag::EndInvoke(ByRef<bool> pbEnabled, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlag::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlag*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pbEnabled), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayColor
#include "Valve/VR/IVROverlay__SetOverlayColor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayColor::Invoke(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayColor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayColor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayColor::BeginInvoke(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayColor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayColor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayColor.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayColor::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayColor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayColor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayColor
#include "Valve/VR/IVROverlay__GetOverlayColor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayColor::Invoke(uint64_t ulOverlayHandle, ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayColor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayColor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfRed), byref(pfGreen), byref(pfBlue));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayColor::BeginInvoke(uint64_t ulOverlayHandle, ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayColor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayColor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pfRed), byref(pfGreen), byref(pfBlue), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayColor.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayColor::EndInvoke(ByRef<float> pfRed, ByRef<float> pfGreen, ByRef<float> pfBlue, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayColor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayColor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pfRed), byref(pfGreen), byref(pfBlue), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayAlpha
#include "Valve/VR/IVROverlay__SetOverlayAlpha.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAlpha::Invoke(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAlpha::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAlpha*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayAlpha::BeginInvoke(uint64_t ulOverlayHandle, float fAlpha, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAlpha::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAlpha*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fAlpha, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAlpha.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAlpha::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAlpha::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAlpha*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayAlpha
#include "Valve/VR/IVROverlay__GetOverlayAlpha.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAlpha::Invoke(uint64_t ulOverlayHandle, ByRef<float> pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAlpha::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAlpha*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfAlpha));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayAlpha::BeginInvoke(uint64_t ulOverlayHandle, ByRef<float> pfAlpha, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAlpha::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAlpha*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pfAlpha), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAlpha.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAlpha::EndInvoke(ByRef<float> pfAlpha, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAlpha::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAlpha*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pfAlpha), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexelAspect
#include "Valve/VR/IVROverlay__SetOverlayTexelAspect.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexelAspect::Invoke(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexelAspect::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexelAspect*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexelAspect::BeginInvoke(uint64_t ulOverlayHandle, float fTexelAspect, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexelAspect::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexelAspect*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexelAspect.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexelAspect::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexelAspect::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexelAspect*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexelAspect
#include "Valve/VR/IVROverlay__GetOverlayTexelAspect.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexelAspect::Invoke(uint64_t ulOverlayHandle, ByRef<float> pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexelAspect::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexelAspect*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfTexelAspect));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexelAspect::BeginInvoke(uint64_t ulOverlayHandle, ByRef<float> pfTexelAspect, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexelAspect::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexelAspect*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pfTexelAspect), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexelAspect.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexelAspect::EndInvoke(ByRef<float> pfTexelAspect, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexelAspect::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexelAspect*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pfTexelAspect), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlaySortOrder
#include "Valve/VR/IVROverlay__SetOverlaySortOrder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlaySortOrder::Invoke(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlaySortOrder::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlaySortOrder*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlaySortOrder::BeginInvoke(uint64_t ulOverlayHandle, uint unSortOrder, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlaySortOrder::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlaySortOrder*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unSortOrder, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlaySortOrder.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlaySortOrder::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlaySortOrder::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlaySortOrder*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlaySortOrder
#include "Valve/VR/IVROverlay__GetOverlaySortOrder.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlaySortOrder::Invoke(uint64_t ulOverlayHandle, ByRef<uint> punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlaySortOrder::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlaySortOrder*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punSortOrder));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlaySortOrder::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> punSortOrder, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlaySortOrder::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlaySortOrder*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(punSortOrder), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlaySortOrder.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlaySortOrder::EndInvoke(ByRef<uint> punSortOrder, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlaySortOrder::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlaySortOrder*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(punSortOrder), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayWidthInMeters
#include "Valve/VR/IVROverlay__SetOverlayWidthInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayWidthInMeters::Invoke(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayWidthInMeters::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayWidthInMeters*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayWidthInMeters::BeginInvoke(uint64_t ulOverlayHandle, float fWidthInMeters, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayWidthInMeters::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayWidthInMeters*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayWidthInMeters.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayWidthInMeters::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayWidthInMeters::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayWidthInMeters*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayWidthInMeters
#include "Valve/VR/IVROverlay__GetOverlayWidthInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayWidthInMeters::Invoke(uint64_t ulOverlayHandle, ByRef<float> pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayWidthInMeters::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayWidthInMeters*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfWidthInMeters));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayWidthInMeters::BeginInvoke(uint64_t ulOverlayHandle, ByRef<float> pfWidthInMeters, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayWidthInMeters::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayWidthInMeters*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pfWidthInMeters), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayWidthInMeters.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayWidthInMeters::EndInvoke(ByRef<float> pfWidthInMeters, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayWidthInMeters::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayWidthInMeters*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pfWidthInMeters), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters
#include "Valve/VR/IVROverlay__SetOverlayAutoCurveDistanceRangeInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::Invoke(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters
#include "Valve/VR/IVROverlay__GetOverlayAutoCurveDistanceRangeInMeters.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::Invoke(uint64_t ulOverlayHandle, ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pfMinDistanceInMeters), byref(pfMaxDistanceInMeters));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke(uint64_t ulOverlayHandle, ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pfMinDistanceInMeters), byref(pfMaxDistanceInMeters), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::EndInvoke(ByRef<float> pfMinDistanceInMeters, ByRef<float> pfMaxDistanceInMeters, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pfMinDistanceInMeters), byref(pfMaxDistanceInMeters), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace
#include "Valve/VR/IVROverlay__SetOverlayTextureColorSpace.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::EColorSpace eTextureColorSpace, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureColorSpace.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureColorSpace*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace
#include "Valve/VR/IVROverlay__GetOverlayTextureColorSpace.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::EColorSpace> peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTextureColorSpace));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::EColorSpace> peTextureColorSpace, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(peTextureColorSpace), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureColorSpace.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::EndInvoke(ByRef<::Valve::VR::EColorSpace> peTextureColorSpace, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureColorSpace*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(peTextureColorSpace), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTextureBounds
#include "Valve/VR/IVROverlay__SetOverlayTextureBounds.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureBounds::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureBounds::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureBounds*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTextureBounds::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureBounds::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureBounds*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTextureBounds.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTextureBounds::EndInvoke(ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTextureBounds::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTextureBounds*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pOverlayTextureBounds), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureBounds
#include "Valve/VR/IVROverlay__GetOverlayTextureBounds.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureBounds::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureBounds::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureBounds*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureBounds::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureBounds::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureBounds*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pOverlayTextureBounds), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureBounds.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureBounds::EndInvoke(ByRef<::Valve::VR::VRTextureBounds_t> pOverlayTextureBounds, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureBounds::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureBounds*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pOverlayTextureBounds), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayRenderModel
#include "Valve/VR/IVROverlay__GetOverlayRenderModel.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.Invoke
uint Valve::VR::IVROverlay::_GetOverlayRenderModel::Invoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::HmdColor_t> pColor, ByRef<::Valve::VR::EVROverlayError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderModel::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderModel*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pColor), byref(pError));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayRenderModel::BeginInvoke(uint64_t ulOverlayHandle, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::HmdColor_t> pColor, ByRef<::Valve::VR::EVROverlayError> pError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderModel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderModel*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, byref(pColor), byref(pError), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayRenderModel.EndInvoke
uint Valve::VR::IVROverlay::_GetOverlayRenderModel::EndInvoke(ByRef<::Valve::VR::HmdColor_t> pColor, ByRef<::Valve::VR::EVROverlayError> pError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayRenderModel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayRenderModel*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(pColor), byref(pError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRenderModel
#include "Valve/VR/IVROverlay__SetOverlayRenderModel.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderModel::Invoke(uint64_t ulOverlayHandle, ::StringW pchRenderModel, ByRef<::Valve::VR::HmdColor_t> pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderModel::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderModel*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, byref(pColor));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRenderModel::BeginInvoke(uint64_t ulOverlayHandle, ::StringW pchRenderModel, ByRef<::Valve::VR::HmdColor_t> pColor, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderModel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderModel*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, byref(pColor), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRenderModel.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRenderModel::EndInvoke(ByRef<::Valve::VR::HmdColor_t> pColor, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRenderModel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRenderModel*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pColor), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformType
#include "Valve/VR/IVROverlay__GetOverlayTransformType.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformType::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayTransformType> peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformType::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformType*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTransformType));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformType::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayTransformType> peTransformType, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformType*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(peTransformType), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformType.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformType::EndInvoke(ByRef<::Valve::VR::VROverlayTransformType> peTransformType, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformType*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(peTransformType), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute
#include "Valve/VR/IVROverlay__SetOverlayTransformAbsolute.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, byref(pmatTrackingOriginToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformAbsolute.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::EndInvoke(ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformAbsolute*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pmatTrackingOriginToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute
#include "Valve/VR/IVROverlay__GetOverlayTransformAbsolute.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peTrackingOrigin), byref(pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(peTrackingOrigin), byref(pmatTrackingOriginToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformAbsolute.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::EndInvoke(ByRef<::Valve::VR::ETrackingUniverseOrigin> peTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformAbsolute*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(peTrackingOrigin), byref(pmatTrackingOriginToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative
#include "Valve/VR/IVROverlay__SetOverlayTransformTrackedDeviceRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::Invoke(uint64_t ulOverlayHandle, uint unTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::BeginInvoke(uint64_t ulOverlayHandle, uint unTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, byref(pmatTrackedDeviceToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::EndInvoke(ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pmatTrackedDeviceToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke(uint64_t ulOverlayHandle, ByRef<uint> punTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punTrackedDevice), byref(pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> punTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(punTrackedDevice), byref(pmatTrackedDeviceToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke(ByRef<uint> punTrackedDevice, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackedDeviceToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(punTrackedDevice), byref(pmatTrackedDeviceToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__SetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::StringW pchComponentName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, ByRef<uint> punDeviceIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punDeviceIndex), pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> punDeviceIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(punDeviceIndex), pchComponentName, unComponentNameSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke(ByRef<uint> punDeviceIndex, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(punDeviceIndex), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, ByRef<uint64_t> ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(ulOverlayHandleParent), byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint64_t> ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(ulOverlayHandleParent), byref(pmatParentOverlayToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke(ByRef<uint64_t> ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(ulOverlayHandleParent), byref(pmatParentOverlayToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__SetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, byref(pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, byref(pmatParentOverlayToOverlayTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke(ByRef<::Valve::VR::HmdMatrix34_t> pmatParentOverlayToOverlayTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pmatParentOverlayToOverlayTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowOverlay
#include "Valve/VR/IVROverlay__ShowOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideOverlay
#include "Valve/VR/IVROverlay__HideOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_HideOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsOverlayVisible
#include "Valve/VR/IVROverlay__IsOverlayVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.Invoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsOverlayVisible::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsOverlayVisible*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsOverlayVisible*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsOverlayVisible*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates
#include "Valve/VR/IVROverlay__GetTransformForOverlayCoordinates.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ::Valve::VR::HmdVector2_t coordinatesInOverlay, ByRef<::Valve::VR::HmdMatrix34_t> pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, byref(pmatTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ::Valve::VR::HmdVector2_t coordinatesInOverlay, ByRef<::Valve::VR::HmdMatrix34_t> pmatTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, byref(pmatTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke(ByRef<::Valve::VR::HmdMatrix34_t> pmatTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pmatTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_PollNextOverlayEvent
#include "Valve/VR/IVROverlay__PollNextOverlayEvent.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.Invoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_PollNextOverlayEvent*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_PollNextOverlayEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pEvent), uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.EndInvoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke(ByRef<::Valve::VR::VREvent_t> pEvent, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_PollNextOverlayEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayInputMethod
#include "Valve/VR/IVROverlay__GetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayInputMethod> peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayInputMethod*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(peInputMethod));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayInputMethod> peInputMethod, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayInputMethod*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(peInputMethod), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke(ByRef<::Valve::VR::VROverlayInputMethod> peInputMethod, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayInputMethod*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(peInputMethod), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayInputMethod
#include "Valve/VR/IVROverlay__SetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayInputMethod*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::VROverlayInputMethod eInputMethod, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayInputMethod*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMethod, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayInputMethod*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayMouseScale
#include "Valve/VR/IVROverlay__GetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayMouseScale*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayMouseScale*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke(ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayMouseScale*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pvecMouseScale), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayMouseScale
#include "Valve/VR/IVROverlay__SetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayMouseScale*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayMouseScale*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pvecMouseScale), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke(ByRef<::Valve::VR::HmdVector2_t> pvecMouseScale, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayMouseScale*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pvecMouseScale), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ComputeOverlayIntersection
#include "Valve/VR/IVROverlay__ComputeOverlayIntersection.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.Invoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<::Valve::VR::VROverlayIntersectionResults_t> pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ComputeOverlayIntersection*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle, byref(pParams), byref(pResults));
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<::Valve::VR::VROverlayIntersectionResults_t> pResults, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ComputeOverlayIntersection*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pParams), byref(pResults), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.EndInvoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke(ByRef<::Valve::VR::VROverlayIntersectionParams_t> pParams, ByRef<::Valve::VR::VROverlayIntersectionResults_t> pResults, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ComputeOverlayIntersection*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pParams), byref(pResults), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsHoverTargetOverlay
#include "Valve/VR/IVROverlay__IsHoverTargetOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.Invoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsHoverTargetOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsHoverTargetOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsHoverTargetOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__GetGamepadFocusOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetGamepadFocusOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetGamepadFocusOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetGamepadFocusOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__SetGamepadFocusOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetGamepadFocusOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke(uint64_t ulNewFocusOverlay, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetGamepadFocusOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulNewFocusOverlay, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetGamepadFocusOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayNeighbor
#include "Valve/VR/IVROverlay__SetOverlayNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayNeighbor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayNeighbor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, ulTo, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayNeighbor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor
#include "Valve/VR/IVROverlay__MoveGamepadFocusToNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke(::Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__SetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), fRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, float fRadius, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), fRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke(ByRef<::Valve::VR::HmdVector2_t> pvCenter, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pvCenter), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__GetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), byref(pfRadius));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, ::Valve::VR::EDualAnalogWhich eWhich, ByRef<::Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, byref(pvCenter), byref(pfRadius), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke(ByRef<::Valve::VR::HmdVector2_t> pvCenter, ByRef<float> pfRadius, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pvCenter), byref(pfRadius), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexture
#include "Valve/VR/IVROverlay__SetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::Texture_t> pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexture*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pTexture));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::Texture_t> pTexture, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexture*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pTexture), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke(ByRef<::Valve::VR::Texture_t> pTexture, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayTexture*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pTexture), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ClearOverlayTexture
#include "Valve/VR/IVROverlay__ClearOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ClearOverlayTexture*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ClearOverlayTexture*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ClearOverlayTexture*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRaw
#include "Valve/VR/IVROverlay__SetOverlayRaw.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::Invoke(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRaw::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRaw*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke(uint64_t ulOverlayHandle, ::System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRaw*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayRaw*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFromFile
#include "Valve/VR/IVROverlay__SetOverlayFromFile.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke(uint64_t ulOverlayHandle, ::StringW pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFromFile*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke(uint64_t ulOverlayHandle, ::StringW pchFilePath, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFromFile*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchFilePath, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayFromFile*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexture
#include "Valve/VR/IVROverlay__GetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::Invoke(uint64_t ulOverlayHandle, ByRef<::System::IntPtr> pNativeTextureHandle, ::System::IntPtr pNativeTextureRef, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<::Valve::VR::ETextureType> pAPIType, ByRef<::Valve::VR::EColorSpace> pColorSpace, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexture*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pNativeTextureHandle), pNativeTextureRef, byref(pWidth), byref(pHeight), byref(pNativeFormat), byref(pAPIType), byref(pColorSpace), byref(pTextureBounds));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::System::IntPtr> pNativeTextureHandle, ::System::IntPtr pNativeTextureRef, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<::Valve::VR::ETextureType> pAPIType, ByRef<::Valve::VR::EColorSpace> pColorSpace, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexture*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pNativeTextureHandle), pNativeTextureRef, byref(pWidth), byref(pHeight), byref(pNativeFormat), byref(pAPIType), byref(pColorSpace), byref(pTextureBounds), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke(ByRef<::System::IntPtr> pNativeTextureHandle, ByRef<uint> pWidth, ByRef<uint> pHeight, ByRef<uint> pNativeFormat, ByRef<::Valve::VR::ETextureType> pAPIType, ByRef<::Valve::VR::EColorSpace> pColorSpace, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTexture*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pNativeTextureHandle), byref(pWidth), byref(pHeight), byref(pNativeFormat), byref(pAPIType), byref(pColorSpace), byref(pTextureBounds), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle
#include "Valve/VR/IVROverlay__ReleaseNativeOverlayHandle.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke(uint64_t ulOverlayHandle, ::System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke(uint64_t ulOverlayHandle, ::System::IntPtr pNativeTextureHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureSize
#include "Valve/VR/IVROverlay__GetOverlayTextureSize.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke(uint64_t ulOverlayHandle, ByRef<uint> pWidth, ByRef<uint> pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureSize*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pWidth), byref(pHeight));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> pWidth, ByRef<uint> pHeight, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureSize*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pWidth), byref(pHeight), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke(ByRef<uint> pWidth, ByRef<uint> pHeight, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayTextureSize*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pWidth), byref(pHeight), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateDashboardOverlay
#include "Valve/VR/IVROverlay__CreateDashboardOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke(::StringW pchOverlayKey, ::StringW pchOverlayFriendlyName, ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateDashboardOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, byref(pMainHandle), byref(pThumbnailHandle));
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke(::StringW pchOverlayKey, ::StringW pchOverlayFriendlyName, ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateDashboardOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, byref(pMainHandle), byref(pThumbnailHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke(ByRef<uint64_t> pMainHandle, ByRef<uint64_t> pThumbnailHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CreateDashboardOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pMainHandle), byref(pThumbnailHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsDashboardVisible
#include "Valve/VR/IVROverlay__IsDashboardVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.Invoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsDashboardVisible::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsDashboardVisible*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsDashboardVisible*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsDashboardVisible*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsActiveDashboardOverlay
#include "Valve/VR/IVROverlay__IsActiveDashboardOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.Invoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsActiveDashboardOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsActiveDashboardOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_IsActiveDashboardOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__SetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint unProcessId, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__GetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, ByRef<uint> punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(punProcessId));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> punProcessId, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(punProcessId), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke(ByRef<uint> punProcessId, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(punProcessId), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowDashboard
#include "Valve/VR/IVROverlay__ShowDashboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.Invoke
void Valve::VR::IVROverlay::_ShowDashboard::Invoke(::StringW pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowDashboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowDashboard*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke(::StringW pchOverlayToShow, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowDashboard*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchOverlayToShow, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.EndInvoke
void Valve::VR::IVROverlay::_ShowDashboard::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowDashboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowDashboard*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice
#include "Valve/VR/IVROverlay__GetPrimaryDashboardDevice.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.Invoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.EndInvoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetPrimaryDashboardDevice*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboard
#include "Valve/VR/IVROverlay__ShowKeyboard.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::Invoke(int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboard*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke(int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboard*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboard*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboardForOverlay
#include "Valve/VR/IVROverlay__ShowKeyboardForOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboardForOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::StringW pchDescription, uint unCharMax, ::StringW pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboardForOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowKeyboardForOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetKeyboardText
#include "Valve/VR/IVROverlay__GetKeyboardText.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.Invoke
uint Valve::VR::IVROverlay::_GetKeyboardText::Invoke(::System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetKeyboardText::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetKeyboardText*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke(::System::Text::StringBuilder* pchText, uint cchText, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetKeyboardText*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchText, cchText, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.EndInvoke
uint Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetKeyboardText*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideKeyboard
#include "Valve/VR/IVROverlay__HideKeyboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.Invoke
void Valve::VR::IVROverlay::_HideKeyboard::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideKeyboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideKeyboard*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideKeyboard*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.EndInvoke
void Valve::VR::IVROverlay::_HideKeyboard::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_HideKeyboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_HideKeyboard*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute
#include "Valve/VR/IVROverlay__SetKeyboardTransformAbsolute.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.Invoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke(::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eTrackingOrigin, byref(pmatTrackingOriginToKeyboardTransform));
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke(::Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eTrackingOrigin, byref(pmatTrackingOriginToKeyboardTransform), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke(ByRef<::Valve::VR::HmdMatrix34_t> pmatTrackingOriginToKeyboardTransform, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pmatTrackingOriginToKeyboardTransform), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay
#include "Valve/VR/IVROverlay__SetKeyboardPositionForOverlay.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.Invoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke(uint64_t ulOverlayHandle, ::Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke(uint64_t ulOverlayHandle, ::Valve::VR::HmdRect2_t avoidRect, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, avoidRect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayIntersectionMask
#include "Valve/VR/IVROverlay__SetOverlayIntersectionMask.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayIntersectionMask*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pMaskPrimitives), unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke(uint64_t ulOverlayHandle, ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayIntersectionMask*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pMaskPrimitives), unNumMaskPrimitives, unPrimitiveSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke(ByRef<::Valve::VR::VROverlayIntersectionMaskPrimitive_t> pMaskPrimitives, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_SetOverlayIntersectionMask*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pMaskPrimitives), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayFlags
#include "Valve/VR/IVROverlay__GetOverlayFlags.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.Invoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::Invoke(uint64_t ulOverlayHandle, ByRef<uint> pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlags::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlags*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, byref(pFlags));
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke(uint64_t ulOverlayHandle, ByRef<uint> pFlags, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlags*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, byref(pFlags), callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.EndInvoke
::Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke(ByRef<uint> pFlags, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_GetOverlayFlags*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVROverlayError, false>(this, ___internal__method, byref(pFlags), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowMessageOverlay
#include "Valve/VR/IVROverlay__ShowMessageOverlay.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.Invoke
::Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke(::StringW pchText, ::StringW pchCaption, ::StringW pchButton0Text, ::StringW pchButton1Text, ::StringW pchButton2Text, ::StringW pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowMessageOverlay*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke(::StringW pchText, ::StringW pchCaption, ::StringW pchButton0Text, ::StringW pchButton1Text, ::StringW pchButton2Text, ::StringW pchButton3Text, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowMessageOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.EndInvoke
::Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_ShowMessageOverlay*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, result);
}
