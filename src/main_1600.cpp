// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CloseMessageOverlay
#include "Valve/VR/IVROverlay__CloseMessageOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.Invoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CloseMessageOverlay*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.BeginInvoke
::System::IAsyncResult* Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CloseMessageOverlay*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.EndInvoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVROverlay::_CloseMessageOverlay*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadRenderModel_Async
#include "Valve/VR/IVRRenderModels__LoadRenderModel_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.Invoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke(::StringW pchRenderModelName, ByRef<::System::IntPtr> ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadRenderModel_Async*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, byref(ppRenderModel));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke(::StringW pchRenderModelName, ByRef<::System::IntPtr> ppRenderModel, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadRenderModel_Async*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, byref(ppRenderModel), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.EndInvoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke(ByRef<::System::IntPtr> ppRenderModel, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadRenderModel_Async*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, byref(ppRenderModel), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeRenderModel
#include "Valve/VR/IVRRenderModels__FreeRenderModel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.Invoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke(::System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeRenderModel*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke(::System::IntPtr pRenderModel, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeRenderModel*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pRenderModel, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.EndInvoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeRenderModel*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTexture_Async
#include "Valve/VR/IVRRenderModels__LoadTexture_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.Invoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke(int textureId, ByRef<::System::IntPtr> ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTexture_Async*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, byref(ppTexture));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke(int textureId, ByRef<::System::IntPtr> ppTexture, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTexture_Async*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, textureId, byref(ppTexture), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.EndInvoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke(ByRef<::System::IntPtr> ppTexture, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTexture_Async*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, byref(ppTexture), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTexture
#include "Valve/VR/IVRRenderModels__FreeTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.Invoke
void Valve::VR::IVRRenderModels::_FreeTexture::Invoke(::System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTexture*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke(::System::IntPtr pTexture, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTexture*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTexture*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.Invoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke(int textureId, ::System::IntPtr pD3D11Device, ByRef<::System::IntPtr> ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, byref(ppD3D11Texture2D));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke(int textureId, ::System::IntPtr pD3D11Device, ByRef<::System::IntPtr> ppD3D11Texture2D, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, textureId, pD3D11Device, byref(ppD3D11Texture2D), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.EndInvoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke(ByRef<::System::IntPtr> ppD3D11Texture2D, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, byref(ppD3D11Texture2D), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadIntoTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.Invoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke(int textureId, ::System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke(int textureId, ::System::IntPtr pDstTexture, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, textureId, pDstTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.EndInvoke
::Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRRenderModelError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTextureD3D11
#include "Valve/VR/IVRRenderModels__FreeTextureD3D11.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.Invoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke(::System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTextureD3D11*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke(::System::IntPtr pD3D11Texture2D, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTextureD3D11*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pD3D11Texture2D, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_FreeTextureD3D11*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelName
#include "Valve/VR/IVRRenderModels__GetRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke(uint unRenderModelIndex, ::System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke(uint unRenderModelIndex, ::System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelCount
#include "Valve/VR/IVRRenderModels__GetRenderModelCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelCount*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelCount*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelCount*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentCount
#include "Valve/VR/IVRRenderModels__GetComponentCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::Invoke(::StringW pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentCount*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke(::StringW pchRenderModelName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentCount*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentCount*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentName
#include "Valve/VR/IVRRenderModels__GetComponentName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentName::Invoke(::StringW pchRenderModelName, uint unComponentIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke(::StringW pchRenderModelName, uint unComponentIndex, ::System::Text::StringBuilder* pchComponentName, uint unComponentNameLen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentButtonMask
#include "Valve/VR/IVRRenderModels__GetComponentButtonMask.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.Invoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentButtonMask*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentButtonMask*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.EndInvoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentButtonMask*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentRenderModelName
#include "Valve/VR/IVRRenderModels__GetComponentRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName, ::System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentRenderModelName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, ::System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentRenderModelName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentRenderModelName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentStateForDevicePath
#include "Valve/VR/IVRRenderModels__GetComponentStateForDevicePath.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentStateForDevicePath.Invoke
bool Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName, uint64_t devicePath, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentStateForDevicePath.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, uint64_t devicePath, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, byref(pState), byref(pComponentState), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentStateForDevicePath.EndInvoke
bool Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke(ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentStateForDevicePath*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pState), byref(pComponentState), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentState
#include "Valve/VR/IVRRenderModels__GetComponentState.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.Invoke
bool Valve::VR::IVRRenderModels::_GetComponentState::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName, ByRef<::Valve::VR::VRControllerState_t> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentState::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentState*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, ByRef<::Valve::VR::VRControllerState_t> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentState*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, byref(pControllerState), byref(pState), byref(pComponentState), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.EndInvoke
bool Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke(ByRef<::Valve::VR::VRControllerState_t> pControllerState, ByRef<::Valve::VR::RenderModel_ControllerMode_State_t> pState, ByRef<::Valve::VR::RenderModel_ComponentState_t> pComponentState, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetComponentState*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pControllerState), byref(pState), byref(pComponentState), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_RenderModelHasComponent
#include "Valve/VR/IVRRenderModels__RenderModelHasComponent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.Invoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke(::StringW pchRenderModelName, ::StringW pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_RenderModelHasComponent*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke(::StringW pchRenderModelName, ::StringW pchComponentName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_RenderModelHasComponent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.EndInvoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_RenderModelHasComponent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL
#include "Valve/VR/IVRRenderModels__GetRenderModelThumbnailURL.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, ByRef<::Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, byref(peError));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, ByRef<::Valve::VR::EVRRenderModelError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke(ByRef<::Valve::VR::EVRRenderModelError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath
#include "Valve/VR/IVRRenderModels__GetRenderModelOriginalPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, ByRef<::Valve::VR::EVRRenderModelError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, byref(peError));
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke(::StringW pchRenderModelName, ::System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, ByRef<::Valve::VR::EVRRenderModelError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke(ByRef<::Valve::VR::EVRRenderModelError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum
#include "Valve/VR/IVRRenderModels__GetRenderModelErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.Invoke
::System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke(::Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke(::Valve::VR::EVRRenderModelError error, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.EndInvoke
::System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_CreateNotification
#include "Valve/VR/IVRNotifications__CreateNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.Invoke
::Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::Invoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, ::Valve::VR::EVRNotificationType type, ::StringW pchText, ::Valve::VR::EVRNotificationStyle style, ByRef<::Valve::VR::NotificationBitmap_t> pImage, ByRef<uint> pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_CreateNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_CreateNotification*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, byref(pImage), byref(pNotificationId));
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, ::Valve::VR::EVRNotificationType type, ::StringW pchText, ::Valve::VR::EVRNotificationStyle style, ByRef<::Valve::VR::NotificationBitmap_t> pImage, ByRef<uint> pNotificationId, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_CreateNotification*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, byref(pImage), byref(pNotificationId), callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.EndInvoke
::Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::EndInvoke(ByRef<::Valve::VR::NotificationBitmap_t> pImage, ByRef<uint> pNotificationId, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_CreateNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_CreateNotification*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, byref(pImage), byref(pNotificationId), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_RemoveNotification
#include "Valve/VR/IVRNotifications__RemoveNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.Invoke
::Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::Invoke(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_RemoveNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_RemoveNotification*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke(uint notificationId, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_RemoveNotification*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, notificationId, callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.EndInvoke
::Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRNotifications::_RemoveNotification*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRNotificationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum
#include "Valve/VR/IVRSettings__GetSettingsErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.Invoke
::System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke(::Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke(::Valve::VR::EVRSettingsError eError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.EndInvoke
::System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_Sync
#include "Valve/VR/IVRSettings__Sync.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_Sync.Invoke
bool Valve::VR::IVRSettings::_Sync::Invoke(bool bForce, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_Sync::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_Sync*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bForce, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_Sync::BeginInvoke(bool bForce, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_Sync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_Sync*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, bForce, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.EndInvoke
bool Valve::VR::IVRSettings::_Sync::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_Sync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_Sync*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetBool
#include "Valve/VR/IVRSettings__SetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.Invoke
void Valve::VR::IVRSettings::_SetBool::Invoke(::StringW pchSection, ::StringW pchSettingsKey, bool bValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetBool*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_SetBool::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, bool bValue, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetBool*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.EndInvoke
void Valve::VR::IVRSettings::_SetBool::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetBool*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetInt32
#include "Valve/VR/IVRSettings__SetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.Invoke
void Valve::VR::IVRSettings::_SetInt32::Invoke(::StringW pchSection, ::StringW pchSettingsKey, int nValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetInt32*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_SetInt32::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, int nValue, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetInt32*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.EndInvoke
void Valve::VR::IVRSettings::_SetInt32::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetInt32*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetFloat
#include "Valve/VR/IVRSettings__SetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.Invoke
void Valve::VR::IVRSettings::_SetFloat::Invoke(::StringW pchSection, ::StringW pchSettingsKey, float flValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetFloat*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_SetFloat::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, float flValue, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetFloat*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.EndInvoke
void Valve::VR::IVRSettings::_SetFloat::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetFloat*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetString
#include "Valve/VR/IVRSettings__SetString.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetString.Invoke
void Valve::VR::IVRSettings::_SetString::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ::StringW pchValue, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetString::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetString*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_SetString::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ::StringW pchValue, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetString*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.EndInvoke
void Valve::VR::IVRSettings::_SetString::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_SetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_SetString*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetBool
#include "Valve/VR/IVRSettings__GetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.Invoke
bool Valve::VR::IVRSettings::_GetBool::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetBool*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_GetBool::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetBool*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.EndInvoke
bool Valve::VR::IVRSettings::_GetBool::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetBool*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetInt32
#include "Valve/VR/IVRSettings__GetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.Invoke
int Valve::VR::IVRSettings::_GetInt32::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetInt32*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_GetInt32::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetInt32*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.EndInvoke
int Valve::VR::IVRSettings::_GetInt32::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetInt32*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetFloat
#include "Valve/VR/IVRSettings__GetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.Invoke
float Valve::VR::IVRSettings::_GetFloat::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetFloat*), 12));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_GetFloat::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetFloat*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.EndInvoke
float Valve::VR::IVRSettings::_GetFloat::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetFloat*), 14));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetString
#include "Valve/VR/IVRSettings__GetString.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetString.Invoke
void Valve::VR::IVRSettings::_GetString::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ::System::Text::StringBuilder* pchValue, uint unValueLen, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetString::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetString*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_GetString::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ::System::Text::StringBuilder* pchValue, uint unValueLen, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetString*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.EndInvoke
void Valve::VR::IVRSettings::_GetString::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_GetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_GetString*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveSection
#include "Valve/VR/IVRSettings__RemoveSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.Invoke
void Valve::VR::IVRSettings::_RemoveSection::Invoke(::StringW pchSection, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveSection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveSection*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_RemoveSection::BeginInvoke(::StringW pchSection, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveSection*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveSection::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveSection*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveKeyInSection
#include "Valve/VR/IVRSettings__RemoveKeyInSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.Invoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveKeyInSection*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError));
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke(::StringW pchSection, ::StringW pchSettingsKey, ByRef<::Valve::VR::EVRSettingsError> peError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveKeyInSection*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, byref(peError), callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke(ByRef<::Valve::VR::EVRSettingsError> peError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSettings::_RemoveKeyInSection*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(peError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_RequestScreenshot
#include "Valve/VR/IVRScreenshots__RequestScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.Invoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke(ByRef<uint> pOutScreenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchPreviewFilename, ::StringW pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_RequestScreenshot*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke(ByRef<uint> pOutScreenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchPreviewFilename, ::StringW pchVRFilename, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_RequestScreenshot*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pOutScreenshotHandle), type, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.EndInvoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke(ByRef<uint> pOutScreenshotHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_RequestScreenshot*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_HookScreenshot
#include "Valve/VR/IVRScreenshots__HookScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.Invoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::Invoke(ByRef<::ArrayW<::Valve::VR::EVRScreenshotType>> pSupportedTypes, int numTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_HookScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_HookScreenshot*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pSupportedTypes), numTypes);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke(ByRef<::ArrayW<::Valve::VR::EVRScreenshotType>> pSupportedTypes, int numTypes, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_HookScreenshot*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pSupportedTypes), numTypes, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.EndInvoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_HookScreenshot*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyType.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.Invoke
::Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke(uint screenshotHandle, ByRef<::Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, byref(pError));
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke(uint screenshotHandle, ByRef<::Valve::VR::EVRScreenshotError> pError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, byref(pError), callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.EndInvoke
::Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke(ByRef<::Valve::VR::EVRScreenshotError> pError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyType*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotType, false>(this, ___internal__method, byref(pError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyFilename.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.Invoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke(uint screenshotHandle, ::Valve::VR::EVRScreenshotPropertyFilenames filenameType, ::System::Text::StringBuilder* pchFilename, uint cchFilename, ByRef<::Valve::VR::EVRScreenshotError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, byref(pError));
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke(uint screenshotHandle, ::Valve::VR::EVRScreenshotPropertyFilenames filenameType, ::System::Text::StringBuilder* pchFilename, uint cchFilename, ByRef<::Valve::VR::EVRScreenshotError> pError, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, byref(pError), callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.EndInvoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke(ByRef<::Valve::VR::EVRScreenshotError> pError, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, byref(pError), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress
#include "Valve/VR/IVRScreenshots__UpdateScreenshotProgress.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.Invoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke(uint screenshotHandle, float flProgress, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, flProgress, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.EndInvoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_UpdateScreenshotProgress*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_TakeStereoScreenshot
#include "Valve/VR/IVRScreenshots__TakeStereoScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.Invoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke(ByRef<uint> pOutScreenshotHandle, ::StringW pchPreviewFilename, ::StringW pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_TakeStereoScreenshot*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke(ByRef<uint> pOutScreenshotHandle, ::StringW pchPreviewFilename, ::StringW pchVRFilename, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_TakeStereoScreenshot*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pOutScreenshotHandle), pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.EndInvoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke(ByRef<uint> pOutScreenshotHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_TakeStereoScreenshot*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, byref(pOutScreenshotHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_SubmitScreenshot
#include "Valve/VR/IVRScreenshots__SubmitScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.Invoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke(uint screenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchSourcePreviewFilename, ::StringW pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_SubmitScreenshot*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke(uint screenshotHandle, ::Valve::VR::EVRScreenshotType type, ::StringW pchSourcePreviewFilename, ::StringW pchSourceVRFilename, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_SubmitScreenshot*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.EndInvoke
::Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRScreenshots::_SubmitScreenshot*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_LoadSharedResource
#include "Valve/VR/IVRResources__LoadSharedResource.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.Invoke
uint Valve::VR::IVRResources::_LoadSharedResource::Invoke(::StringW pchResourceName, ::StringW pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_LoadSharedResource::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_LoadSharedResource*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke(::StringW pchResourceName, ::StringW pchBuffer, uint unBufferLen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_LoadSharedResource*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.EndInvoke
uint Valve::VR::IVRResources::_LoadSharedResource::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_LoadSharedResource::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_LoadSharedResource*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_GetResourceFullPath
#include "Valve/VR/IVRResources__GetResourceFullPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.Invoke
uint Valve::VR::IVRResources::_GetResourceFullPath::Invoke(::StringW pchResourceName, ::StringW pchResourceTypeDirectory, ::System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_GetResourceFullPath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_GetResourceFullPath*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke(::StringW pchResourceName, ::StringW pchResourceTypeDirectory, ::System::Text::StringBuilder* pchPathBuffer, uint unBufferLen, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_GetResourceFullPath*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.EndInvoke
uint Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRResources::_GetResourceFullPath*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverCount
#include "Valve/VR/IVRDriverManager__GetDriverCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverCount*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverCount*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverCount*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverName
#include "Valve/VR/IVRDriverManager__GetDriverName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverName::Invoke(uint nDriver, ::System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke(uint nDriver, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, nDriver, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverHandle
#include "Valve/VR/IVRDriverManager__GetDriverHandle.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverHandle.Invoke
uint64_t Valve::VR::IVRDriverManager::_GetDriverHandle::Invoke(::StringW pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverHandle.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverHandle::BeginInvoke(::StringW pchDriverName, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchDriverName, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverHandle.EndInvoke
uint64_t Valve::VR::IVRDriverManager::_GetDriverHandle::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRDriverManager::_GetDriverHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRDriverManager::_GetDriverHandle*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_SetActionManifestPath
#include "Valve/VR/IVRInput__SetActionManifestPath.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_SetActionManifestPath.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_SetActionManifestPath::Invoke(::StringW pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_SetActionManifestPath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_SetActionManifestPath*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: Valve.VR.IVRInput/_SetActionManifestPath.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_SetActionManifestPath::BeginInvoke(::StringW pchActionManifestPath, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_SetActionManifestPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_SetActionManifestPath*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchActionManifestPath, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_SetActionManifestPath.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_SetActionManifestPath::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_SetActionManifestPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_SetActionManifestPath*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetActionSetHandle
#include "Valve/VR/IVRInput__GetActionSetHandle.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetActionSetHandle.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionSetHandle::Invoke(::StringW pchActionSetName, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionSetHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionSetHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionSetName, byref(pHandle));
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionSetHandle.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetActionSetHandle::BeginInvoke(::StringW pchActionSetName, ByRef<uint64_t> pHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionSetHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionSetHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchActionSetName, byref(pHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionSetHandle.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionSetHandle::EndInvoke(ByRef<uint64_t> pHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionSetHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionSetHandle*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetActionHandle
#include "Valve/VR/IVRInput__GetActionHandle.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetActionHandle.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionHandle::Invoke(::StringW pchActionName, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchActionName, byref(pHandle));
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionHandle.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetActionHandle::BeginInvoke(::StringW pchActionName, ByRef<uint64_t> pHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchActionName, byref(pHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionHandle.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionHandle::EndInvoke(ByRef<uint64_t> pHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionHandle*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetInputSourceHandle
#include "Valve/VR/IVRInput__GetInputSourceHandle.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetInputSourceHandle.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetInputSourceHandle::Invoke(::StringW pchInputSourcePath, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetInputSourceHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetInputSourceHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, byref(pHandle));
}
// Autogenerated method: Valve.VR.IVRInput/_GetInputSourceHandle.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetInputSourceHandle::BeginInvoke(::StringW pchInputSourcePath, ByRef<uint64_t> pHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetInputSourceHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetInputSourceHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchInputSourcePath, byref(pHandle), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetInputSourceHandle.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetInputSourceHandle::EndInvoke(ByRef<uint64_t> pHandle, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetInputSourceHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetInputSourceHandle*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pHandle), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_UpdateActionState
#include "Valve/VR/IVRInput__UpdateActionState.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_UpdateActionState.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_UpdateActionState::Invoke(ByRef<::ArrayW<::Valve::VR::VRActiveActionSet_t>> pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_UpdateActionState::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_UpdateActionState*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pSets), unSizeOfVRSelectedActionSet_t, unSetCount);
}
// Autogenerated method: Valve.VR.IVRInput/_UpdateActionState.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_UpdateActionState::BeginInvoke(ByRef<::ArrayW<::Valve::VR::VRActiveActionSet_t>> pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_UpdateActionState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_UpdateActionState*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pSets), unSizeOfVRSelectedActionSet_t, unSetCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_UpdateActionState.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_UpdateActionState::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_UpdateActionState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_UpdateActionState*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetDigitalActionData
#include "Valve/VR/IVRInput__GetDigitalActionData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.InputDigitalActionData_t
#include "Valve/VR/InputDigitalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetDigitalActionData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetDigitalActionData::Invoke(uint64_t action, ByRef<::Valve::VR::InputDigitalActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetDigitalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetDigitalActionData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.IVRInput/_GetDigitalActionData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetDigitalActionData::BeginInvoke(uint64_t action, ByRef<::Valve::VR::InputDigitalActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetDigitalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetDigitalActionData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetDigitalActionData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetDigitalActionData::EndInvoke(ByRef<::Valve::VR::InputDigitalActionData_t> pActionData, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetDigitalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetDigitalActionData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pActionData), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetAnalogActionData
#include "Valve/VR/IVRInput__GetAnalogActionData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.InputAnalogActionData_t
#include "Valve/VR/InputAnalogActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetAnalogActionData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetAnalogActionData::Invoke(uint64_t action, ByRef<::Valve::VR::InputAnalogActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetAnalogActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetAnalogActionData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.IVRInput/_GetAnalogActionData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetAnalogActionData::BeginInvoke(uint64_t action, ByRef<::Valve::VR::InputAnalogActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetAnalogActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetAnalogActionData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetAnalogActionData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetAnalogActionData::EndInvoke(ByRef<::Valve::VR::InputAnalogActionData_t> pActionData, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetAnalogActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetAnalogActionData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pActionData), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetPoseActionData
#include "Valve/VR/IVRInput__GetPoseActionData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.InputPoseActionData_t
#include "Valve/VR/InputPoseActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetPoseActionData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetPoseActionData::Invoke(uint64_t action, ::Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ByRef<::Valve::VR::InputPoseActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetPoseActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetPoseActionData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, byref(pActionData), unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.IVRInput/_GetPoseActionData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetPoseActionData::BeginInvoke(uint64_t action, ::Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ByRef<::Valve::VR::InputPoseActionData_t> pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetPoseActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetPoseActionData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, byref(pActionData), unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetPoseActionData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetPoseActionData::EndInvoke(ByRef<::Valve::VR::InputPoseActionData_t> pActionData, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetPoseActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetPoseActionData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pActionData), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalActionData
#include "Valve/VR/IVRInput__GetSkeletalActionData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.InputSkeletalActionData_t
#include "Valve/VR/InputSkeletalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalActionData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalActionData::Invoke(uint64_t action, ByRef<::Valve::VR::InputSkeletalActionData_t> pActionData, uint unActionDataSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalActionData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalActionData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalActionData::BeginInvoke(uint64_t action, ByRef<::Valve::VR::InputSkeletalActionData_t> pActionData, uint unActionDataSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalActionData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pActionData), unActionDataSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalActionData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalActionData::EndInvoke(ByRef<::Valve::VR::InputSkeletalActionData_t> pActionData, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalActionData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pActionData), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetBoneCount
#include "Valve/VR/IVRInput__GetBoneCount.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetBoneCount.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneCount::Invoke(uint64_t action, ByRef<uint> pBoneCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneCount*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pBoneCount));
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneCount.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetBoneCount::BeginInvoke(uint64_t action, ByRef<uint> pBoneCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneCount*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pBoneCount), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneCount.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneCount::EndInvoke(ByRef<uint> pBoneCount, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneCount*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pBoneCount), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetBoneHierarchy
#include "Valve/VR/IVRInput__GetBoneHierarchy.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetBoneHierarchy.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneHierarchy::Invoke(uint64_t action, ByRef<::ArrayW<int>> pParentIndices, uint unIndexArayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneHierarchy::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneHierarchy*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pParentIndices), unIndexArayCount);
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneHierarchy.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetBoneHierarchy::BeginInvoke(uint64_t action, ByRef<::ArrayW<int>> pParentIndices, uint unIndexArayCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneHierarchy::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneHierarchy*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pParentIndices), unIndexArayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneHierarchy.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneHierarchy::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneHierarchy::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneHierarchy*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetBoneName
#include "Valve/VR/IVRInput__GetBoneName.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetBoneName.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneName::Invoke(uint64_t action, int nBoneIndex, ::System::Text::StringBuilder* pchBoneName, uint unNameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, nBoneIndex, pchBoneName, unNameBufferSize);
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetBoneName::BeginInvoke(uint64_t action, int nBoneIndex, ::System::Text::StringBuilder* pchBoneName, uint unNameBufferSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, nBoneIndex, pchBoneName, unNameBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetBoneName.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetBoneName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetBoneName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetBoneName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalReferenceTransforms
#include "Valve/VR/IVRInput__GetSkeletalReferenceTransforms.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.EVRSkeletalTransformSpace
#include "Valve/VR/EVRSkeletalTransformSpace.hpp"
// Including type: Valve.VR.EVRSkeletalReferencePose
#include "Valve/VR/EVRSkeletalReferencePose.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalReferenceTransforms.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::Invoke(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalReferencePose eReferencePose, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eReferencePose, byref(pTransformArray), unTransformArrayCount);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalReferenceTransforms.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::BeginInvoke(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalReferencePose eReferencePose, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eReferencePose, byref(pTransformArray), unTransformArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalReferenceTransforms.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalReferenceTransforms*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalTrackingLevel
#include "Valve/VR/IVRInput__GetSkeletalTrackingLevel.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.EVRSkeletalTrackingLevel
#include "Valve/VR/EVRSkeletalTrackingLevel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalTrackingLevel.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalTrackingLevel::Invoke(uint64_t action, ByRef<::Valve::VR::EVRSkeletalTrackingLevel> pSkeletalTrackingLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalTrackingLevel::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalTrackingLevel*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pSkeletalTrackingLevel));
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalTrackingLevel.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalTrackingLevel::BeginInvoke(uint64_t action, ByRef<::Valve::VR::EVRSkeletalTrackingLevel> pSkeletalTrackingLevel, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalTrackingLevel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalTrackingLevel*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pSkeletalTrackingLevel), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalTrackingLevel.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalTrackingLevel::EndInvoke(ByRef<::Valve::VR::EVRSkeletalTrackingLevel> pSkeletalTrackingLevel, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalTrackingLevel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalTrackingLevel*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pSkeletalTrackingLevel), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalBoneData
#include "Valve/VR/IVRInput__GetSkeletalBoneData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.EVRSkeletalTransformSpace
#include "Valve/VR/EVRSkeletalTransformSpace.hpp"
// Including type: Valve.VR.EVRSkeletalMotionRange
#include "Valve/VR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalBoneData::Invoke(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, byref(pTransformArray), unTransformArrayCount);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalBoneData::BeginInvoke(uint64_t action, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, byref(pTransformArray), unTransformArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalBoneData::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalSummaryData
#include "Valve/VR/IVRInput__GetSkeletalSummaryData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.VRSkeletalSummaryData_t
#include "Valve/VR/VRSkeletalSummaryData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalSummaryData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalSummaryData::Invoke(uint64_t action, ByRef<::Valve::VR::VRSkeletalSummaryData_t> pSkeletalSummaryData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalSummaryData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalSummaryData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, byref(pSkeletalSummaryData));
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalSummaryData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalSummaryData::BeginInvoke(uint64_t action, ByRef<::Valve::VR::VRSkeletalSummaryData_t> pSkeletalSummaryData, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalSummaryData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalSummaryData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, byref(pSkeletalSummaryData), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalSummaryData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalSummaryData::EndInvoke(ByRef<::Valve::VR::VRSkeletalSummaryData_t> pSkeletalSummaryData, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalSummaryData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalSummaryData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pSkeletalSummaryData), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetSkeletalBoneDataCompressed
#include "Valve/VR/IVRInput__GetSkeletalBoneDataCompressed.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.EVRSkeletalMotionRange
#include "Valve/VR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneDataCompressed.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke(uint64_t action, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ::System::IntPtr pvCompressedData, uint unCompressedSize, ByRef<uint> punRequiredCompressedSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, eMotionRange, pvCompressedData, unCompressedSize, byref(punRequiredCompressedSize));
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneDataCompressed.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke(uint64_t action, ::Valve::VR::EVRSkeletalMotionRange eMotionRange, ::System::IntPtr pvCompressedData, uint unCompressedSize, ByRef<uint> punRequiredCompressedSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, eMotionRange, pvCompressedData, unCompressedSize, byref(punRequiredCompressedSize), callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetSkeletalBoneDataCompressed.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke(ByRef<uint> punRequiredCompressedSize, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetSkeletalBoneDataCompressed*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(punRequiredCompressedSize), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_DecompressSkeletalBoneData
#include "Valve/VR/IVRInput__DecompressSkeletalBoneData.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.EVRSkeletalTransformSpace
#include "Valve/VR/EVRSkeletalTransformSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_DecompressSkeletalBoneData.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_DecompressSkeletalBoneData::Invoke(::System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_DecompressSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_DecompressSkeletalBoneData*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, eTransformSpace, byref(pTransformArray), unTransformArrayCount);
}
// Autogenerated method: Valve.VR.IVRInput/_DecompressSkeletalBoneData.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke(::System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ::Valve::VR::EVRSkeletalTransformSpace eTransformSpace, ByRef<::ArrayW<::Valve::VR::VRBoneTransform_t>> pTransformArray, uint unTransformArrayCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_DecompressSkeletalBoneData*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, eTransformSpace, byref(pTransformArray), unTransformArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_DecompressSkeletalBoneData.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_DecompressSkeletalBoneData::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_DecompressSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_DecompressSkeletalBoneData*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_TriggerHapticVibrationAction
#include "Valve/VR/IVRInput__TriggerHapticVibrationAction.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_TriggerHapticVibrationAction.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_TriggerHapticVibrationAction::Invoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_TriggerHapticVibrationAction::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_TriggerHapticVibrationAction*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: Valve.VR.IVRInput/_TriggerHapticVibrationAction.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_TriggerHapticVibrationAction*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_TriggerHapticVibrationAction.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_TriggerHapticVibrationAction::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_TriggerHapticVibrationAction::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_TriggerHapticVibrationAction*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetActionOrigins
#include "Valve/VR/IVRInput__GetActionOrigins.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetActionOrigins.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ByRef<::ArrayW<uint64_t>> originsOut, uint originOutCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionOrigins*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, byref(originsOut), originOutCount);
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionOrigins.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ByRef<::ArrayW<uint64_t>> originsOut, uint originOutCount, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionOrigins*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, byref(originsOut), originOutCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetActionOrigins.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetActionOrigins::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetActionOrigins*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetOriginLocalizedName
#include "Valve/VR/IVRInput__GetOriginLocalizedName.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetOriginLocalizedName.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetOriginLocalizedName::Invoke(uint64_t origin, ::System::Text::StringBuilder* pchNameArray, uint unNameArraySize, int unStringSectionsToInclude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginLocalizedName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginLocalizedName*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize, unStringSectionsToInclude);
}
// Autogenerated method: Valve.VR.IVRInput/_GetOriginLocalizedName.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetOriginLocalizedName::BeginInvoke(uint64_t origin, ::System::Text::StringBuilder* pchNameArray, uint unNameArraySize, int unStringSectionsToInclude, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginLocalizedName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginLocalizedName*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize, unStringSectionsToInclude, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetOriginLocalizedName.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetOriginLocalizedName::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginLocalizedName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginLocalizedName*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_GetOriginTrackedDeviceInfo
#include "Valve/VR/IVRInput__GetOriginTrackedDeviceInfo.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: Valve.VR.InputOriginInfo_t
#include "Valve/VR/InputOriginInfo_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_GetOriginTrackedDeviceInfo.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke(uint64_t origin, ByRef<::Valve::VR::InputOriginInfo_t> pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, origin, byref(pOriginInfo), unOriginInfoSize);
}
// Autogenerated method: Valve.VR.IVRInput/_GetOriginTrackedDeviceInfo.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke(uint64_t origin, ByRef<::Valve::VR::InputOriginInfo_t> pOriginInfo, uint unOriginInfoSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, origin, byref(pOriginInfo), unOriginInfoSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_GetOriginTrackedDeviceInfo.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke(ByRef<::Valve::VR::InputOriginInfo_t> pOriginInfo, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_GetOriginTrackedDeviceInfo*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pOriginInfo), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_ShowActionOrigins
#include "Valve/VR/IVRInput__ShowActionOrigins.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_ShowActionOrigins.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_ShowActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowActionOrigins*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: Valve.VR.IVRInput/_ShowActionOrigins.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_ShowActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t ulActionHandle, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowActionOrigins*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, ulActionHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_ShowActionOrigins.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_ShowActionOrigins::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowActionOrigins*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRInput/_ShowBindingsForActionSet
#include "Valve/VR/IVRInput__ShowBindingsForActionSet.hpp"
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRInput/_ShowBindingsForActionSet.Invoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_ShowBindingsForActionSet::Invoke(ByRef<::ArrayW<::Valve::VR::VRActiveActionSet_t>> pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowBindingsForActionSet::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowBindingsForActionSet*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, byref(pSets), unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight);
}
// Autogenerated method: Valve.VR.IVRInput/_ShowBindingsForActionSet.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRInput::_ShowBindingsForActionSet::BeginInvoke(ByRef<::ArrayW<::Valve::VR::VRActiveActionSet_t>> pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowBindingsForActionSet::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowBindingsForActionSet*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pSets), unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight, callback, object);
}
// Autogenerated method: Valve.VR.IVRInput/_ShowBindingsForActionSet.EndInvoke
::Valve::VR::EVRInputError Valve::VR::IVRInput::_ShowBindingsForActionSet::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRInput::_ShowBindingsForActionSet::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRInput::_ShowBindingsForActionSet*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRIOBuffer/_Open
#include "Valve/VR/IVRIOBuffer__Open.hpp"
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
// Including type: Valve.VR.EIOBufferMode
#include "Valve/VR/EIOBufferMode.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRIOBuffer/_Open.Invoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Open::Invoke(::StringW pchPath, ::Valve::VR::EIOBufferMode mode, uint unElementSize, uint unElements, ByRef<uint64_t> pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Open::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Open*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, byref(pulBuffer));
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Open.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRIOBuffer::_Open::BeginInvoke(::StringW pchPath, ::Valve::VR::EIOBufferMode mode, uint unElementSize, uint unElements, ByRef<uint64_t> pulBuffer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Open::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Open*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, byref(pulBuffer), callback, object);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Open.EndInvoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Open::EndInvoke(ByRef<uint64_t> pulBuffer, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Open::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Open*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, byref(pulBuffer), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRIOBuffer/_Close
#include "Valve/VR/IVRIOBuffer__Close.hpp"
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRIOBuffer/_Close.Invoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Close::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Close::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Close*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Close.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRIOBuffer::_Close::BeginInvoke(uint64_t ulBuffer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Close::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Close*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Close.EndInvoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Close::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Close::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Close*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRIOBuffer/_Read
#include "Valve/VR/IVRIOBuffer__Read.hpp"
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRIOBuffer/_Read.Invoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Read::Invoke(uint64_t ulBuffer, ::System::IntPtr pDst, uint unBytes, ByRef<uint> punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Read::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Read*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, byref(punRead));
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Read.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRIOBuffer::_Read::BeginInvoke(uint64_t ulBuffer, ::System::IntPtr pDst, uint unBytes, ByRef<uint> punRead, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Read::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Read*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pDst, unBytes, byref(punRead), callback, object);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Read.EndInvoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Read::EndInvoke(ByRef<uint> punRead, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Read::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Read*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, byref(punRead), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRIOBuffer/_Write
#include "Valve/VR/IVRIOBuffer__Write.hpp"
// Including type: Valve.VR.EIOBufferError
#include "Valve/VR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRIOBuffer/_Write.Invoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Write::Invoke(uint64_t ulBuffer, ::System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Write::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Write*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Write.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRIOBuffer::_Write::BeginInvoke(uint64_t ulBuffer, ::System::IntPtr pSrc, uint unBytes, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Write::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Write*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pSrc, unBytes, callback, object);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_Write.EndInvoke
::Valve::VR::EIOBufferError Valve::VR::IVRIOBuffer::_Write::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_Write::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_Write*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EIOBufferError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRIOBuffer/_PropertyContainer
#include "Valve/VR/IVRIOBuffer__PropertyContainer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRIOBuffer/_PropertyContainer.Invoke
uint64_t Valve::VR::IVRIOBuffer::_PropertyContainer::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_PropertyContainer::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_PropertyContainer*), 12));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_PropertyContainer.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRIOBuffer::_PropertyContainer::BeginInvoke(uint64_t ulBuffer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_PropertyContainer::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_PropertyContainer*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: Valve.VR.IVRIOBuffer/_PropertyContainer.EndInvoke
uint64_t Valve::VR::IVRIOBuffer::_PropertyContainer::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRIOBuffer::_PropertyContainer::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRIOBuffer::_PropertyContainer*), 14));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor
#include "Valve/VR/IVRSpatialAnchors__CreateSpatialAnchorFromDescriptor.hpp"
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.Invoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke(::StringW pchDescriptor, ByRef<uint> pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, byref(pHandleOut));
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke(::StringW pchDescriptor, ByRef<uint> pHandleOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, pchDescriptor, byref(pHandleOut), callback, object);
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.EndInvoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke(ByRef<uint> pHandleOut, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, byref(pHandleOut), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose
#include "Valve/VR/IVRSpatialAnchors__CreateSpatialAnchorFromPose.hpp"
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.SpatialAnchorPose_t
#include "Valve/VR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.Invoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke(uint unDeviceIndex, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPose, ByRef<uint> pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, byref(pPose), byref(pHandleOut));
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke(uint unDeviceIndex, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPose, ByRef<uint> pHandleOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, eOrigin, byref(pPose), byref(pHandleOut), callback, object);
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.EndInvoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke(ByRef<::Valve::VR::SpatialAnchorPose_t> pPose, ByRef<uint> pHandleOut, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, byref(pPose), byref(pHandleOut), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorPose
#include "Valve/VR/IVRSpatialAnchors__GetSpatialAnchorPose.hpp"
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.SpatialAnchorPose_t
#include "Valve/VR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorPose.Invoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke(uint unHandle, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, byref(pPoseOut));
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorPose.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke(uint unHandle, ::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::SpatialAnchorPose_t> pPoseOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, unHandle, eOrigin, byref(pPoseOut), callback, object);
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorPose.EndInvoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke(ByRef<::Valve::VR::SpatialAnchorPose_t> pPoseOut, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorPose*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, byref(pPoseOut), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor
#include "Valve/VR/IVRSpatialAnchors__GetSpatialAnchorDescriptor.hpp"
// Including type: Valve.VR.EVRSpatialAnchorError
#include "Valve/VR/EVRSpatialAnchorError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.Invoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke(uint unHandle, ::System::Text::StringBuilder* pchDescriptorOut, ByRef<uint> punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, byref(punDescriptorBufferLenInOut));
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.BeginInvoke
::System::IAsyncResult* Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke(uint unHandle, ::System::Text::StringBuilder* pchDescriptorOut, ByRef<uint> punDescriptorBufferLenInOut, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, unHandle, pchDescriptorOut, byref(punDescriptorBufferLenInOut), callback, object);
}
// Autogenerated method: Valve.VR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.EndInvoke
::Valve::VR::EVRSpatialAnchorError Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke(ByRef<uint> punDescriptorBufferLenInOut, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRSpatialAnchorError, false>(this, ___internal__method, byref(punDescriptorBufferLenInOut), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.CVRSystem/PollNextEventUnion
#include "Valve/VR/CVRSystem_PollNextEventUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateUnion
#include "Valve/VR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateWithPoseUnion
#include "Valve/VR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRSystem FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRSystem& Valve::VR::CVRSystem::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRSystem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRSystem.GetRecommendedRenderTargetSize
void Valve::VR::CVRSystem::GetRecommendedRenderTargetSize(ByRef<uint> pnWidth, ByRef<uint> pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetRecommendedRenderTargetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnWidth), byref(pnHeight));
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionMatrix
::Valve::VR::HmdMatrix44_t Valve::VR::CVRSystem::GetProjectionMatrix(::Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetProjectionMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fNearZ), ::il2cpp_utils::ExtractType(fFarZ)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionRaw
void Valve::VR::CVRSystem::GetProjectionRaw(::Valve::VR::EVREye eEye, ByRef<float> pfLeft, ByRef<float> pfRight, ByRef<float> pfTop, ByRef<float> pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetProjectionRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eEye, byref(pfLeft), byref(pfRight), byref(pfTop), byref(pfBottom));
}
// Autogenerated method: Valve.VR.CVRSystem.ComputeDistortion
bool Valve::VR::CVRSystem::ComputeDistortion(::Valve::VR::EVREye eEye, float fU, float fV, ByRef<::Valve::VR::DistortionCoordinates_t> pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::ComputeDistortion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeDistortion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fU), ::il2cpp_utils::ExtractType(fV), ::il2cpp_utils::ExtractType(pDistortionCoordinates)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eEye, fU, fV, byref(pDistortionCoordinates));
}
// Autogenerated method: Valve.VR.CVRSystem.GetEyeToHeadTransform
::Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetEyeToHeadTransform(::Valve::VR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetEyeToHeadTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeToHeadTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTimeSinceLastVsync
bool Valve::VR::CVRSystem::GetTimeSinceLastVsync(ByRef<float> pfSecondsSinceLastVsync, ByRef<uint64_t> pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetTimeSinceLastVsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeSinceLastVsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pfSecondsSinceLastVsync), byref(pulFrameCounter));
}
// Autogenerated method: Valve.VR.CVRSystem.GetD3D9AdapterIndex
int Valve::VR::CVRSystem::GetD3D9AdapterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetD3D9AdapterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetD3D9AdapterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDXGIOutputInfo
void Valve::VR::CVRSystem::GetDXGIOutputInfo(ByRef<int> pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnAdapterIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.GetOutputDevice
void Valve::VR::CVRSystem::GetOutputDevice(ByRef<uint64_t> pnDevice, ::Valve::VR::ETextureType textureType, ::System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetOutputDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(textureType), ::il2cpp_utils::ExtractType(pInstance)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnDevice), textureType, pInstance);
}
// Autogenerated method: Valve.VR.CVRSystem.IsDisplayOnDesktop
bool Valve::VR::CVRSystem::IsDisplayOnDesktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::IsDisplayOnDesktop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDisplayOnDesktop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.SetDisplayVisibility
bool Valve::VR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::SetDisplayVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisplayVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bIsVisibleOnDesktop)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::ArrayW<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsToPhotonsFromNow), ::il2cpp_utils::ExtractType(pTrackedDevicePoseArray)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray);
}
// Autogenerated method: Valve.VR.CVRSystem.ResetSeatedZeroPose
void Valve::VR::CVRSystem::ResetSeatedZeroPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::ResetSeatedZeroPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetSeatedZeroPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
::Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
::Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(::Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::ArrayW<uint> punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackedDeviceClass), ::il2cpp_utils::ExtractType(punTrackedDeviceIndexArray), ::il2cpp_utils::ExtractType(unRelativeToTrackedDeviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceActivityLevel
::Valve::VR::EDeviceActivityLevel Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: Valve.VR.CVRSystem.ApplyTransform
void Valve::VR::CVRSystem::ApplyTransform(ByRef<::Valve::VR::TrackedDevicePose_t> pOutputPose, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose, ByRef<::Valve::VR::HmdMatrix34_t> pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::ApplyTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pOutputPose), byref(pTrackedDevicePose), byref(pTransform));
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole(::Valve::VR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceType)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
::Valve::VR::ETrackedControllerRole Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceClass
::Valve::VR::ETrackedDeviceClass Valve::VR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetTrackedDeviceClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.IsTrackedDeviceConnected
bool Valve::VR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::IsTrackedDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTrackedDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetBoolTrackedDeviceProperty
bool Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetFloatTrackedDeviceProperty
float Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, unDeviceIndex, prop, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetInt32TrackedDeviceProperty
int Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, unDeviceIndex, prop, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetMatrix34TrackedDeviceProperty
::Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetArrayTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, uint propType, ::System::IntPtr pBuffer, uint unBufferSize, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(propType), ::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetStringTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, ::Valve::VR::ETrackedDeviceProperty prop, ::System::Text::StringBuilder* pchValue, uint unBufferSize, ByRef<::Valve::VR::ETrackedPropertyError> pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetStringTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, byref(pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetPropErrorNameFromEnum
::StringW Valve::VR::CVRSystem::GetPropErrorNameFromEnum(::Valve::VR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetPropErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEvent
bool Valve::VR::CVRSystem::PollNextEvent(ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEventWithPose
bool Valve::VR::CVRSystem::PollNextEventWithPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, ByRef<::Valve::VR::VREvent_t> pEvent, uint uncbVREvent, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::PollNextEventWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEventWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eOrigin, byref(pEvent), uncbVREvent, byref(pTrackedDevicePose));
}
// Autogenerated method: Valve.VR.CVRSystem.GetEventTypeNameFromEnum
::StringW Valve::VR::CVRSystem::GetEventTypeNameFromEnum(::Valve::VR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetEventTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eType)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, eType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetHiddenAreaMesh
::Valve::VR::HiddenAreaMesh_t Valve::VR::CVRSystem::GetHiddenAreaMesh(::Valve::VR::EVREye eEye, ::Valve::VR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetHiddenAreaMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHiddenAreaMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerState
bool Valve::VR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t> pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetControllerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerStateWithPose
bool Valve::VR::CVRSystem::GetControllerStateWithPose(::Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t> pControllerState, uint unControllerStateSize, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetControllerStateWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerStateWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize, byref(pTrackedDevicePose));
}
// Autogenerated method: Valve.VR.CVRSystem.TriggerHapticPulse
void Valve::VR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, uint16_t usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(unAxisId), ::il2cpp_utils::ExtractType(usDurationMicroSec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: Valve.VR.CVRSystem.GetButtonIdNameFromEnum
::StringW Valve::VR::CVRSystem::GetButtonIdNameFromEnum(::Valve::VR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetButtonIdNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eButtonId)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerAxisTypeNameFromEnum
::StringW Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum(::Valve::VR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eAxisType)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: Valve.VR.CVRSystem.IsInputAvailable
bool Valve::VR::CVRSystem::IsInputAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::IsInputAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInputAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.IsSteamVRDrawingControllers
bool Valve::VR::CVRSystem::IsSteamVRDrawingControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::IsSteamVRDrawingControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationPause
bool Valve::VR::CVRSystem::ShouldApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::ShouldApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationReduceRenderingWork
bool Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.DriverDebugRequest
uint Valve::VR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::StringW pchRequest, ::System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::DriverDebugRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DriverDebugRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchRequest), ::il2cpp_utils::ExtractType(pchResponseBuffer), ::il2cpp_utils::ExtractType(unResponseBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: Valve.VR.CVRSystem.PerformFirmwareUpdate
::Valve::VR::EVRFirmwareError Valve::VR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::PerformFirmwareUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformFirmwareUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_Exiting
void Valve::VR::CVRSystem::AcknowledgeQuit_Exiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::AcknowledgeQuit_Exiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_UserPrompt
void Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.Invoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::Invoke(ByRef<::Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_PollNextEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_PollNextEventPacked*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent), uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.BeginInvoke
::System::IAsyncResult* Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke(ByRef<::Valve::VR::VREvent_t_Packed> pEvent, uint uncbVREvent, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_PollNextEventPacked*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(pEvent), uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.EndInvoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke(ByRef<::Valve::VR::VREvent_t_Packed> pEvent, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_PollNextEventPacked*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pEvent), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.Invoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke(uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStatePacked*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.BeginInvoke
::System::IAsyncResult* Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke(uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, uint unControllerStateSize, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStatePacked*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.EndInvoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke(ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStatePacked*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pControllerState), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.Invoke
bool Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::Invoke(::Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, uint unControllerStateSize, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize, byref(pTrackedDevicePose));
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.BeginInvoke
::System::IAsyncResult* Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke(::Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, uint unControllerStateSize, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, byref(pControllerState), unControllerStateSize, byref(pTrackedDevicePose), callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.EndInvoke
bool Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke(ByRef<::Valve::VR::VRControllerState_t_Packed> pControllerState, ByRef<::Valve::VR::TrackedDevicePose_t> pTrackedDevicePose, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Valve::VR::CVRSystem::_GetControllerStateWithPosePacked*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pControllerState), byref(pTrackedDevicePose), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRExtendedDisplay FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRExtendedDisplay& Valve::VR::CVRExtendedDisplay::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRExtendedDisplay::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRExtendedDisplay*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetWindowBounds
void Valve::VR::CVRExtendedDisplay::GetWindowBounds(ByRef<int> pnX, ByRef<int> pnY, ByRef<uint> pnWidth, ByRef<uint> pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRExtendedDisplay::GetWindowBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWindowBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnX), byref(pnY), byref(pnWidth), byref(pnHeight));
}
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetEyeOutputViewport
void Valve::VR::CVRExtendedDisplay::GetEyeOutputViewport(::Valve::VR::EVREye eEye, ByRef<uint> pnX, ByRef<uint> pnY, ByRef<uint> pnWidth, ByRef<uint> pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRExtendedDisplay::GetEyeOutputViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeOutputViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eEye, byref(pnX), byref(pnY), byref(pnWidth), byref(pnHeight));
}
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetDXGIOutputInfo
void Valve::VR::CVRExtendedDisplay::GetDXGIOutputInfo(ByRef<int> pnAdapterIndex, ByRef<int> pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRExtendedDisplay::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pnAdapterIndex), byref(pnAdapterOutputIndex));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRTrackedCamera FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRTrackedCamera& Valve::VR::CVRTrackedCamera::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRTrackedCamera*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraErrorNameFromEnum
::StringW Valve::VR::CVRTrackedCamera::GetCameraErrorNameFromEnum(::Valve::VR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetCameraErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eCameraError)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.HasCamera
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::HasCamera(uint nDeviceIndex, ByRef<bool> pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::HasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHasCamera)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, byref(pHasCamera));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraFrameSize
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraFrameSize(uint nDeviceIndex, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ByRef<uint> pnWidth, ByRef<uint> pnHeight, ByRef<uint> pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetCameraFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, byref(pnWidth), byref(pnHeight), byref(pnFrameBufferSize));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraIntrinsics
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraIntrinsics(uint nDeviceIndex, uint nCameraIndex, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ByRef<::Valve::VR::HmdVector2_t> pFocalLength, ByRef<::Valve::VR::HmdVector2_t> pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraIntrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(nCameraIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, nCameraIndex, eFrameType, byref(pFocalLength), byref(pCenter));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraProjection
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraProjection(uint nDeviceIndex, uint nCameraIndex, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ByRef<::Valve::VR::HmdMatrix44_t> pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetCameraProjection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraProjection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(nCameraIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(flZNear), ::il2cpp_utils::ExtractType(flZFar), ::il2cpp_utils::ExtractType(pProjection)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, nCameraIndex, eFrameType, flZNear, flZFar, byref(pProjection));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.AcquireVideoStreamingService
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::AcquireVideoStreamingService(uint nDeviceIndex, ByRef<uint64_t> pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::AcquireVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, byref(pHandle));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.ReleaseVideoStreamingService
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::ReleaseVideoStreamingService(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::ReleaseVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamFrameBuffer
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamFrameBuffer(uint64_t hTrackedCamera, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ::System::IntPtr pFrameBuffer, uint nFrameBufferSize, ByRef<::Valve::VR::CameraVideoStreamFrameHeader_t> pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetVideoStreamFrameBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamFrameBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFrameBuffer), ::il2cpp_utils::ExtractType(nFrameBufferSize), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, byref(pFrameHeader), nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureSize
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureSize(uint nDeviceIndex, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ByRef<::Valve::VR::VRTextureBounds_t> pTextureBounds, ByRef<uint> pnWidth, ByRef<uint> pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetVideoStreamTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, byref(pTextureBounds), byref(pnWidth), byref(pnHeight));
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureD3D11
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureD3D11(uint64_t hTrackedCamera, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ::System::IntPtr pD3D11DeviceOrResource, ByRef<::System::IntPtr> ppD3D11ShaderResourceView, ByRef<::Valve::VR::CameraVideoStreamFrameHeader_t> pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetVideoStreamTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, byref(ppD3D11ShaderResourceView), byref(pFrameHeader), nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureGL
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureGL(uint64_t hTrackedCamera, ::Valve::VR::EVRTrackedCameraFrameType eFrameType, ByRef<uint> pglTextureId, ByRef<::Valve::VR::CameraVideoStreamFrameHeader_t> pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::GetVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, byref(pglTextureId), byref(pFrameHeader), nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.ReleaseVideoStreamTextureGL
::Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::ReleaseVideoStreamTextureGL(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRTrackedCamera::ReleaseVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(glTextureId)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRApplications FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRApplications& Valve::VR::CVRApplications::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRApplications*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRApplications.AddApplicationManifest
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::AddApplicationManifest(::StringW pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::AddApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: Valve.VR.CVRApplications.RemoveApplicationManifest
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::RemoveApplicationManifest(::StringW pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::RemoveApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: Valve.VR.CVRApplications.IsApplicationInstalled
bool Valve::VR::CVRApplications::IsApplicationInstalled(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::IsApplicationInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsApplicationInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationCount
uint Valve::VR::CVRApplications::GetApplicationCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByIndex
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByIndex(uint unApplicationIndex, ::System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationKeyByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByProcessId
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByProcessId(uint unProcessId, ::System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationKeyByProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplication
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplication(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::LaunchApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchTemplateApplication
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchTemplateApplication(::StringW pchTemplateAppKey, ::StringW pchNewAppKey, ::ArrayW<::Valve::VR::AppOverrideKeys_t> pKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::LaunchTemplateApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchTemplateApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplicationFromMimeType
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplicationFromMimeType(::StringW pchMimeType, ::StringW pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::LaunchApplicationFromMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchDashboardOverlay
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchDashboardOverlay(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::LaunchDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.CancelApplicationLaunch
bool Valve::VR::CVRApplications::CancelApplicationLaunch(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::CancelApplicationLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelApplicationLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.IdentifyApplication
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::IdentifyApplication(uint unProcessId, ::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::IdentifyApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IdentifyApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationProcessId
uint Valve::VR::CVRApplications::GetApplicationProcessId(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsErrorNameFromEnum
::StringW Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum(::Valve::VR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyString
uint Valve::VR::CVRApplications::GetApplicationPropertyString(::StringW pchAppKey, ::Valve::VR::EVRApplicationProperty eProperty, ::System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, ByRef<::Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationPropertyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyBool
bool Valve::VR::CVRApplications::GetApplicationPropertyBool(::StringW pchAppKey, ::Valve::VR::EVRApplicationProperty eProperty, ByRef<::Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationPropertyBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyUint64
uint64_t Valve::VR::CVRApplications::GetApplicationPropertyUint64(::StringW pchAppKey, ::Valve::VR::EVRApplicationProperty eProperty, ByRef<::Valve::VR::EVRApplicationError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationPropertyUint64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyUint64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, byref(peError));
}
// Autogenerated method: Valve.VR.CVRApplications.SetApplicationAutoLaunch
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetApplicationAutoLaunch(::StringW pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::SetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(bAutoLaunch)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationAutoLaunch
bool Valve::VR::CVRApplications::GetApplicationAutoLaunch(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.SetDefaultApplicationForMimeType
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetDefaultApplicationForMimeType(::StringW pchAppKey, ::StringW pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::SetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: Valve.VR.CVRApplications.GetDefaultApplicationForMimeType
bool Valve::VR::CVRApplications::GetDefaultApplicationForMimeType(::StringW pchMimeType, ::System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationSupportedMimeTypes
bool Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes(::StringW pchAppKey, ::System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeTypesBuffer), ::il2cpp_utils::ExtractType(unMimeTypesBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsThatSupportMimeType
uint Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType(::StringW pchMimeType, ::System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeysThatSupportBuffer), ::il2cpp_utils::ExtractType(unAppKeysThatSupportBuffer)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationLaunchArguments
uint Valve::VR::CVRApplications::GetApplicationLaunchArguments(uint unHandle, ::System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationLaunchArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationLaunchArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchArgs), ::il2cpp_utils::ExtractType(unArgs)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.GetStartingApplication
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetStartingApplication(::System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetStartingApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartingApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetTransitionState
::Valve::VR::EVRApplicationTransitionState Valve::VR::CVRApplications::GetTransitionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetTransitionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransitionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.PerformApplicationPrelaunchCheck
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck(::StringW pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsTransitionStateNameFromEnum
::StringW Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum(::Valve::VR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, state);
}
// Autogenerated method: Valve.VR.CVRApplications.IsQuitUserPromptRequested
bool Valve::VR::CVRApplications::IsQuitUserPromptRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::IsQuitUserPromptRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsQuitUserPromptRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchInternalProcess
::Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchInternalProcess(::StringW pchBinaryPath, ::StringW pchArguments, ::StringW pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::LaunchInternalProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchInternalProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchBinaryPath), ::il2cpp_utils::ExtractType(pchArguments), ::il2cpp_utils::ExtractType(pchWorkingDirectory)})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: Valve.VR.CVRApplications.GetCurrentSceneProcessId
uint Valve::VR::CVRApplications::GetCurrentSceneProcessId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRApplications::GetCurrentSceneProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRChaperone FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperone& Valve::VR::CVRChaperone::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRChaperone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetCalibrationState
::Valve::VR::ChaperoneCalibrationState Valve::VR::CVRChaperone::GetCalibrationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::GetCalibrationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCalibrationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Valve::VR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaSize
bool Valve::VR::CVRChaperone::GetPlayAreaSize(ByRef<float> pSizeX, ByRef<float> pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::GetPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pSizeX), byref(pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaRect
bool Valve::VR::CVRChaperone::GetPlayAreaRect(ByRef<::Valve::VR::HmdQuad_t> rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::GetPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(rect));
}
// Autogenerated method: Valve.VR.CVRChaperone.ReloadInfo
void Valve::VR::CVRChaperone::ReloadInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::ReloadInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.SetSceneColor
void Valve::VR::CVRChaperone::SetSceneColor(::Valve::VR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::SetSceneColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSceneColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetBoundsColor
void Valve::VR::CVRChaperone::GetBoundsColor(ByRef<::Valve::VR::HmdColor_t> pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ByRef<::Valve::VR::HmdColor_t> pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::GetBoundsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputColorArray), ::il2cpp_utils::ExtractType(nNumOutputColors), ::il2cpp_utils::ExtractType(flCollisionBoundsFadeDistance), ::il2cpp_utils::ExtractType(pOutputCameraColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pOutputColorArray), nNumOutputColors, flCollisionBoundsFadeDistance, byref(pOutputCameraColor));
}
// Autogenerated method: Valve.VR.CVRChaperone.AreBoundsVisible
bool Valve::VR::CVRChaperone::AreBoundsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::AreBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.ForceBoundsVisible
void Valve::VR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperone::ForceBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bForce);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRChaperoneSetup FnTable
[[deprecated("Use field access instead!")]] ::Valve::VR::IVRChaperoneSetup& Valve::VR::CVRChaperoneSetup::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<::Valve::VR::IVRChaperoneSetup*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.CommitWorkingCopy
bool Valve::VR::CVRChaperoneSetup::CommitWorkingCopy(::Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::CommitWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommitWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.RevertWorkingCopy
void Valve::VR::CVRChaperoneSetup::RevertWorkingCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::RevertWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RevertWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize(ByRef<float> pSizeX, ByRef<float> pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pSizeX), byref(pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect(ByRef<::Valve::VR::HmdQuad_t> rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(rect));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(ByRef<::ArrayW<::Valve::VR::HmdQuad_t>> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::ArrayW<::Valve::VR::HmdQuad_t>&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(ByRef<::ArrayW<::Valve::VR::HmdQuad_t>> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::ArrayW<::Valve::VR::HmdQuad_t>&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(ByRef<::Valve::VR::HmdMatrix34_t> pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(ByRef<::Valve::VR::HmdMatrix34_t> pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatStandingZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pmatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeX), ::il2cpp_utils::ExtractType(sizeZ)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::ArrayW<::Valve::VR::HmdQuad_t> pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPerimeter
void Valve::VR::CVRChaperoneSetup::SetWorkingPerimeter(::ArrayW<::Valve::VR::HmdVector2_t> pPointBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::SetWorkingPerimeter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPerimeter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPointBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pPointBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(ByRef<::Valve::VR::HmdMatrix34_t> pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatSeatedZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pMatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(ByRef<::Valve::VR::HmdMatrix34_t> pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatStandingZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pMatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ReloadFromDisk
void Valve::VR::CVRChaperoneSetup::ReloadFromDisk(::Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::ReloadFromDisk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadFromDisk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(ByRef<::Valve::VR::HmdMatrix34_t> pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ExportLiveToBuffer
bool Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer(::System::Text::StringBuilder* pBuffer, ByRef<uint> pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExportLiveToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(pnBufferLength)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pBuffer, byref(pnBufferLength));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ImportFromBufferToWorking
bool Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking(::StringW pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImportFromBufferToWorking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(nImportFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ShowWorkingSetPreview
void Valve::VR::CVRChaperoneSetup::ShowWorkingSetPreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::ShowWorkingSetPreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowWorkingSetPreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.HideWorkingSetPreview
void Valve::VR::CVRChaperoneSetup::HideWorkingSetPreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Valve::VR::CVRChaperoneSetup::HideWorkingSetPreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideWorkingSetPreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
