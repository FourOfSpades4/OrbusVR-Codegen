// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vx_tts_voice_list_t
#include "GlobalNamespace/vx_tts_voice_list_t.hpp"
// Including type: vx_tts_voice_t
#include "GlobalNamespace/vx_tts_voice_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vx_tts_voice_list_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vx_tts_voice_list_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vx_tts_voice_list_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vx_tts_voice_list_t::getCPtr(::GlobalNamespace::vx_tts_voice_list_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vx_tts_voice_list_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vx_tts_voice_list_t.Dispose
void GlobalNamespace::vx_tts_voice_list_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vx_tts_voice_list_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_list_t.Get
::GlobalNamespace::vx_tts_voice_t* GlobalNamespace::vx_tts_voice_list_t::Get(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_tts_voice_t*, false>(this, ___internal__method, i);
}
// Autogenerated method: vx_tts_voice_list_t.set_Voices
void GlobalNamespace::vx_tts_voice_list_t::set_Voices(::GlobalNamespace::vx_tts_voice_t* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::set_Voices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Voices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_tts_voice_list_t.get_Voices
::GlobalNamespace::vx_tts_voice_t* GlobalNamespace::vx_tts_voice_list_t::get_Voices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::get_Voices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Voices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_tts_voice_t*, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_list_t.set_Length
void GlobalNamespace::vx_tts_voice_list_t::set_Length(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::set_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_tts_voice_list_t.get_Length
int GlobalNamespace::vx_tts_voice_list_t::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::get_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_list_t.Finalize
void GlobalNamespace::vx_tts_voice_list_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vx_tts_voice_t
#include "GlobalNamespace/vx_tts_voice_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vx_tts_voice_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vx_tts_voice_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vx_tts_voice_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vx_tts_voice_t::getCPtr(::GlobalNamespace::vx_tts_voice_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vx_tts_voice_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vx_tts_voice_t.Dispose
void GlobalNamespace::vx_tts_voice_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vx_tts_voice_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_t.set_voice_id
void GlobalNamespace::vx_tts_voice_t::set_voice_id(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::set_voice_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_voice_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_tts_voice_t.get_voice_id
uint GlobalNamespace::vx_tts_voice_t::get_voice_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::get_voice_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_voice_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_t.set_name
void GlobalNamespace::vx_tts_voice_t::set_name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_tts_voice_t.get_name
::StringW GlobalNamespace::vx_tts_voice_t::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_tts_voice_t.Finalize
void GlobalNamespace::vx_tts_voice_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: vx_udp_frame_type
#include "GlobalNamespace/vx_udp_frame_type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public vx_udp_frame_type vx_frame_type_rtp
::GlobalNamespace::vx_udp_frame_type GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_rtp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_rtp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::vx_udp_frame_type>("", "vx_udp_frame_type", "vx_frame_type_rtp"));
}
// Autogenerated static field setter
// Set static field: static public vx_udp_frame_type vx_frame_type_rtp
void GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_rtp(::GlobalNamespace::vx_udp_frame_type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_rtp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "vx_udp_frame_type", "vx_frame_type_rtp", value));
}
// Autogenerated static field getter
// Get static field: static public vx_udp_frame_type vx_frame_type_rtcp
::GlobalNamespace::vx_udp_frame_type GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_rtcp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_rtcp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::vx_udp_frame_type>("", "vx_udp_frame_type", "vx_frame_type_rtcp"));
}
// Autogenerated static field setter
// Set static field: static public vx_udp_frame_type vx_frame_type_rtcp
void GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_rtcp(::GlobalNamespace::vx_udp_frame_type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_rtcp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "vx_udp_frame_type", "vx_frame_type_rtcp", value));
}
// Autogenerated static field getter
// Get static field: static public vx_udp_frame_type vx_frame_type_sip_message
::GlobalNamespace::vx_udp_frame_type GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_sip_message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_sip_message");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::vx_udp_frame_type>("", "vx_udp_frame_type", "vx_frame_type_sip_message"));
}
// Autogenerated static field setter
// Set static field: static public vx_udp_frame_type vx_frame_type_sip_message
void GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_sip_message(::GlobalNamespace::vx_udp_frame_type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_sip_message");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "vx_udp_frame_type", "vx_frame_type_sip_message", value));
}
// Autogenerated static field getter
// Get static field: static public vx_udp_frame_type vx_frame_type_sip_keepalive
::GlobalNamespace::vx_udp_frame_type GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_sip_keepalive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_get_vx_frame_type_sip_keepalive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::vx_udp_frame_type>("", "vx_udp_frame_type", "vx_frame_type_sip_keepalive"));
}
// Autogenerated static field setter
// Set static field: static public vx_udp_frame_type vx_frame_type_sip_keepalive
void GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_sip_keepalive(::GlobalNamespace::vx_udp_frame_type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::_set_vx_frame_type_sip_keepalive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "vx_udp_frame_type", "vx_frame_type_sip_keepalive", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::vx_udp_frame_type::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_udp_frame_type::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vx_user_channel_t
#include "GlobalNamespace/vx_user_channel_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vx_user_channel_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vx_user_channel_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vx_user_channel_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vx_user_channel_t::getCPtr(::GlobalNamespace::vx_user_channel_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vx_user_channel_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vx_user_channel_t.Dispose
void GlobalNamespace::vx_user_channel_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vx_user_channel_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vx_user_channel_t.set_uri
void GlobalNamespace::vx_user_channel_t::set_uri(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::set_uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_user_channel_t.get_uri
::StringW GlobalNamespace::vx_user_channel_t::get_uri() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::get_uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_user_channel_t.set_name
void GlobalNamespace::vx_user_channel_t::set_name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_user_channel_t.get_name
::StringW GlobalNamespace::vx_user_channel_t::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_user_channel_t.Finalize
void GlobalNamespace::vx_user_channel_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_user_channel_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vx_voice_font_t
#include "GlobalNamespace/vx_voice_font_t.hpp"
// Including type: vx_font_type
#include "GlobalNamespace/vx_font_type.hpp"
// Including type: vx_font_status
#include "GlobalNamespace/vx_font_status.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vx_voice_font_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vx_voice_font_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vx_voice_font_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vx_voice_font_t::getCPtr(::GlobalNamespace::vx_voice_font_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vx_voice_font_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vx_voice_font_t.Dispose
void GlobalNamespace::vx_voice_font_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vx_voice_font_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_id
void GlobalNamespace::vx_voice_font_t::set_id(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_id
int GlobalNamespace::vx_voice_font_t::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_parent_id
void GlobalNamespace::vx_voice_font_t::set_parent_id(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_parent_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parent_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_parent_id
int GlobalNamespace::vx_voice_font_t::get_parent_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_parent_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parent_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_type
void GlobalNamespace::vx_voice_font_t::set_type(::GlobalNamespace::vx_font_type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_type
::GlobalNamespace::vx_font_type GlobalNamespace::vx_voice_font_t::get_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_font_type, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_name
void GlobalNamespace::vx_voice_font_t::set_name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_name
::StringW GlobalNamespace::vx_voice_font_t::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_description
void GlobalNamespace::vx_voice_font_t::set_description(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_description");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_description
::StringW GlobalNamespace::vx_voice_font_t::get_description() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_description");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_expiration_date
void GlobalNamespace::vx_voice_font_t::set_expiration_date(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_expiration_date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_expiration_date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_expiration_date
::StringW GlobalNamespace::vx_voice_font_t::get_expiration_date() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_expiration_date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_expiration_date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_expired
void GlobalNamespace::vx_voice_font_t::set_expired(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_expired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_expired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_expired
int GlobalNamespace::vx_voice_font_t::get_expired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_expired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_expired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_font_delta
void GlobalNamespace::vx_voice_font_t::set_font_delta(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_font_delta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_font_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_font_delta
::StringW GlobalNamespace::vx_voice_font_t::get_font_delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_font_delta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_font_delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_font_rules
void GlobalNamespace::vx_voice_font_t::set_font_rules(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_font_rules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_font_rules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_font_rules
::StringW GlobalNamespace::vx_voice_font_t::get_font_rules() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_font_rules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_font_rules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.set_status
void GlobalNamespace::vx_voice_font_t::set_status(::GlobalNamespace::vx_font_status value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::set_status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_voice_font_t.get_status
::GlobalNamespace::vx_font_status GlobalNamespace::vx_voice_font_t::get_status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::get_status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_font_status, false>(this, ___internal__method);
}
// Autogenerated method: vx_voice_font_t.Finalize
void GlobalNamespace::vx_voice_font_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_voice_font_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vx_vxd_t
#include "GlobalNamespace/vx_vxd_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vx_vxd_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vx_vxd_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vx_vxd_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vx_vxd_t::getCPtr(::GlobalNamespace::vx_vxd_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vx_vxd_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vx_vxd_t.Dispose
void GlobalNamespace::vx_vxd_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vx_vxd_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vx_vxd_t.set_version
void GlobalNamespace::vx_vxd_t::set_version(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::set_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_vxd_t.get_version
uint GlobalNamespace::vx_vxd_t::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: vx_vxd_t.set_participant_uri
void GlobalNamespace::vx_vxd_t::set_participant_uri(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::set_participant_uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_participant_uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_vxd_t.get_participant_uri
::StringW GlobalNamespace::vx_vxd_t::get_participant_uri() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::get_participant_uri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_participant_uri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_vxd_t.set_data
void GlobalNamespace::vx_vxd_t::set_data(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::set_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_vxd_t.get_data
::StringW GlobalNamespace::vx_vxd_t::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: vx_vxd_t.set_data_size
void GlobalNamespace::vx_vxd_t::set_data_size(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::set_data_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vx_vxd_t.get_data_size
uint GlobalNamespace::vx_vxd_t::get_data_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::get_data_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: vx_vxd_t.Finalize
void GlobalNamespace::vx_vxd_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_vxd_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vxa_apcd_t
#include "GlobalNamespace/vxa_apcd_t.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_apcd__p_char
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_apcd__p_char.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_apcd_int_int__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_apcd_int_int__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_apcd__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_apcd__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vxa_apcd_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vxa_apcd_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vxa_apcd_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vxa_apcd_t::getCPtr(::GlobalNamespace::vxa_apcd_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vxa_apcd_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vxa_apcd_t.Dispose
void GlobalNamespace::vxa_apcd_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vxa_apcd_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_get_display_name
void GlobalNamespace::vxa_apcd_t::set_pf_get_display_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_get_display_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_display_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_get_display_name
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* GlobalNamespace::vxa_apcd_t::get_pf_get_display_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_get_display_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_display_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_get_internal_name
void GlobalNamespace::vxa_apcd_t::set_pf_get_internal_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_get_internal_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_internal_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_get_internal_name
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* GlobalNamespace::vxa_apcd_t::get_pf_get_internal_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_get_internal_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_internal_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_open
void GlobalNamespace::vxa_apcd_t::set_pf_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_open
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int* GlobalNamespace::vxa_apcd_t::get_pf_open() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_is_open
void GlobalNamespace::vxa_apcd_t::set_pf_is_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_is_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_is_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_is_open
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* GlobalNamespace::vxa_apcd_t::get_pf_is_open() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_is_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_is_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_read
void GlobalNamespace::vxa_apcd_t::set_pf_read(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_read
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int* GlobalNamespace::vxa_apcd_t::get_pf_read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_get_stats
void GlobalNamespace::vxa_apcd_t::set_pf_get_stats(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_get_stats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_stats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_get_stats
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int* GlobalNamespace::vxa_apcd_t::get_pf_get_stats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_get_stats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_stats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.set_pf_close
void GlobalNamespace::vxa_apcd_t::set_pf_close(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::set_pf_close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_apcd_t.get_pf_close
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* GlobalNamespace::vxa_apcd_t::get_pf_close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::get_pf_close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_apcd_t.Finalize
void GlobalNamespace::vxa_apcd_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vxa_aprd_t
#include "GlobalNamespace/vxa_aprd_t.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd__p_char
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd__p_char.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd_int__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd_int__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd_int_p_p_void__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd_int_p_p_void__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd_int_p_void_p_void__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd_int_p_void_p_void__int.hpp"
// Including type: SWIGTYPE_p_f_p_vxa_aprd_p_vxa_render_device_stats_t__int
#include "GlobalNamespace/SWIGTYPE_p_f_p_vxa_aprd_p_vxa_render_device_stats_t__int.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vxa_aprd_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vxa_aprd_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vxa_aprd_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vxa_aprd_t::getCPtr(::GlobalNamespace::vxa_aprd_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vxa_aprd_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vxa_aprd_t.Dispose
void GlobalNamespace::vxa_aprd_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vxa_aprd_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_get_display_name
void GlobalNamespace::vxa_aprd_t::set_pf_get_display_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_get_display_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_display_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_get_display_name
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char* GlobalNamespace::vxa_aprd_t::get_pf_get_display_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_get_display_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_display_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_get_internal_name
void GlobalNamespace::vxa_aprd_t::set_pf_get_internal_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_get_internal_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_internal_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_get_internal_name
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char* GlobalNamespace::vxa_aprd_t::get_pf_get_internal_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_get_internal_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_internal_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__p_char*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_open
void GlobalNamespace::vxa_aprd_t::set_pf_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_open
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int__int* GlobalNamespace::vxa_aprd_t::get_pf_open() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_is_open
void GlobalNamespace::vxa_aprd_t::set_pf_is_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_is_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_is_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_is_open
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int* GlobalNamespace::vxa_aprd_t::get_pf_is_open() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_is_open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_is_open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_get_buffer
void GlobalNamespace::vxa_aprd_t::set_pf_get_buffer(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_p_void__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_get_buffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_buffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_get_buffer
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_p_void__int* GlobalNamespace::vxa_aprd_t::get_pf_get_buffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_get_buffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_buffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_p_void__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_release_buffer
void GlobalNamespace::vxa_aprd_t::set_pf_release_buffer(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_void_p_void__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_release_buffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_release_buffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_release_buffer
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_void_p_void__int* GlobalNamespace::vxa_aprd_t::get_pf_release_buffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_release_buffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_release_buffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_int_p_void_p_void__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_get_stats
void GlobalNamespace::vxa_aprd_t::set_pf_get_stats(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_p_vxa_render_device_stats_t__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_get_stats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_get_stats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_get_stats
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_p_vxa_render_device_stats_t__int* GlobalNamespace::vxa_aprd_t::get_pf_get_stats() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_get_stats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_get_stats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd_p_vxa_render_device_stats_t__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.set_pf_close
void GlobalNamespace::vxa_aprd_t::set_pf_close(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::set_pf_close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pf_close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_aprd_t.get_pf_close
::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int* GlobalNamespace::vxa_aprd_t::get_pf_close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::get_pf_close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pf_close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_aprd__int*, false>(this, ___internal__method);
}
// Autogenerated method: vxa_aprd_t.Finalize
void GlobalNamespace::vxa_aprd_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_aprd_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vxa_capture_device_stats_t
#include "GlobalNamespace/vxa_capture_device_stats_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vxa_capture_device_stats_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vxa_capture_device_stats_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vxa_capture_device_stats_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vxa_capture_device_stats_t::getCPtr(::GlobalNamespace::vxa_capture_device_stats_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vxa_capture_device_stats_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vxa_capture_device_stats_t.Dispose
void GlobalNamespace::vxa_capture_device_stats_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vxa_capture_device_stats_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.set_buffer_underrun_count
void GlobalNamespace::vxa_capture_device_stats_t::set_buffer_underrun_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::set_buffer_underrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buffer_underrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_capture_device_stats_t.get_buffer_underrun_count
int GlobalNamespace::vxa_capture_device_stats_t::get_buffer_underrun_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::get_buffer_underrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buffer_underrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.set_buffer_overrun_count
void GlobalNamespace::vxa_capture_device_stats_t::set_buffer_overrun_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::set_buffer_overrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buffer_overrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_capture_device_stats_t.get_buffer_overrun_count
int GlobalNamespace::vxa_capture_device_stats_t::get_buffer_overrun_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::get_buffer_overrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buffer_overrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.set_other_error_count
void GlobalNamespace::vxa_capture_device_stats_t::set_other_error_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::set_other_error_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_other_error_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_capture_device_stats_t.get_other_error_count
int GlobalNamespace::vxa_capture_device_stats_t::get_other_error_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::get_other_error_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_other_error_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.set_audio_queue_read_count
void GlobalNamespace::vxa_capture_device_stats_t::set_audio_queue_read_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::set_audio_queue_read_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_audio_queue_read_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_capture_device_stats_t.get_audio_queue_read_count
int GlobalNamespace::vxa_capture_device_stats_t::get_audio_queue_read_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::get_audio_queue_read_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audio_queue_read_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.set_audio_queue_write_count
void GlobalNamespace::vxa_capture_device_stats_t::set_audio_queue_write_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::set_audio_queue_write_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_audio_queue_write_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_capture_device_stats_t.get_audio_queue_write_count
int GlobalNamespace::vxa_capture_device_stats_t::get_audio_queue_write_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::get_audio_queue_write_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audio_queue_write_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_capture_device_stats_t.Finalize
void GlobalNamespace::vxa_capture_device_stats_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_capture_device_stats_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VXA_CAPTURE_FLAGS
#include "GlobalNamespace/VXA_CAPTURE_FLAGS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VXA_CAPTURE_FLAGS VXA_CAPTURE_OPEN_FLAG_USE_AEC
::GlobalNamespace::VXA_CAPTURE_FLAGS GlobalNamespace::VXA_CAPTURE_FLAGS::_get_VXA_CAPTURE_OPEN_FLAG_USE_AEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_CAPTURE_FLAGS::_get_VXA_CAPTURE_OPEN_FLAG_USE_AEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_CAPTURE_FLAGS>("", "VXA_CAPTURE_FLAGS", "VXA_CAPTURE_OPEN_FLAG_USE_AEC"));
}
// Autogenerated static field setter
// Set static field: static public VXA_CAPTURE_FLAGS VXA_CAPTURE_OPEN_FLAG_USE_AEC
void GlobalNamespace::VXA_CAPTURE_FLAGS::_set_VXA_CAPTURE_OPEN_FLAG_USE_AEC(::GlobalNamespace::VXA_CAPTURE_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_CAPTURE_FLAGS::_set_VXA_CAPTURE_OPEN_FLAG_USE_AEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_CAPTURE_FLAGS", "VXA_CAPTURE_OPEN_FLAG_USE_AEC", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_CAPTURE_FLAGS VXA_CAPTURE_OPEN_FLAG_USE_AGC
::GlobalNamespace::VXA_CAPTURE_FLAGS GlobalNamespace::VXA_CAPTURE_FLAGS::_get_VXA_CAPTURE_OPEN_FLAG_USE_AGC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_CAPTURE_FLAGS::_get_VXA_CAPTURE_OPEN_FLAG_USE_AGC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_CAPTURE_FLAGS>("", "VXA_CAPTURE_FLAGS", "VXA_CAPTURE_OPEN_FLAG_USE_AGC"));
}
// Autogenerated static field setter
// Set static field: static public VXA_CAPTURE_FLAGS VXA_CAPTURE_OPEN_FLAG_USE_AGC
void GlobalNamespace::VXA_CAPTURE_FLAGS::_set_VXA_CAPTURE_OPEN_FLAG_USE_AGC(::GlobalNamespace::VXA_CAPTURE_FLAGS value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_CAPTURE_FLAGS::_set_VXA_CAPTURE_OPEN_FLAG_USE_AGC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_CAPTURE_FLAGS", "VXA_CAPTURE_OPEN_FLAG_USE_AGC", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VXA_CAPTURE_FLAGS::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_CAPTURE_FLAGS::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VXA_ERROR_CODES
#include "GlobalNamespace/VXA_ERROR_CODES.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_SUCCESS
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_SUCCESS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_SUCCESS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_SUCCESS"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_SUCCESS
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_SUCCESS(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_SUCCESS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_SUCCESS", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_INVALID_PARAMETER
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INVALID_PARAMETER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INVALID_PARAMETER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_INVALID_PARAMETER"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_INVALID_PARAMETER
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INVALID_PARAMETER(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INVALID_PARAMETER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_INVALID_PARAMETER", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_DEVICE_DOES_NOT_EXIST
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_DEVICE_DOES_NOT_EXIST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_DEVICE_DOES_NOT_EXIST");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_DEVICE_DOES_NOT_EXIST"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_DEVICE_DOES_NOT_EXIST
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_DEVICE_DOES_NOT_EXIST(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_DEVICE_DOES_NOT_EXIST");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_DEVICE_DOES_NOT_EXIST", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_INTERNAL_ERROR
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INTERNAL_ERROR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INTERNAL_ERROR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_INTERNAL_ERROR"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_INTERNAL_ERROR
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INTERNAL_ERROR(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INTERNAL_ERROR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_INTERNAL_ERROR", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_OUT_OF_MEMORY
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_OUT_OF_MEMORY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_OUT_OF_MEMORY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_OUT_OF_MEMORY"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_OUT_OF_MEMORY
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_OUT_OF_MEMORY(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_OUT_OF_MEMORY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_OUT_OF_MEMORY", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_INVALID_STATE
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INVALID_STATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_INVALID_STATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_INVALID_STATE"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_INVALID_STATE
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INVALID_STATE(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_INVALID_STATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_INVALID_STATE", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_NO_MORE_DATA
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_NO_MORE_DATA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_NO_MORE_DATA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_NO_MORE_DATA"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_NO_MORE_DATA
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_NO_MORE_DATA(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_NO_MORE_DATA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_NO_MORE_DATA", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_FEATURE_NOT_SUPPORTED
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_FEATURE_NOT_SUPPORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_FEATURE_NOT_SUPPORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_FEATURE_NOT_SUPPORTED"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_FEATURE_NOT_SUPPORTED
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_FEATURE_NOT_SUPPORTED(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_FEATURE_NOT_SUPPORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_FEATURE_NOT_SUPPORTED", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_MAX_DEVICES_EXCEEDED
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_MAX_DEVICES_EXCEEDED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_MAX_DEVICES_EXCEEDED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_MAX_DEVICES_EXCEEDED"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_MAX_DEVICES_EXCEEDED
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_MAX_DEVICES_EXCEEDED(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_MAX_DEVICES_EXCEEDED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_MAX_DEVICES_EXCEEDED", value));
}
// Autogenerated static field getter
// Get static field: static public VXA_ERROR_CODES VXA_NO_BUFFERS_AVAILABLE
::GlobalNamespace::VXA_ERROR_CODES GlobalNamespace::VXA_ERROR_CODES::_get_VXA_NO_BUFFERS_AVAILABLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_get_VXA_NO_BUFFERS_AVAILABLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VXA_ERROR_CODES>("", "VXA_ERROR_CODES", "VXA_NO_BUFFERS_AVAILABLE"));
}
// Autogenerated static field setter
// Set static field: static public VXA_ERROR_CODES VXA_NO_BUFFERS_AVAILABLE
void GlobalNamespace::VXA_ERROR_CODES::_set_VXA_NO_BUFFERS_AVAILABLE(::GlobalNamespace::VXA_ERROR_CODES value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::_set_VXA_NO_BUFFERS_AVAILABLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VXA_ERROR_CODES", "VXA_NO_BUFFERS_AVAILABLE", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VXA_ERROR_CODES::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VXA_ERROR_CODES::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: vxa_render_device_stats_t
#include "GlobalNamespace/vxa_render_device_stats_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Runtime.InteropServices.HandleRef swigCPtr
[[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& GlobalNamespace::vxa_render_device_stats_t::dyn_swigCPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::dyn_swigCPtr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCPtr"))->offset;
  return *reinterpret_cast<::System::Runtime::InteropServices::HandleRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean swigCMemOwn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::vxa_render_device_stats_t::dyn_swigCMemOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::dyn_swigCMemOwn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "swigCMemOwn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: vxa_render_device_stats_t.getCPtr
::System::Runtime::InteropServices::HandleRef GlobalNamespace::vxa_render_device_stats_t::getCPtr(::GlobalNamespace::vxa_render_device_stats_t* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::getCPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "vxa_render_device_stats_t", "getCPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::InteropServices::HandleRef, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: vxa_render_device_stats_t.Dispose
void GlobalNamespace::vxa_render_device_stats_t::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::vxa_render_device_stats_t*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_current_output_queue_depth_milliseconds
void GlobalNamespace::vxa_render_device_stats_t::set_current_output_queue_depth_milliseconds(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_current_output_queue_depth_milliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_current_output_queue_depth_milliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_current_output_queue_depth_milliseconds
int GlobalNamespace::vxa_render_device_stats_t::get_current_output_queue_depth_milliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_current_output_queue_depth_milliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_current_output_queue_depth_milliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_buffer_underrun_count
void GlobalNamespace::vxa_render_device_stats_t::set_buffer_underrun_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_buffer_underrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buffer_underrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_buffer_underrun_count
int GlobalNamespace::vxa_render_device_stats_t::get_buffer_underrun_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_buffer_underrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buffer_underrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_buffer_overrun_count
void GlobalNamespace::vxa_render_device_stats_t::set_buffer_overrun_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_buffer_overrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buffer_overrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_buffer_overrun_count
int GlobalNamespace::vxa_render_device_stats_t::get_buffer_overrun_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_buffer_overrun_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buffer_overrun_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_other_error_count
void GlobalNamespace::vxa_render_device_stats_t::set_other_error_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_other_error_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_other_error_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_other_error_count
int GlobalNamespace::vxa_render_device_stats_t::get_other_error_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_other_error_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_other_error_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_audio_queue_read_count
void GlobalNamespace::vxa_render_device_stats_t::set_audio_queue_read_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_audio_queue_read_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_audio_queue_read_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_audio_queue_read_count
int GlobalNamespace::vxa_render_device_stats_t::get_audio_queue_read_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_audio_queue_read_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audio_queue_read_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_audio_queue_write_count
void GlobalNamespace::vxa_render_device_stats_t::set_audio_queue_write_count(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_audio_queue_write_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_audio_queue_write_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_audio_queue_write_count
int GlobalNamespace::vxa_render_device_stats_t::get_audio_queue_write_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_audio_queue_write_count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audio_queue_write_count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_hardware_output_channels
void GlobalNamespace::vxa_render_device_stats_t::set_hardware_output_channels(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_hardware_output_channels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hardware_output_channels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_hardware_output_channels
int GlobalNamespace::vxa_render_device_stats_t::get_hardware_output_channels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_hardware_output_channels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hardware_output_channels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_hardware_preferred_samplerate
void GlobalNamespace::vxa_render_device_stats_t::set_hardware_preferred_samplerate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_hardware_preferred_samplerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hardware_preferred_samplerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_hardware_preferred_samplerate
int GlobalNamespace::vxa_render_device_stats_t::get_hardware_preferred_samplerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_hardware_preferred_samplerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hardware_preferred_samplerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.set_hardware_preferred_buffer_duration
void GlobalNamespace::vxa_render_device_stats_t::set_hardware_preferred_buffer_duration(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::set_hardware_preferred_buffer_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hardware_preferred_buffer_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: vxa_render_device_stats_t.get_hardware_preferred_buffer_duration
int GlobalNamespace::vxa_render_device_stats_t::get_hardware_preferred_buffer_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::get_hardware_preferred_buffer_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hardware_preferred_buffer_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: vxa_render_device_stats_t.Finalize
void GlobalNamespace::vxa_render_device_stats_t::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_render_device_stats_t::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LoopDone
#include "GlobalNamespace/LoopDone.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LoopDone.Invoke
bool GlobalNamespace::LoopDone::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LoopDone::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LoopDone*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LoopDone.BeginInvoke
::System::IAsyncResult* GlobalNamespace::LoopDone::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LoopDone::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LoopDone*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: LoopDone.EndInvoke
bool GlobalNamespace::LoopDone::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LoopDone::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LoopDone*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RunLoop
#include "GlobalNamespace/RunLoop.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RunLoop.Invoke
void GlobalNamespace::RunLoop::Invoke(ByRef<bool> didWork) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RunLoop::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RunLoop*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(didWork));
}
// Autogenerated method: RunLoop.BeginInvoke
::System::IAsyncResult* GlobalNamespace::RunLoop::BeginInvoke(ByRef<bool> didWork, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RunLoop::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RunLoop*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, byref(didWork), callback, object);
}
// Autogenerated method: RunLoop.EndInvoke
void GlobalNamespace::RunLoop::EndInvoke(ByRef<bool> didWork, ::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RunLoop::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RunLoop*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(didWork), result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Waiter
#include "GlobalNamespace/Waiter.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _waitHandle
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& GlobalNamespace::Waiter::dyn__waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Waiter::dyn__waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitHandle"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _until
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::Waiter::dyn__until() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Waiter::dyn__until");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_until"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Waiter.IsDone
bool GlobalNamespace::Waiter::IsDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Waiter::IsDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MessagePump
#include "GlobalNamespace/MessagePump.hpp"
// Including type: MessagePump/DoneDelegate
#include "GlobalNamespace/MessagePump_DoneDelegate.hpp"
// Including type: MessagePump/<>c__DisplayClass10_0
#include "GlobalNamespace/MessagePump_--c__DisplayClass10_0.hpp"
// Including type: RunLoop
#include "GlobalNamespace/RunLoop.hpp"
// Including type: LoopDone
#include "GlobalNamespace/LoopDone.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private MessagePump _instance
::GlobalNamespace::MessagePump* GlobalNamespace::MessagePump::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MessagePump*>("", "MessagePump", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private MessagePump _instance
void GlobalNamespace::MessagePump::_set__instance(::GlobalNamespace::MessagePump* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MessagePump", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: private RunLoop MainLoopRun
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RunLoop*& GlobalNamespace::MessagePump::dyn_MainLoopRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::dyn_MainLoopRun");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MainLoopRun"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RunLoop**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MessagePump.add_MainLoopRun
void GlobalNamespace::MessagePump::add_MainLoopRun(::GlobalNamespace::RunLoop* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::add_MainLoopRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_MainLoopRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MessagePump.remove_MainLoopRun
void GlobalNamespace::MessagePump::remove_MainLoopRun(::GlobalNamespace::RunLoop* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::remove_MainLoopRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_MainLoopRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MessagePump.get_Instance
::GlobalNamespace::MessagePump* GlobalNamespace::MessagePump::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MessagePump", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::MessagePump*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MessagePump.RunUntil
void GlobalNamespace::MessagePump::RunUntil(::GlobalNamespace::LoopDone* done) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::RunUntil");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunUntil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(done)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, done);
}
// Autogenerated method: MessagePump.RunOnce
void GlobalNamespace::MessagePump::RunOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::RunOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MessagePump.IsDone
bool GlobalNamespace::MessagePump::IsDone(::System::Threading::WaitHandle* handle, ::System::DateTime until) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::IsDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MessagePump", "IsDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(until)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle, until);
}
// Autogenerated method: MessagePump.Run
bool GlobalNamespace::MessagePump::Run(::System::Threading::WaitHandle* handle, ::System::TimeSpan until) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MessagePump", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(until)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle, until);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: MessagePump/DoneDelegate
#include "GlobalNamespace/MessagePump_DoneDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MessagePump/DoneDelegate.Invoke
bool GlobalNamespace::MessagePump::DoneDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::DoneDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::MessagePump::DoneDelegate*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MessagePump/DoneDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::MessagePump::DoneDelegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::DoneDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::MessagePump::DoneDelegate*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: MessagePump/DoneDelegate.EndInvoke
bool GlobalNamespace::MessagePump::DoneDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::DoneDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::MessagePump::DoneDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MessagePump/<>c__DisplayClass10_0
#include "GlobalNamespace/MessagePump_--c__DisplayClass10_0.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Threading.WaitHandle handle
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& GlobalNamespace::MessagePump::$$c__DisplayClass10_0::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::$$c__DisplayClass10_0::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.DateTime then
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::MessagePump::$$c__DisplayClass10_0::dyn_then() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::$$c__DisplayClass10_0::dyn_then");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "then"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MessagePump/<>c__DisplayClass10_0.<Run>b__0
bool GlobalNamespace::MessagePump::$$c__DisplayClass10_0::$Run$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::$$c__DisplayClass10_0::<Run>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 _accountNameMaxLength
int VivoxUnity::AccountId::_get__accountNameMaxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::_get__accountNameMaxLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VivoxUnity", "AccountId", "_accountNameMaxLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 _accountNameMaxLength
void VivoxUnity::AccountId::_set__accountNameMaxLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::_set__accountNameMaxLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "AccountId", "_accountNameMaxLength", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _domain
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::AccountId::dyn__domain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::dyn__domain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_domain"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _name
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::AccountId::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _issuer
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::AccountId::dyn__issuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::dyn__issuer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_issuer"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _displayname
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::AccountId::dyn__displayname() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::dyn__displayname");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_displayname"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String[] _spokenLanguages
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& VivoxUnity::AccountId::dyn__spokenLanguages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::dyn__spokenLanguages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_spokenLanguages"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.AccountId.get_Issuer
::StringW VivoxUnity::AccountId::get_Issuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_Issuer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Issuer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.get_Name
::StringW VivoxUnity::AccountId::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.get_Domain
::StringW VivoxUnity::AccountId::get_Domain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_Domain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Domain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.get_SpokenLanguages
::ArrayW<::StringW> VivoxUnity::AccountId::get_SpokenLanguages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_SpokenLanguages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SpokenLanguages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::StringW>, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.get_AccountName
::StringW VivoxUnity::AccountId::get_AccountName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_AccountName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AccountName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.get_DisplayName
::StringW VivoxUnity::AccountId::get_DisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_DisplayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.Equals
bool VivoxUnity::AccountId::Equals(::VivoxUnity::AccountId* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: VivoxUnity.AccountId.get_IsEmpty
bool VivoxUnity::AccountId::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.IsNullOrEmpty
bool VivoxUnity::AccountId::IsNullOrEmpty(::VivoxUnity::AccountId* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::IsNullOrEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "AccountId", "IsNullOrEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, id);
}
// Autogenerated method: VivoxUnity.AccountId.IsValidName
bool VivoxUnity::AccountId::IsValidName(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::IsValidName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: VivoxUnity.AccountId.Equals
bool VivoxUnity::AccountId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: VivoxUnity.AccountId.GetHashCode
int VivoxUnity::AccountId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AccountId.ToString
::StringW VivoxUnity::AccountId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AccountId::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.AsyncNoResult
#include "VivoxUnity/AsyncNoResult.hpp"
// Including type: System.Threading.EventWaitHandle
#include "System/Threading/EventWaitHandle.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.EventWaitHandle _waitHandle
[[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& VivoxUnity::AsyncNoResult::dyn__waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn__waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitHandle"))->offset;
  return *reinterpret_cast<::System::Threading::EventWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Exception _exception
[[deprecated("Use field access instead!")]] ::System::Exception*& VivoxUnity::AsyncNoResult::dyn__exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn__exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exception"))->offset;
  return *reinterpret_cast<::System::Exception**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.AsyncCallback <Callback>k__BackingField
[[deprecated("Use field access instead!")]] ::System::AsyncCallback*& VivoxUnity::AsyncNoResult::dyn_$Callback$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn_$Callback$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Callback>k__BackingField"))->offset;
  return *reinterpret_cast<::System::AsyncCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <AsyncState>k__BackingField
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VivoxUnity::AsyncNoResult::dyn_$AsyncState$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn_$AsyncState$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AsyncState>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <CompletedSynchronously>k__BackingField
[[deprecated("Use field access instead!")]] bool& VivoxUnity::AsyncNoResult::dyn_$CompletedSynchronously$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn_$CompletedSynchronously$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CompletedSynchronously>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsCompleted>k__BackingField
[[deprecated("Use field access instead!")]] bool& VivoxUnity::AsyncNoResult::dyn_$IsCompleted$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::dyn_$IsCompleted$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsCompleted>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.get_Callback
::System::AsyncCallback* VivoxUnity::AsyncNoResult::get_Callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::get_Callback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Callback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AsyncCallback*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.set_Callback
void VivoxUnity::AsyncNoResult::set_Callback(::System::AsyncCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::set_Callback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Callback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.get_AsyncState
::Il2CppObject* VivoxUnity::AsyncNoResult::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncNoResult*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.set_AsyncState
void VivoxUnity::AsyncNoResult::set_AsyncState(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::set_AsyncState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* VivoxUnity::AsyncNoResult::get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncNoResult*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.CheckForError
void VivoxUnity::AsyncNoResult::CheckForError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::CheckForError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.get_CompletedSynchronously
bool VivoxUnity::AsyncNoResult::get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncNoResult*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.set_CompletedSynchronously
void VivoxUnity::AsyncNoResult::set_CompletedSynchronously(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::set_CompletedSynchronously");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.get_IsCompleted
bool VivoxUnity::AsyncNoResult::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncNoResult*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.set_IsCompleted
void VivoxUnity::AsyncNoResult::set_IsCompleted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::set_IsCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.SetComplete
void VivoxUnity::AsyncNoResult::SetComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::SetComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.SetCompletedSynchronously
void VivoxUnity::AsyncNoResult::SetCompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::SetCompletedSynchronously");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.SetComplete
void VivoxUnity::AsyncNoResult::SetComplete(::System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::SetComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exception);
}
// Autogenerated method: VivoxUnity.AsyncNoResult.Dispose
void VivoxUnity::AsyncNoResult::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncNoResult*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.Channel3DProperties
#include "VivoxUnity/Channel3DProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _audibleDistance
[[deprecated("Use field access instead!")]] int& VivoxUnity::Channel3DProperties::dyn__audibleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::dyn__audibleDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audibleDistance"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _conversationalDistance
[[deprecated("Use field access instead!")]] int& VivoxUnity::Channel3DProperties::dyn__conversationalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::dyn__conversationalDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_conversationalDistance"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Single _audioFadeIntensityByDistance
[[deprecated("Use field access instead!")]] float& VivoxUnity::Channel3DProperties::dyn__audioFadeIntensityByDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::dyn__audioFadeIntensityByDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioFadeIntensityByDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.AudioFadeModel _audioFadeModel
[[deprecated("Use field access instead!")]] ::VivoxUnity::AudioFadeModel& VivoxUnity::Channel3DProperties::dyn__audioFadeModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::dyn__audioFadeModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioFadeModel"))->offset;
  return *reinterpret_cast<::VivoxUnity::AudioFadeModel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.get_AudibleDistance
int VivoxUnity::Channel3DProperties::get_AudibleDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::get_AudibleDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AudibleDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.get_ConversationalDistance
int VivoxUnity::Channel3DProperties::get_ConversationalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::get_ConversationalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConversationalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.get_AudioFadeIntensityByDistance
float VivoxUnity::Channel3DProperties::get_AudioFadeIntensityByDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::get_AudioFadeIntensityByDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AudioFadeIntensityByDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.get_AudioFadeModel
::VivoxUnity::AudioFadeModel VivoxUnity::Channel3DProperties::get_AudioFadeModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::get_AudioFadeModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AudioFadeModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AudioFadeModel, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.IsValid
bool VivoxUnity::Channel3DProperties::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Channel3DProperties.ToString
::StringW VivoxUnity::Channel3DProperties::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.ChannelId
#include "VivoxUnity/ChannelId.hpp"
// Including type: VivoxUnity.Channel3DProperties
#include "VivoxUnity/Channel3DProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String _domain
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::ChannelId::dyn__domain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::dyn__domain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_domain"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _name
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::ChannelId::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _issuer
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::ChannelId::dyn__issuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::dyn__issuer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_issuer"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.ChannelType _type
[[deprecated("Use field access instead!")]] ::VivoxUnity::ChannelType& VivoxUnity::ChannelId::dyn__type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::dyn__type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_type"))->offset;
  return *reinterpret_cast<::VivoxUnity::ChannelType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.Channel3DProperties _properties
[[deprecated("Use field access instead!")]] ::VivoxUnity::Channel3DProperties*& VivoxUnity::ChannelId::dyn__properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::dyn__properties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_properties"))->offset;
  return *reinterpret_cast<::VivoxUnity::Channel3DProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.ChannelId.GetUriDesignator
::StringW VivoxUnity::ChannelId::GetUriDesignator(::VivoxUnity::ChannelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::GetUriDesignator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUriDesignator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ChannelId.get_Issuer
::StringW VivoxUnity::ChannelId::get_Issuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_Issuer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Issuer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.get_Name
::StringW VivoxUnity::ChannelId::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.get_Domain
::StringW VivoxUnity::ChannelId::get_Domain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_Domain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Domain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.get_Type
::VivoxUnity::ChannelType VivoxUnity::ChannelId::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ChannelType, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.get_Properties
::VivoxUnity::Channel3DProperties* VivoxUnity::ChannelId::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_Properties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Channel3DProperties*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.Equals
bool VivoxUnity::ChannelId::Equals(::VivoxUnity::ChannelId* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: VivoxUnity.ChannelId.get_IsEmpty
bool VivoxUnity::ChannelId::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.IsNullOrEmpty
bool VivoxUnity::ChannelId::IsNullOrEmpty(::VivoxUnity::ChannelId* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::IsNullOrEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "ChannelId", "IsNullOrEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, id);
}
// Autogenerated method: VivoxUnity.ChannelId.IsValid
bool VivoxUnity::ChannelId::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.IsValidName
bool VivoxUnity::ChannelId::IsValidName(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::IsValidName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, name);
}
// Autogenerated method: VivoxUnity.ChannelId.Equals
bool VivoxUnity::ChannelId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: VivoxUnity.ChannelId.GetHashCode
int VivoxUnity::ChannelId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ChannelId.ToString
::StringW VivoxUnity::ChannelId::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Client
#include "VivoxUnity/Client.hpp"
// Including type: VivoxUnity.Client/<>c__DisplayClass12_0
#include "VivoxUnity/Client_--c__DisplayClass12_0.hpp"
// Including type: VivoxUnity.Client/<>c__DisplayClass18_0
#include "VivoxUnity/Client_--c__DisplayClass18_0.hpp"
// Including type: VivoxUnity.Client/<>c__DisplayClass34_0
#include "VivoxUnity/Client_--c__DisplayClass34_0.hpp"
// Including type: VivoxUnity.Client/<>c
#include "VivoxUnity/Client_--c.hpp"
// Including type: VivoxUnity.Common.ReadWriteDictionary`3
#include "VivoxUnity/Common/ReadWriteDictionary_3.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.Private.LoginSession
#include "VivoxUnity/Private/LoginSession.hpp"
// Including type: VivoxUnity.Private.AudioInputDevices
#include "VivoxUnity/Private/AudioInputDevices.hpp"
// Including type: VivoxUnity.Private.AudioOutputDevices
#include "VivoxUnity/Private/AudioOutputDevices.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: VivoxUnity.VivoxConfig
#include "VivoxUnity/VivoxConfig.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
// Including type: VivoxUnity.IAudioDevices
#include "VivoxUnity/IAudioDevices.hpp"
// Including type: LoopDone
#include "GlobalNamespace/LoopDone.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 _nextHandle
int VivoxUnity::Client::_get__nextHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::_get__nextHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("VivoxUnity", "Client", "_nextHandle"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _nextHandle
void VivoxUnity::Client::_set__nextHandle(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::_set__nextHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "Client", "_nextHandle", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.AccountId,VivoxUnity.ILoginSession,VivoxUnity.Private.LoginSession> _loginSessions
[[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*, ::VivoxUnity::Private::LoginSession*>*& VivoxUnity::Client::dyn__loginSessions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__loginSessions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loginSessions"))->offset;
  return *reinterpret_cast<::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*, ::VivoxUnity::Private::LoginSession*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.Private.AudioInputDevices _inputDevices
[[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioInputDevices*& VivoxUnity::Client::dyn__inputDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__inputDevices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputDevices"))->offset;
  return *reinterpret_cast<::VivoxUnity::Private::AudioInputDevices**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.Private.AudioOutputDevices _outputDevices
[[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioOutputDevices*& VivoxUnity::Client::dyn__outputDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__outputDevices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputDevices"))->offset;
  return *reinterpret_cast<::VivoxUnity::Private::AudioOutputDevices**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _connectorHandle
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Client::dyn__connectorHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__connectorHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectorHandle"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<System.IAsyncResult> _pendingConnectorCreateRequests
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::IAsyncResult*>*& VivoxUnity::Client::dyn__pendingConnectorCreateRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__pendingConnectorCreateRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pendingConnectorCreateRequests"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::System::IAsyncResult*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ttsIsInitialized
[[deprecated("Use field access instead!")]] bool& VivoxUnity::Client::dyn__ttsIsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__ttsIsInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ttsIsInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _ttsManagerId
[[deprecated("Use field access instead!")]] uint& VivoxUnity::Client::dyn__ttsManagerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::dyn__ttsManagerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ttsManagerId"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Client.get_TTSManagerId
uint VivoxUnity::Client::get_TTSManagerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_TTSManagerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TTSManagerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.CheckInitialized
void VivoxUnity::Client::CheckInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::CheckInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.Initialize
void VivoxUnity::Client::Initialize(::VivoxUnity::VivoxConfig* config) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, config);
}
// Autogenerated method: VivoxUnity.Client.BeginGetConnectorHandle
::System::IAsyncResult* VivoxUnity::Client::BeginGetConnectorHandle(::System::Uri* server, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::BeginGetConnectorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginGetConnectorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(server), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, server, callback);
}
// Autogenerated method: VivoxUnity.Client.EndGetConnectorHandle
::StringW VivoxUnity::Client::EndGetConnectorHandle(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::EndGetConnectorHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndGetConnectorHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.Client.Uninitialize
void VivoxUnity::Client::Uninitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::Uninitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Uninitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.Cleanup
void VivoxUnity::Client::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.get_InternalVersion
::StringW VivoxUnity::Client::get_InternalVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_InternalVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "get_InternalVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.GetLoginSession
::VivoxUnity::ILoginSession* VivoxUnity::Client::GetLoginSession(::VivoxUnity::AccountId* accountId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::GetLoginSession");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLoginSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accountId)})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ILoginSession*, false>(this, ___internal__method, accountId);
}
// Autogenerated method: VivoxUnity.Client.get_Initialized
bool VivoxUnity::Client::get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_Initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.get_LoginSessions
::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*>* VivoxUnity::Client::get_LoginSessions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_LoginSessions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LoginSessions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.get_AudioInputDevices
::VivoxUnity::IAudioDevices* VivoxUnity::Client::get_AudioInputDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_AudioInputDevices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AudioInputDevices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IAudioDevices*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.get_AudioOutputDevices
::VivoxUnity::IAudioDevices* VivoxUnity::Client::get_AudioOutputDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_AudioOutputDevices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AudioOutputDevices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IAudioDevices*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.get_IsAudioEchoCancellationEnabled
bool VivoxUnity::Client::get_IsAudioEchoCancellationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::get_IsAudioEchoCancellationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAudioEchoCancellationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.SetAudioEchoCancellation
void VivoxUnity::Client::SetAudioEchoCancellation(bool onOff) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::SetAudioEchoCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAudioEchoCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onOff)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, onOff);
}
// Autogenerated method: VivoxUnity.Client.System.IDisposable.Dispose
void VivoxUnity::Client::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Client*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.GetRandomUserId
::StringW VivoxUnity::Client::GetRandomUserId(::StringW prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::GetRandomUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "GetRandomUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix);
}
// Autogenerated method: VivoxUnity.Client.GetRandomChannelUri
::StringW VivoxUnity::Client::GetRandomChannelUri(::StringW prefix, ::StringW realm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::GetRandomChannelUri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "GetRandomChannelUri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(realm)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix, realm);
}
// Autogenerated method: VivoxUnity.Client.Run
void VivoxUnity::Client::Run(::GlobalNamespace::LoopDone* done) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(done)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, done);
}
// Autogenerated method: VivoxUnity.Client.Run
bool VivoxUnity::Client::Run(::System::Threading::WaitHandle* handle, ::System::TimeSpan until) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle), ::il2cpp_utils::ExtractType(until)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle, until);
}
// Autogenerated method: VivoxUnity.Client.RunOnce
void VivoxUnity::Client::RunOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::RunOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client", "RunOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.TTSInitialize
bool VivoxUnity::Client::TTSInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::TTSInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TTSInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Client.TTSShutdown
void VivoxUnity::Client::TTSShutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::TTSShutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TTSShutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Client/<>c__DisplayClass12_0
#include "VivoxUnity/Client_--c__DisplayClass12_0.hpp"
// Including type: vx_req_connector_create_t
#include "GlobalNamespace/vx_req_connector_create_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public vx_req_connector_create_t request
[[deprecated("Use field access instead!")]] ::GlobalNamespace::vx_req_connector_create_t*& VivoxUnity::Client::$$c__DisplayClass12_0::dyn_request() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass12_0::dyn_request");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "request"))->offset;
  return *reinterpret_cast<::GlobalNamespace::vx_req_connector_create_t**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VivoxUnity.Client <>4__this
[[deprecated("Use field access instead!")]] ::VivoxUnity::Client*& VivoxUnity::Client::$$c__DisplayClass12_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass12_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VivoxUnity::Client**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String connectorHandle
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Client::$$c__DisplayClass12_0::dyn_connectorHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass12_0::dyn_connectorHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectorHandle"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Client/<>c__DisplayClass12_0.<BeginGetConnectorHandle>b__0
void VivoxUnity::Client::$$c__DisplayClass12_0::$BeginGetConnectorHandle$b__0(::System::IAsyncResult* ar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass12_0::<BeginGetConnectorHandle>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BeginGetConnectorHandle>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ar);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.Client/<>c__DisplayClass18_0
#include "VivoxUnity/Client_--c__DisplayClass18_0.hpp"
// Including type: VivoxUnity.Private.LoginSession
#include "VivoxUnity/Private/LoginSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: System.ComponentModel.PropertyChangedEventArgs
#include "System/ComponentModel/PropertyChangedEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public VivoxUnity.Private.LoginSession loginSession
[[deprecated("Use field access instead!")]] ::VivoxUnity::Private::LoginSession*& VivoxUnity::Client::$$c__DisplayClass18_0::dyn_loginSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass18_0::dyn_loginSession");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loginSession"))->offset;
  return *reinterpret_cast<::VivoxUnity::Private::LoginSession**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VivoxUnity.Client <>4__this
[[deprecated("Use field access instead!")]] ::VivoxUnity::Client*& VivoxUnity::Client::$$c__DisplayClass18_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass18_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::VivoxUnity::Client**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VivoxUnity.AccountId accountId
[[deprecated("Use field access instead!")]] ::VivoxUnity::AccountId*& VivoxUnity::Client::$$c__DisplayClass18_0::dyn_accountId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass18_0::dyn_accountId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accountId"))->offset;
  return *reinterpret_cast<::VivoxUnity::AccountId**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Client/<>c__DisplayClass18_0.<GetLoginSession>b__0
void VivoxUnity::Client::$$c__DisplayClass18_0::$GetLoginSession$b__0(::Il2CppObject* sender, ::System::ComponentModel::PropertyChangedEventArgs* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass18_0::<GetLoginSession>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetLoginSession>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Client/<>c__DisplayClass34_0
#include "VivoxUnity/Client_--c__DisplayClass34_0.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Threading.WaitHandle handle
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& VivoxUnity::Client::$$c__DisplayClass34_0::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass34_0::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.DateTime then
[[deprecated("Use field access instead!")]] ::System::DateTime& VivoxUnity::Client::$$c__DisplayClass34_0::dyn_then() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass34_0::dyn_then");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "then"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Client/<>c__DisplayClass34_0.<Run>b__0
bool VivoxUnity::Client::$$c__DisplayClass34_0::$Run$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c__DisplayClass34_0::<Run>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Client/<>c
#include "VivoxUnity/Client_--c.hpp"
// Including type: LoopDone
#include "GlobalNamespace/LoopDone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly VivoxUnity.Client/<>c <>9
::VivoxUnity::Client::$$c* VivoxUnity::Client::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::VivoxUnity::Client::$$c*>("VivoxUnity", "Client/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly VivoxUnity.Client/<>c <>9
void VivoxUnity::Client::$$c::_set_$$9(::VivoxUnity::Client::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VivoxUnity", "Client/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public LoopDone <>9__35_0
::GlobalNamespace::LoopDone* VivoxUnity::Client::$$c::_get_$$9__35_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::_get_$$9__35_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::LoopDone*>("VivoxUnity", "Client/<>c", "<>9__35_0")));
}
// Autogenerated static field setter
// Set static field: static public LoopDone <>9__35_0
void VivoxUnity::Client::$$c::_set_$$9__35_0(::GlobalNamespace::LoopDone* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::_set_$$9__35_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("VivoxUnity", "Client/<>c", "<>9__35_0", value)));
}
// Autogenerated method: VivoxUnity.Client/<>c..cctor
void VivoxUnity::Client::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Client/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Client/<>c.<RunOnce>b__35_0
bool VivoxUnity::Client::$$c::$RunOnce$b__35_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::$$c::<RunOnce>b__35_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunOnce>b__35_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.LoginState
#include "VivoxUnity/LoginState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.LoginState LoggedOut
::VivoxUnity::LoginState VivoxUnity::LoginState::_get_LoggedOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_get_LoggedOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::LoginState>("VivoxUnity", "LoginState", "LoggedOut"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.LoginState LoggedOut
void VivoxUnity::LoginState::_set_LoggedOut(::VivoxUnity::LoginState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_set_LoggedOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "LoginState", "LoggedOut", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.LoginState LoggedIn
::VivoxUnity::LoginState VivoxUnity::LoginState::_get_LoggedIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_get_LoggedIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::LoginState>("VivoxUnity", "LoginState", "LoggedIn"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.LoginState LoggedIn
void VivoxUnity::LoginState::_set_LoggedIn(::VivoxUnity::LoginState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_set_LoggedIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "LoginState", "LoggedIn", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.LoginState LoggingIn
::VivoxUnity::LoginState VivoxUnity::LoginState::_get_LoggingIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_get_LoggingIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::LoginState>("VivoxUnity", "LoginState", "LoggingIn"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.LoginState LoggingIn
void VivoxUnity::LoginState::_set_LoggingIn(::VivoxUnity::LoginState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_set_LoggingIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "LoginState", "LoggingIn", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.LoginState LoggingOut
::VivoxUnity::LoginState VivoxUnity::LoginState::_get_LoggingOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_get_LoggingOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::LoginState>("VivoxUnity", "LoginState", "LoggingOut"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.LoginState LoggingOut
void VivoxUnity::LoginState::_set_LoggingOut(::VivoxUnity::LoginState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::_set_LoggingOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "LoginState", "LoggingOut", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::LoginState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::LoginState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.SubscriptionMode
#include "VivoxUnity/SubscriptionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.SubscriptionMode Accept
::VivoxUnity::SubscriptionMode VivoxUnity::SubscriptionMode::_get_Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_get_Accept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::SubscriptionMode>("VivoxUnity", "SubscriptionMode", "Accept"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.SubscriptionMode Accept
void VivoxUnity::SubscriptionMode::_set_Accept(::VivoxUnity::SubscriptionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_set_Accept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "SubscriptionMode", "Accept", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.SubscriptionMode Block
::VivoxUnity::SubscriptionMode VivoxUnity::SubscriptionMode::_get_Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_get_Block");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::SubscriptionMode>("VivoxUnity", "SubscriptionMode", "Block"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.SubscriptionMode Block
void VivoxUnity::SubscriptionMode::_set_Block(::VivoxUnity::SubscriptionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_set_Block");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "SubscriptionMode", "Block", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.SubscriptionMode Defer
::VivoxUnity::SubscriptionMode VivoxUnity::SubscriptionMode::_get_Defer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_get_Defer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::SubscriptionMode>("VivoxUnity", "SubscriptionMode", "Defer"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.SubscriptionMode Defer
void VivoxUnity::SubscriptionMode::_set_Defer(::VivoxUnity::SubscriptionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::_set_Defer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "SubscriptionMode", "Defer", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::SubscriptionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::SubscriptionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.PresenceStatus
#include "VivoxUnity/PresenceStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus Available
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_Available() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_Available");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "Available"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus Available
void VivoxUnity::PresenceStatus::_set_Available(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_Available");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "Available", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus DoNotDisturb
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_DoNotDisturb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_DoNotDisturb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "DoNotDisturb"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus DoNotDisturb
void VivoxUnity::PresenceStatus::_set_DoNotDisturb(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_DoNotDisturb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "DoNotDisturb", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus Away
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_Away() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_Away");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "Away"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus Away
void VivoxUnity::PresenceStatus::_set_Away(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_Away");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "Away", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus InACall
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_InACall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_InACall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "InACall"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus InACall
void VivoxUnity::PresenceStatus::_set_InACall(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_InACall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "InACall", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus Unavailable
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_Unavailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_Unavailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "Unavailable"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus Unavailable
void VivoxUnity::PresenceStatus::_set_Unavailable(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_Unavailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "Unavailable", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus Chat
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_Chat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_Chat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "Chat"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus Chat
void VivoxUnity::PresenceStatus::_set_Chat(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_Chat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "Chat", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.PresenceStatus ExtendedAway
::VivoxUnity::PresenceStatus VivoxUnity::PresenceStatus::_get_ExtendedAway() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_get_ExtendedAway");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::PresenceStatus>("VivoxUnity", "PresenceStatus", "ExtendedAway"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.PresenceStatus ExtendedAway
void VivoxUnity::PresenceStatus::_set_ExtendedAway(::VivoxUnity::PresenceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::_set_ExtendedAway");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "PresenceStatus", "ExtendedAway", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::PresenceStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::PresenceStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ParticipantPropertyUpdateFrequency
#include "VivoxUnity/ParticipantPropertyUpdateFrequency.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency StateChange
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ParticipantPropertyUpdateFrequency::_get_StateChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_get_StateChange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ParticipantPropertyUpdateFrequency>("VivoxUnity", "ParticipantPropertyUpdateFrequency", "StateChange"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency StateChange
void VivoxUnity::ParticipantPropertyUpdateFrequency::_set_StateChange(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_set_StateChange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ParticipantPropertyUpdateFrequency", "StateChange", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update00Hz
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update00Hz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update00Hz");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ParticipantPropertyUpdateFrequency>("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update00Hz"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update00Hz
void VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update00Hz(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update00Hz");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update00Hz", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update01Hz
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update01Hz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update01Hz");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ParticipantPropertyUpdateFrequency>("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update01Hz"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update01Hz
void VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update01Hz(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update01Hz");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update01Hz", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update05Hz
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update05Hz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update05Hz");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ParticipantPropertyUpdateFrequency>("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update05Hz"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update05Hz
void VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update05Hz(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update05Hz");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update05Hz", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update10Hz
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update10Hz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_get_Update10Hz");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ParticipantPropertyUpdateFrequency>("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update10Hz"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ParticipantPropertyUpdateFrequency Update10Hz
void VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update10Hz(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::_set_Update10Hz");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ParticipantPropertyUpdateFrequency", "Update10Hz", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::ParticipantPropertyUpdateFrequency::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ParticipantPropertyUpdateFrequency::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ChannelType
#include "VivoxUnity/ChannelType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ChannelType NonPositional
::VivoxUnity::ChannelType VivoxUnity::ChannelType::_get_NonPositional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_get_NonPositional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ChannelType>("VivoxUnity", "ChannelType", "NonPositional"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ChannelType NonPositional
void VivoxUnity::ChannelType::_set_NonPositional(::VivoxUnity::ChannelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_set_NonPositional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ChannelType", "NonPositional", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ChannelType Positional
::VivoxUnity::ChannelType VivoxUnity::ChannelType::_get_Positional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_get_Positional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ChannelType>("VivoxUnity", "ChannelType", "Positional"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ChannelType Positional
void VivoxUnity::ChannelType::_set_Positional(::VivoxUnity::ChannelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_set_Positional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ChannelType", "Positional", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ChannelType Echo
::VivoxUnity::ChannelType VivoxUnity::ChannelType::_get_Echo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_get_Echo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ChannelType>("VivoxUnity", "ChannelType", "Echo"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ChannelType Echo
void VivoxUnity::ChannelType::_set_Echo(::VivoxUnity::ChannelType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::_set_Echo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ChannelType", "Echo", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::ChannelType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.TransmissionMode
#include "VivoxUnity/TransmissionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TransmissionMode None
::VivoxUnity::TransmissionMode VivoxUnity::TransmissionMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TransmissionMode>("VivoxUnity", "TransmissionMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TransmissionMode None
void VivoxUnity::TransmissionMode::_set_None(::VivoxUnity::TransmissionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TransmissionMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TransmissionMode Single
::VivoxUnity::TransmissionMode VivoxUnity::TransmissionMode::_get_Single() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_get_Single");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TransmissionMode>("VivoxUnity", "TransmissionMode", "Single"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TransmissionMode Single
void VivoxUnity::TransmissionMode::_set_Single(::VivoxUnity::TransmissionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_set_Single");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TransmissionMode", "Single", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TransmissionMode All
::VivoxUnity::TransmissionMode VivoxUnity::TransmissionMode::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TransmissionMode>("VivoxUnity", "TransmissionMode", "All"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TransmissionMode All
void VivoxUnity::TransmissionMode::_set_All(::VivoxUnity::TransmissionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TransmissionMode", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::TransmissionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TransmissionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ConnectionState
#include "VivoxUnity/ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ConnectionState Disconnected
::VivoxUnity::ConnectionState VivoxUnity::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ConnectionState>("VivoxUnity", "ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ConnectionState Disconnected
void VivoxUnity::ConnectionState::_set_Disconnected(::VivoxUnity::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ConnectionState Connecting
::VivoxUnity::ConnectionState VivoxUnity::ConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ConnectionState>("VivoxUnity", "ConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ConnectionState Connecting
void VivoxUnity::ConnectionState::_set_Connecting(::VivoxUnity::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ConnectionState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ConnectionState Connected
::VivoxUnity::ConnectionState VivoxUnity::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ConnectionState>("VivoxUnity", "ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ConnectionState Connected
void VivoxUnity::ConnectionState::_set_Connected(::VivoxUnity::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.ConnectionState Disconnecting
::VivoxUnity::ConnectionState VivoxUnity::ConnectionState::_get_Disconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_get_Disconnecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::ConnectionState>("VivoxUnity", "ConnectionState", "Disconnecting"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.ConnectionState Disconnecting
void VivoxUnity::ConnectionState::_set_Disconnecting(::VivoxUnity::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::_set_Disconnecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "ConnectionState", "Disconnecting", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::ConnectionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ConnectionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.AudioFadeModel
#include "VivoxUnity/AudioFadeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.AudioFadeModel None
::VivoxUnity::AudioFadeModel VivoxUnity::AudioFadeModel::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::AudioFadeModel>("VivoxUnity", "AudioFadeModel", "None"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.AudioFadeModel None
void VivoxUnity::AudioFadeModel::_set_None(::VivoxUnity::AudioFadeModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "AudioFadeModel", "None", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.AudioFadeModel InverseByDistance
::VivoxUnity::AudioFadeModel VivoxUnity::AudioFadeModel::_get_InverseByDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_get_InverseByDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::AudioFadeModel>("VivoxUnity", "AudioFadeModel", "InverseByDistance"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.AudioFadeModel InverseByDistance
void VivoxUnity::AudioFadeModel::_set_InverseByDistance(::VivoxUnity::AudioFadeModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_set_InverseByDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "AudioFadeModel", "InverseByDistance", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.AudioFadeModel LinearByDistance
::VivoxUnity::AudioFadeModel VivoxUnity::AudioFadeModel::_get_LinearByDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_get_LinearByDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::AudioFadeModel>("VivoxUnity", "AudioFadeModel", "LinearByDistance"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.AudioFadeModel LinearByDistance
void VivoxUnity::AudioFadeModel::_set_LinearByDistance(::VivoxUnity::AudioFadeModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_set_LinearByDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "AudioFadeModel", "LinearByDistance", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.AudioFadeModel ExponentialByDistance
::VivoxUnity::AudioFadeModel VivoxUnity::AudioFadeModel::_get_ExponentialByDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_get_ExponentialByDistance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::AudioFadeModel>("VivoxUnity", "AudioFadeModel", "ExponentialByDistance"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.AudioFadeModel ExponentialByDistance
void VivoxUnity::AudioFadeModel::_set_ExponentialByDistance(::VivoxUnity::AudioFadeModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::_set_ExponentialByDistance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "AudioFadeModel", "ExponentialByDistance", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::AudioFadeModel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AudioFadeModel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.MediaCodecType
#include "VivoxUnity/MediaCodecType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType PCMU
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_PCMU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_PCMU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "PCMU"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType PCMU
void VivoxUnity::MediaCodecType::_set_PCMU(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_PCMU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "PCMU", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Siren7
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Siren7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Siren7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Siren7"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Siren7
void VivoxUnity::MediaCodecType::_set_Siren7(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Siren7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Siren7", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Siren14
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Siren14() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Siren14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Siren14"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Siren14
void VivoxUnity::MediaCodecType::_set_Siren14(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Siren14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Siren14", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Opus8
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Opus8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Opus8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Opus8"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Opus8
void VivoxUnity::MediaCodecType::_set_Opus8(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Opus8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Opus8", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Opus40
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Opus40() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Opus40");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Opus40"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Opus40
void VivoxUnity::MediaCodecType::_set_Opus40(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Opus40");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Opus40", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Opus57
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Opus57() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Opus57");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Opus57"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Opus57
void VivoxUnity::MediaCodecType::_set_Opus57(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Opus57");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Opus57", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.MediaCodecType Opus72
::VivoxUnity::MediaCodecType VivoxUnity::MediaCodecType::_get_Opus72() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_get_Opus72");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::MediaCodecType>("VivoxUnity", "MediaCodecType", "Opus72"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.MediaCodecType Opus72
void VivoxUnity::MediaCodecType::_set_Opus72(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::_set_Opus72");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "MediaCodecType", "Opus72", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::MediaCodecType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::MediaCodecType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.TTSDestination
#include "VivoxUnity/TTSDestination.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination RemoteTransmission
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_RemoteTransmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_RemoteTransmission");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "RemoteTransmission"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination RemoteTransmission
void VivoxUnity::TTSDestination::_set_RemoteTransmission(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_RemoteTransmission");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "RemoteTransmission", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination LocalPlayback
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_LocalPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_LocalPlayback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "LocalPlayback"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination LocalPlayback
void VivoxUnity::TTSDestination::_set_LocalPlayback(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_LocalPlayback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "LocalPlayback", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination RemoteTransmissionWithLocalPlayback
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_RemoteTransmissionWithLocalPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_RemoteTransmissionWithLocalPlayback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "RemoteTransmissionWithLocalPlayback"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination RemoteTransmissionWithLocalPlayback
void VivoxUnity::TTSDestination::_set_RemoteTransmissionWithLocalPlayback(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_RemoteTransmissionWithLocalPlayback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "RemoteTransmissionWithLocalPlayback", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination QueuedRemoteTransmission
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_QueuedRemoteTransmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_QueuedRemoteTransmission");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "QueuedRemoteTransmission"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination QueuedRemoteTransmission
void VivoxUnity::TTSDestination::_set_QueuedRemoteTransmission(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_QueuedRemoteTransmission");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "QueuedRemoteTransmission", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination QueuedLocalPlayback
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_QueuedLocalPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_QueuedLocalPlayback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "QueuedLocalPlayback"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination QueuedLocalPlayback
void VivoxUnity::TTSDestination::_set_QueuedLocalPlayback(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_QueuedLocalPlayback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "QueuedLocalPlayback", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination QueuedRemoteTransmissionWithLocalPlayback
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_QueuedRemoteTransmissionWithLocalPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_QueuedRemoteTransmissionWithLocalPlayback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "QueuedRemoteTransmissionWithLocalPlayback"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination QueuedRemoteTransmissionWithLocalPlayback
void VivoxUnity::TTSDestination::_set_QueuedRemoteTransmissionWithLocalPlayback(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_QueuedRemoteTransmissionWithLocalPlayback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "QueuedRemoteTransmissionWithLocalPlayback", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSDestination ScreenReader
::VivoxUnity::TTSDestination VivoxUnity::TTSDestination::_get_ScreenReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_get_ScreenReader");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSDestination>("VivoxUnity", "TTSDestination", "ScreenReader"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSDestination ScreenReader
void VivoxUnity::TTSDestination::_set_ScreenReader(::VivoxUnity::TTSDestination value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::_set_ScreenReader");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSDestination", "ScreenReader", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::TTSDestination::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSDestination::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.TTSMessageState
#include "VivoxUnity/TTSMessageState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSMessageState NotEnqueued
::VivoxUnity::TTSMessageState VivoxUnity::TTSMessageState::_get_NotEnqueued() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_get_NotEnqueued");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSMessageState>("VivoxUnity", "TTSMessageState", "NotEnqueued"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSMessageState NotEnqueued
void VivoxUnity::TTSMessageState::_set_NotEnqueued(::VivoxUnity::TTSMessageState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_set_NotEnqueued");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSMessageState", "NotEnqueued", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSMessageState Enqueued
::VivoxUnity::TTSMessageState VivoxUnity::TTSMessageState::_get_Enqueued() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_get_Enqueued");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSMessageState>("VivoxUnity", "TTSMessageState", "Enqueued"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSMessageState Enqueued
void VivoxUnity::TTSMessageState::_set_Enqueued(::VivoxUnity::TTSMessageState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_set_Enqueued");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSMessageState", "Enqueued", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.TTSMessageState Playing
::VivoxUnity::TTSMessageState VivoxUnity::TTSMessageState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::TTSMessageState>("VivoxUnity", "TTSMessageState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.TTSMessageState Playing
void VivoxUnity::TTSMessageState::_set_Playing(::VivoxUnity::TTSMessageState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "TTSMessageState", "Playing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::TTSMessageState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessageState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Helper
#include "VivoxUnity/Helper.hpp"
// Including type: vx_message_base_t
#include "GlobalNamespace/vx_message_base_t.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt64 serialNumber
uint64_t VivoxUnity::Helper::_get_serialNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::_get_serialNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("VivoxUnity", "Helper", "serialNumber"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 serialNumber
void VivoxUnity::Helper::_set_serialNumber(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::_set_serialNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "Helper", "serialNumber", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.DateTime unixEpoch
::System::DateTime VivoxUnity::Helper::_get_unixEpoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::_get_unixEpoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("VivoxUnity", "Helper", "unixEpoch"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.DateTime unixEpoch
void VivoxUnity::Helper::_set_unixEpoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::_set_unixEpoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "Helper", "unixEpoch", value));
}
// Autogenerated method: VivoxUnity.Helper.NextMessage
::GlobalNamespace::vx_message_base_t* VivoxUnity::Helper::NextMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::NextMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "NextMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_message_base_t*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Helper.CheckInitialized
void VivoxUnity::Helper::CheckInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::CheckInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "CheckInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.Helper.GetLoginToken
::StringW VivoxUnity::Helper::GetLoginToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetLoginToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetLoginToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, key);
}
// Autogenerated method: VivoxUnity.Helper.GetJoinToken
::StringW VivoxUnity::Helper::GetJoinToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetJoinToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetJoinToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.Helper.GetMuteForAllToken
::StringW VivoxUnity::Helper::GetMuteForAllToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW fromUserUri, ::StringW userUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetMuteForAllToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetMuteForAllToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(fromUserUri), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, fromUserUri, userUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.Helper.GetTranscriptionToken
::StringW VivoxUnity::Helper::GetTranscriptionToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetTranscriptionToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetTranscriptionToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.Helper.GetRandomUserId
::StringW VivoxUnity::Helper::GetRandomUserId(::StringW prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetRandomUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetRandomUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix);
}
// Autogenerated method: VivoxUnity.Helper.GetRandomUserIdEx
::StringW VivoxUnity::Helper::GetRandomUserIdEx(::StringW prefix, ::StringW issuer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetRandomUserIdEx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetRandomUserIdEx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(issuer)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix, issuer);
}
// Autogenerated method: VivoxUnity.Helper.GetRandomChannelUri
::StringW VivoxUnity::Helper::GetRandomChannelUri(::StringW prefix, ::StringW realm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::GetRandomChannelUri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "GetRandomChannelUri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(realm)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix, realm);
}
// Autogenerated method: VivoxUnity.Helper.SecondsSinceUnixEpochPlusDuration
int VivoxUnity::Helper::SecondsSinceUnixEpochPlusDuration(::System::Nullable_1<::System::TimeSpan> duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::SecondsSinceUnixEpochPlusDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", "SecondsSinceUnixEpochPlusDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, duration);
}
// Autogenerated method: VivoxUnity.Helper..cctor
void VivoxUnity::Helper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Helper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "Helper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IAccessTokenServer
#include "VivoxUnity/IAccessTokenServer.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IAccessTokenServer.get_Issuer
::StringW VivoxUnity::IAccessTokenServer::get_Issuer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccessTokenServer::get_Issuer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccessTokenServer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccessTokenServer.get_Key
::StringW VivoxUnity::IAccessTokenServer::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccessTokenServer::get_Key");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccessTokenServer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccessTokenServer.get_ExpirationTimeSpan
::System::TimeSpan VivoxUnity::IAccessTokenServer::get_ExpirationTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccessTokenServer::get_ExpirationTimeSpan");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccessTokenServer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IArchiveQueryResult
#include "VivoxUnity/IArchiveQueryResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_QueryId
::StringW VivoxUnity::IArchiveQueryResult::get_QueryId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_QueryId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_ReturnCode
int VivoxUnity::IArchiveQueryResult::get_ReturnCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_ReturnCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_StatusCode
int VivoxUnity::IArchiveQueryResult::get_StatusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_StatusCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_FirstId
::StringW VivoxUnity::IArchiveQueryResult::get_FirstId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_FirstId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_LastId
::StringW VivoxUnity::IArchiveQueryResult::get_LastId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_LastId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_FirstIndex
uint VivoxUnity::IArchiveQueryResult::get_FirstIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_FirstIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_TotalCount
uint VivoxUnity::IArchiveQueryResult::get_TotalCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_TotalCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IArchiveQueryResult.get_Running
bool VivoxUnity::IArchiveQueryResult::get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IArchiveQueryResult::get_Running");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IArchiveQueryResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IAudioDevice
#include "VivoxUnity/IAudioDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IAudioDevice.get_Name
::StringW VivoxUnity::IAudioDevice::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevice::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevice*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IAudioDevices
#include "VivoxUnity/IAudioDevices.hpp"
// Including type: VivoxUnity.IAudioDevice
#include "VivoxUnity/IAudioDevice.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IAudioDevices.get_SystemDevice
::VivoxUnity::IAudioDevice* VivoxUnity::IAudioDevices::get_SystemDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_SystemDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IAudioDevice*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.get_AvailableDevices
::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IAudioDevice*>* VivoxUnity::IAudioDevices::get_AvailableDevices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_AvailableDevices");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IAudioDevice*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.BeginSetActiveDevice
::System::IAsyncResult* VivoxUnity::IAudioDevices::BeginSetActiveDevice(::VivoxUnity::IAudioDevice* device, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::BeginSetActiveDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, device, callback);
}
// Autogenerated method: VivoxUnity.IAudioDevices.EndSetActiveDevice
void VivoxUnity::IAudioDevices::EndSetActiveDevice(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::EndSetActiveDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IAudioDevices.get_ActiveDevice
::VivoxUnity::IAudioDevice* VivoxUnity::IAudioDevices::get_ActiveDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_ActiveDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IAudioDevice*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.get_EffectiveDevice
::VivoxUnity::IAudioDevice* VivoxUnity::IAudioDevices::get_EffectiveDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_EffectiveDevice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IAudioDevice*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.get_VolumeAdjustment
int VivoxUnity::IAudioDevices::get_VolumeAdjustment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_VolumeAdjustment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.set_VolumeAdjustment
void VivoxUnity::IAudioDevices::set_VolumeAdjustment(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::set_VolumeAdjustment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.IAudioDevices.get_Muted
bool VivoxUnity::IAudioDevices::get_Muted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::get_Muted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAudioDevices.set_Muted
void VivoxUnity::IAudioDevices::set_Muted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::set_Muted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.IAudioDevices.BeginRefresh
::System::IAsyncResult* VivoxUnity::IAudioDevices::BeginRefresh(::System::AsyncCallback* cb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::BeginRefresh");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, cb);
}
// Autogenerated method: VivoxUnity.IAudioDevices.EndRefresh
void VivoxUnity::IAudioDevices::EndRefresh(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAudioDevices::EndRefresh");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAudioDevices*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.ChannelId
#include "VivoxUnity/ChannelId.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.ConnectionState
#include "VivoxUnity/ConnectionState.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
// Including type: VivoxUnity.IParticipant
#include "VivoxUnity/IParticipant.hpp"
// Including type: VivoxUnity.IReadOnlyQueue`1
#include "VivoxUnity/IReadOnlyQueue_1.hpp"
// Including type: VivoxUnity.IChannelTextMessage
#include "VivoxUnity/IChannelTextMessage.hpp"
// Including type: VivoxUnity.ISessionArchiveMessage
#include "VivoxUnity/ISessionArchiveMessage.hpp"
// Including type: VivoxUnity.IArchiveQueryResult
#include "VivoxUnity/IArchiveQueryResult.hpp"
// Including type: VivoxUnity.ITranscribedMessage
#include "VivoxUnity/ITranscribedMessage.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IChannelSession.get_SessionHandle
::StringW VivoxUnity::IChannelSession::get_SessionHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_SessionHandle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_Parent
::VivoxUnity::ILoginSession* VivoxUnity::IChannelSession::get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_Parent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ILoginSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_AudioState
::VivoxUnity::ConnectionState VivoxUnity::IChannelSession::get_AudioState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_AudioState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_TextState
::VivoxUnity::ConnectionState VivoxUnity::IChannelSession::get_TextState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_TextState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_Participants
::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IParticipant*>* VivoxUnity::IChannelSession::get_Participants() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_Participants");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IParticipant*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_Typing
bool VivoxUnity::IChannelSession::get_Typing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_Typing");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.set_Typing
void VivoxUnity::IChannelSession::set_Typing(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::set_Typing");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_MessageLog
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IChannelTextMessage*>* VivoxUnity::IChannelSession::get_MessageLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_MessageLog");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IChannelTextMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_SessionArchive
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ISessionArchiveMessage*>* VivoxUnity::IChannelSession::get_SessionArchive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_SessionArchive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ISessionArchiveMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_SessionArchiveResult
::VivoxUnity::IArchiveQueryResult* VivoxUnity::IChannelSession::get_SessionArchiveResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_SessionArchiveResult");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IArchiveQueryResult*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_TranscribedLog
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ITranscribedMessage*>* VivoxUnity::IChannelSession::get_TranscribedLog() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_TranscribedLog");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ITranscribedMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_IsTransmitting
bool VivoxUnity::IChannelSession::get_IsTransmitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_IsTransmitting");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_IsSessionBeingTranscribed
bool VivoxUnity::IChannelSession::get_IsSessionBeingTranscribed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_IsSessionBeingTranscribed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.get_Channel
::VivoxUnity::ChannelId* VivoxUnity::IChannelSession::get_Channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::get_Channel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ChannelId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginConnect
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginConnect(bool connectAudio, bool connectText, bool switchTransmission, ::StringW accessToken, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginConnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, connectAudio, connectText, switchTransmission, accessToken, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndConnect
void VivoxUnity::IChannelSession::EndConnect(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndConnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.Disconnect
::System::IAsyncResult* VivoxUnity::IChannelSession::Disconnect(::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::Disconnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSetAudioConnected
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSetAudioConnected(bool value, bool switchTransmission, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSetAudioConnected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, value, switchTransmission, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndSetAudioConnected
void VivoxUnity::IChannelSession::EndSetAudioConnected(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndSetAudioConnected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSetTextConnected
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSetTextConnected(bool value, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSetTextConnected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, value, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndSetTextConnected
void VivoxUnity::IChannelSession::EndSetTextConnected(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndSetTextConnected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSendText
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSendText(::StringW message, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSendText");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, message, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSendText
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSendText(::StringW language, ::StringW message, ::StringW applicationStanzaNamespace, ::StringW applicationStanzaBody, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSendText");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, language, message, applicationStanzaNamespace, applicationStanzaBody, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndSendText
void VivoxUnity::IChannelSession::EndSendText(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndSendText");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSessionArchiveQuery
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSessionArchiveQuery(::System::Nullable_1<::System::DateTime> timeStart, ::System::Nullable_1<::System::DateTime> timeEnd, ::StringW searchText, ::VivoxUnity::AccountId* userId, uint max, ::StringW afterId, ::StringW beforeId, int firstMessageIndex, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSessionArchiveQuery");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, timeStart, timeEnd, searchText, userId, max, afterId, beforeId, firstMessageIndex, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndSessionArchiveQuery
void VivoxUnity::IChannelSession::EndSessionArchiveQuery(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndSessionArchiveQuery");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.GetConnectToken
::StringW VivoxUnity::IChannelSession::GetConnectToken(::StringW tokenSigningKey, ::System::TimeSpan tokenExpirationDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::GetConnectToken");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, tokenSigningKey, tokenExpirationDuration);
}
// Autogenerated method: VivoxUnity.IChannelSession.Set3DPosition
void VivoxUnity::IChannelSession::Set3DPosition(::UnityEngine::Vector3 speakerPos, ::UnityEngine::Vector3 listenerPos, ::UnityEngine::Vector3 listenerAtOrient, ::UnityEngine::Vector3 listenerUpOrient) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::Set3DPosition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, speakerPos, listenerPos, listenerAtOrient, listenerUpOrient);
}
// Autogenerated method: VivoxUnity.IChannelSession.BeginSetChannelTranscription
::System::IAsyncResult* VivoxUnity::IChannelSession::BeginSetChannelTranscription(bool value, ::StringW accessToken, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::BeginSetChannelTranscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, value, accessToken, callback);
}
// Autogenerated method: VivoxUnity.IChannelSession.EndSetChannelTranscription
void VivoxUnity::IChannelSession::EndSetChannelTranscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::EndSetChannelTranscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.IChannelSession.GetTranscriptionToken
::StringW VivoxUnity::IChannelSession::GetTranscriptionToken(::StringW tokenSigningKey, ::System::TimeSpan tokenExpirationDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelSession::GetTranscriptionToken");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, tokenSigningKey, tokenExpirationDuration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IDirectedMessageResult
#include "VivoxUnity/IDirectedMessageResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IDirectedMessageResult.get_RequestId
::StringW VivoxUnity::IDirectedMessageResult::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IDirectedMessageResult::get_RequestId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IDirectedMessageResult*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
// Including type: VivoxUnity.ChannelId
#include "VivoxUnity/ChannelId.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.IPresenceSubscription
#include "VivoxUnity/IPresenceSubscription.hpp"
// Including type: VivoxUnity.IReadOnlyHashSet`1
#include "VivoxUnity/IReadOnlyHashSet_1.hpp"
// Including type: VivoxUnity.IReadOnlyQueue`1
#include "VivoxUnity/IReadOnlyQueue_1.hpp"
// Including type: VivoxUnity.IDirectedTextMessage
#include "VivoxUnity/IDirectedTextMessage.hpp"
// Including type: VivoxUnity.IFailedDirectedTextMessage
#include "VivoxUnity/IFailedDirectedTextMessage.hpp"
// Including type: VivoxUnity.IAccountArchiveMessage
#include "VivoxUnity/IAccountArchiveMessage.hpp"
// Including type: VivoxUnity.IArchiveQueryResult
#include "VivoxUnity/IArchiveQueryResult.hpp"
// Including type: VivoxUnity.IDirectedMessageResult
#include "VivoxUnity/IDirectedMessageResult.hpp"
// Including type: VivoxUnity.LoginState
#include "VivoxUnity/LoginState.hpp"
// Including type: VivoxUnity.TransmissionMode
#include "VivoxUnity/TransmissionMode.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: VivoxUnity.Presence
#include "VivoxUnity/Presence.hpp"
// Including type: VivoxUnity.ParticipantPropertyUpdateFrequency
#include "VivoxUnity/ParticipantPropertyUpdateFrequency.hpp"
// Including type: VivoxUnity.ITextToSpeech
#include "VivoxUnity/ITextToSpeech.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: VivoxUnity.SubscriptionMode
#include "VivoxUnity/SubscriptionMode.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ILoginSession.get_ChannelSessions
::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*>* VivoxUnity::ILoginSession::get_ChannelSessions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_ChannelSessions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_PresenceSubscriptions
::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*>* VivoxUnity::ILoginSession::get_PresenceSubscriptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_PresenceSubscriptions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_BlockedSubscriptions
::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* VivoxUnity::ILoginSession::get_BlockedSubscriptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_BlockedSubscriptions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_AllowedSubscriptions
::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* VivoxUnity::ILoginSession::get_AllowedSubscriptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_AllowedSubscriptions");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_IncomingSubscriptionRequests
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::AccountId*>* VivoxUnity::ILoginSession::get_IncomingSubscriptionRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_IncomingSubscriptionRequests");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::AccountId*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_CrossMutedCommunications
::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* VivoxUnity::ILoginSession::get_CrossMutedCommunications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_CrossMutedCommunications");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_DirectedMessages
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IDirectedTextMessage*>* VivoxUnity::ILoginSession::get_DirectedMessages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_DirectedMessages");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IDirectedTextMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_FailedDirectedMessages
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>* VivoxUnity::ILoginSession::get_FailedDirectedMessages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_FailedDirectedMessages");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_AccountArchive
::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IAccountArchiveMessage*>* VivoxUnity::ILoginSession::get_AccountArchive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_AccountArchive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IAccountArchiveMessage*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_AccountArchiveResult
::VivoxUnity::IArchiveQueryResult* VivoxUnity::ILoginSession::get_AccountArchiveResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_AccountArchiveResult");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IArchiveQueryResult*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_DirectedMessageResult
::VivoxUnity::IDirectedMessageResult* VivoxUnity::ILoginSession::get_DirectedMessageResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_DirectedMessageResult");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IDirectedMessageResult*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_State
::VivoxUnity::LoginState VivoxUnity::ILoginSession::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_State");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::LoginState, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_TransmissionType
::VivoxUnity::TransmissionMode VivoxUnity::ILoginSession::get_TransmissionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_TransmissionType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TransmissionMode, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_TransmittingChannels
::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ChannelId*>* VivoxUnity::ILoginSession::get_TransmittingChannels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_TransmittingChannels");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ChannelId*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_IsInjectingAudio
bool VivoxUnity::ILoginSession::get_IsInjectingAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_IsInjectingAudio");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_Presence
::VivoxUnity::Presence VivoxUnity::ILoginSession::get_Presence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_Presence");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Presence, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.set_Presence
void VivoxUnity::ILoginSession::set_Presence(::VivoxUnity::Presence value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::set_Presence");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_LoginSessionId
::VivoxUnity::AccountId* VivoxUnity::ILoginSession::get_LoginSessionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_LoginSessionId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_ParticipantPropertyFrequency
::VivoxUnity::ParticipantPropertyUpdateFrequency VivoxUnity::ILoginSession::get_ParticipantPropertyFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_ParticipantPropertyFrequency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ParticipantPropertyUpdateFrequency, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.set_ParticipantPropertyFrequency
void VivoxUnity::ILoginSession::set_ParticipantPropertyFrequency(::VivoxUnity::ParticipantPropertyUpdateFrequency value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::set_ParticipantPropertyFrequency");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ILoginSession.get_TTS
::VivoxUnity::ITextToSpeech* VivoxUnity::ILoginSession::get_TTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::get_TTS");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ITextToSpeech*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginLogin
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginLogin(::System::Uri* server, ::StringW accessToken, ::VivoxUnity::SubscriptionMode subscriptionMode, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* presenceSubscriptions, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* blockedPresenceSubscriptions, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* allowedPresenceSubscriptions, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginLogin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, server, accessToken, subscriptionMode, presenceSubscriptions, blockedPresenceSubscriptions, allowedPresenceSubscriptions, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginLogin
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginLogin(::System::Uri* server, ::StringW accessToken, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginLogin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, server, accessToken, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndLogin
void VivoxUnity::ILoginSession::EndLogin(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndLogin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginAccountSetLoginProperties
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginAccountSetLoginProperties(::VivoxUnity::ParticipantPropertyUpdateFrequency participantPropertyFrequency, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginAccountSetLoginProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, participantPropertyFrequency, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndAccountSetLoginProperties
void VivoxUnity::ILoginSession::EndAccountSetLoginProperties(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndAccountSetLoginProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.GetChannelSession
::VivoxUnity::IChannelSession* VivoxUnity::ILoginSession::GetChannelSession(::VivoxUnity::ChannelId* channelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::GetChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IChannelSession*, false>(this, ___internal__method, channelId);
}
// Autogenerated method: VivoxUnity.ILoginSession.DeleteChannelSession
void VivoxUnity::ILoginSession::DeleteChannelSession(::VivoxUnity::ChannelId* channelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::DeleteChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, channelId);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginAddBlockedSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginAddBlockedSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginAddBlockedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndAddBlockedSubscription
void VivoxUnity::ILoginSession::EndAddBlockedSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndAddBlockedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginRemoveBlockedSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginRemoveBlockedSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginRemoveBlockedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndRemoveBlockedSubscription
void VivoxUnity::ILoginSession::EndRemoveBlockedSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndRemoveBlockedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginAddAllowedSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginAddAllowedSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginAddAllowedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndAddAllowedSubscription
void VivoxUnity::ILoginSession::EndAddAllowedSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndAddAllowedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginRemoveAllowedSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginRemoveAllowedSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginRemoveAllowedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndRemoveAllowedSubscription
void VivoxUnity::ILoginSession::EndRemoveAllowedSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndRemoveAllowedSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginAddPresenceSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginAddPresenceSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginAddPresenceSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndAddPresenceSubscription
::VivoxUnity::IPresenceSubscription* VivoxUnity::ILoginSession::EndAddPresenceSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndAddPresenceSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IPresenceSubscription*, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginRemovePresenceSubscription
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginRemovePresenceSubscription(::VivoxUnity::AccountId* accountId, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginRemovePresenceSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndRemovePresenceSubscription
void VivoxUnity::ILoginSession::EndRemovePresenceSubscription(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndRemovePresenceSubscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginSendDirectedMessage
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginSendDirectedMessage(::VivoxUnity::AccountId* accountId, ::StringW language, ::StringW message, ::StringW applicationStanzaNamespace, ::StringW applicationStanzaBody, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginSendDirectedMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, language, message, applicationStanzaNamespace, applicationStanzaBody, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginSendDirectedMessage
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginSendDirectedMessage(::VivoxUnity::AccountId* accountId, ::StringW message, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginSendDirectedMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, message, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndSendDirectedMessage
void VivoxUnity::ILoginSession::EndSendDirectedMessage(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndSendDirectedMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.BeginAccountArchiveQuery
::System::IAsyncResult* VivoxUnity::ILoginSession::BeginAccountArchiveQuery(::System::Nullable_1<::System::DateTime> timeStart, ::System::Nullable_1<::System::DateTime> timeEnd, ::StringW searchText, ::VivoxUnity::AccountId* userId, ::VivoxUnity::ChannelId* channel, uint max, ::StringW afterId, ::StringW beforeId, int firstMessageIndex, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::BeginAccountArchiveQuery");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, timeStart, timeEnd, searchText, userId, channel, max, afterId, beforeId, firstMessageIndex, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.EndAccountArchiveQuery
void VivoxUnity::ILoginSession::EndAccountArchiveQuery(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::EndAccountArchiveQuery");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.ILoginSession.SetTransmissionMode
void VivoxUnity::ILoginSession::SetTransmissionMode(::VivoxUnity::TransmissionMode mode, ::VivoxUnity::ChannelId* singleChannel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::SetTransmissionMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, singleChannel);
}
// Autogenerated method: VivoxUnity.ILoginSession.Logout
void VivoxUnity::ILoginSession::Logout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::Logout");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.GetLoginToken
::StringW VivoxUnity::ILoginSession::GetLoginToken(::StringW tokenSigningKey, ::System::TimeSpan tokenExpirationDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::GetLoginToken");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, tokenSigningKey, tokenExpirationDuration);
}
// Autogenerated method: VivoxUnity.ILoginSession.StartAudioInjection
void VivoxUnity::ILoginSession::StartAudioInjection(::StringW audioFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::StartAudioInjection");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, audioFilePath);
}
// Autogenerated method: VivoxUnity.ILoginSession.StopAudioInjection
void VivoxUnity::ILoginSession::StopAudioInjection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::StopAudioInjection");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ILoginSession.SetCrossMutedCommunications
::System::IAsyncResult* VivoxUnity::ILoginSession::SetCrossMutedCommunications(::VivoxUnity::AccountId* accountId, bool muted, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::SetCrossMutedCommunications");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountId, muted, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.SetCrossMutedCommunications
::System::IAsyncResult* VivoxUnity::ILoginSession::SetCrossMutedCommunications(::System::Collections::Generic::List_1<::VivoxUnity::AccountId*>* accountIdSet, bool muted, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::SetCrossMutedCommunications");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountIdSet, muted, callback);
}
// Autogenerated method: VivoxUnity.ILoginSession.ClearCrossMutedCommunications
::System::IAsyncResult* VivoxUnity::ILoginSession::ClearCrossMutedCommunications(::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ILoginSession::ClearCrossMutedCommunications");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ILoginSession*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IParticipant
#include "VivoxUnity/IParticipant.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IParticipant.get_ParticipantId
::StringW VivoxUnity::IParticipant::get_ParticipantId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipant::get_ParticipantId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipant*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipant.get_ParentChannelSession
::VivoxUnity::IChannelSession* VivoxUnity::IParticipant::get_ParentChannelSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipant::get_ParentChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipant*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IChannelSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipant.get_Account
::VivoxUnity::AccountId* VivoxUnity::IParticipant::get_Account() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipant::get_Account");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipant*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipant.SetIsMuteForAll
::System::IAsyncResult* VivoxUnity::IParticipant::SetIsMuteForAll(::StringW accountHandle, bool setMuted, ::StringW accessToken, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipant::SetIsMuteForAll");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipant*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, accountHandle, setMuted, accessToken, callback);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IParticipantProperties
#include "VivoxUnity/IParticipantProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IParticipantProperties.get_IsSelf
bool VivoxUnity::IParticipantProperties::get_IsSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_IsSelf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_InAudio
bool VivoxUnity::IParticipantProperties::get_InAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_InAudio");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_InText
bool VivoxUnity::IParticipantProperties::get_InText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_InText");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_SpeechDetected
bool VivoxUnity::IParticipantProperties::get_SpeechDetected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_SpeechDetected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_AudioEnergy
double VivoxUnity::IParticipantProperties::get_AudioEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_AudioEnergy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_LocalVolumeAdjustment
int VivoxUnity::IParticipantProperties::get_LocalVolumeAdjustment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_LocalVolumeAdjustment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.set_LocalVolumeAdjustment
void VivoxUnity::IParticipantProperties::set_LocalVolumeAdjustment(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::set_LocalVolumeAdjustment");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_LocalMute
bool VivoxUnity::IParticipantProperties::get_LocalMute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_LocalMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.set_LocalMute
void VivoxUnity::IParticipantProperties::set_LocalMute(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::set_LocalMute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_IsTyping
bool VivoxUnity::IParticipantProperties::get_IsTyping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_IsTyping");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IParticipantProperties.get_IsMutedForAll
bool VivoxUnity::IParticipantProperties::get_IsMutedForAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IParticipantProperties::get_IsMutedForAll");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IParticipantProperties*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IPresenceLocation
#include "VivoxUnity/IPresenceLocation.hpp"
// Including type: VivoxUnity.Presence
#include "VivoxUnity/Presence.hpp"
// Including type: VivoxUnity.IPresenceSubscription
#include "VivoxUnity/IPresenceSubscription.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IPresenceLocation.get_LocationId
::StringW VivoxUnity::IPresenceLocation::get_LocationId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IPresenceLocation::get_LocationId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IPresenceLocation*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IPresenceLocation.get_CurrentPresence
::VivoxUnity::Presence VivoxUnity::IPresenceLocation::get_CurrentPresence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IPresenceLocation::get_CurrentPresence");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IPresenceLocation*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Presence, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IPresenceLocation.get_Subscription
::VivoxUnity::IPresenceSubscription* VivoxUnity::IPresenceLocation::get_Subscription() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IPresenceLocation::get_Subscription");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IPresenceLocation*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IPresenceSubscription*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IPresenceSubscription
#include "VivoxUnity/IPresenceSubscription.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
// Including type: VivoxUnity.IPresenceLocation
#include "VivoxUnity/IPresenceLocation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IPresenceSubscription.get_SubscribedAccount
::VivoxUnity::AccountId* VivoxUnity::IPresenceSubscription::get_SubscribedAccount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IPresenceSubscription::get_SubscribedAccount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IPresenceSubscription*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IPresenceSubscription.get_Locations
::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IPresenceLocation*>* VivoxUnity::IPresenceSubscription::get_Locations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IPresenceSubscription::get_Locations");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IPresenceSubscription*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IPresenceLocation*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITextMessage
#include "VivoxUnity/ITextMessage.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ITextMessage.get_ReceivedTime
::System::DateTime VivoxUnity::ITextMessage::get_ReceivedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextMessage::get_ReceivedTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextMessage.get_Message
::StringW VivoxUnity::ITextMessage::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextMessage::get_Message");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextMessage.get_Language
::StringW VivoxUnity::ITextMessage::get_Language() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextMessage::get_Language");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IDirectedTextMessage
#include "VivoxUnity/IDirectedTextMessage.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IDirectedTextMessage.get_LoginSession
::VivoxUnity::ILoginSession* VivoxUnity::IDirectedTextMessage::get_LoginSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IDirectedTextMessage::get_LoginSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ILoginSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IDirectedTextMessage.get_Sender
::VivoxUnity::AccountId* VivoxUnity::IDirectedTextMessage::get_Sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IDirectedTextMessage::get_Sender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IDirectedTextMessage.get_ApplicationStanzaNamespace
::StringW VivoxUnity::IDirectedTextMessage::get_ApplicationStanzaNamespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IDirectedTextMessage::get_ApplicationStanzaNamespace");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IDirectedTextMessage.get_ApplicationStanzaBody
::StringW VivoxUnity::IDirectedTextMessage::get_ApplicationStanzaBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IDirectedTextMessage::get_ApplicationStanzaBody");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IFailedDirectedTextMessage
#include "VivoxUnity/IFailedDirectedTextMessage.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IFailedDirectedTextMessage.get_Sender
::VivoxUnity::AccountId* VivoxUnity::IFailedDirectedTextMessage::get_Sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IFailedDirectedTextMessage::get_Sender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IFailedDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IFailedDirectedTextMessage.get_RequestId
::StringW VivoxUnity::IFailedDirectedTextMessage::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IFailedDirectedTextMessage::get_RequestId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IFailedDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IFailedDirectedTextMessage.get_StatusCode
int VivoxUnity::IFailedDirectedTextMessage::get_StatusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IFailedDirectedTextMessage::get_StatusCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IFailedDirectedTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IChannelTextMessage
#include "VivoxUnity/IChannelTextMessage.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IChannelTextMessage.get_ChannelSession
::VivoxUnity::IChannelSession* VivoxUnity::IChannelTextMessage::get_ChannelSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelTextMessage::get_ChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IChannelSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelTextMessage.get_Sender
::VivoxUnity::AccountId* VivoxUnity::IChannelTextMessage::get_Sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelTextMessage::get_Sender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelTextMessage.get_FromSelf
bool VivoxUnity::IChannelTextMessage::get_FromSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelTextMessage::get_FromSelf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelTextMessage.get_ApplicationStanzaNamespace
::StringW VivoxUnity::IChannelTextMessage::get_ApplicationStanzaNamespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelTextMessage::get_ApplicationStanzaNamespace");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IChannelTextMessage.get_ApplicationStanzaBody
::StringW VivoxUnity::IChannelTextMessage::get_ApplicationStanzaBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IChannelTextMessage::get_ApplicationStanzaBody");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IChannelTextMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ISessionArchiveMessage
#include "VivoxUnity/ISessionArchiveMessage.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ISessionArchiveMessage.get_ChannelSession
::VivoxUnity::IChannelSession* VivoxUnity::ISessionArchiveMessage::get_ChannelSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ISessionArchiveMessage::get_ChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ISessionArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IChannelSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ISessionArchiveMessage.get_Sender
::VivoxUnity::AccountId* VivoxUnity::ISessionArchiveMessage::get_Sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ISessionArchiveMessage::get_Sender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ISessionArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ISessionArchiveMessage.get_FromSelf
bool VivoxUnity::ISessionArchiveMessage::get_FromSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ISessionArchiveMessage::get_FromSelf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ISessionArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ISessionArchiveMessage.get_QueryId
::StringW VivoxUnity::ISessionArchiveMessage::get_QueryId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ISessionArchiveMessage::get_QueryId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ISessionArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ISessionArchiveMessage.get_MessageId
::StringW VivoxUnity::ISessionArchiveMessage::get_MessageId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ISessionArchiveMessage::get_MessageId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ISessionArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.IAccountArchiveMessage
#include "VivoxUnity/IAccountArchiveMessage.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
// Including type: VivoxUnity.ChannelId
#include "VivoxUnity/ChannelId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_LoginSession
::VivoxUnity::ILoginSession* VivoxUnity::IAccountArchiveMessage::get_LoginSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_LoginSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ILoginSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_QueryId
::StringW VivoxUnity::IAccountArchiveMessage::get_QueryId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_QueryId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_RemoteParticipant
::VivoxUnity::AccountId* VivoxUnity::IAccountArchiveMessage::get_RemoteParticipant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_RemoteParticipant");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_Channel
::VivoxUnity::ChannelId* VivoxUnity::IAccountArchiveMessage::get_Channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_Channel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ChannelId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_Inbound
bool VivoxUnity::IAccountArchiveMessage::get_Inbound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_Inbound");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.IAccountArchiveMessage.get_MessageId
::StringW VivoxUnity::IAccountArchiveMessage::get_MessageId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IAccountArchiveMessage::get_MessageId");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IAccountArchiveMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITranscribedMessage
#include "VivoxUnity/ITranscribedMessage.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.AccountId
#include "VivoxUnity/AccountId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ITranscribedMessage.get_ChannelSession
::VivoxUnity::IChannelSession* VivoxUnity::ITranscribedMessage::get_ChannelSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITranscribedMessage::get_ChannelSession");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITranscribedMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::IChannelSession*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITranscribedMessage.get_Sender
::VivoxUnity::AccountId* VivoxUnity::ITranscribedMessage::get_Sender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITranscribedMessage::get_Sender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITranscribedMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::AccountId*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITranscribedMessage.get_FromSelf
bool VivoxUnity::ITranscribedMessage::get_FromSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITranscribedMessage::get_FromSelf");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITranscribedMessage*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITTSMessageQueueEventArgs
#include "VivoxUnity/ITTSMessageQueueEventArgs.hpp"
// Including type: VivoxUnity.TTSMessage
#include "VivoxUnity/TTSMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.TTSMessage <Message>k__BackingField
[[deprecated("Use field access instead!")]] ::VivoxUnity::TTSMessage*& VivoxUnity::ITTSMessageQueueEventArgs::dyn_$Message$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueueEventArgs::dyn_$Message$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Message>k__BackingField"))->offset;
  return *reinterpret_cast<::VivoxUnity::TTSMessage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueueEventArgs.get_Message
::VivoxUnity::TTSMessage* VivoxUnity::ITTSMessageQueueEventArgs::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueueEventArgs::get_Message");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TTSMessage*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITTSMessageQueue
#include "VivoxUnity/ITTSMessageQueue.hpp"
// Including type: VivoxUnity.TTSMessage
#include "VivoxUnity/TTSMessage.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: VivoxUnity.ITTSMessageQueueEventArgs
#include "VivoxUnity/ITTSMessageQueueEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ITTSMessageQueue.add_AfterMessageAdded
void VivoxUnity::ITTSMessageQueue::add_AfterMessageAdded(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::add_AfterMessageAdded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.remove_AfterMessageAdded
void VivoxUnity::ITTSMessageQueue::remove_AfterMessageAdded(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::remove_AfterMessageAdded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.add_BeforeMessageRemoved
void VivoxUnity::ITTSMessageQueue::add_BeforeMessageRemoved(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::add_BeforeMessageRemoved");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.remove_BeforeMessageRemoved
void VivoxUnity::ITTSMessageQueue::remove_BeforeMessageRemoved(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::remove_BeforeMessageRemoved");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.add_AfterMessageUpdated
void VivoxUnity::ITTSMessageQueue::add_AfterMessageUpdated(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::add_AfterMessageUpdated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.remove_AfterMessageUpdated
void VivoxUnity::ITTSMessageQueue::remove_AfterMessageUpdated(::System::EventHandler_1<::VivoxUnity::ITTSMessageQueueEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::remove_AfterMessageUpdated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Clear
void VivoxUnity::ITTSMessageQueue::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Contains
bool VivoxUnity::ITTSMessageQueue::Contains(::VivoxUnity::TTSMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Contains");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.get_Count
int VivoxUnity::ITTSMessageQueue::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::get_Count");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Dequeue
::VivoxUnity::TTSMessage* VivoxUnity::ITTSMessageQueue::Dequeue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Dequeue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TTSMessage*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Enqueue
void VivoxUnity::ITTSMessageQueue::Enqueue(::VivoxUnity::TTSMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Enqueue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Peek
::VivoxUnity::TTSMessage* VivoxUnity::ITTSMessageQueue::Peek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Peek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TTSMessage*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITTSMessageQueue.Remove
bool VivoxUnity::ITTSMessageQueue::Remove(::VivoxUnity::TTSMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSMessageQueue::Remove");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSMessageQueue*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITextToSpeech
#include "VivoxUnity/ITextToSpeech.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: VivoxUnity.ITTSVoice
#include "VivoxUnity/ITTSVoice.hpp"
// Including type: VivoxUnity.TTSMessage
#include "VivoxUnity/TTSMessage.hpp"
// Including type: VivoxUnity.TTSDestination
#include "VivoxUnity/TTSDestination.hpp"
// Including type: VivoxUnity.ITTSMessageQueue
#include "VivoxUnity/ITTSMessageQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ITextToSpeech.get_AvailableVoices
::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ITTSVoice*>* VivoxUnity::ITextToSpeech::get_AvailableVoices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::get_AvailableVoices");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ITTSVoice*>*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.get_CurrentVoice
::VivoxUnity::ITTSVoice* VivoxUnity::ITextToSpeech::get_CurrentVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::get_CurrentVoice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ITTSVoice*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.set_CurrentVoice
void VivoxUnity::ITextToSpeech::set_CurrentVoice(::VivoxUnity::ITTSVoice* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::set_CurrentVoice");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.Speak
void VivoxUnity::ITextToSpeech::Speak(::VivoxUnity::TTSMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::Speak");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.CancelMessage
void VivoxUnity::ITextToSpeech::CancelMessage(::VivoxUnity::TTSMessage* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::CancelMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.CancelDestination
void VivoxUnity::ITextToSpeech::CancelDestination(::VivoxUnity::TTSDestination destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::CancelDestination");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.CancelAll
void VivoxUnity::ITextToSpeech::CancelAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::CancelAll");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.get_Messages
::VivoxUnity::ITTSMessageQueue* VivoxUnity::ITextToSpeech::get_Messages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::get_Messages");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ITTSMessageQueue*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.ITextToSpeech.GetMessagesFromDestination
::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::TTSMessage*>* VivoxUnity::ITextToSpeech::GetMessagesFromDestination(::VivoxUnity::TTSDestination destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITextToSpeech::GetMessagesFromDestination");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITextToSpeech*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::TTSMessage*>*, false>(this, ___internal__method, destination);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.ITTSVoice
#include "VivoxUnity/ITTSVoice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.ITTSVoice.get_Name
::StringW VivoxUnity::ITTSVoice::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ITTSVoice::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::ITTSVoice*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.Presence
#include "VivoxUnity/Presence.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly VivoxUnity.PresenceStatus Status
[[deprecated("Use field access instead!")]] ::VivoxUnity::PresenceStatus& VivoxUnity::Presence::dyn_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Presence::dyn_Status");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Status"))->offset;
  return *reinterpret_cast<::VivoxUnity::PresenceStatus*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String Message
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Presence::dyn_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Presence::dyn_Message");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Message"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Presence..ctor
// ABORTED elsewhere.  VivoxUnity::Presence::Presence(::VivoxUnity::PresenceStatus status, ::StringW message)
// Autogenerated method: VivoxUnity.Presence.Equals
bool VivoxUnity::Presence::Equals(::VivoxUnity::Presence other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Presence::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: VivoxUnity.Presence.Equals
bool VivoxUnity::Presence::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Presence::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: VivoxUnity.Presence.GetHashCode
int VivoxUnity::Presence::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Presence::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.TTSMessage
#include "VivoxUnity/TTSMessage.hpp"
// Including type: VivoxUnity.ITTSVoice
#include "VivoxUnity/ITTSVoice.hpp"
// Including type: VivoxUnity.ITextToSpeech
#include "VivoxUnity/ITextToSpeech.hpp"
// Including type: System.ComponentModel.PropertyChangedEventHandler
#include "System/ComponentModel/PropertyChangedEventHandler.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String _text
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::TTSMessage::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly VivoxUnity.TTSDestination _destination
[[deprecated("Use field access instead!")]] ::VivoxUnity::TTSDestination& VivoxUnity::TTSMessage::dyn__destination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__destination");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destination"))->offset;
  return *reinterpret_cast<::VivoxUnity::TTSDestination*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.ITTSVoice _voice
[[deprecated("Use field access instead!")]] ::VivoxUnity::ITTSVoice*& VivoxUnity::TTSMessage::dyn__voice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__voice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_voice"))->offset;
  return *reinterpret_cast<::VivoxUnity::ITTSVoice**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.TTSMessageState _state
[[deprecated("Use field access instead!")]] ::VivoxUnity::TTSMessageState& VivoxUnity::TTSMessage::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::VivoxUnity::TTSMessageState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _numConsumers
[[deprecated("Use field access instead!")]] uint& VivoxUnity::TTSMessage::dyn__numConsumers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__numConsumers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numConsumers"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _duration
[[deprecated("Use field access instead!")]] double& VivoxUnity::TTSMessage::dyn__duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_duration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _key
[[deprecated("Use field access instead!")]] uint& VivoxUnity::TTSMessage::dyn__key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__key");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_key"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.ITextToSpeech _ttsSubSystem
[[deprecated("Use field access instead!")]] ::VivoxUnity::ITextToSpeech*& VivoxUnity::TTSMessage::dyn__ttsSubSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn__ttsSubSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ttsSubSystem"))->offset;
  return *reinterpret_cast<::VivoxUnity::ITextToSpeech**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
[[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& VivoxUnity::TTSMessage::dyn_PropertyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::dyn_PropertyChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PropertyChanged"))->offset;
  return *reinterpret_cast<::System::ComponentModel::PropertyChangedEventHandler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_Text
::StringW VivoxUnity::TTSMessage::get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_Destination
::VivoxUnity::TTSDestination VivoxUnity::TTSMessage::get_Destination() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_Destination");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Destination", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TTSDestination, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_Voice
::VivoxUnity::ITTSVoice* VivoxUnity::TTSMessage::get_Voice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_Voice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Voice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ITTSVoice*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_Voice
void VivoxUnity::TTSMessage::set_Voice(::VivoxUnity::ITTSVoice* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_Voice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Voice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_State
::VivoxUnity::TTSMessageState VivoxUnity::TTSMessage::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::TTSMessageState, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_State
void VivoxUnity::TTSMessage::set_State(::VivoxUnity::TTSMessageState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_NumConsumers
uint VivoxUnity::TTSMessage::get_NumConsumers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_NumConsumers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumConsumers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_NumConsumers
void VivoxUnity::TTSMessage::set_NumConsumers(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_NumConsumers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NumConsumers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_Duration
double VivoxUnity::TTSMessage::get_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_Duration
void VivoxUnity::TTSMessage::set_Duration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_Key
uint VivoxUnity::TTSMessage::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_Key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_Key
void VivoxUnity::TTSMessage::set_Key(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_Key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.get_TTS
::VivoxUnity::ITextToSpeech* VivoxUnity::TTSMessage::get_TTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::get_TTS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TTS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::ITextToSpeech*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.set_TTS
void VivoxUnity::TTSMessage::set_TTS(::VivoxUnity::ITextToSpeech* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::set_TTS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TTS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.Speak
void VivoxUnity::TTSMessage::Speak(::VivoxUnity::ILoginSession* userSpeaking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::Speak");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Speak", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userSpeaking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, userSpeaking);
}
// Autogenerated method: VivoxUnity.TTSMessage.Cancel
void VivoxUnity::TTSMessage::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.Equals
bool VivoxUnity::TTSMessage::Equals(::VivoxUnity::TTSMessage* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: VivoxUnity.TTSMessage.add_PropertyChanged
void VivoxUnity::TTSMessage::add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::add_PropertyChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PropertyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.remove_PropertyChanged
void VivoxUnity::TTSMessage::remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::remove_PropertyChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PropertyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.TTSMessage.OnPropertyChanged
void VivoxUnity::TTSMessage::OnPropertyChanged(::StringW propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::OnPropertyChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPropertyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: VivoxUnity.TTSMessage.AlreadySpoken
bool VivoxUnity::TTSMessage::AlreadySpoken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::AlreadySpoken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlreadySpoken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.TTSMessage.Equals
bool VivoxUnity::TTSMessage::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: VivoxUnity.TTSMessage.GetHashCode
int VivoxUnity::TTSMessage::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::TTSMessage::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.VivoxApiException
#include "VivoxUnity/VivoxApiException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <StatusCode>k__BackingField
[[deprecated("Use field access instead!")]] int& VivoxUnity::VivoxApiException::dyn_$StatusCode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::dyn_$StatusCode$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<StatusCode>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <RequestId>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::VivoxApiException::dyn_$RequestId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::dyn_$RequestId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RequestId>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VivoxApiException.get_StatusCode
int VivoxUnity::VivoxApiException::get_StatusCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::get_StatusCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StatusCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxApiException.set_StatusCode
void VivoxUnity::VivoxApiException::set_StatusCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::set_StatusCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StatusCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxApiException.get_RequestId
::StringW VivoxUnity::VivoxApiException::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::get_RequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxApiException.set_RequestId
void VivoxUnity::VivoxApiException::set_RequestId(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::set_RequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxApiException.GetErrorString
::StringW VivoxUnity::VivoxApiException::GetErrorString(int statusCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::GetErrorString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VivoxApiException", "GetErrorString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(statusCode)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, statusCode);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.VivoxConfig
#include "VivoxUnity/VivoxConfig.hpp"
// Including type: vx_sdk_config_t
#include "GlobalNamespace/vx_sdk_config_t.hpp"
// Including type: vx_log_level
#include "GlobalNamespace/vx_log_level.hpp"
// Including type: VivoxUnity.MediaCodecType
#include "VivoxUnity/MediaCodecType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private vx_sdk_config_t vx_sdk_config
[[deprecated("Use field access instead!")]] ::GlobalNamespace::vx_sdk_config_t*& VivoxUnity::VivoxConfig::dyn_vx_sdk_config() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::dyn_vx_sdk_config");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vx_sdk_config"))->offset;
  return *reinterpret_cast<::GlobalNamespace::vx_sdk_config_t**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <SkipPrepareForVivox>k__BackingField
[[deprecated("Use field access instead!")]] bool& VivoxUnity::VivoxConfig::dyn_$SkipPrepareForVivox$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::dyn_$SkipPrepareForVivox$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SkipPrepareForVivox>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VivoxConfig.ToVx_Sdk_Config
::GlobalNamespace::vx_sdk_config_t* VivoxUnity::VivoxConfig::ToVx_Sdk_Config() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::ToVx_Sdk_Config");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToVx_Sdk_Config", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_sdk_config_t*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_CodecThreads
int VivoxUnity::VivoxConfig::get_CodecThreads() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_CodecThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CodecThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_CodecThreads
void VivoxUnity::VivoxConfig::set_CodecThreads(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_CodecThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CodecThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_VoiceThreads
int VivoxUnity::VivoxConfig::get_VoiceThreads() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_VoiceThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VoiceThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_VoiceThreads
void VivoxUnity::VivoxConfig::set_VoiceThreads(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_VoiceThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_VoiceThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_WebThreads
int VivoxUnity::VivoxConfig::get_WebThreads() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_WebThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WebThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_WebThreads
void VivoxUnity::VivoxConfig::set_WebThreads(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_WebThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_WebThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_RenderSourceQueueDepthMax
int VivoxUnity::VivoxConfig::get_RenderSourceQueueDepthMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_RenderSourceQueueDepthMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RenderSourceQueueDepthMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_RenderSourceQueueDepthMax
void VivoxUnity::VivoxConfig::set_RenderSourceQueueDepthMax(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_RenderSourceQueueDepthMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RenderSourceQueueDepthMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_RenderSourceInitialBufferCount
int VivoxUnity::VivoxConfig::get_RenderSourceInitialBufferCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_RenderSourceInitialBufferCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RenderSourceInitialBufferCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_RenderSourceInitialBufferCount
void VivoxUnity::VivoxConfig::set_RenderSourceInitialBufferCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_RenderSourceInitialBufferCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RenderSourceInitialBufferCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_UpstreamJitterFrameCount
int VivoxUnity::VivoxConfig::get_UpstreamJitterFrameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_UpstreamJitterFrameCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UpstreamJitterFrameCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_UpstreamJitterFrameCount
void VivoxUnity::VivoxConfig::set_UpstreamJitterFrameCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_UpstreamJitterFrameCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UpstreamJitterFrameCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_MaxLoginsPerUser
int VivoxUnity::VivoxConfig::get_MaxLoginsPerUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_MaxLoginsPerUser");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxLoginsPerUser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_MaxLoginsPerUser
void VivoxUnity::VivoxConfig::set_MaxLoginsPerUser(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_MaxLoginsPerUser");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MaxLoginsPerUser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_InitialLogLevel
::GlobalNamespace::vx_log_level VivoxUnity::VivoxConfig::get_InitialLogLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_InitialLogLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialLogLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_log_level, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_InitialLogLevel
void VivoxUnity::VivoxConfig::set_InitialLogLevel(::GlobalNamespace::vx_log_level value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_InitialLogLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialLogLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_DisableDevicePolling
bool VivoxUnity::VivoxConfig::get_DisableDevicePolling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_DisableDevicePolling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisableDevicePolling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_DisableDevicePolling
void VivoxUnity::VivoxConfig::set_DisableDevicePolling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_DisableDevicePolling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DisableDevicePolling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_ForceCaptureSilence
bool VivoxUnity::VivoxConfig::get_ForceCaptureSilence() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_ForceCaptureSilence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceCaptureSilence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_ForceCaptureSilence
void VivoxUnity::VivoxConfig::set_ForceCaptureSilence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_ForceCaptureSilence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceCaptureSilence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_EnableAdvancedAutoLevels
bool VivoxUnity::VivoxConfig::get_EnableAdvancedAutoLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_EnableAdvancedAutoLevels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableAdvancedAutoLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_EnableAdvancedAutoLevels
void VivoxUnity::VivoxConfig::set_EnableAdvancedAutoLevels(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_EnableAdvancedAutoLevels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableAdvancedAutoLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_CaptureDeviceBufferSizeIntervals
int VivoxUnity::VivoxConfig::get_CaptureDeviceBufferSizeIntervals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_CaptureDeviceBufferSizeIntervals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CaptureDeviceBufferSizeIntervals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_CaptureDeviceBufferSizeIntervals
void VivoxUnity::VivoxConfig::set_CaptureDeviceBufferSizeIntervals(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_CaptureDeviceBufferSizeIntervals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CaptureDeviceBufferSizeIntervals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_RenderDeviceBufferSizeIntervals
int VivoxUnity::VivoxConfig::get_RenderDeviceBufferSizeIntervals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_RenderDeviceBufferSizeIntervals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RenderDeviceBufferSizeIntervals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_RenderDeviceBufferSizeIntervals
void VivoxUnity::VivoxConfig::set_RenderDeviceBufferSizeIntervals(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_RenderDeviceBufferSizeIntervals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RenderDeviceBufferSizeIntervals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_DisableAudioDucking
bool VivoxUnity::VivoxConfig::get_DisableAudioDucking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_DisableAudioDucking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisableAudioDucking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_DisableAudioDucking
void VivoxUnity::VivoxConfig::set_DisableAudioDucking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_DisableAudioDucking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DisableAudioDucking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_EnableDtx
bool VivoxUnity::VivoxConfig::get_EnableDtx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_EnableDtx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableDtx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_EnableDtx
void VivoxUnity::VivoxConfig::set_EnableDtx(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_EnableDtx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableDtx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_DefaultCodecsMask
::VivoxUnity::MediaCodecType VivoxUnity::VivoxConfig::get_DefaultCodecsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_DefaultCodecsMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultCodecsMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::MediaCodecType, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_DefaultCodecsMask
void VivoxUnity::VivoxConfig::set_DefaultCodecsMask(::VivoxUnity::MediaCodecType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_DefaultCodecsMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DefaultCodecsMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_EnableFastNetworkChangeDetection
bool VivoxUnity::VivoxConfig::get_EnableFastNetworkChangeDetection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_EnableFastNetworkChangeDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableFastNetworkChangeDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_EnableFastNetworkChangeDetection
void VivoxUnity::VivoxConfig::set_EnableFastNetworkChangeDetection(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_EnableFastNetworkChangeDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableFastNetworkChangeDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_UseOsProxySettings
int VivoxUnity::VivoxConfig::get_UseOsProxySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_UseOsProxySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseOsProxySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_UseOsProxySettings
void VivoxUnity::VivoxConfig::set_UseOsProxySettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_UseOsProxySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseOsProxySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_DynamicVoiceProcessingSwitching
bool VivoxUnity::VivoxConfig::get_DynamicVoiceProcessingSwitching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_DynamicVoiceProcessingSwitching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DynamicVoiceProcessingSwitching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_DynamicVoiceProcessingSwitching
void VivoxUnity::VivoxConfig::set_DynamicVoiceProcessingSwitching(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_DynamicVoiceProcessingSwitching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DynamicVoiceProcessingSwitching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_NeverRtpTimeoutMs
int VivoxUnity::VivoxConfig::get_NeverRtpTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_NeverRtpTimeoutMs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NeverRtpTimeoutMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_NeverRtpTimeoutMs
void VivoxUnity::VivoxConfig::set_NeverRtpTimeoutMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_NeverRtpTimeoutMs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NeverRtpTimeoutMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_LostRtpTimeoutMs
int VivoxUnity::VivoxConfig::get_LostRtpTimeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_LostRtpTimeoutMs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LostRtpTimeoutMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_LostRtpTimeoutMs
void VivoxUnity::VivoxConfig::set_LostRtpTimeoutMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_LostRtpTimeoutMs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LostRtpTimeoutMs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxConfig.get_SkipPrepareForVivox
bool VivoxUnity::VivoxConfig::get_SkipPrepareForVivox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::get_SkipPrepareForVivox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SkipPrepareForVivox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxConfig.set_SkipPrepareForVivox
void VivoxUnity::VivoxConfig::set_SkipPrepareForVivox(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxConfig::set_SkipPrepareForVivox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SkipPrepareForVivox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.VivoxDebug
#include "VivoxUnity/VivoxDebug.hpp"
// Including type: vx_log_level
#include "GlobalNamespace/vx_log_level.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private VivoxUnity.VivoxDebug _instance
::VivoxUnity::VivoxDebug* VivoxUnity::VivoxDebug::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::VivoxDebug*>("VivoxUnity", "VivoxDebug", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private VivoxUnity.VivoxDebug _instance
void VivoxUnity::VivoxDebug::_set__instance(::VivoxUnity::VivoxDebug* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "VivoxDebug", "_instance", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 debugLocation
[[deprecated("Use field access instead!")]] int& VivoxUnity::VivoxDebug::dyn_debugLocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::dyn_debugLocation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugLocation"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean throwInternalExcepetions
[[deprecated("Use field access instead!")]] bool& VivoxUnity::VivoxDebug::dyn_throwInternalExcepetions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::dyn_throwInternalExcepetions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwInternalExcepetions"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VivoxDebug.get_Instance
::VivoxUnity::VivoxDebug* VivoxUnity::VivoxDebug::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VivoxDebug", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::VivoxDebug*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.VivoxDebug.set_Instance
void VivoxUnity::VivoxDebug::set_Instance(::VivoxUnity::VivoxDebug* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::set_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VivoxDebug", "set_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VivoxDebug.VxExceptionMessage
void VivoxUnity::VivoxDebug::VxExceptionMessage(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::VxExceptionMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VxExceptionMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: VivoxUnity.VivoxDebug.DebugMessage
void VivoxUnity::VivoxDebug::DebugMessage(::Il2CppObject* message, ::GlobalNamespace::vx_log_level severity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::DebugMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VivoxDebug*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message, severity);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.VxClient
#include "VivoxUnity/VxClient.hpp"
// Including type: VivoxUnity.VxClient/HandleEventMessage
#include "VivoxUnity/VxClient_HandleEventMessage.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: VivoxUnity.AsyncResult`1
#include "VivoxUnity/AsyncResult_1.hpp"
// Including type: vx_resp_base_t
#include "GlobalNamespace/vx_resp_base_t.hpp"
// Including type: VivoxUnity.VivoxDebug
#include "VivoxUnity/VivoxDebug.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: VivoxUnity.VivoxConfig
#include "VivoxUnity/VivoxConfig.hpp"
// Including type: vx_sdk_config_t
#include "GlobalNamespace/vx_sdk_config_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: vx_req_base_t
#include "GlobalNamespace/vx_req_base_t.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private VivoxUnity.VxClient _instance
::VivoxUnity::VxClient* VivoxUnity::VxClient::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::VxClient*>("VivoxUnity", "VxClient", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private VivoxUnity.VxClient _instance
void VivoxUnity::VxClient::_set__instance(::VivoxUnity::VxClient* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "VxClient", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.String appId
::StringW VivoxUnity::VxClient::_get_appId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::_get_appId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("VivoxUnity", "VxClient", "appId"));
}
// Autogenerated static field setter
// Set static field: static public System.String appId
void VivoxUnity::VxClient::_set_appId(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::_set_appId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "VxClient", "appId", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.String,VivoxUnity.AsyncResult`1<vx_resp_base_t>> _pendingRequests
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::VivoxUnity::AsyncResult_1<::GlobalNamespace::vx_resp_base_t*>*>*& VivoxUnity::VxClient::dyn__pendingRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn__pendingRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pendingRequests"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::VivoxUnity::AsyncResult_1<::GlobalNamespace::vx_resp_base_t*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _nextRequestId
[[deprecated("Use field access instead!")]] int64_t& VivoxUnity::VxClient::dyn__nextRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn__nextRequestId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextRequestId"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _startCount
[[deprecated("Use field access instead!")]] int& VivoxUnity::VxClient::dyn__startCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn__startCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VivoxUnity.VivoxDebug vivoxDebug
[[deprecated("Use field access instead!")]] ::VivoxUnity::VivoxDebug*& VivoxUnity::VxClient::dyn_vivoxDebug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn_vivoxDebug");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vivoxDebug"))->offset;
  return *reinterpret_cast<::VivoxUnity::VivoxDebug**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.VxClient/HandleEventMessage EventMessageReceived
[[deprecated("Use field access instead!")]] ::VivoxUnity::VxClient::HandleEventMessage*& VivoxUnity::VxClient::dyn_EventMessageReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn_EventMessageReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EventMessageReceived"))->offset;
  return *reinterpret_cast<::VivoxUnity::VxClient::HandleEventMessage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disposed
[[deprecated("Use field access instead!")]] bool& VivoxUnity::VxClient::dyn_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::dyn_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VxClient.get_Instance
::VivoxUnity::VxClient* VivoxUnity::VxClient::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::VxClient*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.get_Started
bool VivoxUnity::VxClient::get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::get_Started");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Started", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.add_EventMessageReceived
void VivoxUnity::VxClient::add_EventMessageReceived(::VivoxUnity::VxClient::HandleEventMessage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::add_EventMessageReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_EventMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VxClient.remove_EventMessageReceived
void VivoxUnity::VxClient::remove_EventMessageReceived(::VivoxUnity::VxClient::HandleEventMessage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::remove_EventMessageReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_EventMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.VxClient.Start
void VivoxUnity::VxClient::Start(::VivoxUnity::VivoxConfig* config) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, config);
}
// Autogenerated method: VivoxUnity.VxClient.Start
void VivoxUnity::VxClient::Start(::GlobalNamespace::vx_sdk_config_t* config) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, config);
}
// Autogenerated method: VivoxUnity.VxClient.InternalStart
void VivoxUnity::VxClient::InternalStart(::GlobalNamespace::vx_sdk_config_t* config) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::InternalStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, config);
}
// Autogenerated method: VivoxUnity.VxClient.InstanceOnMainLoopRun
void VivoxUnity::VxClient::InstanceOnMainLoopRun(ByRef<bool> didWork) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::InstanceOnMainLoopRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstanceOnMainLoopRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(didWork)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(didWork));
}
// Autogenerated method: VivoxUnity.VxClient.Stop
void VivoxUnity::VxClient::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.Cleanup
void VivoxUnity::VxClient::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.BeginIssueRequest
::System::IAsyncResult* VivoxUnity::VxClient::BeginIssueRequest(::GlobalNamespace::vx_req_base_t* request, ::System::AsyncCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::BeginIssueRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginIssueRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, request, callback);
}
// Autogenerated method: VivoxUnity.VxClient.EndIssueRequest
::GlobalNamespace::vx_resp_base_t* VivoxUnity::VxClient::EndIssueRequest(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::EndIssueRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndIssueRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::vx_resp_base_t*, false>(this, ___internal__method, result);
}
// Autogenerated method: VivoxUnity.VxClient.Dispose
void VivoxUnity::VxClient::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxClient*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.Dispose
void VivoxUnity::VxClient::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxClient*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: VivoxUnity.VxClient.GetLoginToken
::StringW VivoxUnity::VxClient::GetLoginToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetLoginToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetLoginToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, key);
}
// Autogenerated method: VivoxUnity.VxClient.GetJoinToken
::StringW VivoxUnity::VxClient::GetJoinToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetJoinToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetJoinToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.VxClient.GetMuteForAllToken
::StringW VivoxUnity::VxClient::GetMuteForAllToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW subject, ::StringW fromUserUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetMuteForAllToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetMuteForAllToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(fromUserUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, subject, fromUserUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.VxClient.GetTranscriptionToken
::StringW VivoxUnity::VxClient::GetTranscriptionToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetTranscriptionToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetTranscriptionToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(issuer), ::il2cpp_utils::ExtractType(expiration), ::il2cpp_utils::ExtractType(userUri), ::il2cpp_utils::ExtractType(conferenceUri), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, issuer, expiration, userUri, conferenceUri, key);
}
// Autogenerated method: VivoxUnity.VxClient.GetRandomUserId
::StringW VivoxUnity::VxClient::GetRandomUserId(::StringW prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetRandomUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetRandomUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix);
}
// Autogenerated method: VivoxUnity.VxClient.GetRandomUserIdEx
::StringW VivoxUnity::VxClient::GetRandomUserIdEx(::StringW prefix, ::StringW issuer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetRandomUserIdEx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetRandomUserIdEx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(issuer)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix, issuer);
}
// Autogenerated method: VivoxUnity.VxClient.GetRandomChannelUri
::StringW VivoxUnity::VxClient::GetRandomChannelUri(::StringW prefix, ::StringW realm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetRandomChannelUri");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetRandomChannelUri", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(realm)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, prefix, realm);
}
// Autogenerated method: VivoxUnity.VxClient.GetVersion
::StringW VivoxUnity::VxClient::GetVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::GetVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxClient", "GetVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.VxClient.Finalize
void VivoxUnity::VxClient::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.VxClient/HandleEventMessage
#include "VivoxUnity/VxClient_HandleEventMessage.hpp"
// Including type: vx_evt_base_t
#include "GlobalNamespace/vx_evt_base_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VivoxUnity.VxClient/HandleEventMessage.Invoke
void VivoxUnity::VxClient::HandleEventMessage::Invoke(::GlobalNamespace::vx_evt_base_t* eventMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::HandleEventMessage::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxClient::HandleEventMessage*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventMessage);
}
// Autogenerated method: VivoxUnity.VxClient/HandleEventMessage.BeginInvoke
::System::IAsyncResult* VivoxUnity::VxClient::HandleEventMessage::BeginInvoke(::GlobalNamespace::vx_evt_base_t* eventMessage, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::HandleEventMessage::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxClient::HandleEventMessage*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, eventMessage, callback, object);
}
// Autogenerated method: VivoxUnity.VxClient/HandleEventMessage.EndInvoke
void VivoxUnity::VxClient::HandleEventMessage::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::HandleEventMessage::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxClient::HandleEventMessage*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.VxUnityInterop
#include "VivoxUnity/VxUnityInterop.hpp"
// Including type: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7
#include "VivoxUnity/VxUnityInterop_-VivoxUnityRun-d__7.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object m_Lock
::Il2CppObject* VivoxUnity::VxUnityInterop::_get_m_Lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::_get_m_Lock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("VivoxUnity", "VxUnityInterop", "m_Lock"));
}
// Autogenerated static field setter
// Set static field: static private System.Object m_Lock
void VivoxUnity::VxUnityInterop::_set_m_Lock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::_set_m_Lock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "VxUnityInterop", "m_Lock", value));
}
// Autogenerated static field getter
// Get static field: static private VivoxUnity.VxUnityInterop m_Instance
::VivoxUnity::VxUnityInterop* VivoxUnity::VxUnityInterop::_get_m_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::_get_m_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::VxUnityInterop*>("VivoxUnity", "VxUnityInterop", "m_Instance"));
}
// Autogenerated static field setter
// Set static field: static private VivoxUnity.VxUnityInterop m_Instance
void VivoxUnity::VxUnityInterop::_set_m_Instance(::VivoxUnity::VxUnityInterop* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::_set_m_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity", "VxUnityInterop", "m_Instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean quitting
[[deprecated("Use field access instead!")]] bool& VivoxUnity::VxUnityInterop::dyn_quitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::dyn_quitting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "quitting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VxUnityInterop.get_Instance
::VivoxUnity::VxUnityInterop* VivoxUnity::VxUnityInterop::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxUnityInterop", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::VxUnityInterop*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop.OnApplicationQuit
void VivoxUnity::VxUnityInterop::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop.StartVivoxUnity
void VivoxUnity::VxUnityInterop::StartVivoxUnity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::StartVivoxUnity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop.VivoxUnityRun
::System::Collections::IEnumerator* VivoxUnity::VxUnityInterop::VivoxUnityRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::VivoxUnityRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VivoxUnityRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop.OnDestroy
void VivoxUnity::VxUnityInterop::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop..cctor
void VivoxUnity::VxUnityInterop::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("VivoxUnity", "VxUnityInterop", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7
#include "VivoxUnity/VxUnityInterop_-VivoxUnityRun-d__7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7.System.IDisposable.Dispose
void VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7.MoveNext
bool VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7.System.Collections.IEnumerator.Reset
void VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.VxUnityInterop/<VivoxUnityRun>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::VxUnityInterop::$VivoxUnityRun$d__7*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.CanBeNullAttribute
#include "VivoxUnity/Properties/CanBeNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.NotNullAttribute
#include "VivoxUnity/Properties/NotNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ItemNotNullAttribute
#include "VivoxUnity/Properties/ItemNotNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ItemCanBeNullAttribute
#include "VivoxUnity/Properties/ItemCanBeNullAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.StringFormatMethodAttribute
#include "VivoxUnity/Properties/StringFormatMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <FormatParameterName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::StringFormatMethodAttribute::dyn_$FormatParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FormatParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.StringFormatMethodAttribute.get_FormatParameterName
::StringW VivoxUnity::Properties::StringFormatMethodAttribute::get_FormatParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::StringFormatMethodAttribute::get_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.StringFormatMethodAttribute.set_FormatParameterName
void VivoxUnity::Properties::StringFormatMethodAttribute::set_FormatParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::StringFormatMethodAttribute::set_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ValueProviderAttribute
#include "VivoxUnity/Properties/ValueProviderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::ValueProviderAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ValueProviderAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.ValueProviderAttribute.get_Name
::StringW VivoxUnity::Properties::ValueProviderAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ValueProviderAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.ValueProviderAttribute.set_Name
void VivoxUnity::Properties::ValueProviderAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ValueProviderAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.InvokerParameterNameAttribute
#include "VivoxUnity/Properties/InvokerParameterNameAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.NotifyPropertyChangedInvocatorAttribute
#include "VivoxUnity/Properties/NotifyPropertyChangedInvocatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <ParameterName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::dyn_$ParameterName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParameterName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.NotifyPropertyChangedInvocatorAttribute.get_ParameterName
::StringW VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::get_ParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::get_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.NotifyPropertyChangedInvocatorAttribute.set_ParameterName
void VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::set_ParameterName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::NotifyPropertyChangedInvocatorAttribute::set_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ContractAnnotationAttribute
#include "VivoxUnity/Properties/ContractAnnotationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Contract>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::ContractAnnotationAttribute::dyn_$Contract$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::dyn_$Contract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Contract>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ForceFullStates>k__BackingField
[[deprecated("Use field access instead!")]] bool& VivoxUnity::Properties::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::dyn_$ForceFullStates$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForceFullStates>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.ContractAnnotationAttribute.get_Contract
::StringW VivoxUnity::Properties::ContractAnnotationAttribute::get_Contract() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::get_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.ContractAnnotationAttribute.set_Contract
void VivoxUnity::Properties::ContractAnnotationAttribute::set_Contract(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::set_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.Properties.ContractAnnotationAttribute.get_ForceFullStates
bool VivoxUnity::Properties::ContractAnnotationAttribute::get_ForceFullStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::get_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.ContractAnnotationAttribute.set_ForceFullStates
void VivoxUnity::Properties::ContractAnnotationAttribute::set_ForceFullStates(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ContractAnnotationAttribute::set_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.LocalizationRequiredAttribute
#include "VivoxUnity/Properties/LocalizationRequiredAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <Required>k__BackingField
[[deprecated("Use field access instead!")]] bool& VivoxUnity::Properties::LocalizationRequiredAttribute::dyn_$Required$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::LocalizationRequiredAttribute::dyn_$Required$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Required>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.LocalizationRequiredAttribute.get_Required
bool VivoxUnity::Properties::LocalizationRequiredAttribute::get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::LocalizationRequiredAttribute::get_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.LocalizationRequiredAttribute.set_Required
void VivoxUnity::Properties::LocalizationRequiredAttribute::set_Required(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::LocalizationRequiredAttribute::set_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.CannotApplyEqualityOperatorAttribute
#include "VivoxUnity/Properties/CannotApplyEqualityOperatorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.BaseTypeRequiredAttribute
#include "VivoxUnity/Properties/BaseTypeRequiredAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <BaseType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& VivoxUnity::Properties::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::BaseTypeRequiredAttribute::dyn_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.BaseTypeRequiredAttribute.get_BaseType
::System::Type* VivoxUnity::Properties::BaseTypeRequiredAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::BaseTypeRequiredAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.BaseTypeRequiredAttribute.set_BaseType
void VivoxUnity::Properties::BaseTypeRequiredAttribute::set_BaseType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::BaseTypeRequiredAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.UsedImplicitlyAttribute
#include "VivoxUnity/Properties/UsedImplicitlyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.Properties.ImplicitUseKindFlags <UseKindFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseKindFlags& VivoxUnity::Properties::UsedImplicitlyAttribute::dyn_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::dyn_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::VivoxUnity::Properties::ImplicitUseKindFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.Properties.ImplicitUseTargetFlags <TargetFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseTargetFlags& VivoxUnity::Properties::UsedImplicitlyAttribute::dyn_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::dyn_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::VivoxUnity::Properties::ImplicitUseTargetFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.UsedImplicitlyAttribute.get_UseKindFlags
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::UsedImplicitlyAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Properties::ImplicitUseKindFlags, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.UsedImplicitlyAttribute.set_UseKindFlags
void VivoxUnity::Properties::UsedImplicitlyAttribute::set_UseKindFlags(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.Properties.UsedImplicitlyAttribute.get_TargetFlags
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::UsedImplicitlyAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Properties::ImplicitUseTargetFlags, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.UsedImplicitlyAttribute.set_TargetFlags
void VivoxUnity::Properties::UsedImplicitlyAttribute::set_TargetFlags(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::UsedImplicitlyAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.MeansImplicitUseAttribute
#include "VivoxUnity/Properties/MeansImplicitUseAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.Properties.ImplicitUseKindFlags <UseKindFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseKindFlags& VivoxUnity::Properties::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::dyn_$UseKindFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UseKindFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::VivoxUnity::Properties::ImplicitUseKindFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VivoxUnity.Properties.ImplicitUseTargetFlags <TargetFlags>k__BackingField
[[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseTargetFlags& VivoxUnity::Properties::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::dyn_$TargetFlags$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TargetFlags>k__BackingField"))->offset;
  return *reinterpret_cast<::VivoxUnity::Properties::ImplicitUseTargetFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.MeansImplicitUseAttribute.get_UseKindFlags
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::MeansImplicitUseAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Properties::ImplicitUseKindFlags, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.MeansImplicitUseAttribute.set_UseKindFlags
void VivoxUnity::Properties::MeansImplicitUseAttribute::set_UseKindFlags(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VivoxUnity.Properties.MeansImplicitUseAttribute.get_TargetFlags
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::MeansImplicitUseAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::VivoxUnity::Properties::ImplicitUseTargetFlags, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.MeansImplicitUseAttribute.set_TargetFlags
void VivoxUnity::Properties::MeansImplicitUseAttribute::set_TargetFlags(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ImplicitUseKindFlags
#include "VivoxUnity/Properties/ImplicitUseKindFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Default
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::ImplicitUseKindFlags::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseKindFlags>("VivoxUnity.Properties", "ImplicitUseKindFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Default
void VivoxUnity::Properties::ImplicitUseKindFlags::_set_Default(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseKindFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Access
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::ImplicitUseKindFlags::_get_Access() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_get_Access");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseKindFlags>("VivoxUnity.Properties", "ImplicitUseKindFlags", "Access"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Access
void VivoxUnity::Properties::ImplicitUseKindFlags::_set_Access(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_set_Access");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseKindFlags", "Access", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Assign
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::ImplicitUseKindFlags::_get_Assign() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_get_Assign");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseKindFlags>("VivoxUnity.Properties", "ImplicitUseKindFlags", "Assign"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseKindFlags Assign
void VivoxUnity::Properties::ImplicitUseKindFlags::_set_Assign(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_set_Assign");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseKindFlags", "Assign", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::ImplicitUseKindFlags::_get_InstantiatedWithFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_get_InstantiatedWithFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseKindFlags>("VivoxUnity.Properties", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature
void VivoxUnity::Properties::ImplicitUseKindFlags::_set_InstantiatedWithFixedConstructorSignature(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_set_InstantiatedWithFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseKindFlags", "InstantiatedWithFixedConstructorSignature", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
::VivoxUnity::Properties::ImplicitUseKindFlags VivoxUnity::Properties::ImplicitUseKindFlags::_get_InstantiatedNoFixedConstructorSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_get_InstantiatedNoFixedConstructorSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseKindFlags>("VivoxUnity.Properties", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature
void VivoxUnity::Properties::ImplicitUseKindFlags::_set_InstantiatedNoFixedConstructorSignature(::VivoxUnity::Properties::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::_set_InstantiatedNoFixedConstructorSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseKindFlags", "InstantiatedNoFixedConstructorSignature", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::Properties::ImplicitUseKindFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseKindFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ImplicitUseTargetFlags
#include "VivoxUnity/Properties/ImplicitUseTargetFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Default
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseTargetFlags>("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Default"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Default
void VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Default(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Itself
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Itself() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Itself");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseTargetFlags>("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Itself"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Itself
void VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Itself(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Itself");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Itself", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Members
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Members() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_get_Members");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseTargetFlags>("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Members"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags Members
void VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Members(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_set_Members");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseTargetFlags", "Members", value));
}
// Autogenerated static field getter
// Get static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags WithMembers
::VivoxUnity::Properties::ImplicitUseTargetFlags VivoxUnity::Properties::ImplicitUseTargetFlags::_get_WithMembers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_get_WithMembers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::VivoxUnity::Properties::ImplicitUseTargetFlags>("VivoxUnity.Properties", "ImplicitUseTargetFlags", "WithMembers"));
}
// Autogenerated static field setter
// Set static field: static public VivoxUnity.Properties.ImplicitUseTargetFlags WithMembers
void VivoxUnity::Properties::ImplicitUseTargetFlags::_set_WithMembers(::VivoxUnity::Properties::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::_set_WithMembers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("VivoxUnity.Properties", "ImplicitUseTargetFlags", "WithMembers", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& VivoxUnity::Properties::ImplicitUseTargetFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::ImplicitUseTargetFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.PublicAPIAttribute
#include "VivoxUnity/Properties/PublicAPIAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Comment>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::PublicAPIAttribute::dyn_$Comment$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PublicAPIAttribute::dyn_$Comment$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Comment>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.PublicAPIAttribute.get_Comment
::StringW VivoxUnity::Properties::PublicAPIAttribute::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PublicAPIAttribute::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.PublicAPIAttribute.set_Comment
void VivoxUnity::Properties::PublicAPIAttribute::set_Comment(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PublicAPIAttribute::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.InstantHandleAttribute
#include "VivoxUnity/Properties/InstantHandleAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.PureAttribute
#include "VivoxUnity/Properties/PureAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.MustUseReturnValueAttribute
#include "VivoxUnity/Properties/MustUseReturnValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Justification>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.MustUseReturnValueAttribute.get_Justification
::StringW VivoxUnity::Properties::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.MustUseReturnValueAttribute.set_Justification
void VivoxUnity::Properties::MustUseReturnValueAttribute::set_Justification(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.ProvidesContextAttribute
#include "VivoxUnity/Properties/ProvidesContextAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VivoxUnity.Properties.PathReferenceAttribute
#include "VivoxUnity/Properties/PathReferenceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BasePath>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& VivoxUnity::Properties::PathReferenceAttribute::dyn_$BasePath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PathReferenceAttribute::dyn_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VivoxUnity.Properties.PathReferenceAttribute.get_BasePath
::StringW VivoxUnity::Properties::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: VivoxUnity.Properties.PathReferenceAttribute.set_BasePath
void VivoxUnity::Properties::PathReferenceAttribute::set_BasePath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
